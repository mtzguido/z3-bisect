(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.relevancy 2)
(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


;;; Start module Prims

; Externals for module Prims


; <Start encoding Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding Prims.attribute>


; <Start encoding Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding Prims.cps>


; <Start encoding Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding Prims.hasEq>


; <Start encoding Prims.eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding Prims.eqtype>


; <Start encoding Prims.bool>

(declare-fun Prims.bool () Term)
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))

; </end encoding Prims.bool>


; <Start encoding Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <Start encoding Prims.empty>


; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding Prims.empty>


; </end encoding Prims.empty>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: T
(declare-fun Prims.T@tok () Term)

; <Start encoding Prims.trivial>


; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; </end encoding Prims.trivial>


; <Start encoding Prims.T>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding Prims.T>


; </end encoding >


; <Start encoding Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding Prims.uu___is_T>


; <Start encoding Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding Prims.unit>


; <Start encoding Prims.squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding Prims.squash>


; <Start encoding Prims.auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding Prims.auto_squash>


; <Start encoding Prims.logical>

(declare-fun Prims.logical () Term)

; </end encoding Prims.logical>


; <Start encoding Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding Prims.smt_theory_symbol>


; <Start encoding Prims.l_True>

(declare-fun Prims.l_True () Term)

; </end encoding Prims.l_True>


; <Start encoding Prims.l_False>

(declare-fun Prims.l_False () Term)

; </end encoding Prims.l_False>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Refl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Refl_x (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <Start encoding Prims.equals>


; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; </end encoding Prims.equals>


; <Start encoding Prims.Refl>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
(Prims.Refl (Prims.Refl_a __@x0)
(Prims.Refl_x __@x0)))))

; </end constructor Prims.Refl>


; </end encoding Prims.Refl>


; </end encoding >


; <Start encoding Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding Prims.uu___is_Refl>


; <Start encoding Prims.eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding Prims.eq2>


; <Start encoding Prims.b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding Prims.b2t>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.pair@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.pair@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <Start encoding Prims.pair>


; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; </end encoding Prims.pair>


; <Start encoding Prims.Pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding Prims.Pair>


; </end encoding >


; <Start encoding Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding Prims.uu___is_Pair>


; <Start encoding Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding Prims.__proj__Pair__item___1>


; <Start encoding Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding Prims.__proj__Pair__item___2>


; <Start encoding Prims.l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding Prims.l_and>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.sum@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.sum@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <Start encoding Prims.sum>


; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; </end encoding Prims.sum>


; <Start encoding Prims.Left>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; </end encoding Prims.Left>


; <Start encoding Prims.Right>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding Prims.Right>


; </end encoding >


; <Start encoding Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding Prims.uu___is_Left>


; <Start encoding Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding Prims.__proj__Left__item__v>


; <Start encoding Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding Prims.uu___is_Right>


; <Start encoding Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding Prims.__proj__Right__item__v>


; <Start encoding Prims.l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding Prims.l_or>


; <Start encoding Prims.l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding Prims.l_imp>


; <Start encoding Prims.l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding Prims.l_iff>


; <Start encoding Prims.l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding Prims.l_not>


; <Skipped Prims.l_ITE/>


; <Skipped Prims.precedes/>


; <Start encoding Prims.string>

(declare-fun Prims.string () Term)

; </end encoding Prims.string>


; <Start encoding Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding Prims.warn_on_use>


; <Start encoding Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding Prims.deprecated>


; <Start encoding Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding Prims.has_type>


; <Start encoding Prims.l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding Prims.l_Forall>


; <Skipped />


; <Start encoding Prims.subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

(declare-fun Tm_abs_2319c8dded71dc14c3f65c301c18a7ca (Term Term) Term)

; </end encoding Prims.subtype_of>


; <Skipped />


; <Start encoding Prims.prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding Prims.prop>


; <Start encoding Prims.pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding Prims.pure_pre>


; <Start encoding Prims.pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding Prims.pure_post'>


; <Start encoding Prims.pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding Prims.pure_post>


; <Start encoding Prims.pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding Prims.pure_wp'>


; <Start encoding Prims.pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_fd5475515272d0f1ce55fa6741fae069 (Term Term Term) Term)

(declare-fun Tm_abs_a590ae03fb5fe4509368585c8f8c00cd (Term Term) Term)

; </end encoding Prims.pure_wp_monotonic0>


; <Start encoding Prims.pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding Prims.pure_wp_monotonic>


; <Start encoding Prims.pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding Prims.pure_wp>


; <Start encoding Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding Prims.guard_free>


; <Skipped Prims.pure_return0/>


; <Skipped Prims.pure_bind_wp0/>


; <Skipped Prims.pure_if_then_else0/>


; <Skipped Prims.pure_ite_wp0/>


; <Skipped Prims.pure_stronger/>


; <Skipped Prims.pure_close_wp0/>


; <Skipped Prims.pure_trivial/>


; <Skipped Prims.PURE/>


; <Skipped Prims.Pure/>


; <Skipped Prims.Admit/>


; <Skipped Prims.pure_null_wp0/>


; <Skipped Prims.Tot/>


; <Start encoding Prims.pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding Prims.pure_assert_wp0>


; <Start encoding Prims.pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding Prims.pure_assume_wp0>


; <Skipped Prims.GHOST/>


; <Skipped Prims.purewp_id/>


; <Skipped />


; <Skipped Prims.Ghost/>


; <Skipped Prims.GTot/>


; <Start encoding Prims.op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding Prims.op_Equals_Equals_Equals>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.dtuple2@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.dtuple2@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <Start encoding Prims.dtuple2>


; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
266)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; </end encoding Prims.dtuple2>


; <Start encoding Prims.Mkdtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding Prims.Mkdtuple2>


; </end encoding >


; <Start encoding Prims.dtuple2__uu___haseq>



; </end encoding Prims.dtuple2__uu___haseq>


; <Start encoding Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding Prims.uu___is_Mkdtuple2>


; <Skipped Prims.uu___is_Mkdtuple2/>


; <Start encoding Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding Prims.__proj__Mkdtuple2__item___1>


; <Skipped Prims.__proj__Mkdtuple2__item___1/>


; <Start encoding Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding Prims.__proj__Mkdtuple2__item___2>


; <Skipped Prims.__proj__Mkdtuple2__item___2/>


; <Start encoding Prims.l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding Prims.l_Exists>


; <Start encoding Prims.int>

(declare-fun Prims.int () Term)
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))

; </end encoding Prims.int>


; <Start encoding Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding Prims.op_AmpAmp>


; <Start encoding Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding Prims.op_BarBar>


; <Start encoding Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding Prims.op_Negation>


; <Start encoding Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding Prims.op_Multiply>


; <Start encoding Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding Prims.op_Subtraction>


; <Start encoding Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding Prims.op_Addition>


; <Start encoding Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding Prims.op_Minus>


; <Start encoding Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding Prims.op_LessThanOrEqual>


; <Start encoding Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding Prims.op_GreaterThan>


; <Start encoding Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding Prims.op_GreaterThanOrEqual>


; <Start encoding Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding Prims.op_LessThan>


; <Start encoding Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding Prims.op_Equality>


; <Start encoding Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding Prims.op_disEquality>


; <Start encoding Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding Prims.exn>


; <Start encoding Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding Prims.array>


; <Start encoding Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding Prims.strcat>


; <Skipped Prims.op_Hat/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.list@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <Start encoding Prims.list>


; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
326)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; </end encoding Prims.list>


; <Start encoding Prims.Nil>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
333)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; </end encoding Prims.Nil>


; <Start encoding Prims.Cons>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
338)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding Prims.Cons>


; </end encoding >


; <Start encoding Prims.list__uu___haseq>


; </end encoding Prims.list__uu___haseq>


; <Start encoding Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding Prims.uu___is_Nil>


; <Skipped Prims.uu___is_Nil/>


; <Start encoding Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding Prims.uu___is_Cons>


; <Skipped Prims.uu___is_Cons/>


; <Start encoding Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding Prims.__proj__Cons__item__hd>


; <Skipped Prims.__proj__Cons__item__hd/>


; <Start encoding Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding Prims.__proj__Cons__item__tl>


; <Skipped Prims.__proj__Cons__item__tl/>


; <Skipped Prims.M/>


; <Start encoding Prims.returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding Prims.returnM>


; <Skipped Prims.as_requires/>


; <Skipped Prims.as_ensures/>


; <Start encoding Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding Prims._assume>


; <Start encoding Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding Prims.admit>


; <Start encoding Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding Prims.magic>


; <Start encoding Prims.unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding Prims.unsafe_coerce>


; <Start encoding Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding Prims.admitP>


; <Skipped Prims._assert/>


; <Start encoding Prims._assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding Prims._assert>


; <Skipped Prims.cut/>


; <Start encoding Prims.cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding Prims.cut>


; <Start encoding Prims.nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=prims.fst(659,11-659,25); use=prims.fst(659,11-659,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=prims.fst(659,18-659,24); use=prims.fst(659,18-659,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))

; </end encoding Prims.nat>


; <Start encoding Prims.pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding Prims.pos>


; <Start encoding Prims.nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding Prims.nonzero>


; <Start encoding Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding Prims.op_Modulus>


; <Start encoding Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding Prims.op_Division>


; <Start encoding Prims.pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=prims.fst(687,8-687,12); use=prims.fst(687,8-687,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(Prims.pow2.fuel_instrumented ZFuel
@x1))
 

:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Prims.pow2.fuel_instrumented))

:named @fuel_irrelevance_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=prims.fst(687,8-687,12); use=prims.fst(687,8-687,12)
(forall ((@x0 Term))
 (! (= (Prims.pow2 @x0)
(Prims.pow2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Prims.pow2 @x0))
:qid @fuel_correspondence_Prims.pow2.fuel_instrumented))

:named @fuel_correspondence_Prims.pow2.fuel_instrumented))

; </end encoding Prims.pow2>


; <Start encoding Prims.min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding Prims.min>


; <Start encoding Prims.abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding Prims.abs>


; <Start encoding Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding Prims.string_of_bool>


; <Start encoding Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding Prims.string_of_int>


; <Start encoding Prims.__cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding Prims.__cache_version_number__>


; End Externals for module Prims


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Prims (646 decls; total size 37258)

;;; Start module FStar.Pervasives.Native

; Externals for module FStar.Pervasives.Native


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.option@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <Start encoding FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; </end encoding FStar.Pervasives.Native.option>


; <Start encoding FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; </end encoding FStar.Pervasives.Native.None>


; <Start encoding FStar.Pervasives.Native.Some>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding FStar.Pervasives.Native.Some>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.option__uu___haseq>


; </end encoding FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_None>


; <Skipped FStar.Pervasives.Native.uu___is_None/>


; <Start encoding FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Some>


; <Skipped FStar.Pervasives.Native.uu___is_Some/>


; <Start encoding FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped FStar.Pervasives.Native.__proj__Some__item__v/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple2@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple2@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <Start encoding FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; </end encoding FStar.Pervasives.Native.tuple2>


; <Start encoding FStar.Pervasives.Native.Mktuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding FStar.Pervasives.Native.Mktuple2>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple2__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple2__item___2/>


; <Start encoding FStar.Pervasives.Native.fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding FStar.Pervasives.Native.fst>


; <Start encoding FStar.Pervasives.Native.snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding FStar.Pervasives.Native.snd>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <Start encoding FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; </end encoding FStar.Pervasives.Native.tuple3>


; <Start encoding FStar.Pervasives.Native.Mktuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__3))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__3))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding FStar.Pervasives.Native.Mktuple3>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___3/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x3 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <Start encoding FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; </end encoding FStar.Pervasives.Native.tuple4>


; <Start encoding FStar.Pervasives.Native.Mktuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding FStar.Pervasives.Native.Mktuple4>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___4/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x4 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <Start encoding FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; </end encoding FStar.Pervasives.Native.tuple5>


; <Start encoding FStar.Pervasives.Native.Mktuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(70,4-70,12); use=FStar.Pervasives.Native.fst(70,4-70,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__1 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple5__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(70,4-70,12); use=FStar.Pervasives.Native.fst(70,4-70,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__3 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x7)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__3))

:named projection_inverse_FStar.Pervasives.Native.Mktuple5__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(70,4-70,12); use=FStar.Pervasives.Native.fst(70,4-70,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__4 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x8)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__4))

:named projection_inverse_FStar.Pervasives.Native.Mktuple5__4))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple5; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple5; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(70,4-70,12); use=FStar.Pervasives.Native.fst(70,4-70,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (FStar.Pervasives.Native.Mktuple5__5 (FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
@x9)
 

:pattern ((FStar.Pervasives.Native.Mktuple5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple5__5))

:named projection_inverse_FStar.Pervasives.Native.Mktuple5__5))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding FStar.Pervasives.Native.Mktuple5>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___5/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x5 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <Start encoding FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; </end encoding FStar.Pervasives.Native.tuple6>


; <Start encoding FStar.Pervasives.Native.Mktuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding FStar.Pervasives.Native.Mktuple6>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___6/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x6 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <Start encoding FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; </end encoding FStar.Pervasives.Native.tuple7>


; <Start encoding FStar.Pervasives.Native.Mktuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding FStar.Pervasives.Native.Mktuple7>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___7/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x7 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <Start encoding FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; </end encoding FStar.Pervasives.Native.tuple8>


; <Start encoding FStar.Pervasives.Native.Mktuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding FStar.Pervasives.Native.Mktuple8>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___8/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x8 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <Start encoding FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; </end encoding FStar.Pervasives.Native.tuple9>


; <Start encoding FStar.Pervasives.Native.Mktuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding FStar.Pervasives.Native.Mktuple9>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___9/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x9 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <Start encoding FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; </end encoding FStar.Pervasives.Native.tuple10>


; <Start encoding FStar.Pervasives.Native.Mktuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding FStar.Pervasives.Native.Mktuple10>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___10/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x10 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <Start encoding FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; </end encoding FStar.Pervasives.Native.tuple11>


; <Start encoding FStar.Pervasives.Native.Mktuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding FStar.Pervasives.Native.Mktuple11>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple11/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___11/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x11 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <Start encoding FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; </end encoding FStar.Pervasives.Native.tuple12>


; <Start encoding FStar.Pervasives.Native.Mktuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding FStar.Pervasives.Native.Mktuple12>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple12/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___11/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___12/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x12 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <Start encoding FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; </end encoding FStar.Pervasives.Native.tuple13>


; <Start encoding FStar.Pervasives.Native.Mktuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding FStar.Pervasives.Native.Mktuple13>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple13/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___11/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___12/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___13/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x13 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <Start encoding FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; </end encoding FStar.Pervasives.Native.tuple14>


; <Start encoding FStar.Pervasives.Native.Mktuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding FStar.Pervasives.Native.Mktuple14>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple14/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___11/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___12/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___13/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Pervasives.Native (1332 decls; total size 128743)

;;; Start interface FStar.Pervasives

; Externals for interface FStar.Pervasives


; <Start encoding FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding FStar.Pervasives.pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding FStar.Pervasives.pattern>


; <Start encoding FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding FStar.Pervasives.smt_pat>


; <Start encoding FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding FStar.Pervasives.smt_pat_or>


; <Start encoding FStar.Pervasives.eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding FStar.Pervasives.eqtype_u>


; <Skipped FStar.Pervasives.Lemma/>


; <Start encoding FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding FStar.Pervasives.spinoff>


; <Start encoding FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding FStar.Pervasives.assert_spinoff>


; <Start encoding FStar.Pervasives.id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding FStar.Pervasives.id>


; <Start encoding FStar.Pervasives.trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding FStar.Pervasives.trivial_pure_post>


; <Start encoding FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding FStar.Pervasives.ambient>


; <Start encoding FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding FStar.Pervasives.intro_ambient>


; <Start encoding FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding FStar.Pervasives.normalize_term>


; <Start encoding FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding FStar.Pervasives.normalize>


; <Start encoding FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding FStar.Pervasives.norm_step>


; <Start encoding FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding FStar.Pervasives.simplify>


; <Start encoding FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding FStar.Pervasives.weak>


; <Start encoding FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding FStar.Pervasives.hnf>


; <Start encoding FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding FStar.Pervasives.primops>


; <Start encoding FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding FStar.Pervasives.delta>


; <Start encoding FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding FStar.Pervasives.zeta>


; <Start encoding FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding FStar.Pervasives.zeta_full>


; <Start encoding FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding FStar.Pervasives.iota>


; <Start encoding FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding FStar.Pervasives.nbe>


; <Start encoding FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding FStar.Pervasives.reify_>


; <Start encoding FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding FStar.Pervasives.delta_only>


; <Start encoding FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding FStar.Pervasives.delta_fully>


; <Start encoding FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding FStar.Pervasives.delta_attr>


; <Start encoding FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding FStar.Pervasives.delta_qualifier>


; <Start encoding FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding FStar.Pervasives.delta_namespace>


; <Start encoding FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding FStar.Pervasives.unmeta>


; <Start encoding FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding FStar.Pervasives.unascribe>


; <Start encoding FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding FStar.Pervasives.norm>


; <Start encoding FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding FStar.Pervasives.assert_norm>


; <Start encoding FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding FStar.Pervasives.normalize_term_spec>


; <Start encoding FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding FStar.Pervasives.normalize_spec>


; <Start encoding FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding FStar.Pervasives.norm_spec>


; <Start encoding FStar.Pervasives.reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_9cce35912d99bf51042f02fff62b6cf5 (Term Term Term) Term)
(declare-fun Tm_arrow_90324bd6d0db52152d012eefdf7852a1 (Term Term) Term)
(declare-fun Tm_arrow_d3acaf108460ddc930424dea55f7d40f () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Pervasives.reveal_opaque; Namespace FStar.Pervasives
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Pervasives.norm_spec@tok))
:named @kick_partial_app_e5c933a9bc2cb06571c2abdcc101b877))

; </end encoding FStar.Pervasives.reveal_opaque>


; <Start encoding FStar.Pervasives.pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding FStar.Pervasives.pure_return>


; <Start encoding FStar.Pervasives.pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.pure_bind_wp>


; <Start encoding FStar.Pervasives.pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.pure_if_then_else>


; <Start encoding FStar.Pervasives.pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)




(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding FStar.Pervasives.pure_ite_wp>


; <Start encoding FStar.Pervasives.pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding FStar.Pervasives.pure_close_wp>


; <Start encoding FStar.Pervasives.pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding FStar.Pervasives.pure_null_wp>


; <Start encoding FStar.Pervasives.pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding FStar.Pervasives.pure_assert_wp>


; <Start encoding FStar.Pervasives.pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding FStar.Pervasives.pure_assume_wp>


; <Skipped FStar.Pervasives.DIV/>


; <Skipped />


; <Start encoding FStar.Pervasives.div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding FStar.Pervasives.div_hoare_to_wp>


; <Skipped FStar.Pervasives.Div/>


; <Skipped FStar.Pervasives.Dv/>


; <Skipped FStar.Pervasives.EXT/>


; <Start encoding FStar.Pervasives.st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding FStar.Pervasives.st_pre_h>


; <Start encoding FStar.Pervasives.st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding FStar.Pervasives.st_post_h'>


; <Start encoding FStar.Pervasives.st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding FStar.Pervasives.st_post_h>


; <Start encoding FStar.Pervasives.st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding FStar.Pervasives.st_wp_h>


; <Start encoding FStar.Pervasives.st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding FStar.Pervasives.st_return>


; <Start encoding FStar.Pervasives.st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.st_bind_wp>


; <Start encoding FStar.Pervasives.st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding FStar.Pervasives.st_if_then_else>


; <Start encoding FStar.Pervasives.st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

(declare-fun Tm_abs_13c1fbac4d566537e0d0aac54993e867 (Term Term Term Term) Term)

(declare-fun Tm_abs_8fca386860b07bf7135ad6a5ed4b8699 (Term Term Term Term) Term)
(declare-fun Tm_arrow_8be317cd0e95382d209163cbcd734f9d (Term Term) Term)
(declare-fun Tm_abs_72e7071059c05ac5aef1b1a6a8b5e8f4 (Term Term Term Term Term) Term)

; </end encoding FStar.Pervasives.st_ite_wp>


; <Start encoding FStar.Pervasives.st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)



(declare-fun Tm_abs_01fd99084e2163543709c497ff1c256b (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.st_stronger>


; <Start encoding FStar.Pervasives.st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


(declare-fun Tm_abs_bd152fc5c12cc6aa125ccf543aa53813 (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.st_close_wp>


; <Start encoding FStar.Pervasives.st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

(declare-fun Tm_abs_59c4fa07f408d911e59025309cce9942 (Term Term Term) Term)





; </end encoding FStar.Pervasives.st_trivial>


; <Skipped FStar.Pervasives.STATE_h/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.result@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <Start encoding FStar.Pervasives.result>


; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
281)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; </end encoding FStar.Pervasives.result>


; <Start encoding FStar.Pervasives.V>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
288)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; </end encoding FStar.Pervasives.V>


; <Start encoding FStar.Pervasives.E>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
293)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; </end encoding FStar.Pervasives.E>


; <Start encoding FStar.Pervasives.Err>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
298)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding FStar.Pervasives.Err>


; </end encoding >


; <Start encoding FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding FStar.Pervasives.uu___is_V>


; <Skipped FStar.Pervasives.uu___is_V/>


; <Start encoding FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding FStar.Pervasives.__proj__V__item__v>


; <Skipped FStar.Pervasives.__proj__V__item__v/>


; <Start encoding FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding FStar.Pervasives.uu___is_E>


; <Skipped FStar.Pervasives.uu___is_E/>


; <Start encoding FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding FStar.Pervasives.__proj__E__item__e>


; <Skipped FStar.Pervasives.__proj__E__item__e/>


; <Start encoding FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Err>


; <Skipped FStar.Pervasives.uu___is_Err/>


; <Start encoding FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding FStar.Pervasives.__proj__Err__item__msg>


; <Skipped FStar.Pervasives.__proj__Err__item__msg/>


; <Start encoding FStar.Pervasives.ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding FStar.Pervasives.ex_pre>


; <Start encoding FStar.Pervasives.ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding FStar.Pervasives.ex_post'>


; <Start encoding FStar.Pervasives.ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding FStar.Pervasives.ex_post>


; <Start encoding FStar.Pervasives.ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding FStar.Pervasives.ex_wp>


; <Start encoding FStar.Pervasives.ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding FStar.Pervasives.ex_return>


; <Start encoding FStar.Pervasives.ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_8074df73d1580fbbdc3470addabaf08b (Term Term Term) Term)

(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)
(declare-fun Tm_arrow_9ea71f7f2fb13f04805b20355b90ad43 (Term) Term)
(declare-fun Tm_abs_f22410a64e648d873bed4822ca022bb4 (Term Term Term Term Term) Term)





; </end encoding FStar.Pervasives.ex_bind_wp>


; <Start encoding FStar.Pervasives.ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding FStar.Pervasives.ex_if_then_else>


; <Start encoding FStar.Pervasives.ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)




(declare-fun Tm_abs_a7cc1da09b297d88bb79b1fa0b467b00 (Term Term Term) Term)

; </end encoding FStar.Pervasives.ex_ite_wp>


; <Start encoding FStar.Pervasives.ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

(declare-fun Tm_abs_1518a3cc57d7490d55df77581752827a (Term Term Term) Term)

; </end encoding FStar.Pervasives.ex_stronger>


; <Start encoding FStar.Pervasives.ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)





; </end encoding FStar.Pervasives.ex_close_wp>


; <Start encoding FStar.Pervasives.ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding FStar.Pervasives.ex_trivial>


; <Skipped FStar.Pervasives.EXN/>


; <Skipped FStar.Pervasives.Exn/>


; <Start encoding FStar.Pervasives.lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding FStar.Pervasives.lift_div_exn>


; <Skipped />


; <Skipped FStar.Pervasives.Ex/>


; <Start encoding FStar.Pervasives.all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding FStar.Pervasives.all_pre_h>


; <Start encoding FStar.Pervasives.all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding FStar.Pervasives.all_post_h'>


; <Start encoding FStar.Pervasives.all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding FStar.Pervasives.all_post_h>


; <Start encoding FStar.Pervasives.all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding FStar.Pervasives.all_wp_h>


; <Start encoding FStar.Pervasives.all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding FStar.Pervasives.all_return>


; <Start encoding FStar.Pervasives.all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding FStar.Pervasives.all_bind_wp>


; <Start encoding FStar.Pervasives.all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding FStar.Pervasives.all_if_then_else>


; <Start encoding FStar.Pervasives.all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)



(declare-fun Tm_abs_b4b0cf2e42901b42be235caa84bfc7f4 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f7466eb55fd31463cdfb5b4251fe1912 (Term Term) Term)
(declare-fun Tm_abs_aa90876ffd60a4411fdca7eeeb8f6130 (Term Term Term Term Term) Term)

; </end encoding FStar.Pervasives.all_ite_wp>


; <Start encoding FStar.Pervasives.all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)



(declare-fun Tm_abs_61b202c6a5250875acb8de09e14bb21a (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.all_stronger>


; <Start encoding FStar.Pervasives.all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)





; </end encoding FStar.Pervasives.all_close_wp>


; <Start encoding FStar.Pervasives.all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

(declare-fun Tm_abs_c7ae205604ad646e5515eb4bea93d3f2 (Term Term Term) Term)





; </end encoding FStar.Pervasives.all_trivial>


; <Skipped FStar.Pervasives.ALL_h/>


; <Start encoding FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding FStar.Pervasives.inversion>


; <Start encoding FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding FStar.Pervasives.allow_inversion>


; <Start encoding FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding FStar.Pervasives.invertOption>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.either@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.either@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <Start encoding FStar.Pervasives.either>


; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
454)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; </end encoding FStar.Pervasives.either>


; <Start encoding FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; </end encoding FStar.Pervasives.Inl>


; <Start encoding FStar.Pervasives.Inr>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
466)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding FStar.Pervasives.Inr>


; </end encoding >


; <Start encoding FStar.Pervasives.either__uu___haseq>


; </end encoding FStar.Pervasives.either__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Inl>


; <Skipped FStar.Pervasives.uu___is_Inl/>


; <Start encoding FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding FStar.Pervasives.__proj__Inl__item__v>


; <Skipped FStar.Pervasives.__proj__Inl__item__v/>


; <Start encoding FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Inr>


; <Skipped FStar.Pervasives.uu___is_Inr/>


; <Start encoding FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding FStar.Pervasives.__proj__Inr__item__v>


; <Skipped FStar.Pervasives.__proj__Inr__item__v/>


; <Start encoding FStar.Pervasives.dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding FStar.Pervasives.dfst>


; <Start encoding FStar.Pervasives.dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding FStar.Pervasives.dsnd>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <Start encoding FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
502)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; </end encoding FStar.Pervasives.dtuple3>


; <Start encoding FStar.Pervasives.Mkdtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
513)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding FStar.Pervasives.Mkdtuple3>


; </end encoding >


; <Start encoding FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped FStar.Pervasives.uu___is_Mkdtuple3/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___1/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___2/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___3/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x3 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <Start encoding FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
571)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; </end encoding FStar.Pervasives.dtuple4>


; <Start encoding FStar.Pervasives.Mkdtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
584)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding FStar.Pervasives.Mkdtuple4>


; </end encoding >


; <Start encoding FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped FStar.Pervasives.uu___is_Mkdtuple4/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___1/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___2/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___3/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___4/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x4 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <Start encoding FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
678)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; </end encoding FStar.Pervasives.dtuple5>


; <Start encoding FStar.Pervasives.Mkdtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
693)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding FStar.Pervasives.Mkdtuple5>


; </end encoding >


; <Start encoding FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped FStar.Pervasives.uu___is_Mkdtuple5/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___1/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___2/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___3/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___4/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___5/>


; <Start encoding FStar.Pervasives.ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding FStar.Pervasives.ignore>


; <Start encoding FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding FStar.Pervasives.false_elim>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <Start encoding FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; </end encoding FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
833)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; </end encoding FStar.Pervasives.PpxDerivingShow>


; <Start encoding FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
835)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; </end encoding FStar.Pervasives.PpxDerivingShowConstant>


; <Start encoding FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
840)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; </end encoding FStar.Pervasives.PpxDerivingYoJson>


; <Start encoding FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
842)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; </end encoding FStar.Pervasives.CInline>


; <Start encoding FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
844)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; </end encoding FStar.Pervasives.Substitute>


; <Start encoding FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
846)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; </end encoding FStar.Pervasives.Gc>


; <Start encoding FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
848)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; </end encoding FStar.Pervasives.Comment>


; <Start encoding FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
853)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; </end encoding FStar.Pervasives.CPrologue>


; <Start encoding FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
858)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; </end encoding FStar.Pervasives.CEpilogue>


; <Start encoding FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
863)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; </end encoding FStar.Pervasives.CConst>


; <Start encoding FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
868)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; </end encoding FStar.Pervasives.CCConv>


; <Start encoding FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
873)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; </end encoding FStar.Pervasives.CAbstractStruct>


; <Start encoding FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
875)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; </end encoding FStar.Pervasives.CIfDef>


; <Start encoding FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
877)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; </end encoding FStar.Pervasives.CMacro>


; </end encoding >


; <Start encoding FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped FStar.Pervasives.uu___is_PpxDerivingShow/>


; <Start encoding FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped FStar.Pervasives.uu___is_PpxDerivingShowConstant/>


; <Start encoding FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0/>


; <Start encoding FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped FStar.Pervasives.uu___is_PpxDerivingYoJson/>


; <Start encoding FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CInline>


; <Skipped FStar.Pervasives.uu___is_CInline/>


; <Start encoding FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Substitute>


; <Skipped FStar.Pervasives.uu___is_Substitute/>


; <Start encoding FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Gc>


; <Skipped FStar.Pervasives.uu___is_Gc/>


; <Start encoding FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Comment>


; <Skipped FStar.Pervasives.uu___is_Comment/>


; <Start encoding FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__Comment__item___0>


; <Skipped FStar.Pervasives.__proj__Comment__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CPrologue>


; <Skipped FStar.Pervasives.uu___is_CPrologue/>


; <Start encoding FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped FStar.Pervasives.__proj__CPrologue__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CEpilogue>


; <Skipped FStar.Pervasives.uu___is_CEpilogue/>


; <Start encoding FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped FStar.Pervasives.__proj__CEpilogue__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CConst>


; <Skipped FStar.Pervasives.uu___is_CConst/>


; <Start encoding FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__CConst__item___0>


; <Skipped FStar.Pervasives.__proj__CConst__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CCConv>


; <Skipped FStar.Pervasives.uu___is_CCConv/>


; <Start encoding FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped FStar.Pervasives.__proj__CCConv__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped FStar.Pervasives.uu___is_CAbstractStruct/>


; <Start encoding FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CIfDef>


; <Skipped FStar.Pervasives.uu___is_CIfDef/>


; <Start encoding FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CMacro>


; <Skipped FStar.Pervasives.uu___is_CMacro/>


; <Start encoding FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding FStar.Pervasives.inline_let>


; <Start encoding FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding FStar.Pervasives.rename_let>


; <Start encoding FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding FStar.Pervasives.plugin>


; <Start encoding FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding FStar.Pervasives.tcnorm>


; <Start encoding FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding FStar.Pervasives.must_erase_for_extraction>


; <Start encoding FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding FStar.Pervasives.dm4f_bind_range>


; <Start encoding FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding FStar.Pervasives.expect_failure>


; <Start encoding FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding FStar.Pervasives.expect_lax_failure>


; <Start encoding FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding FStar.Pervasives.tcdecltime>


; <Start encoding FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding FStar.Pervasives.unifier_hint_injective>


; <Start encoding FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding FStar.Pervasives.strict_on_arguments>


; <Start encoding FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding FStar.Pervasives.resolve_implicits>


; <Start encoding FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding FStar.Pervasives.handle_smt_goals>


; <Start encoding FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding FStar.Pervasives.erasable>


; <Start encoding FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding FStar.Pervasives.commute_nested_matches>


; <Start encoding FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding FStar.Pervasives.noextract_to>


; <Start encoding FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding FStar.Pervasives.normalize_for_extraction>


; <Start encoding FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding FStar.Pervasives.ite_soundness_by>


; <Start encoding FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding FStar.Pervasives.default_effect>


; <Start encoding FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding FStar.Pervasives.top_level_effect>


; <Start encoding FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding FStar.Pervasives.effect_param>


; <Start encoding FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding FStar.Pervasives.bind_has_range_args>


; <Start encoding FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding FStar.Pervasives.primitive_extraction>


; <Start encoding FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding FStar.Pervasives.strictly_positive>


; <Start encoding FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding FStar.Pervasives.unused>


; <Start encoding FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding FStar.Pervasives.no_auto_projectors>


; <Start encoding FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding FStar.Pervasives.no_subtyping>


; <Start encoding FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding FStar.Pervasives.admit_termination>


; <Start encoding FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding FStar.Pervasives.singleton>


; <Start encoding FStar.Pervasives.eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding FStar.Pervasives.eqtype_as_type>


; <Start encoding FStar.Pervasives.coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding FStar.Pervasives.coerce_eq>


; End Externals for interface FStar.Pervasives


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Pervasives (1416 decls; total size 78478)

;;; Start interface FStar.Classical

; Externals for interface FStar.Classical


; <Start encoding FStar.Classical.give_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness@tok () Term)

; </end encoding FStar.Classical.give_witness>


; <Start encoding FStar.Classical.give_witness_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness_from_squash (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness_from_squash@tok () Term)

; </end encoding FStar.Classical.give_witness_from_squash>


; <Start encoding FStar.Classical.lemma_to_squash_gtot>


(declare-fun Tm_refine_839524df17f415c122f40f00685d3fe6 (Term Term) Term)
(declare-fun Tm_arrow_9a028cfcf6111a85dd3c28d61b4efdfd (Term Term) Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot (Term Term Term Term) Term)



(declare-fun Tm_arrow_6f9100982820dfbce0fb9c6dae0cee11 () Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot@tok () Term)

; </end encoding FStar.Classical.lemma_to_squash_gtot>


; <Start encoding FStar.Classical.get_equality>

(declare-fun FStar.Classical.get_equality (Term Term Term) Term)
(declare-fun Tm_refine_7c805cbd5439f1b21f6463c70e57d0f1 (Term Term Term) Term)
(declare-fun Tm_arrow_158af926c0cd4bc1ff513e80f99f4b49 () Term)
(declare-fun FStar.Classical.get_equality@tok () Term)


; </end encoding FStar.Classical.get_equality>


; <Start encoding FStar.Classical.impl_to_arrow>

(declare-fun FStar.Classical.impl_to_arrow (Term Term Term Term) Term)
(declare-fun Tm_arrow_156c500bdf0e99cc45ffd26a33a603a8 () Term)
(declare-fun FStar.Classical.impl_to_arrow@tok () Term)

; </end encoding FStar.Classical.impl_to_arrow>


; <Start encoding FStar.Classical.arrow_to_impl>

(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)
(declare-fun FStar.Classical.arrow_to_impl (Term Term Term) Term)

(declare-fun Tm_arrow_78d787b8a2633e2185ded4267a81cc32 () Term)
(declare-fun FStar.Classical.arrow_to_impl@tok () Term)

; </end encoding FStar.Classical.arrow_to_impl>


; <Start encoding FStar.Classical.impl_intro_gtot>


(declare-fun FStar.Classical.impl_intro_gtot (Term Term Term) Term)

(declare-fun Tm_arrow_d2cdd2f18b92810e3048c35d07f1c9ea () Term)
(declare-fun FStar.Classical.impl_intro_gtot@tok () Term)

; </end encoding FStar.Classical.impl_intro_gtot>


; <Start encoding FStar.Classical.impl_intro_tot>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Classical.impl_intro_tot (Term Term Term) Term)

(declare-fun Tm_arrow_91aadb43edc4c2c0c091af8dbe745057 () Term)
(declare-fun FStar.Classical.impl_intro_tot@tok () Term)

; </end encoding FStar.Classical.impl_intro_tot>


; <Start encoding FStar.Classical.impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro@tok () Term)

; </end encoding FStar.Classical.impl_intro>


; <Start encoding FStar.Classical.move_requires>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires@tok () Term)

; </end encoding FStar.Classical.move_requires>


; <Start encoding FStar.Classical.move_requires_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_2@tok () Term)

; </end encoding FStar.Classical.move_requires_2>


; <Start encoding FStar.Classical.move_requires_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_3@tok () Term)

; </end encoding FStar.Classical.move_requires_3>


; <Start encoding FStar.Classical.impl_intro_gen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro_gen (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro_gen@tok () Term)

; </end encoding FStar.Classical.impl_intro_gen>


; <Start encoding FStar.Classical.get_forall>


(declare-fun FStar.Classical.get_forall (Term Term) Term)




(declare-fun Tm_refine_7a68552470cd0b3e3b5038c890f62a82 (Term Term) Term)
(declare-fun Tm_arrow_44be7520ed79d38d96b60844cf5c3637 () Term)
(declare-fun FStar.Classical.get_forall@tok () Term)





; </end encoding FStar.Classical.get_forall>


; <Start encoding FStar.Classical.forall_intro_gtot>



(declare-fun FStar.Classical.forall_intro_gtot (Term Term Term) Term)


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun Tm_arrow_0d81b083331cc2ca8277c22c2c6ed09c () Term)
(declare-fun FStar.Classical.forall_intro_gtot@tok () Term)


; </end encoding FStar.Classical.forall_intro_gtot>


; <Start encoding FStar.Classical.lemma_forall_intro_gtot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot@tok () Term)

; </end encoding FStar.Classical.lemma_forall_intro_gtot>


; <Start encoding FStar.Classical.gtot_to_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.gtot_to_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.gtot_to_lemma@tok () Term)

; </end encoding FStar.Classical.gtot_to_lemma>


; <Start encoding FStar.Classical.forall_intro_squash_gtot>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot@tok () Term)


; </end encoding FStar.Classical.forall_intro_squash_gtot>


; <Start encoding FStar.Classical.forall_intro_squash_gtot_join>



(declare-fun FStar.Classical.forall_intro_squash_gtot_join (Term Term Term) Term)





(declare-fun Tm_arrow_cd9381a0f782f3a2a2b6ba363e2e0508 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot_join@tok () Term)




; </end encoding FStar.Classical.forall_intro_squash_gtot_join>


; <Start encoding FStar.Classical.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro@tok () Term)

; </end encoding FStar.Classical.forall_intro>


; <Start encoding FStar.Classical.forall_intro_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_with_pat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_with_pat@tok () Term)

; </end encoding FStar.Classical.forall_intro_with_pat>


; <Start encoding FStar.Classical.forall_intro_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_sub@tok () Term)

; </end encoding FStar.Classical.forall_intro_sub>


; <Start encoding FStar.Classical.forall_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2@tok () Term)

; </end encoding FStar.Classical.forall_intro_2>


; <Start encoding FStar.Classical.forall_intro_2_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat@tok () Term)

; </end encoding FStar.Classical.forall_intro_2_with_pat>


; <Start encoding FStar.Classical.forall_intro_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3@tok () Term)

; </end encoding FStar.Classical.forall_intro_3>


; <Start encoding FStar.Classical.forall_intro_3_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat@tok () Term)

; </end encoding FStar.Classical.forall_intro_3_with_pat>


; <Start encoding FStar.Classical.forall_intro_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_4@tok () Term)

; </end encoding FStar.Classical.forall_intro_4>


; <Start encoding FStar.Classical.forall_impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_impl_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_impl_intro@tok () Term)

; </end encoding FStar.Classical.forall_impl_intro>


; <Start encoding FStar.Classical.ghost_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.ghost_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.ghost_lemma@tok () Term)

; </end encoding FStar.Classical.ghost_lemma>


; <Start encoding FStar.Classical.exists_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro@tok () Term)

; </end encoding FStar.Classical.exists_intro>


; <Start encoding FStar.Classical.exists_intro_not_all_not>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not@tok () Term)

; </end encoding FStar.Classical.exists_intro_not_all_not>


; <Start encoding FStar.Classical.forall_to_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists@tok () Term)

; </end encoding FStar.Classical.forall_to_exists>


; <Start encoding FStar.Classical.forall_to_exists_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists_2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists_2@tok () Term)

; </end encoding FStar.Classical.forall_to_exists_2>


; <Start encoding FStar.Classical.exists_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_elim@tok () Term)

; </end encoding FStar.Classical.exists_elim>


; <Start encoding FStar.Classical.or_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.or_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.or_elim@tok () Term)

; </end encoding FStar.Classical.or_elim>


; <Start encoding FStar.Classical.excluded_middle>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.excluded_middle (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.excluded_middle@tok () Term)

; </end encoding FStar.Classical.excluded_middle>


; End Externals for interface FStar.Classical


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Classical (203 decls; total size 18259)

;;; Start module FStar.StrongExcludedMiddle

; Externals for module FStar.StrongExcludedMiddle


; <Start encoding FStar.StrongExcludedMiddle.strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding FStar.StrongExcludedMiddle.strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.StrongExcludedMiddle (10 decls; total size 5664)

;;; Start interface FStar.Classical.Sugar

; Externals for interface FStar.Classical.Sugar


; <Start encoding FStar.Classical.Sugar.forall_elim>



(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding FStar.Classical.Sugar.forall_elim>


; <Start encoding FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding FStar.Classical.Sugar.exists_elim>


; <Start encoding FStar.Classical.Sugar.implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding FStar.Classical.Sugar.implies_elim>


; <Start encoding FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)


(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding FStar.Classical.Sugar.or_elim>


; <Start encoding FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding FStar.Classical.Sugar.and_elim>


; <Start encoding FStar.Classical.Sugar.forall_intro>



(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)




(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding FStar.Classical.Sugar.forall_intro>


; <Start encoding FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding FStar.Classical.Sugar.exists_intro>


; <Start encoding FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding FStar.Classical.Sugar.implies_intro>


; <Start encoding FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding FStar.Classical.Sugar.or_intro_left>


; <Start encoding FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding FStar.Classical.Sugar.or_intro_right>


; <Start encoding FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Classical.Sugar (136 decls; total size 9715)

;;; Start module FStar.List.Tot.Base

; Externals for module FStar.List.Tot.Base


; <Skipped FStar.List.Tot.Base.isEmpty/>


; <Start encoding FStar.List.Tot.Base.isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding FStar.List.Tot.Base.isEmpty>


; <Skipped FStar.List.Tot.Base.hd/>


; <Start encoding FStar.List.Tot.Base.hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding FStar.List.Tot.Base.hd>


; <Skipped FStar.List.Tot.Base.tail/>


; <Start encoding FStar.List.Tot.Base.tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding FStar.List.Tot.Base.tail>


; <Skipped FStar.List.Tot.Base.tl/>


; <Start encoding FStar.List.Tot.Base.tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding FStar.List.Tot.Base.tl>


; <Skipped FStar.List.Tot.Base.last/>


; <Start encoding FStar.List.Tot.Base.last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.last.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.last.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.last.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.last @x0
@x1)
(FStar.List.Tot.Base.last.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.last @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.last>


; <Skipped FStar.List.Tot.Base.init/>


; <Start encoding FStar.List.Tot.Base.init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.init; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(67,8-67,12); use=FStar.List.Tot.Base.fst(67,8-67,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.init.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.init.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.init.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.init.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.init.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.init; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(67,8-67,12); use=FStar.List.Tot.Base.fst(67,8-67,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.init @x0
@x1)
(FStar.List.Tot.Base.init.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.init @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.init.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.init.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.init>


; <Skipped FStar.List.Tot.Base.length/>


; <Start encoding FStar.List.Tot.Base.length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.length @x0
@x1)
(FStar.List.Tot.Base.length.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.length @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.length>


; <Skipped FStar.List.Tot.Base.nth/>


; <Start encoding FStar.List.Tot.Base.nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.nth; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(82,8-82,11); use=FStar.List.Tot.Base.fst(82,8-82,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.nth.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.nth.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.nth.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.nth.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.nth.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.nth; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(82,8-82,11); use=FStar.List.Tot.Base.fst(82,8-82,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.nth @x0
@x1
@x2)
(FStar.List.Tot.Base.nth.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.nth @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.nth.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.nth.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.nth>


; <Skipped FStar.List.Tot.Base.index/>


; <Start encoding FStar.List.Tot.Base.index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.index; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(90,8-90,13); use=FStar.List.Tot.Base.fst(90,8-90,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.index.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.index.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.index.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.index.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.index.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.index; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(90,8-90,13); use=FStar.List.Tot.Base.fst(90,8-90,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.index @x0
@x1
@x2)
(FStar.List.Tot.Base.index.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.index @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.index.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.index.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.index>


; <Skipped FStar.List.Tot.Base.count/>


; <Start encoding FStar.List.Tot.Base.count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.count; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(100,8-100,13); use=FStar.List.Tot.Base.fst(100,8-100,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.count.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.count.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.count.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.count; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(100,8-100,13); use=FStar.List.Tot.Base.fst(100,8-100,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.count @x0
@x1
@x2)
(FStar.List.Tot.Base.count.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.count @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.count.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.count.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.count>


; <Skipped FStar.List.Tot.Base.rev_acc/>


; <Start encoding FStar.List.Tot.Base.rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.rev_acc; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(108,8-108,15); use=FStar.List.Tot.Base.fst(108,8-108,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.rev_acc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.rev_acc.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.rev_acc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.rev_acc.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.rev_acc.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.rev_acc; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(108,8-108,15); use=FStar.List.Tot.Base.fst(108,8-108,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.rev_acc @x0
@x1
@x2)
(FStar.List.Tot.Base.rev_acc.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.rev_acc @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.rev_acc.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.rev_acc.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.rev_acc>


; <Skipped FStar.List.Tot.Base.rev/>


; <Start encoding FStar.List.Tot.Base.rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding FStar.List.Tot.Base.rev>


; <Skipped FStar.List.Tot.Base.append/>


; <Start encoding FStar.List.Tot.Base.append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.append @x0
@x1
@x2)
(FStar.List.Tot.Base.append.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.append @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.append>


; <Start encoding FStar.List.Tot.Base.op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding FStar.List.Tot.Base.op_At>


; <Skipped FStar.List.Tot.Base.snoc/>


; <Start encoding FStar.List.Tot.Base.snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding FStar.List.Tot.Base.snoc>


; <Skipped FStar.List.Tot.Base.flatten/>


; <Start encoding FStar.List.Tot.Base.flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.flatten; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(143,8-143,15); use=FStar.List.Tot.Base.fst(143,8-143,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.flatten.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.flatten.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.flatten.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.flatten.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.flatten.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.flatten; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(143,8-143,15); use=FStar.List.Tot.Base.fst(143,8-143,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.flatten @x0
@x1)
(FStar.List.Tot.Base.flatten.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.flatten @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.flatten.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.flatten.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.flatten>


; <Skipped FStar.List.Tot.Base.map/>


; <Start encoding FStar.List.Tot.Base.map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.map.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.map.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.map.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.map @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.map.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.map @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.map>


; <Skipped FStar.List.Tot.Base.mapi_init/>


; <Start encoding FStar.List.Tot.Base.mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.mapi_init; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(160,8-160,17); use=FStar.List.Tot.Base.fst(160,8-160,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.List.Tot.Base.mapi_init.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.List.Tot.Base.mapi_init.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.List.Tot.Base.mapi_init.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.List.Tot.Base.mapi_init.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.mapi_init.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.mapi_init; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(160,8-160,17); use=FStar.List.Tot.Base.fst(160,8-160,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.mapi_init @x0
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.mapi_init.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.mapi_init @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.List.Tot.Base.mapi_init.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.mapi_init.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.mapi_init>


; <Skipped FStar.List.Tot.Base.mapi/>


; <Start encoding FStar.List.Tot.Base.mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding FStar.List.Tot.Base.mapi>


; <Skipped FStar.List.Tot.Base.concatMap/>


; <Start encoding FStar.List.Tot.Base.concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.concatMap; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(176,8-176,17); use=FStar.List.Tot.Base.fst(176,8-176,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.concatMap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.concatMap.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.concatMap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.concatMap.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.concatMap.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.concatMap; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(176,8-176,17); use=FStar.List.Tot.Base.fst(176,8-176,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.concatMap @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.concatMap.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.concatMap @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.concatMap.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.concatMap.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.concatMap>


; <Skipped FStar.List.Tot.Base.fold_left/>


; <Start encoding FStar.List.Tot.Base.fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.fold_left; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(187,8-187,17); use=FStar.List.Tot.Base.fst(187,8-187,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.List.Tot.Base.fold_left.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.List.Tot.Base.fold_left.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.List.Tot.Base.fold_left.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.List.Tot.Base.fold_left.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.fold_left.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.fold_left; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(187,8-187,17); use=FStar.List.Tot.Base.fst(187,8-187,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.fold_left @x0
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.fold_left.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.fold_left @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.List.Tot.Base.fold_left.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.fold_left.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.fold_left>


; <Skipped FStar.List.Tot.Base.fold_right/>


; <Start encoding FStar.List.Tot.Base.fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.fold_right; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(195,8-195,18); use=FStar.List.Tot.Base.fst(195,8-195,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.List.Tot.Base.fold_right.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.List.Tot.Base.fold_right.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.List.Tot.Base.fold_right.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.List.Tot.Base.fold_right.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.fold_right.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.fold_right; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(195,8-195,18); use=FStar.List.Tot.Base.fst(195,8-195,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.fold_right @x0
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.fold_right.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.fold_right @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.List.Tot.Base.fold_right.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.fold_right.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.fold_right>


; <Start encoding FStar.List.Tot.Base.fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.fold_right_gtot; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(201,8-201,23); use=FStar.List.Tot.Base.fst(201,8-201,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.fold_right_gtot; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(201,8-201,23); use=FStar.List.Tot.Base.fst(201,8-201,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.fold_right_gtot @x0
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.fold_right_gtot @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.fold_right_gtot>


; <Start encoding FStar.List.Tot.Base.map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding FStar.List.Tot.Base.map_gtot>


; <Skipped FStar.List.Tot.Base.fold_left2/>


; <Start encoding FStar.List.Tot.Base.fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.fold_left2; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(218,8-218,18); use=FStar.List.Tot.Base.fst(218,8-218,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.List.Tot.Base.fold_left2.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.List.Tot.Base.fold_left2.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((FStar.List.Tot.Base.fold_left2.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid @fuel_irrelevance_FStar.List.Tot.Base.fold_left2.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.fold_left2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.fold_left2; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(218,8-218,18); use=FStar.List.Tot.Base.fst(218,8-218,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.List.Tot.Base.fold_left2 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.List.Tot.Base.fold_left2.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((FStar.List.Tot.Base.fold_left2 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid @fuel_correspondence_FStar.List.Tot.Base.fold_left2.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.fold_left2.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.fold_left2>


; <Start encoding FStar.List.Tot.Base.memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.memP.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.memP.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.memP @x0
@x1
@x2)
(FStar.List.Tot.Base.memP.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.memP @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.memP>


; <Skipped FStar.List.Tot.Base.mem/>


; <Start encoding FStar.List.Tot.Base.mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.mem; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(240,8-240,11); use=FStar.List.Tot.Base.fst(240,8-240,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.mem.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.mem.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.mem.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.mem.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.mem.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.mem; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(240,8-240,11); use=FStar.List.Tot.Base.fst(240,8-240,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.mem @x0
@x1
@x2)
(FStar.List.Tot.Base.mem.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.mem @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.mem.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.mem.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.mem>


; <Start encoding FStar.List.Tot.Base.contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding FStar.List.Tot.Base.contains>


; <Skipped FStar.List.Tot.Base.existsb/>


; <Start encoding FStar.List.Tot.Base.existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.existsb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(256,8-256,15); use=FStar.List.Tot.Base.fst(256,8-256,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.existsb.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.existsb.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.existsb.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.existsb.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.existsb.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.existsb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(256,8-256,15); use=FStar.List.Tot.Base.fst(256,8-256,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.existsb @x0
@x1
@x2)
(FStar.List.Tot.Base.existsb.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.existsb @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.existsb.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.existsb.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.existsb>


; <Skipped FStar.List.Tot.Base.find/>


; <Start encoding FStar.List.Tot.Base.find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.find; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(266,8-266,12); use=FStar.List.Tot.Base.fst(266,8-266,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.find.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.find.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.find.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.find.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.find.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.find; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(266,8-266,12); use=FStar.List.Tot.Base.fst(266,8-266,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.find @x0
@x1
@x2)
(FStar.List.Tot.Base.find.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.find @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.find.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.find.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.find>


; <Skipped FStar.List.Tot.Base.filter/>


; <Start encoding FStar.List.Tot.Base.filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)

(declare-fun Tm_refine_5c77e54d118aa26696ff018c647e0d2c (Term Term) Term)



(declare-fun Tm_arrow_26bc30ca5e980f52cef77fa4ff2b8923 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.filter; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(277,8-277,14); use=FStar.List.Tot.Base.fst(277,8-277,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.filter.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.filter.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.filter.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.filter.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.filter.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.filter; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(277,8-277,14); use=FStar.List.Tot.Base.fst(277,8-277,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.filter @x0
@x1
@x2)
(FStar.List.Tot.Base.filter.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.filter @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.filter.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.filter.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.filter>


; <Skipped FStar.List.Tot.Base.mem_filter/>


; <Start encoding FStar.List.Tot.Base.mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding FStar.List.Tot.Base.mem_filter>


; <Skipped FStar.List.Tot.Base.mem_filter_forall/>


; <Start encoding FStar.List.Tot.Base.mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding FStar.List.Tot.Base.mem_filter_forall>


; <Skipped FStar.List.Tot.Base.for_all/>


; <Start encoding FStar.List.Tot.Base.for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.for_all; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(303,8-303,15); use=FStar.List.Tot.Base.fst(303,8-303,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.for_all.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.for_all.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.for_all.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.for_all.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.for_all.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.for_all; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(303,8-303,15); use=FStar.List.Tot.Base.fst(303,8-303,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.for_all @x0
@x1
@x2)
(FStar.List.Tot.Base.for_all.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.for_all @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.for_all.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.for_all.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.for_all>


; <Start encoding FStar.List.Tot.Base.for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding FStar.List.Tot.Base.for_all_mem>


; <Skipped FStar.List.Tot.Base.collect/>


; <Start encoding FStar.List.Tot.Base.collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.collect; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(324,8-324,15); use=FStar.List.Tot.Base.fst(324,8-324,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.collect.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.collect.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.collect.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.collect.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.collect.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.collect; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(324,8-324,15); use=FStar.List.Tot.Base.fst(324,8-324,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.collect @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.collect.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.collect @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.collect.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.collect.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.collect>


; <Skipped FStar.List.Tot.Base.tryFind/>


; <Start encoding FStar.List.Tot.Base.tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.tryFind; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(334,8-334,15); use=FStar.List.Tot.Base.fst(334,8-334,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.tryFind.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.tryFind.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.tryFind.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.tryFind.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.tryFind.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.tryFind; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(334,8-334,15); use=FStar.List.Tot.Base.fst(334,8-334,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.tryFind @x0
@x1
@x2)
(FStar.List.Tot.Base.tryFind.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.tryFind @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.tryFind.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.tryFind.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.tryFind>


; <Skipped FStar.List.Tot.Base.tryPick/>


; <Start encoding FStar.List.Tot.Base.tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.tryPick; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(343,8-343,15); use=FStar.List.Tot.Base.fst(343,8-343,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.tryPick.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.tryPick.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.tryPick.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.tryPick.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.tryPick.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.tryPick; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(343,8-343,15); use=FStar.List.Tot.Base.fst(343,8-343,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.tryPick @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.tryPick.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.tryPick @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.tryPick.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.tryPick.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.tryPick>


; <Skipped FStar.List.Tot.Base.choose/>


; <Start encoding FStar.List.Tot.Base.choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.choose; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(354,8-354,14); use=FStar.List.Tot.Base.fst(354,8-354,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.choose.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.choose.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.choose.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.choose.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.choose.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.choose; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(354,8-354,14); use=FStar.List.Tot.Base.fst(354,8-354,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.choose @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.choose.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.choose @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.choose.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.choose.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.choose>


; <Skipped FStar.List.Tot.Base.partition/>


; <Start encoding FStar.List.Tot.Base.partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.partition; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(367,8-367,17); use=FStar.List.Tot.Base.fst(367,8-367,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.partition.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.partition.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.partition.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.partition.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.partition.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.partition; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(367,8-367,17); use=FStar.List.Tot.Base.fst(367,8-367,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.partition @x0
@x1
@x2)
(FStar.List.Tot.Base.partition.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.partition @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.partition.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.partition.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.partition>


; <Skipped FStar.List.Tot.Base.subset/>


; <Start encoding FStar.List.Tot.Base.subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.subset; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(379,8-379,14); use=FStar.List.Tot.Base.fst(379,8-379,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.subset.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.subset.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.subset.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.subset.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.subset.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.subset; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(379,8-379,14); use=FStar.List.Tot.Base.fst(379,8-379,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.subset @x0
@x1
@x2)
(FStar.List.Tot.Base.subset.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.subset @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.subset.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.subset.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.subset>


; <Skipped FStar.List.Tot.Base.noRepeats/>


; <Start encoding FStar.List.Tot.Base.noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.noRepeats; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(388,8-388,17); use=FStar.List.Tot.Base.fst(388,8-388,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.noRepeats.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.noRepeats.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.noRepeats.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.noRepeats.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.noRepeats.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.noRepeats; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(388,8-388,17); use=FStar.List.Tot.Base.fst(388,8-388,17)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.noRepeats @x0
@x1)
(FStar.List.Tot.Base.noRepeats.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.noRepeats @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.noRepeats.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.noRepeats.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.noRepeats>


; <Skipped FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding FStar.List.Tot.Base.no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.no_repeats_p; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(397,8-397,20); use=FStar.List.Tot.Base.fst(397,8-397,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.no_repeats_p.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.no_repeats_p.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.no_repeats_p.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.no_repeats_p; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(397,8-397,20); use=FStar.List.Tot.Base.fst(397,8-397,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.no_repeats_p @x0
@x1)
(FStar.List.Tot.Base.no_repeats_p.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.no_repeats_p @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.no_repeats_p.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.no_repeats_p.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.no_repeats_p>


; <Skipped FStar.List.Tot.Base.assoc/>


; <Start encoding FStar.List.Tot.Base.assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.assoc; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(409,8-409,13); use=FStar.List.Tot.Base.fst(409,8-409,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.assoc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.assoc.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.assoc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.assoc.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.assoc.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.assoc; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(409,8-409,13); use=FStar.List.Tot.Base.fst(409,8-409,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.assoc @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.assoc.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.assoc @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.assoc.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.assoc.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.assoc>


; <Skipped FStar.List.Tot.Base.split/>


; <Start encoding FStar.List.Tot.Base.split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.split; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(417,8-417,13); use=FStar.List.Tot.Base.fst(417,8-417,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.split.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.split.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.split.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.split.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.split.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.split; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(417,8-417,13); use=FStar.List.Tot.Base.fst(417,8-417,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.split @x0
@x1
@x2)
(FStar.List.Tot.Base.split.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.split @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.split.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.split.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.split>


; <Start encoding FStar.List.Tot.Base.unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding FStar.List.Tot.Base.unzip>


; <Skipped FStar.List.Tot.Base.unzip3/>


; <Start encoding FStar.List.Tot.Base.unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.unzip3; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(432,8-432,14); use=FStar.List.Tot.Base.fst(432,8-432,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.unzip3.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.unzip3.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.unzip3.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.unzip3.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.unzip3.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.unzip3; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(432,8-432,14); use=FStar.List.Tot.Base.fst(432,8-432,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.unzip3 @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.unzip3.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.unzip3 @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.unzip3.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.unzip3.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.unzip3>


; <Start encoding FStar.List.Tot.Base.splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.splitAt; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(443,8-443,15); use=FStar.List.Tot.Base.fst(443,8-443,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.splitAt.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.splitAt.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.splitAt.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.splitAt.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.splitAt.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.splitAt; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(443,8-443,15); use=FStar.List.Tot.Base.fst(443,8-443,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.splitAt @x0
@x1
@x2)
(FStar.List.Tot.Base.splitAt.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.splitAt @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.splitAt.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.splitAt.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.splitAt>


; <Start encoding FStar.List.Tot.Base.lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding FStar.List.Tot.Base.lemma_splitAt_snd_length>


; <Skipped FStar.List.Tot.Base.unsnoc/>


; <Start encoding FStar.List.Tot.Base.unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding FStar.List.Tot.Base.unsnoc>


; <Skipped FStar.List.Tot.Base.split3/>


; <Start encoding FStar.List.Tot.Base.split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding FStar.List.Tot.Base.split3>


; <Skipped FStar.List.Tot.Base.partition_length/>


; <Start encoding FStar.List.Tot.Base.partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding FStar.List.Tot.Base.partition_length>


; <Skipped FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding FStar.List.Tot.Base.bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding FStar.List.Tot.Base.bool_of_compare>


; <Skipped FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding FStar.List.Tot.Base.compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding FStar.List.Tot.Base.compare_of_bool>


; <Start encoding FStar.List.Tot.Base.compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding FStar.List.Tot.Base.compare_of_bool_of_compare>


; <Skipped FStar.List.Tot.Base.sortWith/>


; <Start encoding FStar.List.Tot.Base.sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.List.Tot.Base.sortWith; Namespace FStar.List.Tot.Base
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Base.bool_of_compare@tok))
:named @kick_partial_app_6123e8040f356c82d11b245dda0e1ccc))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.sortWith; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(523,8-523,16); use=FStar.List.Tot.Base.fst(523,8-523,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.sortWith.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.sortWith.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.sortWith.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.sortWith.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.sortWith.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.sortWith; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(523,8-523,16); use=FStar.List.Tot.Base.fst(523,8-523,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.sortWith @x0
@x1
@x2)
(FStar.List.Tot.Base.sortWith.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.sortWith @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.sortWith.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.sortWith.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.sortWith>


; <Start encoding FStar.List.Tot.Base.strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(531,8-531,24); use=FStar.List.Tot.Base.fst(531,8-531,24)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(531,8-531,24); use=FStar.List.Tot.Base.fst(531,8-531,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.strict_suffix_of @x0
@x1
@x2)
(FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.strict_suffix_of @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.strict_suffix_of>


; <Start encoding FStar.List.Tot.Base.strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.List.Tot.Base.strict_prefix_of; Namespace FStar.List.Tot.Base
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Base.strict_suffix_of@tok))
:named @kick_partial_app_a83d9836dd5fde61849337e3aeefb108))

; </end encoding FStar.List.Tot.Base.strict_prefix_of>


; <Skipped FStar.List.Tot.Base.list_unref/>


; <Start encoding FStar.List.Tot.Base.list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)

(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)




(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.list_unref; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(544,8-544,18); use=FStar.List.Tot.Base.fst(544,8-544,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.list_unref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.list_unref.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.list_unref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.list_unref.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.list_unref.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.list_unref; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(544,8-544,18); use=FStar.List.Tot.Base.fst(544,8-544,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.list_unref @x0
@x1
@x2)
(FStar.List.Tot.Base.list_unref.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.list_unref @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.list_unref.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.list_unref.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.list_unref>


; <Skipped FStar.List.Tot.Base.list_refb/>


; <Start encoding FStar.List.Tot.Base.list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)






;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.list_refb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(554,8-554,17); use=FStar.List.Tot.Base.fst(554,8-554,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.list_refb.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.list_refb.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.list_refb.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.list_refb.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.list_refb.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.list_refb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(554,8-554,17); use=FStar.List.Tot.Base.fst(554,8-554,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.list_refb @x0
@x1
@x2)
(FStar.List.Tot.Base.list_refb.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.list_refb @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.list_refb.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.list_refb.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.list_refb>


; <Skipped FStar.List.Tot.Base.list_ref/>


; <Start encoding FStar.List.Tot.Base.list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)
(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)






;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.list_ref; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(564,8-564,16); use=FStar.List.Tot.Base.fst(564,8-564,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.list_ref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.list_ref.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.list_ref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.list_ref.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.list_ref.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.list_ref; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(564,8-564,16); use=FStar.List.Tot.Base.fst(564,8-564,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.list_ref @x0
@x1
@x2)
(FStar.List.Tot.Base.list_ref.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.list_ref @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.list_ref.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.list_ref.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.list_ref>


; End Externals for module FStar.List.Tot.Base


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.List.Tot.Base (675 decls; total size 87651)

;;; Start module FStar.List.Tot.Properties

; Externals for module FStar.List.Tot.Properties


; <Start encoding FStar.List.Tot.Properties.llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding FStar.List.Tot.Properties.llist>


; <Start encoding FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_memP>


; <Start encoding FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding FStar.List.Tot.Properties.lemma_index_memP>


; <Skipped FStar.List.Tot.Properties.memP_empty/>


; <Start encoding FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_empty>


; <Skipped FStar.List.Tot.Properties.memP_existsb/>


; <Start encoding FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_existsb>


; <Start encoding FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_map_elim>


; <Skipped FStar.List.Tot.Properties.mem_empty/>


; <Start encoding FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_empty>


; <Skipped FStar.List.Tot.Properties.mem_existsb/>


; <Start encoding FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_existsb>


; <Start encoding FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_count>


; <Skipped FStar.List.Tot.Properties.rev_acc_length/>


; <Start encoding FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_acc_length>


; <Skipped FStar.List.Tot.Properties.rev_length/>


; <Start encoding FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_length>


; <Skipped FStar.List.Tot.Properties.rev_acc_memP/>


; <Start encoding FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_acc_memP>


; <Skipped FStar.List.Tot.Properties.rev_memP/>


; <Start encoding FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_memP>


; <Skipped FStar.List.Tot.Properties.rev_mem/>


; <Start encoding FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_mem>


; <Skipped FStar.List.Tot.Properties.append_nil_l/>


; <Start encoding FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_nil_l>


; <Skipped FStar.List.Tot.Properties.append_l_nil/>


; <Start encoding FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_l_nil>


; <Skipped FStar.List.Tot.Properties.append_cons_l/>


; <Start encoding FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_cons_l>


; <Skipped FStar.List.Tot.Properties.append_l_cons/>


; <Start encoding FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_l_cons>


; <Skipped FStar.List.Tot.Properties.append_assoc/>


; <Start encoding FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_assoc>


; <Skipped FStar.List.Tot.Properties.append_length/>


; <Start encoding FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_length>


; <Skipped FStar.List.Tot.Properties.append_mem/>


; <Start encoding FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_mem>


; <Skipped FStar.List.Tot.Properties.append_mem_forall/>


; <Start encoding FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_mem_forall>


; <Skipped FStar.List.Tot.Properties.append_count/>


; <Start encoding FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_count>


; <Skipped FStar.List.Tot.Properties.append_count_forall/>


; <Start encoding FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_count_forall>


; <Skipped FStar.List.Tot.Properties.append_eq_nil/>


; <Start encoding FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_eq_nil>


; <Skipped FStar.List.Tot.Properties.append_eq_singl/>


; <Start encoding FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_eq_singl>


; <Skipped FStar.List.Tot.Properties.append_inv_head/>


; <Start encoding FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_inv_head>


; <Skipped FStar.List.Tot.Properties.append_inv_tail/>


; <Start encoding FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_injective>


; <Start encoding FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_append_last>


; <Skipped FStar.List.Tot.Properties.rev'/>


; <Start encoding FStar.List.Tot.Properties.rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Properties.rev'; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(316,8-316,12); use=FStar.List.Tot.Properties.fst(316,8-316,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Properties.rev_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Properties.rev_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Properties.rev_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Properties.rev_.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Properties.rev_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Properties.rev'; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(316,8-316,12); use=FStar.List.Tot.Properties.fst(316,8-316,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Properties.rev_ @x0
@x1)
(FStar.List.Tot.Properties.rev_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Properties.rev_ @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Properties.rev_.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Properties.rev_.fuel_instrumented))

; </end encoding FStar.List.Tot.Properties.rev'>


; <Start encoding FStar.List.Tot.Properties.rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.List.Tot.Properties.rev'T; Namespace FStar.List.Tot.Properties
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Properties.rev_@tok))
:named @kick_partial_app_6780e2e9ce16d5330b5fda76b7bde9c5))

; </end encoding FStar.List.Tot.Properties.rev'T>


; <Skipped FStar.List.Tot.Properties.rev_acc_rev'/>


; <Start encoding FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_acc_rev'>


; <Skipped FStar.List.Tot.Properties.rev_rev'/>


; <Start encoding FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_rev'>


; <Skipped FStar.List.Tot.Properties.rev'_append/>


; <Start encoding FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev'_append>


; <Skipped FStar.List.Tot.Properties.rev_append/>


; <Start encoding FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_append>


; <Skipped FStar.List.Tot.Properties.rev'_involutive/>


; <Start encoding FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev'_involutive>


; <Skipped FStar.List.Tot.Properties.rev_involutive/>


; <Start encoding FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_involutive>


; <Skipped FStar.List.Tot.Properties.lemma_snoc_length/>


; <Start encoding FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_snoc_length>


; <Skipped FStar.List.Tot.Properties.rev'_list_ind/>


; <Start encoding FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev'_list_ind>


; <Skipped FStar.List.Tot.Properties.rev_ind/>


; <Start encoding FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_ind>


; <Skipped FStar.List.Tot.Properties.map_lemma/>


; <Start encoding FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding FStar.List.Tot.Properties.map_lemma>


; <Skipped FStar.List.Tot.Properties.lemma_unsnoc_snoc/>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Skipped FStar.List.Tot.Properties.lemma_snoc_unsnoc/>


; <Start encoding FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Skipped FStar.List.Tot.Properties.lemma_unsnoc_length/>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding FStar.List.Tot.Properties.split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Properties.split_using; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(466,8-466,19); use=FStar.List.Tot.Properties.fst(466,8-466,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Properties.split_using.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Properties.split_using.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Properties.split_using.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Properties.split_using.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Properties.split_using.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Properties.split_using; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(466,8-466,19); use=FStar.List.Tot.Properties.fst(466,8-466,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Properties.split_using @x0
@x1
@x2)
(FStar.List.Tot.Properties.split_using.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Properties.split_using @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Properties.split_using.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Properties.split_using.fuel_instrumented))

; </end encoding FStar.List.Tot.Properties.split_using>


; <Start encoding FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding FStar.List.Tot.Properties.index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Properties.index_of; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(507,8-507,16); use=FStar.List.Tot.Properties.fst(507,8-507,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Properties.index_of.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Properties.index_of.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Properties.index_of.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Properties.index_of.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Properties.index_of.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Properties.index_of; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(507,8-507,16); use=FStar.List.Tot.Properties.fst(507,8-507,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Properties.index_of @x0
@x1
@x2)
(FStar.List.Tot.Properties.index_of.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Properties.index_of @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Properties.index_of.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Properties.index_of.fuel_instrumented))

; </end encoding FStar.List.Tot.Properties.index_of>


; <Skipped FStar.List.Tot.Properties.partition_mem/>


; <Start encoding FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_mem>


; <Skipped FStar.List.Tot.Properties.partition_mem_forall/>


; <Start encoding FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_mem_forall>


; <Skipped FStar.List.Tot.Properties.partition_mem_p_forall/>


; <Start encoding FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_mem_p_forall>


; <Skipped FStar.List.Tot.Properties.partition_count/>


; <Start encoding FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_count>


; <Skipped FStar.List.Tot.Properties.partition_count_forall/>


; <Start encoding FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_count_forall>


; <Skipped FStar.List.Tot.Properties.sortWith_permutation/>


; <Start encoding FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding FStar.List.Tot.Properties.sortWith_permutation>


; <Skipped FStar.List.Tot.Properties.sorted/>


; <Start encoding FStar.List.Tot.Properties.sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)



(declare-fun Tm_arrow_3ceaaa0abe084cc4615eb380e8d5e0cc () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Properties.sorted; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(599,8-599,14); use=FStar.List.Tot.Properties.fst(599,8-599,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Properties.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Properties.sorted.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Properties.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Properties.sorted.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Properties.sorted.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Properties.sorted; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(599,8-599,14); use=FStar.List.Tot.Properties.fst(599,8-599,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Properties.sorted @x0
@x1
@x2)
(FStar.List.Tot.Properties.sorted.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Properties.sorted @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Properties.sorted.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Properties.sorted.fuel_instrumented))

; </end encoding FStar.List.Tot.Properties.sorted>


; <Start encoding FStar.List.Tot.Properties.total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


(declare-fun Tm_abs_155da43c8f196a519f1d932a1ab4c672 (Term Term) Term)

(declare-fun Tm_abs_04fa90dc867a5ed8e0397827a7571ed5 (Term Term Term) Term)

(declare-fun Tm_abs_fe2be3b4afbe66f9150ee17cf4940baf (Term Term) Term)

(declare-fun Tm_abs_2c9f14a824739c9038583213daad5a5e (Term Term Term Term) Term)

(declare-fun Tm_abs_2d2122604cffa731ca36b55576591613 (Term Term Term) Term)

(declare-fun Tm_abs_b229429e9a9f69e9e2fad0e7209d52f8 (Term Term) Term)

(declare-fun Tm_abs_8c0710121fff62e4b75dbdb8d8081c34 (Term Term Term) Term)

(declare-fun Tm_abs_cc30b17d49d0d8b0d5dad0fc1fc8c31f (Term Term) Term)

; </end encoding FStar.List.Tot.Properties.total_order>


; <Skipped FStar.List.Tot.Properties.append_sorted/>


; <Start encoding FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_828abd88abe59cf052738363f3952d7b (Term Term) Term)


; </end encoding FStar.List.Tot.Properties.append_sorted>


; <Skipped FStar.List.Tot.Properties.sortWith_sorted/>


; <Start encoding FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_nil>


; <Start encoding FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_mem>


; <Start encoding FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_map>


; <Start encoding FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.map_append>


; <Start encoding FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_append>


; <Start encoding FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding FStar.List.Tot.Properties.index_extensionality_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality_aux@tok () Term)

; </end encoding FStar.List.Tot.Properties.index_extensionality_aux>


; <Start encoding FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding FStar.List.Tot.Properties.index_extensionality>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding FStar.List.Tot.Properties.precedes_tl>


; <Start encoding FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_precedes>


; <Start encoding FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding FStar.List.Tot.Properties.find_none>


; <Start encoding FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_init_last>


; <Start encoding FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding FStar.List.Tot.Properties.init_last_def>


; <Start encoding FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding FStar.List.Tot.Properties.init_last_inj>


; <Skipped />


; <Start encoding FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.for_all_append>


; <Skipped />


; End Externals for module FStar.List.Tot.Properties


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.List.Tot.Properties (527 decls; total size 55930)

;;; Start module FStar.List.Tot

; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.List.Tot (3 decls; total size 5207)

;;; Start interface FStar.Seq.Base

; Externals for interface FStar.Seq.Base


; <Start encoding FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding FStar.Seq.Base.seq>


; <Start encoding FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding FStar.Seq.Base.length>


; <Start encoding FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding FStar.Seq.Base.index>


; <Start encoding FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding FStar.Seq.Base.create>


; <Start encoding FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.init_aux; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,41-32,57); use=FStar.Seq.Base.fsti(32,41-32,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(32,48-32,55); use=FStar.Seq.Base.fsti(32,48-32,55)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x2)))
:qid refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))

:named refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding FStar.Seq.Base.init_aux>


; <Start encoding FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding FStar.Seq.Base.init>


; <Start encoding FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding FStar.Seq.Base.init_aux_ghost>


; <Start encoding FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding FStar.Seq.Base.init_ghost>


; <Start encoding FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding FStar.Seq.Base.empty>


; <Start encoding FStar.Seq.Base.createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding FStar.Seq.Base.createEmpty>


; <Start encoding FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding FStar.Seq.Base.lemma_empty>


; <Start encoding FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding FStar.Seq.Base.upd>


; <Start encoding FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding FStar.Seq.Base.append>


; <Start encoding FStar.Seq.Base.op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding FStar.Seq.Base.op_At_Bar>


; <Start encoding FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding FStar.Seq.Base.slice>


; <Start encoding FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding FStar.Seq.Base.lemma_create_len>


; <Start encoding FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding FStar.Seq.Base.lemma_init_len>


; <Start encoding FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding FStar.Seq.Base.lemma_len_upd>


; <Start encoding FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding FStar.Seq.Base.lemma_len_append>


; <Start encoding FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding FStar.Seq.Base.lemma_len_slice>


; <Start encoding FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding FStar.Seq.Base.lemma_index_create>


; <Start encoding FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding FStar.Seq.Base.lemma_index_upd1>


; <Start encoding FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding FStar.Seq.Base.lemma_index_upd2>


; <Start encoding FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding FStar.Seq.Base.lemma_index_app1>


; <Start encoding FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding FStar.Seq.Base.lemma_index_app2>


; <Start encoding FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding FStar.Seq.Base.lemma_index_slice>


; <Start encoding FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding FStar.Seq.Base.hasEq_lemma>


; <Start encoding FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding FStar.Seq.Base.equal>


; <Start encoding FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding FStar.Seq.Base.eq_i>


; <Start encoding FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding FStar.Seq.Base.eq>


; <Start encoding FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding FStar.Seq.Base.lemma_eq_intro>


; <Start encoding FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding FStar.Seq.Base.lemma_eq_refl>


; <Start encoding FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding FStar.Seq.Base.lemma_eq_elim>


; <Start encoding FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding FStar.Seq.Base.append_assoc>


; <Start encoding FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding FStar.Seq.Base.append_empty_l>


; <Start encoding FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding FStar.Seq.Base.append_empty_r>


; <Start encoding FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding FStar.Seq.Base.init_index>


; <Start encoding FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding FStar.Seq.Base.init_index_>


; <Start encoding FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding FStar.Seq.Base.init_ghost_index>


; <Start encoding FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding FStar.Seq.Base.init_ghost_index_>


; <Start encoding FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Seq.Base (262 decls; total size 20915)

;;; Start interface FStar.Seq.Properties

; Externals for interface FStar.Seq.Properties


; <Start encoding FStar.Seq.Properties.lseq>

(declare-fun FStar.Seq.Properties.lseq (Term Term) Term)

(declare-fun FStar.Seq.Properties.lseq@tok () Term)
(declare-fun Tm_refine_a0cd7d06c5da6444b6b51b319febde8e (Term Term) Term)

; </end encoding FStar.Seq.Properties.lseq>


; <Start encoding FStar.Seq.Properties.indexable>

(declare-fun FStar.Seq.Properties.indexable (Term Term Term) Term)
(declare-fun Tm_arrow_2c0367dd991d12c77178c7fe63f076c5 () Term)
(declare-fun FStar.Seq.Properties.indexable@tok () Term)

; </end encoding FStar.Seq.Properties.indexable>


; <Start encoding FStar.Seq.Properties.lemma_append_inj_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_inj_l>


; <Start encoding FStar.Seq.Properties.lemma_append_inj_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_inj_r>


; <Start encoding FStar.Seq.Properties.lemma_append_len_disj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_len_disj>


; <Start encoding FStar.Seq.Properties.lemma_append_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_inj>


; <Start encoding FStar.Seq.Properties.head>

(declare-fun Tm_refine_167ef714932ec832fb671890fc3eee6c (Term) Term)
(declare-fun FStar.Seq.Properties.head (Term Term) Term)

(declare-fun Tm_arrow_fde6b9111cb8aaf87a1b6689af62ed69 () Term)
(declare-fun FStar.Seq.Properties.head@tok () Term)


; </end encoding FStar.Seq.Properties.head>


; <Start encoding FStar.Seq.Properties.tail>


(declare-fun FStar.Seq.Properties.tail (Term Term) Term)

(declare-fun Tm_arrow_3db93b3d63ab329f9ab58ee76fda4c87 () Term)
(declare-fun FStar.Seq.Properties.tail@tok () Term)


; </end encoding FStar.Seq.Properties.tail>


; <Start encoding FStar.Seq.Properties.lemma_head_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_head_append>


; <Start encoding FStar.Seq.Properties.lemma_tail_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_tail_append>


; <Start encoding FStar.Seq.Properties.last>


(declare-fun FStar.Seq.Properties.last (Term Term) Term)


(declare-fun FStar.Seq.Properties.last@tok () Term)


; </end encoding FStar.Seq.Properties.last>


; <Start encoding FStar.Seq.Properties.cons>

(declare-fun FStar.Seq.Properties.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Properties.cons@tok () Term)

; </end encoding FStar.Seq.Properties.cons>


; <Start encoding FStar.Seq.Properties.lemma_cons_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_cons_inj>


; <Start encoding FStar.Seq.Properties.split>

(declare-fun Tm_refine_17631fa6304dcc08d028bd475a6dd078 (Term Term) Term)
(declare-fun FStar.Seq.Properties.split (Term Term Term) Term)

(declare-fun Tm_arrow_e8094a245058e1a3364fcb54e52c4b61 () Term)
(declare-fun FStar.Seq.Properties.split@tok () Term)


; </end encoding FStar.Seq.Properties.split>


; <Start encoding FStar.Seq.Properties.lemma_split>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_split (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_split@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_split>


; <Start encoding FStar.Seq.Properties.split_eq>


(declare-fun FStar.Seq.Properties.split_eq (Term Term Term) Term)

(declare-fun Tm_refine_78d42c5dbba01ee594272daa6bb0579c (Term Term) Term)
(declare-fun Tm_arrow_b88932abf1506cfe956c7a113bc65f4b () Term)
(declare-fun FStar.Seq.Properties.split_eq@tok () Term)



; </end encoding FStar.Seq.Properties.split_eq>


; <Start encoding FStar.Seq.Properties.count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.count.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.count (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.count@tok () Term)
(declare-fun Tm_arrow_b68daf91c98458f9ea85290d85674a2e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.count; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(73,8-73,13); use=FStar.Seq.Properties.fsti(73,8-73,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.count.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.count.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.count.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.count; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(73,8-73,13); use=FStar.Seq.Properties.fsti(73,8-73,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.count @x0
@x1
@x2)
(FStar.Seq.Properties.count.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.count @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.count.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.count.fuel_instrumented))

; </end encoding FStar.Seq.Properties.count>


; <Start encoding FStar.Seq.Properties.mem>

(declare-fun FStar.Seq.Properties.mem (Term Term Term) Term)
(declare-fun Tm_arrow_8b9021eb78c56c0f1820182c3a3e44b5 () Term)
(declare-fun FStar.Seq.Properties.mem@tok () Term)

; </end encoding FStar.Seq.Properties.mem>


; <Start encoding FStar.Seq.Properties.mem_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_index@tok () Term)

; </end encoding FStar.Seq.Properties.mem_index>


; <Start encoding FStar.Seq.Properties.index_mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.index_mem (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.index_mem@tok () Term)
(declare-fun Tm_refine_7c92df3cf71635bc41483532e738d828 (Term Term Term) Term)

(declare-fun Tm_arrow_12def5646e9a05cc547dd67c2eeaec45 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.index_mem; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(88,8-88,17); use=FStar.Seq.Properties.fsti(88,8-88,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.index_mem.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.index_mem.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.index_mem.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.index_mem.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.index_mem.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.index_mem; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(88,8-88,17); use=FStar.Seq.Properties.fsti(88,8-88,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.index_mem @x0
@x1
@x2)
(FStar.Seq.Properties.index_mem.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.index_mem @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.index_mem.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.index_mem.fuel_instrumented))

; </end encoding FStar.Seq.Properties.index_mem>


; <Start encoding FStar.Seq.Properties.swap>



(declare-fun FStar.Seq.Properties.swap (Term Term Term Term) Term)


(declare-fun Tm_arrow_ed5530d89236443143d2d084ddc97069 () Term)
(declare-fun FStar.Seq.Properties.swap@tok () Term)



; </end encoding FStar.Seq.Properties.swap>


; <Start encoding FStar.Seq.Properties.lemma_slice_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_slice_append>


; <Start encoding FStar.Seq.Properties.lemma_slice_first_in_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_slice_first_in_append>


; <Start encoding FStar.Seq.Properties.slice_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_upd@tok () Term)



; </end encoding FStar.Seq.Properties.slice_upd>


; <Start encoding FStar.Seq.Properties.upd_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.upd_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.upd_slice@tok () Term)



; </end encoding FStar.Seq.Properties.upd_slice>


; <Start encoding FStar.Seq.Properties.lemma_append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_cons>


; <Start encoding FStar.Seq.Properties.lemma_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tl@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_tl>


; <Start encoding FStar.Seq.Properties.sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.sorted (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.sorted@tok () Term)



(declare-fun Tm_arrow_28685b742721099a6ab3847e4434a96d () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.sorted; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(125,8-125,14); use=FStar.Seq.Properties.fsti(125,8-125,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.sorted.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.sorted.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.sorted.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.sorted; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(125,8-125,14); use=FStar.Seq.Properties.fsti(125,8-125,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.sorted @x0
@x1
@x2)
(FStar.Seq.Properties.sorted.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.sorted @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.sorted.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.sorted.fuel_instrumented))

; </end encoding FStar.Seq.Properties.sorted>


; <Start encoding FStar.Seq.Properties.sorted_feq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_feq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_feq@tok () Term)

; </end encoding FStar.Seq.Properties.sorted_feq>


; <Start encoding FStar.Seq.Properties.lemma_append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_count>


; <Start encoding FStar.Seq.Properties.lemma_append_count_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_count_aux>


; <Start encoding FStar.Seq.Properties.lemma_mem_inversion>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_mem_inversion>


; <Start encoding FStar.Seq.Properties.lemma_mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_mem_count>


; <Start encoding FStar.Seq.Properties.lemma_count_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_count_slice>


; <Start encoding FStar.Seq.Properties.total_order>


(declare-fun FStar.Seq.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_1118b25cace7451b1e5dfdfe482dbb64 () Term)
(declare-fun FStar.Seq.Properties.total_order@tok () Term)





(declare-fun Tm_abs_01f32e6aaf7ac0d0cc4b683776152cee (Term Term Term) Term)

(declare-fun Tm_abs_cbb67fe00406c5e25c3d7764e9189af1 (Term Term) Term)








; </end encoding FStar.Seq.Properties.total_order>


; <Start encoding FStar.Seq.Properties.tot_ord>

(declare-fun FStar.Seq.Properties.tot_ord (Term) Term)

(declare-fun FStar.Seq.Properties.tot_ord@tok () Term)

(declare-fun Tm_refine_a01e88865b4bbd2f0a4bcb261b6760a8 (Term) Term)

; </end encoding FStar.Seq.Properties.tot_ord>


; <Start encoding FStar.Seq.Properties.sorted_concat_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma@tok () Term)

; </end encoding FStar.Seq.Properties.sorted_concat_lemma>


; <Start encoding FStar.Seq.Properties.split_5>

(declare-fun Tm_refine_55108d29d63192475ca95f591039cc18 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.split_5 (Term Term Term Term) Term)

(declare-fun Tm_refine_03fdfb031367b218884098aa9d386676 (Term Term Term Term) Term)
(declare-fun Tm_arrow_1ab34f107de5525c681399e3c671c330 () Term)
(declare-fun FStar.Seq.Properties.split_5@tok () Term)


; </end encoding FStar.Seq.Properties.split_5>


; <Start encoding FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>


; <Start encoding FStar.Seq.Properties.lemma_swap_permutes_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_permutes_aux>


; <Start encoding FStar.Seq.Properties.permutation>

(declare-fun FStar.Seq.Properties.permutation (Term Term Term) Term)
(declare-fun Tm_arrow_05517904f5779069bb79d90a352f1386 () Term)
(declare-fun FStar.Seq.Properties.permutation@tok () Term)

(declare-fun Tm_abs_0de6cd599146a4faa203cbf0596fd5e3 (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.permutation>


; <Start encoding FStar.Seq.Properties.lemma_swap_permutes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_permutes>


; <Start encoding FStar.Seq.Properties.perm_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.perm_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.perm_len@tok () Term)

; </end encoding FStar.Seq.Properties.perm_len>


; <Start encoding FStar.Seq.Properties.cons_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_perm (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_perm@tok () Term)

; </end encoding FStar.Seq.Properties.cons_perm>


; <Start encoding FStar.Seq.Properties.lemma_mem_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_mem_append>


; <Start encoding FStar.Seq.Properties.lemma_slice_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_slice_cons>


; <Start encoding FStar.Seq.Properties.lemma_slice_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_slice_snoc>


; <Start encoding FStar.Seq.Properties.lemma_ordering_lo_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_ordering_lo_snoc>


; <Start encoding FStar.Seq.Properties.lemma_ordering_hi_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_ordering_hi_cons>


; <Start encoding FStar.Seq.Properties.swap_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo@tok () Term)

; </end encoding FStar.Seq.Properties.swap_frame_lo>


; <Start encoding FStar.Seq.Properties.swap_frame_lo'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_ (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_@tok () Term)

; </end encoding FStar.Seq.Properties.swap_frame_lo'>


; <Start encoding FStar.Seq.Properties.swap_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi@tok () Term)

; </end encoding FStar.Seq.Properties.swap_frame_hi>


; <Start encoding FStar.Seq.Properties.lemma_swap_slice_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_slice_commute>


; <Start encoding FStar.Seq.Properties.lemma_swap_permutes_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_permutes_slice>


; <Start encoding FStar.Seq.Properties.splice>



(declare-fun FStar.Seq.Properties.splice (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_c43a25ef505b9db21532cdb95f3c9f68 () Term)
(declare-fun FStar.Seq.Properties.splice@tok () Term)



; </end encoding FStar.Seq.Properties.splice>


; <Start encoding FStar.Seq.Properties.replace_subseq>


(declare-fun Tm_refine_5542011d20872a6178aad9a072f1b686 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.replace_subseq (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_9fa775abc8f8f9c4e6df626212cddc6a () Term)
(declare-fun FStar.Seq.Properties.replace_subseq@tok () Term)



; </end encoding FStar.Seq.Properties.replace_subseq>


; <Start encoding FStar.Seq.Properties.splice_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.splice_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.splice_refl@tok () Term)

; </end encoding FStar.Seq.Properties.splice_refl>


; <Start encoding FStar.Seq.Properties.lemma_swap_splice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_splice>


; <Start encoding FStar.Seq.Properties.lemma_seq_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_frame_hi>


; <Start encoding FStar.Seq.Properties.lemma_seq_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_frame_lo>


; <Start encoding FStar.Seq.Properties.lemma_tail_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice@tok () Term)
(declare-fun Tm_refine_b138bd5848d4184f7632587e6e4bcf9f (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.lemma_tail_slice>


; <Start encoding FStar.Seq.Properties.lemma_weaken_frame_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_weaken_frame_right>


; <Start encoding FStar.Seq.Properties.lemma_weaken_frame_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_weaken_frame_left>


; <Start encoding FStar.Seq.Properties.lemma_trans_frame>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_trans_frame>


; <Start encoding FStar.Seq.Properties.lemma_weaken_perm_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_weaken_perm_left>


; <Start encoding FStar.Seq.Properties.lemma_weaken_perm_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_weaken_perm_right>


; <Start encoding FStar.Seq.Properties.lemma_trans_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_trans_perm>


; <Start encoding FStar.Seq.Properties.snoc>

(declare-fun FStar.Seq.Properties.snoc (Term Term Term) Term)
(declare-fun Tm_arrow_f9b27de7c4505538c6110afe14403cc8 () Term)
(declare-fun FStar.Seq.Properties.snoc@tok () Term)

; </end encoding FStar.Seq.Properties.snoc>


; <Start encoding FStar.Seq.Properties.lemma_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_cons_snoc>


; <Start encoding FStar.Seq.Properties.lemma_tail_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_tail_snoc>


; <Start encoding FStar.Seq.Properties.lemma_snoc_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_snoc_inj>


; <Start encoding FStar.Seq.Properties.lemma_mem_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_mem_snoc>


; <Start encoding FStar.Seq.Properties.find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_l@tok () Term)

(declare-fun Tm_refine_aba7638072c8f1ba6a01b95ec6f9a485 (Term Term) Term)



(declare-fun Tm_arrow_fd183dc9552028fd54abfbe4a84f515a () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(330,8-330,14); use=FStar.Seq.Properties.fsti(330,8-330,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.find_l.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.find_l.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.find_l.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.find_l.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.find_l.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(330,8-330,14); use=FStar.Seq.Properties.fsti(330,8-330,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.find_l @x0
@x1
@x2)
(FStar.Seq.Properties.find_l.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.find_l @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.find_l.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.find_l.fuel_instrumented))

; </end encoding FStar.Seq.Properties.find_l>


; <Start encoding FStar.Seq.Properties.ghost_find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.ghost_find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.ghost_find_l@tok () Term)
(declare-fun Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c (Term) Term)




(declare-fun Tm_ghost_arrow_3f8a537d0d54200d690f80a370cf9031 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.ghost_find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(337,8-337,20); use=FStar.Seq.Properties.fsti(337,8-337,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.ghost_find_l.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.ghost_find_l.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.ghost_find_l.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.ghost_find_l.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.ghost_find_l.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.ghost_find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(337,8-337,20); use=FStar.Seq.Properties.fsti(337,8-337,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.ghost_find_l @x0
@x1
@x2)
(FStar.Seq.Properties.ghost_find_l.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.ghost_find_l @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.ghost_find_l.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.ghost_find_l.fuel_instrumented))

; </end encoding FStar.Seq.Properties.ghost_find_l>


; <Start encoding FStar.Seq.Properties.find_append_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_some (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_some@tok () Term)

; </end encoding FStar.Seq.Properties.find_append_some>


; <Start encoding FStar.Seq.Properties.find_append_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none@tok () Term)

; </end encoding FStar.Seq.Properties.find_append_none>


; <Start encoding FStar.Seq.Properties.find_append_none_s2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2@tok () Term)

; </end encoding FStar.Seq.Properties.find_append_none_s2>


; <Start encoding FStar.Seq.Properties.find_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.find_snoc>


; <Start encoding FStar.Seq.Properties.un_snoc>

(declare-fun Tm_refine_5739deb21d8cba89243fec27b35b7ef0 (Term) Term)
(declare-fun FStar.Seq.Properties.un_snoc (Term Term) Term)

(declare-fun Tm_refine_16326afaeb5f4d93ab294cc4a965de3e (Term Term) Term)
(declare-fun Tm_arrow_30c2910b2510bbce2598a79ba00a0209 () Term)
(declare-fun FStar.Seq.Properties.un_snoc@tok () Term)



; </end encoding FStar.Seq.Properties.un_snoc>


; <Start encoding FStar.Seq.Properties.un_snoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.un_snoc_snoc>


; <Start encoding FStar.Seq.Properties.find_r>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_r (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_r@tok () Term)







;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.find_r; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(369,8-369,14); use=FStar.Seq.Properties.fsti(369,8-369,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.find_r.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.find_r.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.find_r.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.find_r.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.find_r.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.find_r; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(369,8-369,14); use=FStar.Seq.Properties.fsti(369,8-369,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.find_r @x0
@x1
@x2)
(FStar.Seq.Properties.find_r.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.find_r @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.find_r.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.find_r.fuel_instrumented))

; </end encoding FStar.Seq.Properties.find_r>


; <Start encoding FStar.Seq.Properties.found>

(declare-fun FStar.Seq.Properties.found (Term) Term)
(declare-fun Tm_arrow_591bcdc53dc583ecc77b1bc5436f9a59 () Term)
(declare-fun FStar.Seq.Properties.found@tok () Term)

; </end encoding FStar.Seq.Properties.found>


; <Start encoding FStar.Seq.Properties.seq_find_aux>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.seq_find_aux (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.seq_find_aux@tok () Term)


(declare-fun Tm_refine_564e05c43cb7c1f4e1de1a4fb2fd28c8 (Term Term Term) Term)


(declare-fun Tm_refine_5e8ab89510578a938a38bd5dfb813b93 (Term Term Term) Term)









(declare-fun Tm_arrow_c2dc7826f3281f473541797eb2d714b7 () Term)



;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.seq_find_aux; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(379,8-379,20); use=FStar.Seq.Properties.fsti(379,8-379,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Seq.Properties.seq_find_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.Seq.Properties.seq_find_aux.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Seq.Properties.seq_find_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.Seq.Properties.seq_find_aux.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.seq_find_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.seq_find_aux; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(379,8-379,20); use=FStar.Seq.Properties.fsti(379,8-379,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.seq_find_aux @x0
@x1
@x2
@x3)
(FStar.Seq.Properties.seq_find_aux.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.seq_find_aux @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.Seq.Properties.seq_find_aux.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.seq_find_aux.fuel_instrumented))

; </end encoding FStar.Seq.Properties.seq_find_aux>


; <Start encoding FStar.Seq.Properties.seq_find>


(declare-fun FStar.Seq.Properties.seq_find (Term Term Term) Term)




(declare-fun Tm_arrow_fa1508f34cdf614c6772d290f5ddf827 () Term)
(declare-fun FStar.Seq.Properties.seq_find@tok () Term)





; </end encoding FStar.Seq.Properties.seq_find>


; <Start encoding FStar.Seq.Properties.find_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_mem@tok () Term)

; </end encoding FStar.Seq.Properties.find_mem>


; <Start encoding FStar.Seq.Properties.for_all>


(declare-fun FStar.Seq.Properties.for_all (Term Term Term) Term)


(declare-fun Tm_refine_307fd373d8b3749096cf164b41cf1984 (Term Term Term) Term)
(declare-fun Tm_arrow_098d0ddce18f722cb743337c9d7dd0b9 () Term)
(declare-fun FStar.Seq.Properties.for_all@tok () Term)




(declare-fun Tm_abs_e818836335067047224d0c19c4cabb2d (Term Term) Term)

; </end encoding FStar.Seq.Properties.for_all>


; <Start encoding FStar.Seq.Properties.seq_mem_k>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k@tok () Term)


; </end encoding FStar.Seq.Properties.seq_mem_k>


; <Start encoding FStar.Seq.Properties.seq_to_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.seq_to_list.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.seq_to_list.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.seq_to_list (Term Term) Term)
(declare-fun FStar.Seq.Properties.seq_to_list@tok () Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)

(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.seq_to_list; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(425,8-425,19); use=FStar.Seq.Properties.fsti(425,8-425,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.seq_to_list.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Seq.Properties.seq_to_list.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.seq_to_list.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Seq.Properties.seq_to_list.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.seq_to_list.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.seq_to_list; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(425,8-425,19); use=FStar.Seq.Properties.fsti(425,8-425,19)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Seq.Properties.seq_to_list @x0
@x1)
(FStar.Seq.Properties.seq_to_list.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Seq.Properties.seq_to_list @x0
@x1))
:qid @fuel_correspondence_FStar.Seq.Properties.seq_to_list.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.seq_to_list.fuel_instrumented))

; </end encoding FStar.Seq.Properties.seq_to_list>


; <Start encoding FStar.Seq.Properties.seq_of_list>

(declare-fun FStar.Seq.Properties.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Properties.seq_of_list@tok () Term)


; </end encoding FStar.Seq.Properties.seq_of_list>


; <Start encoding FStar.Seq.Properties.lemma_seq_of_list_induction>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_of_list_induction>


; <Start encoding FStar.Seq.Properties.lemma_seq_list_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_list_bij>


; <Start encoding FStar.Seq.Properties.lemma_list_seq_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_list_seq_bij>


; <Start encoding FStar.Seq.Properties.createL_post>

(declare-fun FStar.Seq.Properties.createL_post (Term Term Term) Term)
(declare-fun Tm_arrow_befeea9093c61a572da65bfe7ce35cff () Term)
(declare-fun FStar.Seq.Properties.createL_post@tok () Term)
(declare-fun Tm_refine_1780a0fddfda88c43d203b562c6d3f5b () Term)
(declare-fun Tm_refine_8c2e524fd0f5ac690c4c816ad7d8a461 (Term Term Term) Term)


; </end encoding FStar.Seq.Properties.createL_post>


; <Start encoding FStar.Seq.Properties.createL>

(declare-fun FStar.Seq.Properties.createL (Term Term) Term)

(declare-fun Tm_refine_29f54a8a92d732b7f4111928d707db68 (Term Term) Term)
(declare-fun Tm_arrow_6a7bb2ee242e4d89b8744d9965334de3 () Term)
(declare-fun FStar.Seq.Properties.createL@tok () Term)



; </end encoding FStar.Seq.Properties.createL>


; <Start encoding FStar.Seq.Properties.lemma_index_is_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_index_is_nth>


; <Start encoding FStar.Seq.Properties.contains>

(declare-fun FStar.Seq.Properties.contains (Term Term Term) Term)
(declare-fun Tm_arrow_65d0102b1211a5d233193433129106a1 () Term)
(declare-fun FStar.Seq.Properties.contains@tok () Term)

; </end encoding FStar.Seq.Properties.contains>


; <Start encoding FStar.Seq.Properties.contains_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_intro@tok () Term)

; </end encoding FStar.Seq.Properties.contains_intro>


; <Start encoding FStar.Seq.Properties.contains_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_elim@tok () Term)

; </end encoding FStar.Seq.Properties.contains_elim>


; <Start encoding FStar.Seq.Properties.lemma_contains_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_contains_empty>


; <Start encoding FStar.Seq.Properties.lemma_contains_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_contains_singleton>


; <Start encoding FStar.Seq.Properties.append_contains_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv@tok () Term)

; </end encoding FStar.Seq.Properties.append_contains_equiv>


; <Start encoding FStar.Seq.Properties.contains_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.contains_snoc>


; <Start encoding FStar.Seq.Properties.lemma_find_l_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_find_l_contains>


; <Start encoding FStar.Seq.Properties.contains_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_cons@tok () Term)

; </end encoding FStar.Seq.Properties.contains_cons>


; <Start encoding FStar.Seq.Properties.append_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.append_cons_snoc>


; <Start encoding FStar.Seq.Properties.append_slices>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_slices (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_slices@tok () Term)

; </end encoding FStar.Seq.Properties.append_slices>


; <Start encoding FStar.Seq.Properties.find_l_none_no_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index@tok () Term)

; </end encoding FStar.Seq.Properties.find_l_none_no_index>


; <Start encoding FStar.Seq.Properties.suffix_of>

(declare-fun FStar.Seq.Properties.suffix_of (Term Term Term) Term)
(declare-fun Tm_arrow_2ed6082b86d605508c94c4b8a46966f5 () Term)
(declare-fun FStar.Seq.Properties.suffix_of@tok () Term)
(declare-fun Tm_arrow_1b131a144041a50a604cc69ec18e173a (Term) Term)
(declare-fun Tm_abs_1a72f90f7650698378a85f71c4dab2bc (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.suffix_of>


; <Start encoding FStar.Seq.Properties.cons_head_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail@tok () Term)


; </end encoding FStar.Seq.Properties.cons_head_tail>


; <Start encoding FStar.Seq.Properties.head_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.head_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.head_cons@tok () Term)

; </end encoding FStar.Seq.Properties.head_cons>


; <Start encoding FStar.Seq.Properties.suffix_of_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail@tok () Term)


; </end encoding FStar.Seq.Properties.suffix_of_tail>


; <Start encoding FStar.Seq.Properties.index_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_l@tok () Term)

; </end encoding FStar.Seq.Properties.index_cons_l>


; <Start encoding FStar.Seq.Properties.index_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_r@tok () Term)

; </end encoding FStar.Seq.Properties.index_cons_r>


; <Start encoding FStar.Seq.Properties.append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons@tok () Term)

; </end encoding FStar.Seq.Properties.append_cons>


; <Start encoding FStar.Seq.Properties.index_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_tail (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_tail@tok () Term)

; </end encoding FStar.Seq.Properties.index_tail>


; <Start encoding FStar.Seq.Properties.mem_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_cons@tok () Term)

; </end encoding FStar.Seq.Properties.mem_cons>


; <Start encoding FStar.Seq.Properties.snoc_slice_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index@tok () Term)
(declare-fun Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.snoc_slice_index>


; <Start encoding FStar.Seq.Properties.cons_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice@tok () Term)
(declare-fun Tm_refine_09d2e9ab3b9c121b24316d151747e281 (Term Term Term) Term)
(declare-fun Tm_refine_ddd44b85040d1947cca83550b7e21966 (Term) Term)

; </end encoding FStar.Seq.Properties.cons_index_slice>


; <Start encoding FStar.Seq.Properties.slice_is_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty@tok () Term)


; </end encoding FStar.Seq.Properties.slice_is_empty>


; <Start encoding FStar.Seq.Properties.slice_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_length@tok () Term)

; </end encoding FStar.Seq.Properties.slice_length>


; <Start encoding FStar.Seq.Properties.slice_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_slice@tok () Term)

(declare-fun Tm_refine_1ba8fd8bb363097813064c67740b2de5 (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.slice_slice>


; <Start encoding FStar.Seq.Properties.lemma_seq_of_list_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index@tok () Term)


; </end encoding FStar.Seq.Properties.lemma_seq_of_list_index>


; <Start encoding FStar.Seq.Properties.of_list>

(declare-fun FStar.Seq.Properties.of_list (Term Term) Term)
(declare-fun Tm_arrow_474463878fff5c7c9c02e4f0b8b84aa8 () Term)
(declare-fun FStar.Seq.Properties.of_list@tok () Term)

; </end encoding FStar.Seq.Properties.of_list>


; <Start encoding FStar.Seq.Properties.seq_of_list_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl@tok () Term)

; </end encoding FStar.Seq.Properties.seq_of_list_tl>


; <Start encoding FStar.Seq.Properties.mem_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list@tok () Term)

; </end encoding FStar.Seq.Properties.mem_seq_of_list>


; <Start encoding FStar.Seq.Properties.explode_and>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.explode_and (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.explode_and@tok () Term)
(declare-fun Tm_refine_5885c715bf599d471c43c6b7dcb2413b (Term Term) Term)
(declare-fun Tm_refine_c731267dd71b747abfd9fc75f6f2da81 (Term Term Term) Term)




(declare-fun Tm_arrow_62bce6f622c5bc90fd46048dee6dae55 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.explode_and; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(667,8-667,19); use=FStar.Seq.Properties.fsti(667,8-667,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Seq.Properties.explode_and.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.Seq.Properties.explode_and.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Seq.Properties.explode_and.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.Seq.Properties.explode_and.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.explode_and.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.explode_and; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(667,8-667,19); use=FStar.Seq.Properties.fsti(667,8-667,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.explode_and @x0
@x1
@x2
@x3)
(FStar.Seq.Properties.explode_and.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.explode_and @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.Seq.Properties.explode_and.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.explode_and.fuel_instrumented))

; </end encoding FStar.Seq.Properties.explode_and>


; <Start encoding FStar.Seq.Properties.pointwise_and>

(declare-fun Tm_refine_9f068c7f6ce275579028a195ac18485b (Term) Term)
(declare-fun Tm_refine_1ad818e6438a897337e89a3053cb2002 (Term Term) Term)
(declare-fun FStar.Seq.Properties.pointwise_and (Term Term Term) Term)


(declare-fun Tm_arrow_1d69c34f503e87805d9fa1b40bc9b696 () Term)
(declare-fun FStar.Seq.Properties.pointwise_and@tok () Term)



; </end encoding FStar.Seq.Properties.pointwise_and>


; <Start encoding FStar.Seq.Properties.intro_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_@tok () Term)

; </end encoding FStar.Seq.Properties.intro_of_list'>


; <Start encoding FStar.Seq.Properties.intro_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list@tok () Term)

; </end encoding FStar.Seq.Properties.intro_of_list>


; <Start encoding FStar.Seq.Properties.elim_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_@tok () Term)

; </end encoding FStar.Seq.Properties.elim_of_list'>


; <Start encoding FStar.Seq.Properties.elim_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list@tok () Term)

; </end encoding FStar.Seq.Properties.elim_of_list>


; <Start encoding FStar.Seq.Properties.sortWith>


(declare-fun FStar.Seq.Properties.sortWith (Term Term Term) Term)

(declare-fun Tm_arrow_783d577ed6adadfd234f2ce68178463f () Term)
(declare-fun FStar.Seq.Properties.sortWith@tok () Term)


; </end encoding FStar.Seq.Properties.sortWith>


; <Start encoding FStar.Seq.Properties.lemma_seq_to_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_to_list_permutation>


; <Start encoding FStar.Seq.Properties.lemma_seq_of_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_of_list_permutation>


; <Start encoding FStar.Seq.Properties.lemma_seq_of_list_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_of_list_sorted>


; <Start encoding FStar.Seq.Properties.lemma_seq_sortwith_correctness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_sortwith_correctness>


; <Start encoding FStar.Seq.Properties.sort_lseq>

(declare-fun FStar.Seq.Properties.sort_lseq (Term Term Term Term) Term)
(declare-fun Tm_refine_896d0573468d5c87de125067e75d7d47 (Term Term Term Term) Term)
(declare-fun Tm_arrow_3fb7de3746e0ee65d4a1a51ab385c639 () Term)
(declare-fun FStar.Seq.Properties.sort_lseq@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Seq.Properties.sort_lseq; Namespace FStar.Seq.Properties
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Base.compare_of_bool@tok))
:named @kick_partial_app_168a5a7933bf2aec40b9569f3322d078))

; </end encoding FStar.Seq.Properties.sort_lseq>


; <Start encoding FStar.Seq.Properties.foldr>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr@tok () Term)



(declare-fun Tm_arrow_d44e7807ff692a4b5f624a4c31f6a34b () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.foldr; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(748,8-748,13); use=FStar.Seq.Properties.fsti(748,8-748,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Seq.Properties.foldr.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.Seq.Properties.foldr.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.Seq.Properties.foldr.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.Seq.Properties.foldr.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.foldr.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.foldr; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(748,8-748,13); use=FStar.Seq.Properties.fsti(748,8-748,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Seq.Properties.foldr @x0
@x1
@x2
@x3
@x4)
(FStar.Seq.Properties.foldr.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Seq.Properties.foldr @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.Seq.Properties.foldr.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.foldr.fuel_instrumented))

; </end encoding FStar.Seq.Properties.foldr>


; <Start encoding FStar.Seq.Properties.foldr_snoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr_snoc (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr_snoc@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.foldr_snoc; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(753,8-753,18); use=FStar.Seq.Properties.fsti(753,8-753,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Seq.Properties.foldr_snoc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.Seq.Properties.foldr_snoc.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.Seq.Properties.foldr_snoc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.Seq.Properties.foldr_snoc.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.foldr_snoc.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.foldr_snoc; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(753,8-753,18); use=FStar.Seq.Properties.fsti(753,8-753,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Seq.Properties.foldr_snoc @x0
@x1
@x2
@x3
@x4)
(FStar.Seq.Properties.foldr_snoc.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Seq.Properties.foldr_snoc @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.Seq.Properties.foldr_snoc.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.foldr_snoc.fuel_instrumented))

; </end encoding FStar.Seq.Properties.foldr_snoc>


; <Start encoding FStar.Seq.Properties.map_seq>


(declare-fun FStar.Seq.Properties.map_seq (Term Term Term Term) Term)

(declare-fun Tm_arrow_5f9288474a8f301ac883b79bab9ed39c () Term)
(declare-fun FStar.Seq.Properties.map_seq@tok () Term)

; </end encoding FStar.Seq.Properties.map_seq>


; <Start encoding FStar.Seq.Properties.map_seq_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_len@tok () Term)

; </end encoding FStar.Seq.Properties.map_seq_len>


; <Start encoding FStar.Seq.Properties.map_seq_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_index (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_index@tok () Term)

; </end encoding FStar.Seq.Properties.map_seq_index>


; <Start encoding FStar.Seq.Properties.map_seq_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_append@tok () Term)

; </end encoding FStar.Seq.Properties.map_seq_append>


; End Externals for interface FStar.Seq.Properties


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Seq.Properties (842 decls; total size 76347)

;;; Start module FStar.Seq

; Externals for module FStar.Seq


; End Externals for module FStar.Seq


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Seq (3 decls; total size 5197)

;;; Start module FStar.Mul

; Externals for module FStar.Mul


; <Start encoding FStar.Mul.op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding FStar.Mul.op_Star>


; End Externals for module FStar.Mul


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Mul (8 decls; total size 5368)

;;; Start module FStar.Math.Lib

; Externals for module FStar.Math.Lib


; <Skipped FStar.Math.Lib.lemma_div_def/>


; <Start encoding FStar.Math.Lib.lemma_div_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.lemma_div_def (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.lemma_div_def@tok () Term)

; </end encoding FStar.Math.Lib.lemma_div_def>


; <Start encoding FStar.Math.Lib.mul_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.mul_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.mul_lemma@tok () Term)

; </end encoding FStar.Math.Lib.mul_lemma>


; <Start encoding FStar.Math.Lib.mul_lemma'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.mul_lemma_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.mul_lemma_@tok () Term)

; </end encoding FStar.Math.Lib.mul_lemma'>


; <Start encoding FStar.Math.Lib.mul_div_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.mul_div_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.mul_div_lemma@tok () Term)

; </end encoding FStar.Math.Lib.mul_div_lemma>


; <Skipped FStar.Math.Lib.slash_decr_axiom/>


; <Start encoding FStar.Math.Lib.slash_decr_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.slash_decr_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.slash_decr_axiom@tok () Term)

; </end encoding FStar.Math.Lib.slash_decr_axiom>


; <Start encoding FStar.Math.Lib.lemma_mul_minus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.lemma_mul_minus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.lemma_mul_minus_distr_l@tok () Term)

; </end encoding FStar.Math.Lib.lemma_mul_minus_distr_l>


; <Skipped />


; <Skipped FStar.Math.Lib.slash_star_axiom/>


; <Start encoding FStar.Math.Lib.slash_star_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.slash_star_axiom (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.slash_star_axiom@tok () Term)

; </end encoding FStar.Math.Lib.slash_star_axiom>


; <Skipped />


; <Skipped FStar.Math.Lib.log_2/>


; <Start encoding FStar.Math.Lib.log_2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Math.Lib.log_2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Math.Lib.log_2.fuel_instrumented_token () Term)
(declare-fun FStar.Math.Lib.log_2 (Term) Term)
(declare-fun FStar.Math.Lib.log_2@tok () Term)
(declare-fun Tm_arrow_195a91d0390990c5da9b9b2c7b2e9a5f () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Math.Lib.log_2; Namespace FStar.Math.Lib
(assert (! 
;; def=FStar.Math.Lib.fst(54,8-54,13); use=FStar.Math.Lib.fst(54,8-54,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (FStar.Math.Lib.log_2.fuel_instrumented (SFuel @u0)
@x1)
(FStar.Math.Lib.log_2.fuel_instrumented ZFuel
@x1))
 

:pattern ((FStar.Math.Lib.log_2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_FStar.Math.Lib.log_2.fuel_instrumented))

:named @fuel_irrelevance_FStar.Math.Lib.log_2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Math.Lib.log_2; Namespace FStar.Math.Lib
(assert (! 
;; def=FStar.Math.Lib.fst(54,8-54,13); use=FStar.Math.Lib.fst(54,8-54,13)
(forall ((@x0 Term))
 (! (= (FStar.Math.Lib.log_2 @x0)
(FStar.Math.Lib.log_2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((FStar.Math.Lib.log_2 @x0))
:qid @fuel_correspondence_FStar.Math.Lib.log_2.fuel_instrumented))

:named @fuel_correspondence_FStar.Math.Lib.log_2.fuel_instrumented))

; </end encoding FStar.Math.Lib.log_2>


; <Skipped FStar.Math.Lib.powx/>


; <Start encoding FStar.Math.Lib.powx>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Math.Lib.powx.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Math.Lib.powx.fuel_instrumented_token () Term)
(declare-fun FStar.Math.Lib.powx (Term Term) Term)
(declare-fun FStar.Math.Lib.powx@tok () Term)
(declare-fun Tm_arrow_97e79e8898be25d1baac7492eb8157a8 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Math.Lib.powx; Namespace FStar.Math.Lib
(assert (! 
;; def=FStar.Math.Lib.fst(59,8-59,12); use=FStar.Math.Lib.fst(59,8-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Math.Lib.powx.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Math.Lib.powx.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Math.Lib.powx.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Math.Lib.powx.fuel_instrumented))

:named @fuel_irrelevance_FStar.Math.Lib.powx.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Math.Lib.powx; Namespace FStar.Math.Lib
(assert (! 
;; def=FStar.Math.Lib.fst(59,8-59,12); use=FStar.Math.Lib.fst(59,8-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Math.Lib.powx @x0
@x1)
(FStar.Math.Lib.powx.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Math.Lib.powx @x0
@x1))
:qid @fuel_correspondence_FStar.Math.Lib.powx.fuel_instrumented))

:named @fuel_correspondence_FStar.Math.Lib.powx.fuel_instrumented))

; </end encoding FStar.Math.Lib.powx>


; <Skipped FStar.Math.Lib.abs/>


; <Start encoding FStar.Math.Lib.abs>

(declare-fun FStar.Math.Lib.abs (Term) Term)
(declare-fun Tm_refine_5b706f1316bc4c0722dc2171363a324f (Term) Term)
(declare-fun Tm_arrow_485462bf1365ac4f0407149110b772cd () Term)
(declare-fun FStar.Math.Lib.abs@tok () Term)


; </end encoding FStar.Math.Lib.abs>


; <Skipped FStar.Math.Lib.max/>


; <Start encoding FStar.Math.Lib.max>

(declare-fun FStar.Math.Lib.max (Term Term) Term)
(declare-fun Tm_refine_3b1de445e68d5a7cbfc9e637b6d5fe5c (Term Term) Term)
(declare-fun Tm_arrow_6cac7a49c19aab6d14a44dce4ddd50d7 () Term)
(declare-fun FStar.Math.Lib.max@tok () Term)


; </end encoding FStar.Math.Lib.max>


; <Skipped FStar.Math.Lib.min/>


; <Start encoding FStar.Math.Lib.min>

(declare-fun FStar.Math.Lib.min (Term Term) Term)
(declare-fun Tm_refine_75a39246caf92bd7ba0c54b533ac97ba (Term Term) Term)
(declare-fun Tm_arrow_f1c63d0f3ff3d4c0a4e173563f61a3ec () Term)
(declare-fun FStar.Math.Lib.min@tok () Term)


; </end encoding FStar.Math.Lib.min>


; <Skipped FStar.Math.Lib.div/>


; <Start encoding FStar.Math.Lib.div>

(declare-fun FStar.Math.Lib.div (Term Term) Term)
(declare-fun Tm_refine_2a75ac9e9041407930877285ccf479d9 (Term) Term)
(declare-fun Tm_arrow_bb819be7118d7bfb2cedbf3c6477c362 () Term)
(declare-fun FStar.Math.Lib.div@tok () Term)


; </end encoding FStar.Math.Lib.div>


; <Skipped FStar.Math.Lib.div_non_eucl/>


; <Start encoding FStar.Math.Lib.div_non_eucl>

(declare-fun FStar.Math.Lib.div_non_eucl (Term Term) Term)
(declare-fun Tm_refine_0ffeb4b35eb66c9dc7f43d49d6f24837 (Term Term) Term)
(declare-fun Tm_arrow_7c4dc753d10246d9d92341a1295260f4 () Term)
(declare-fun FStar.Math.Lib.div_non_eucl@tok () Term)


; </end encoding FStar.Math.Lib.div_non_eucl>


; <Skipped FStar.Math.Lib.shift_left/>


; <Start encoding FStar.Math.Lib.shift_left>

(declare-fun FStar.Math.Lib.shift_left (Term Term) Term)
(declare-fun Tm_refine_180a7ec928fc00449a9ff97fd83eb9f7 (Term Term) Term)
(declare-fun Tm_arrow_ebb8ce92eba15a16c00c7e434e88c84b () Term)
(declare-fun FStar.Math.Lib.shift_left@tok () Term)


; </end encoding FStar.Math.Lib.shift_left>


; <Skipped FStar.Math.Lib.arithmetic_shift_right/>


; <Start encoding FStar.Math.Lib.arithmetic_shift_right>

(declare-fun FStar.Math.Lib.arithmetic_shift_right (Term Term) Term)
(declare-fun Tm_refine_1b8188dd620bafffed7e311591823814 (Term Term) Term)
(declare-fun Tm_arrow_0d2ab070c39795db6825f9a2ab12fa9a () Term)
(declare-fun FStar.Math.Lib.arithmetic_shift_right@tok () Term)


; </end encoding FStar.Math.Lib.arithmetic_shift_right>


; <Skipped FStar.Math.Lib.signed_modulo/>


; <Start encoding FStar.Math.Lib.signed_modulo>

(declare-fun FStar.Math.Lib.signed_modulo (Term Term) Term)
(declare-fun Tm_refine_7f910f581ef6c422e545ac01d1c8b2f5 (Term Term) Term)
(declare-fun Tm_arrow_735d78cef45a99c351b2596c50444f63 () Term)
(declare-fun FStar.Math.Lib.signed_modulo@tok () Term)


; </end encoding FStar.Math.Lib.signed_modulo>


; <Skipped FStar.Math.Lib.op_Plus_Percent/>


; <Start encoding FStar.Math.Lib.op_Plus_Percent>

(declare-fun FStar.Math.Lib.op_Plus_Percent (Term Term) Term)
(declare-fun Tm_refine_d653f98e8ce399d5b7ea191c117fe516 (Term Term) Term)
(declare-fun Tm_arrow_47a9b4ba9fff686aea1b155fa584e4a2 () Term)
(declare-fun FStar.Math.Lib.op_Plus_Percent@tok () Term)


; </end encoding FStar.Math.Lib.op_Plus_Percent>


; <Skipped FStar.Math.Lib.powx_lemma1/>


; <Start encoding FStar.Math.Lib.powx_lemma1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.powx_lemma1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.powx_lemma1@tok () Term)

; </end encoding FStar.Math.Lib.powx_lemma1>


; <Skipped FStar.Math.Lib.powx_lemma2/>


; <Start encoding FStar.Math.Lib.powx_lemma2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.powx_lemma2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.powx_lemma2@tok () Term)

; </end encoding FStar.Math.Lib.powx_lemma2>


; <Skipped FStar.Math.Lib.abs_mul_lemma/>


; <Start encoding FStar.Math.Lib.abs_mul_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.abs_mul_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.abs_mul_lemma@tok () Term)

; </end encoding FStar.Math.Lib.abs_mul_lemma>


; <Skipped FStar.Math.Lib.signed_modulo_property/>


; <Start encoding FStar.Math.Lib.signed_modulo_property>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.signed_modulo_property (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.signed_modulo_property@tok () Term)

; </end encoding FStar.Math.Lib.signed_modulo_property>


; <Skipped FStar.Math.Lib.div_non_eucl_decr_lemma/>


; <Start encoding FStar.Math.Lib.div_non_eucl_decr_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.div_non_eucl_decr_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.div_non_eucl_decr_lemma@tok () Term)

; </end encoding FStar.Math.Lib.div_non_eucl_decr_lemma>


; <Skipped FStar.Math.Lib.div_non_eucl_bigger_denom_lemma/>


; <Start encoding FStar.Math.Lib.div_non_eucl_bigger_denom_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.div_non_eucl_bigger_denom_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.div_non_eucl_bigger_denom_lemma@tok () Term)

; </end encoding FStar.Math.Lib.div_non_eucl_bigger_denom_lemma>


; End Externals for module FStar.Math.Lib


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Math.Lib (158 decls; total size 16803)

;;; Start module Vale.Math.Poly2.Defs_s

; Externals for module Vale.Math.Poly2.Defs_s


; <Start encoding Vale.Math.Poly2.Defs_s.max>

(declare-fun Vale.Math.Poly2.Defs_s.max (Term Term) Term)


(declare-fun Vale.Math.Poly2.Defs_s.max@tok () Term)


; </end encoding Vale.Math.Poly2.Defs_s.max>


; <Start encoding Vale.Math.Poly2.Defs_s.valid>

(declare-fun Vale.Math.Poly2.Defs_s.valid (Term) Term)
(declare-fun Tm_arrow_ef46cdfdea724e0624f2aed967ef4ef7 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.valid@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.valid>


; <Start encoding Vale.Math.Poly2.Defs_s.poly>

(declare-fun Vale.Math.Poly2.Defs_s.poly () Term)
(declare-fun Tm_refine_f57a9e437e59d89f626741292bcb316f () Term)

; </end encoding Vale.Math.Poly2.Defs_s.poly>


; <Start encoding Vale.Math.Poly2.Defs_s.degree>

(declare-fun Vale.Math.Poly2.Defs_s.degree (Term) Term)
(declare-fun Tm_arrow_34faf5816569a8b8520119b0eb3fff28 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.degree@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.degree>


; <Start encoding Vale.Math.Poly2.Defs_s.zero>

(declare-fun Vale.Math.Poly2.Defs_s.zero (Dummy_sort) Term)

; </end encoding Vale.Math.Poly2.Defs_s.zero>


; <Start encoding Vale.Math.Poly2.Defs_s.one>

(declare-fun Vale.Math.Poly2.Defs_s.one (Dummy_sort) Term)

; </end encoding Vale.Math.Poly2.Defs_s.one>


; <Start encoding Vale.Math.Poly2.Defs_s.monomial>

(declare-fun Vale.Math.Poly2.Defs_s.monomial (Term) Term)
(declare-fun Tm_arrow_eaee940ead875d215407ddb591cb71c9 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.monomial@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.monomial>


; <Start encoding Vale.Math.Poly2.Defs_s.lshift>

(declare-fun Vale.Math.Poly2.Defs_s.lshift (Term Term) Term)
(declare-fun Tm_arrow_1955fde5f05d1e6f2bd3cfc93ba17358 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.lshift@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.lshift>


; <Start encoding Vale.Math.Poly2.Defs_s.rshift>

(declare-fun Vale.Math.Poly2.Defs_s.rshift (Term Term) Term)

(declare-fun Vale.Math.Poly2.Defs_s.rshift@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.rshift>


; <Start encoding Vale.Math.Poly2.Defs_s.shift>

(declare-fun Vale.Math.Poly2.Defs_s.shift (Term Term) Term)
(declare-fun Tm_arrow_e2878f8a12e31255dcf8873ad011d4c3 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.shift@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.shift>


; <Start encoding Vale.Math.Poly2.Defs_s.poly_index>

(declare-fun Vale.Math.Poly2.Defs_s.poly_index (Term Term) Term)
(declare-fun Tm_arrow_24e885e6455d3b15b3ea0660054abea4 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.poly_index@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.poly_index>


; <Start encoding Vale.Math.Poly2.Defs_s.op_String_Access>

(declare-fun Vale.Math.Poly2.Defs_s.op_String_Access (Term Term) Term)

(declare-fun Vale.Math.Poly2.Defs_s.op_String_Access@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.op_String_Access>


; <Start encoding Vale.Math.Poly2.Defs_s.to_seq>

(declare-fun Vale.Math.Poly2.Defs_s.to_seq (Term Term) Term)
(declare-fun Tm_refine_e01b43bbe2f3ac6630fc3c2e0bee3bce (Term Term) Term)
(declare-fun Tm_arrow_b422500d92a29d8a2186681f9d786909 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.to_seq@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Math.Poly2.Defs_s.to_seq; Namespace Vale.Math.Poly2.Defs_s
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.Math.Poly2.Defs_s.poly_index@tok))
:named @kick_partial_app_9ceedfed6ea99122bbbfc99002fffe66))

; </end encoding Vale.Math.Poly2.Defs_s.to_seq>


; <Start encoding Vale.Math.Poly2.Defs_s.of_seq>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented_token () Term)
(declare-fun Vale.Math.Poly2.Defs_s.of_seq (Term) Term)
(declare-fun Vale.Math.Poly2.Defs_s.of_seq@tok () Term)
(declare-fun Tm_refine_1df65257096079d187d68ee028bb4224 (Term) Term)

(declare-fun Tm_arrow_f60ee6e2904438232f945aecc7348b92 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.Math.Poly2.Defs_s.of_seq; Namespace Vale.Math.Poly2.Defs_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(53,8-53,14); use=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(53,8-53,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented (SFuel @u0)
@x1)
(Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented ZFuel
@x1))
 

:pattern ((Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented))

:named @fuel_irrelevance_Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.Math.Poly2.Defs_s.of_seq; Namespace Vale.Math.Poly2.Defs_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(53,8-53,14); use=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(53,8-53,14)
(forall ((@x0 Term))
 (! (= (Vale.Math.Poly2.Defs_s.of_seq @x0)
(Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Vale.Math.Poly2.Defs_s.of_seq @x0))
:qid @fuel_correspondence_Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented))

:named @fuel_correspondence_Vale.Math.Poly2.Defs_s.of_seq.fuel_instrumented))

; </end encoding Vale.Math.Poly2.Defs_s.of_seq>


; <Start encoding Vale.Math.Poly2.Defs_s.of_fun>

(declare-fun Tm_arrow_67d1eb0e2b2b0432bd883bf79e9b388c () Term)
(declare-fun Vale.Math.Poly2.Defs_s.of_fun (Term Term) Term)

(declare-fun Tm_refine_b7f59fbe639567c5ab8ed10579365264 (Term Term) Term)
(declare-fun Tm_arrow_3f151895991dbbf3647552ec5940bb9a () Term)
(declare-fun Vale.Math.Poly2.Defs_s.of_fun@tok () Term)


; </end encoding Vale.Math.Poly2.Defs_s.of_fun>


; <Start encoding Vale.Math.Poly2.Defs_s.reverse>

(declare-fun Vale.Math.Poly2.Defs_s.reverse (Term Term) Term)
(declare-fun Tm_refine_b1d28f840de949bc346d201a47c0cfe3 (Term Term) Term)
(declare-fun Tm_arrow_32d4d99b9a9a89ed68beca7c7bd419a3 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.reverse@tok () Term)


; </end encoding Vale.Math.Poly2.Defs_s.reverse>


; <Start encoding Vale.Math.Poly2.Defs_s.add>

(declare-fun Vale.Math.Poly2.Defs_s.add (Term Term) Term)
(declare-fun Tm_refine_06d278fd5617c2fb19b59f968ef9f2ee (Term Term) Term)
(declare-fun Tm_arrow_3553d5205e2645d99badd9e6b991ddb5 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.add@tok () Term)


; </end encoding Vale.Math.Poly2.Defs_s.add>


; <Start encoding Vale.Math.Poly2.Defs_s.sum_of_bools>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented_token () Term)
(declare-fun Vale.Math.Poly2.Defs_s.sum_of_bools (Term Term Term) Term)
(declare-fun Vale.Math.Poly2.Defs_s.sum_of_bools@tok () Term)
(declare-fun Tm_arrow_2b00b574e3c859da902fc1b8ce85c0f1 () Term)


(declare-fun Tm_arrow_4ff33ff977b47f7d785e0ef3bb19d079 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.Math.Poly2.Defs_s.sum_of_bools; Namespace Vale.Math.Poly2.Defs_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(100,8-100,20); use=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(100,8-100,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented))

:named @fuel_irrelevance_Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.Math.Poly2.Defs_s.sum_of_bools; Namespace Vale.Math.Poly2.Defs_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(100,8-100,20); use=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(100,8-100,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.Math.Poly2.Defs_s.sum_of_bools @x0
@x1
@x2)
(Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((Vale.Math.Poly2.Defs_s.sum_of_bools @x0
@x1
@x2))
:qid @fuel_correspondence_Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented))

:named @fuel_correspondence_Vale.Math.Poly2.Defs_s.sum_of_bools.fuel_instrumented))

; </end encoding Vale.Math.Poly2.Defs_s.sum_of_bools>


; <Start encoding Vale.Math.Poly2.Defs_s.mul_element_fun>

(declare-fun Vale.Math.Poly2.Defs_s.mul_element_fun (Term Term Term Term) Term)
(declare-fun Tm_arrow_5368a5dcf3cc1245d9de2513f7e404d6 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.mul_element_fun@tok () Term)

; </end encoding Vale.Math.Poly2.Defs_s.mul_element_fun>


; <Start encoding Vale.Math.Poly2.Defs_s.mul_element>

(declare-fun Vale.Math.Poly2.Defs_s.mul_element (Term Term Term) Term)
(declare-fun Tm_arrow_6d231ca09627adca10c1d0b028294c28 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.mul_element@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Math.Poly2.Defs_s.mul_element; Namespace Vale.Math.Poly2.Defs_s
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.Math.Poly2.Defs_s.mul_element_fun@tok))
:named @kick_partial_app_487858f527e6df466bed85820a253854))

; </end encoding Vale.Math.Poly2.Defs_s.mul_element>


; <Start encoding Vale.Math.Poly2.Defs_s.mul>

(declare-fun Vale.Math.Poly2.Defs_s.mul (Term Term) Term)
(declare-fun Tm_refine_fd244d6c9e4b35304d782c4ee6d82cfb (Term Term) Term)
(declare-fun Tm_arrow_abb17daf988b13d261efe2b197bf1758 () Term)
(declare-fun Vale.Math.Poly2.Defs_s.mul@tok () Term)


; </end encoding Vale.Math.Poly2.Defs_s.mul>


; <Start encoding Vale.Math.Poly2.Defs_s.divmod>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented_token () Term)
(declare-fun Vale.Math.Poly2.Defs_s.divmod (Term Term) Term)
(declare-fun Vale.Math.Poly2.Defs_s.divmod@tok () Term)
(declare-fun Tm_refine_919a8154a884fef643f87583005a7c0a () Term)


(declare-fun Tm_arrow_c1e2e35c902272f4a33642865e7450f6 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.Math.Poly2.Defs_s.divmod; Namespace Vale.Math.Poly2.Defs_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(122,8-122,14); use=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(122,8-122,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented))

:named @fuel_irrelevance_Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.Math.Poly2.Defs_s.divmod; Namespace Vale.Math.Poly2.Defs_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(122,8-122,14); use=/home/guido/r/everest/hacl-star/vale/specs/math/Vale.Math.Poly2.Defs_s.fst(122,8-122,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.Math.Poly2.Defs_s.divmod @x0
@x1)
(Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.Math.Poly2.Defs_s.divmod @x0
@x1))
:qid @fuel_correspondence_Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented))

:named @fuel_correspondence_Vale.Math.Poly2.Defs_s.divmod.fuel_instrumented))

; </end encoding Vale.Math.Poly2.Defs_s.divmod>


; <Start encoding Vale.Math.Poly2.Defs_s.div>


(declare-fun Vale.Math.Poly2.Defs_s.div (Term Term) Term)

(declare-fun Tm_arrow_4d00a28e56c19b078dee0db06114102f () Term)
(declare-fun Vale.Math.Poly2.Defs_s.div@tok () Term)


; </end encoding Vale.Math.Poly2.Defs_s.div>


; <Start encoding Vale.Math.Poly2.Defs_s.mod>


(declare-fun Vale.Math.Poly2.Defs_s.mod (Term Term) Term)


(declare-fun Vale.Math.Poly2.Defs_s.mod@tok () Term)


; </end encoding Vale.Math.Poly2.Defs_s.mod>


; End Externals for module Vale.Math.Poly2.Defs_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.Math.Poly2.Defs_s (161 decls; total size 17932)

;;; Start interface Vale.Math.Poly2_s

; Externals for interface Vale.Math.Poly2_s


; <Start encoding Vale.Math.Poly2_s.poly>

(declare-fun Vale.Math.Poly2_s.poly (Dummy_sort) Term)

; </end encoding Vale.Math.Poly2_s.poly>


; <Start encoding Vale.Math.Poly2_s.degree>

(declare-fun Vale.Math.Poly2_s.degree (Term) Term)
(declare-fun Tm_arrow_de7cae3a13efdd1c04bcc63b2a0986c3 () Term)
(declare-fun Vale.Math.Poly2_s.degree@tok () Term)

; </end encoding Vale.Math.Poly2_s.degree>


; <Start encoding Vale.Math.Poly2_s.zero>

(declare-fun Vale.Math.Poly2_s.zero (Dummy_sort) Term)

; </end encoding Vale.Math.Poly2_s.zero>


; <Start encoding Vale.Math.Poly2_s.one>

(declare-fun Vale.Math.Poly2_s.one (Dummy_sort) Term)

; </end encoding Vale.Math.Poly2_s.one>


; <Start encoding Vale.Math.Poly2_s.monomial>

(declare-fun Vale.Math.Poly2_s.monomial (Term) Term)
(declare-fun Tm_arrow_e8acf50964af750914b3a6e1a8b4dbc8 () Term)
(declare-fun Vale.Math.Poly2_s.monomial@tok () Term)

; </end encoding Vale.Math.Poly2_s.monomial>


; <Start encoding Vale.Math.Poly2_s.shift>

(declare-fun Vale.Math.Poly2_s.shift (Term Term) Term)
(declare-fun Tm_arrow_23c7df0e0acf995b955b3f59004c04f2 () Term)
(declare-fun Vale.Math.Poly2_s.shift@tok () Term)

; </end encoding Vale.Math.Poly2_s.shift>


; <Start encoding Vale.Math.Poly2_s.reverse>

(declare-fun Vale.Math.Poly2_s.reverse (Term Term) Term)
(declare-fun Tm_arrow_b0729fc4ebccd3da54618c60cde17f87 () Term)
(declare-fun Vale.Math.Poly2_s.reverse@tok () Term)

; </end encoding Vale.Math.Poly2_s.reverse>


; <Start encoding Vale.Math.Poly2_s.poly_index>

(declare-fun Vale.Math.Poly2_s.poly_index (Term Term) Term)
(declare-fun Tm_arrow_c0fc0e78f31f7a327f67d8d8e88ab94b () Term)
(declare-fun Vale.Math.Poly2_s.poly_index@tok () Term)

; </end encoding Vale.Math.Poly2_s.poly_index>


; <Start encoding Vale.Math.Poly2_s.op_String_Access>

(declare-fun Vale.Math.Poly2_s.op_String_Access (Term Term) Term)

(declare-fun Vale.Math.Poly2_s.op_String_Access@tok () Term)

; </end encoding Vale.Math.Poly2_s.op_String_Access>


; <Start encoding Vale.Math.Poly2_s.to_seq>

(declare-fun Vale.Math.Poly2_s.to_seq (Term Term) Term)
(declare-fun Tm_refine_d3571ca27e8115116dfd2d473dcbb7c0 (Term Term) Term)
(declare-fun Tm_arrow_b1ffd5b8ac2c3dc3fa371001ba1352da () Term)
(declare-fun Vale.Math.Poly2_s.to_seq@tok () Term)


; </end encoding Vale.Math.Poly2_s.to_seq>


; <Start encoding Vale.Math.Poly2_s.of_seq>

(declare-fun Vale.Math.Poly2_s.of_seq (Term) Term)
(declare-fun Tm_refine_314f4939256b9382ebd3cc0ef0d441fb (Term) Term)
(declare-fun Tm_arrow_701d8cf5dfd05d8965d425b3d1680626 () Term)
(declare-fun Vale.Math.Poly2_s.of_seq@tok () Term)


; </end encoding Vale.Math.Poly2_s.of_seq>


; <Start encoding Vale.Math.Poly2_s.of_fun>


(declare-fun Vale.Math.Poly2_s.of_fun (Term Term) Term)

(declare-fun Tm_refine_fe6ca960360a1d9d67a3dd4cf32a29b0 (Term Term) Term)
(declare-fun Tm_arrow_f54f4ad0911b3e220c4c370026eb79ef () Term)
(declare-fun Vale.Math.Poly2_s.of_fun@tok () Term)


; </end encoding Vale.Math.Poly2_s.of_fun>


; <Start encoding Vale.Math.Poly2_s.add>

(declare-fun Vale.Math.Poly2_s.add (Term Term) Term)
(declare-fun Tm_arrow_0df5a4dfd34ed2d154864be55d184605 () Term)
(declare-fun Vale.Math.Poly2_s.add@tok () Term)

; </end encoding Vale.Math.Poly2_s.add>


; <Start encoding Vale.Math.Poly2_s.mul>

(declare-fun Vale.Math.Poly2_s.mul (Term Term) Term)

(declare-fun Vale.Math.Poly2_s.mul@tok () Term)

; </end encoding Vale.Math.Poly2_s.mul>


; <Start encoding Vale.Math.Poly2_s.div>

(declare-fun Vale.Math.Poly2_s.div (Term Term) Term)

(declare-fun Vale.Math.Poly2_s.div@tok () Term)

; </end encoding Vale.Math.Poly2_s.div>


; <Start encoding Vale.Math.Poly2_s.mod>

(declare-fun Vale.Math.Poly2_s.mod (Term Term) Term)

(declare-fun Vale.Math.Poly2_s.mod@tok () Term)

; </end encoding Vale.Math.Poly2_s.mod>


; <Start encoding Vale.Math.Poly2_s.coerce>

(declare-fun Tm_refine_754b00004f4a881ff74d076ab276dfe1 (Term Term) Term)
(declare-fun Vale.Math.Poly2_s.coerce (Term Term Term) Term)

(declare-fun Tm_arrow_b0d5ef0913a0bd9e084f24fb97f71f79 () Term)
(declare-fun Vale.Math.Poly2_s.coerce@tok () Term)


; </end encoding Vale.Math.Poly2_s.coerce>


; <Start encoding Vale.Math.Poly2_s.to_poly>

(declare-fun Tm_refine_a7c3f2e9e33ec20bdfd001fa56a506c1 () Term)
(declare-fun Vale.Math.Poly2_s.to_poly (Term) Term)

(declare-fun Tm_arrow_ce943d1796c0370ca6c658b98680ff81 () Term)
(declare-fun Vale.Math.Poly2_s.to_poly@tok () Term)


; </end encoding Vale.Math.Poly2_s.to_poly>


; <Start encoding Vale.Math.Poly2_s.of_poly>

(declare-fun Tm_refine_8288c850dec39f8f1aa111723dd558b3 () Term)
(declare-fun Vale.Math.Poly2_s.of_poly (Term) Term)

(declare-fun Tm_arrow_c54221499e957ab2e4229ba91108d308 () Term)
(declare-fun Vale.Math.Poly2_s.of_poly@tok () Term)


; </end encoding Vale.Math.Poly2_s.of_poly>


; <Start encoding Vale.Math.Poly2_s.reveal_defs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2_s.reveal_defs (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2_s.reveal_defs@tok () Term)

; </end encoding Vale.Math.Poly2_s.reveal_defs>


; End Externals for interface Vale.Math.Poly2_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Math.Poly2_s (113 decls; total size 10352)

;;; Start interface Vale.Math.Poly2

; Externals for interface Vale.Math.Poly2


; <Start encoding Vale.Math.Poly2.op_Plus_Dot>

(declare-fun Vale.Math.Poly2.op_Plus_Dot (Term Term) Term)

(declare-fun Vale.Math.Poly2.op_Plus_Dot@tok () Term)

; </end encoding Vale.Math.Poly2.op_Plus_Dot>


; <Start encoding Vale.Math.Poly2.op_Star_Dot>

(declare-fun Vale.Math.Poly2.op_Star_Dot (Term Term) Term)

(declare-fun Vale.Math.Poly2.op_Star_Dot@tok () Term)

; </end encoding Vale.Math.Poly2.op_Star_Dot>


; <Start encoding Vale.Math.Poly2.op_Slash_Dot>

(declare-fun Vale.Math.Poly2.op_Slash_Dot (Term Term) Term)

(declare-fun Vale.Math.Poly2.op_Slash_Dot@tok () Term)

; </end encoding Vale.Math.Poly2.op_Slash_Dot>


; <Start encoding Vale.Math.Poly2.op_Percent_Dot>

(declare-fun Vale.Math.Poly2.op_Percent_Dot (Term Term) Term)

(declare-fun Vale.Math.Poly2.op_Percent_Dot@tok () Term)

; </end encoding Vale.Math.Poly2.op_Percent_Dot>


; <Start encoding Vale.Math.Poly2.size>

(declare-fun Vale.Math.Poly2.size (Term) Term)

(declare-fun Vale.Math.Poly2.size@tok () Term)

; </end encoding Vale.Math.Poly2.size>


; <Start encoding Vale.Math.Poly2.poly_and>

(declare-fun Vale.Math.Poly2.poly_and (Term Term) Term)

(declare-fun Vale.Math.Poly2.poly_and@tok () Term)

; </end encoding Vale.Math.Poly2.poly_and>


; <Start encoding Vale.Math.Poly2.poly_or>

(declare-fun Vale.Math.Poly2.poly_or (Term Term) Term)

(declare-fun Vale.Math.Poly2.poly_or@tok () Term)

; </end encoding Vale.Math.Poly2.poly_or>


; <Start encoding Vale.Math.Poly2.mask>

(declare-fun Vale.Math.Poly2.mask (Term Term) Term)

(declare-fun Vale.Math.Poly2.mask@tok () Term)

; </end encoding Vale.Math.Poly2.mask>


; <Start encoding Vale.Math.Poly2.swap>

(declare-fun Vale.Math.Poly2.swap (Term Term) Term)

(declare-fun Vale.Math.Poly2.swap@tok () Term)

; </end encoding Vale.Math.Poly2.swap>


; <Start encoding Vale.Math.Poly2.ones>

(declare-fun Vale.Math.Poly2.ones (Term) Term)

(declare-fun Vale.Math.Poly2.ones@tok () Term)

; </end encoding Vale.Math.Poly2.ones>


; <Start encoding Vale.Math.Poly2.power>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.Math.Poly2.power.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.Math.Poly2.power.fuel_instrumented_token () Term)
(declare-fun Vale.Math.Poly2.power (Term Term) Term)
(declare-fun Vale.Math.Poly2.power@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.Math.Poly2.power; Namespace Vale.Math.Poly2
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/math/Vale.Math.Poly2.fsti(28,8-28,13); use=/home/guido/r/everest/hacl-star/vale/code/lib/math/Vale.Math.Poly2.fsti(28,8-28,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.Math.Poly2.power.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.Math.Poly2.power.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.Math.Poly2.power.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.Math.Poly2.power.fuel_instrumented))

:named @fuel_irrelevance_Vale.Math.Poly2.power.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.Math.Poly2.power; Namespace Vale.Math.Poly2
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/math/Vale.Math.Poly2.fsti(28,8-28,13); use=/home/guido/r/everest/hacl-star/vale/code/lib/math/Vale.Math.Poly2.fsti(28,8-28,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.Math.Poly2.power @x0
@x1)
(Vale.Math.Poly2.power.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.Math.Poly2.power @x0
@x1))
:qid @fuel_correspondence_Vale.Math.Poly2.power.fuel_instrumented))

:named @fuel_correspondence_Vale.Math.Poly2.power.fuel_instrumented))

; </end encoding Vale.Math.Poly2.power>


; <Start encoding Vale.Math.Poly2.lemma_degree_at_least>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_degree_at_least (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_degree_at_least@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_degree_at_least>


; <Start encoding Vale.Math.Poly2.lemma_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_equal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_equal@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_equal>


; <Start encoding Vale.Math.Poly2.lemma_index_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_index_i (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_index_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_index_i>


; <Start encoding Vale.Math.Poly2.lemma_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_degree (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_degree@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_degree>


; <Start encoding Vale.Math.Poly2.lemma_zero_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_zero_define_i (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_zero_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_zero_define_i>


; <Start encoding Vale.Math.Poly2.lemma_one_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_one_define_i (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_one_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_one_define_i>


; <Start encoding Vale.Math.Poly2.lemma_monomial_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_monomial_define_i (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_monomial_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_monomial_define_i>


; <Start encoding Vale.Math.Poly2.lemma_shift_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_shift_define_i (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_shift_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_shift_define_i>


; <Start encoding Vale.Math.Poly2.lemma_and_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_and_define_i (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_and_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_and_define_i>


; <Start encoding Vale.Math.Poly2.lemma_or_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_or_define_i (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_or_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_or_define_i>


; <Start encoding Vale.Math.Poly2.lemma_mask_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mask_define_i (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mask_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mask_define_i>


; <Start encoding Vale.Math.Poly2.lemma_ones_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_ones_define_i (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_ones_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_ones_define_i>


; <Start encoding Vale.Math.Poly2.lemma_reverse_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_reverse_define_i (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_reverse_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_reverse_define_i>


; <Start encoding Vale.Math.Poly2.lemma_add_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_add_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_add_zero@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_add_zero>


; <Start encoding Vale.Math.Poly2.lemma_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_add_cancel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_add_cancel@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_add_cancel>


; <Start encoding Vale.Math.Poly2.lemma_add_cancel_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_add_cancel_eq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_add_cancel_eq@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_add_cancel_eq>


; <Start encoding Vale.Math.Poly2.lemma_add_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_add_commute (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_add_commute@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_add_commute>


; <Start encoding Vale.Math.Poly2.lemma_add_associate>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_add_associate (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_add_associate@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_add_associate>


; <Start encoding Vale.Math.Poly2.lemma_add_define_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_add_define_i (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_add_define_i@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_add_define_i>


; <Start encoding Vale.Math.Poly2.lemma_add_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_add_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_add_degree@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_add_degree>


; <Start encoding Vale.Math.Poly2.lemma_mul_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_zero@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mul_zero>


; <Start encoding Vale.Math.Poly2.lemma_mul_one>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_one (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_one@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mul_one>


; <Start encoding Vale.Math.Poly2.lemma_mul_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_commute (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_commute@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mul_commute>


; <Start encoding Vale.Math.Poly2.lemma_mul_associate>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_associate (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_associate@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mul_associate>


; <Start encoding Vale.Math.Poly2.lemma_mul_distribute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_distribute (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_distribute@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mul_distribute>


; <Start encoding Vale.Math.Poly2.lemma_mul_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_degree@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mul_degree>


; <Start encoding Vale.Math.Poly2.lemma_mul_reverse>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_reverse (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mul_reverse@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mul_reverse>


; <Start encoding Vale.Math.Poly2.lemma_shift_is_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_shift_is_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_shift_is_mul@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_shift_is_mul>


; <Start encoding Vale.Math.Poly2.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_div_mod@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_div_mod>


; <Start encoding Vale.Math.Poly2.lemma_div_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_div_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_div_degree@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_div_degree>


; <Start encoding Vale.Math.Poly2.lemma_mod_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.lemma_mod_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.lemma_mod_degree@tok () Term)

; </end encoding Vale.Math.Poly2.lemma_mod_degree>


; End Externals for interface Vale.Math.Poly2


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Math.Poly2 (186 decls; total size 19985)

;;; Start interface Vale.Math.Poly2.Lemmas

; Externals for interface Vale.Math.Poly2.Lemmas


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_pointwise_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_pointwise_equal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_pointwise_equal@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_pointwise_equal>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_index (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_index@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_index>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_index_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_index_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_index_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_index_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_zero_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_zero_define (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_zero_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_zero_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_one_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_one_define (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_one_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_one_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_monomial_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_monomial_define (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_monomial_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_monomial_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_monomial_define_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_monomial_define_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_monomial_define_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_monomial_define_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_ones_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_ones_define (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_ones_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_ones_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_ones_define_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_ones_define_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_ones_define_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_ones_define_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_define (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_define_forward>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_define_forward (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_define_forward@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_define_forward>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_define_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_define_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_define_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_define_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_and_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_define (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_and_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_and_define_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_define_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_define_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_and_define_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_or_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_define (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_or_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_or_define_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_define_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_define_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_or_define_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mask_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mask_define (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mask_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mask_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mask_define_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mask_define_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mask_define_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mask_define_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_reverse_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_reverse_define (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_reverse_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_reverse_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_reverse_define_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_reverse_define_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_reverse_define_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_reverse_define_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_degree_negative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_degree_negative (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_degree_negative@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_degree_negative>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_degree_is>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_degree_is (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_degree_is@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_degree_is>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_zero_degree>

(declare-fun Vale.Math.Poly2.Lemmas.lemma_zero_degree () Term)
(declare-fun Tm_refine_6c3579831eb81025494abc2bedea1303 () Term)


; </end encoding Vale.Math.Poly2.Lemmas.lemma_zero_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_one_degree>

(declare-fun Vale.Math.Poly2.Lemmas.lemma_one_degree () Term)
(declare-fun Tm_refine_aaa8221de098e46cfe83e5c3439e6ce8 () Term)


; </end encoding Vale.Math.Poly2.Lemmas.lemma_one_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_monomial_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_monomial_degree (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_monomial_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_monomial_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_ones_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_ones_degree (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_ones_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_ones_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_and_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_and_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_or_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_or_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mask_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mask_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mask_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mask_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_reverse_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_reverse_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_reverse_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_reverse_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_of_list_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_of_list_degree (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_of_list_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_of_list_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_add_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_define (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_add_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_add_define_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_define_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_define_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_add_define_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_add_zero_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_zero_right (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_zero_right@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_add_zero_right>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_add_zero_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_zero_left (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_zero_left@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_add_zero_left>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_add_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_add_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_bitwise_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_bitwise_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_bitwise_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_bitwise_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_monomial_add_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_monomial_add_degree (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_monomial_add_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_monomial_add_degree>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_and_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_zero@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_and_zero>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_and_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_ones (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_ones@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_and_ones>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_and_consts>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_consts (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_and_consts@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_and_consts>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_or_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_zero@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_or_zero>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_or_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_ones (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_ones@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_or_ones>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_or_consts>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_consts (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_or_consts@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_or_consts>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mul_distribute_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_distribute_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_distribute_left@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mul_distribute_left>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mul_distribute_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_distribute_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_distribute_right@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mul_distribute_right>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mul_smaller_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_smaller_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_smaller_is_zero@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mul_smaller_is_zero>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mul_monomials>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_monomials (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_monomials@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mul_monomials>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_add_reverse>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_reverse (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_add_reverse@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_add_reverse>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mul_reverse_shift_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_reverse_shift_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_reverse_shift_1@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mul_reverse_shift_1>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_is_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_is_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_is_mul_right@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_is_mul_right>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_is_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_is_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_is_mul_left@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_is_mul_left>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_shift>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_shift (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_shift@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_shift>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mul_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mul_all@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mul_all>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mod_distribute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_distribute (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_distribute@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mod_distribute>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_div_mod_unique>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_div_mod_unique (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_div_mod_unique@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_div_mod_unique>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_div_mod_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_div_mod_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_div_mod_exact@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_div_mod_exact>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mod_small>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_small (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_small@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mod_small>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mod_mod>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mod_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_cancel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_cancel@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mod_cancel>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mod_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_mul_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_mul_mod@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mod_mul_mod>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mod_mul_mod_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_mul_mod_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_mul_mod_right@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mod_mul_mod_right>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_mod@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_mod>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mod_reduce>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_reduce (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_reduce@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mod_reduce>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_split_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_split_define (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_split_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_split_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_split_define_forward>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_split_define_forward (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_split_define_forward@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_split_define_forward>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_combine_define>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_combine_define (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_combine_define@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_combine_define>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mask_is_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mask_is_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mask_is_mod@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mask_is_mod>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_shift_is_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_is_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_shift_is_div@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_shift_is_div>


; <Start encoding Vale.Math.Poly2.Lemmas.lemma_mod_monomial>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_monomial (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Lemmas.lemma_mod_monomial@tok () Term)

; </end encoding Vale.Math.Poly2.Lemmas.lemma_mod_monomial>


; End Externals for interface Vale.Math.Poly2.Lemmas


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Math.Poly2.Lemmas (289 decls; total size 32523)

;;; Start interface FStar.Sealed

; Externals for interface FStar.Sealed


; <Start encoding FStar.Sealed.sealed>

(declare-fun FStar.Sealed.sealed (Term) Term)

(declare-fun FStar.Sealed.sealed@tok () Term)

; </end encoding FStar.Sealed.sealed>


; <Start encoding FStar.Sealed.sealed_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.sealed_singl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.sealed_singl@tok () Term)

; </end encoding FStar.Sealed.sealed_singl>


; <Start encoding FStar.Sealed.seal>

(declare-fun FStar.Sealed.seal (Term Term) Term)
(declare-fun Tm_arrow_202c0385508095b22536f7b176783182 () Term)
(declare-fun FStar.Sealed.seal@tok () Term)

; </end encoding FStar.Sealed.seal>


; End Externals for interface FStar.Sealed


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Sealed (17 decls; total size 5945)

;;; Start interface FStar.Range

; Externals for interface FStar.Range


; <Start encoding FStar.Range.__range>

(declare-fun FStar.Range.__range () Term)

; </end encoding FStar.Range.__range>


; <Start encoding FStar.Range.range>

(declare-fun FStar.Range.range () Term)

; </end encoding FStar.Range.range>


; <Start encoding FStar.Range.range_0>

(declare-fun FStar.Range.range_0 (Dummy_sort) Term)

; </end encoding FStar.Range.range_0>


; <Start encoding FStar.Range.mk_range>

(declare-fun FStar.Range.mk_range (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2d3d853349c0a35c0e0c8d13086384ea () Term)
(declare-fun FStar.Range.mk_range@tok () Term)

; </end encoding FStar.Range.mk_range>


; <Start encoding FStar.Range.labeled>

(declare-fun FStar.Range.labeled (Term Term Term) Term)
(declare-fun Tm_arrow_ab5899212fc4c148181589be7fd78af1 () Term)
(declare-fun FStar.Range.labeled@tok () Term)

; </end encoding FStar.Range.labeled>


; End Externals for interface FStar.Range


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Range (22 decls; total size 6088)

;;; Start module FStar.Preorder

; Externals for module FStar.Preorder


; <Start encoding FStar.Preorder.relation>

(declare-fun FStar.Preorder.relation (Term) Term)

(declare-fun FStar.Preorder.relation@tok () Term)
(declare-fun Tm_arrow_a19f9d49348d4e0038f0ded87d87802f (Term) Term)

; </end encoding FStar.Preorder.relation>


; <Start encoding FStar.Preorder.predicate>

(declare-fun FStar.Preorder.predicate (Term) Term)

(declare-fun FStar.Preorder.predicate@tok () Term)


; </end encoding FStar.Preorder.predicate>


; <Start encoding FStar.Preorder.reflexive>

(declare-fun FStar.Preorder.reflexive (Term Term) Term)
(declare-fun Tm_arrow_8e677a33afbeb812aa3779b7bdd0131c () Term)
(declare-fun FStar.Preorder.reflexive@tok () Term)

(declare-fun Tm_abs_041ca30bb30651295f49214aabfc20e1 (Term Term) Term)

; </end encoding FStar.Preorder.reflexive>


; <Start encoding FStar.Preorder.transitive>

(declare-fun FStar.Preorder.transitive (Term Term) Term)

(declare-fun FStar.Preorder.transitive@tok () Term)

(declare-fun Tm_abs_525ac99f317c80c2a25889a544a8753a (Term Term Term Term) Term)

(declare-fun Tm_abs_20d4094a6595eea2d6f8dba526584b13 (Term Term Term) Term)

(declare-fun Tm_abs_fe51396746e5c4e834cef57991c4de56 (Term Term) Term)

; </end encoding FStar.Preorder.transitive>


; <Start encoding FStar.Preorder.preorder_rel>

(declare-fun FStar.Preorder.preorder_rel (Term Term) Term)

(declare-fun FStar.Preorder.preorder_rel@tok () Term)

; </end encoding FStar.Preorder.preorder_rel>


; <Start encoding FStar.Preorder.preorder>

(declare-fun FStar.Preorder.preorder (Term) Term)

(declare-fun FStar.Preorder.preorder@tok () Term)
(declare-fun Tm_refine_bd10f09297e0e7dc08314f7d9211801c (Term) Term)

; </end encoding FStar.Preorder.preorder>


; <Start encoding FStar.Preorder.stable>


(declare-fun FStar.Preorder.stable (Term Term Term) Term)

(declare-fun Tm_arrow_88036d0811eee3361efd6229bae2556d () Term)
(declare-fun FStar.Preorder.stable@tok () Term)


(declare-fun Tm_abs_cd75e79d2823f61d656a9d90e99d6551 (Term Term Term Term) Term)

(declare-fun Tm_abs_c6795a80dc788b30d6c7864438942482 (Term Term Term) Term)

; </end encoding FStar.Preorder.stable>


; End Externals for module FStar.Preorder


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Preorder (56 decls; total size 7315)

;;; Start interface FStar.Calc

; Externals for interface FStar.Calc


; <Start encoding FStar.Calc.calc_chain>

(declare-fun FStar.Calc.calc_chain (Term Term Term Term) Term)
(declare-fun Tm_arrow_10ae2c328e1918eb5ddde4274ac6d32a () Term)
(declare-fun FStar.Calc.calc_chain@tok () Term)

; </end encoding FStar.Calc.calc_chain>


; <Start encoding FStar.Calc.calc_chain_related>

(declare-fun FStar.Calc.calc_chain_related (Term Term Term Term) Term)

(declare-fun FStar.Calc.calc_chain_related@tok () Term)

; </end encoding FStar.Calc.calc_chain_related>


; <Start encoding FStar.Calc.calc_chain_compatible>

(declare-fun FStar.Calc.calc_chain_compatible (Term Term Term) Term)
(declare-fun Tm_arrow_5d25af94b872513cc464e94bbc6a8348 () Term)
(declare-fun FStar.Calc.calc_chain_compatible@tok () Term)

; </end encoding FStar.Calc.calc_chain_compatible>


; <Start encoding FStar.Calc.calc_pack>

(declare-fun FStar.Calc.calc_pack (Term Term Term Term) Term)

(declare-fun FStar.Calc.calc_pack@tok () Term)

; </end encoding FStar.Calc.calc_pack>


; <Start encoding FStar.Calc.calc_init>

(declare-fun FStar.Calc.calc_init (Term Term) Term)
(declare-fun Tm_arrow_f5787f683bb2167ab433229a103fa97e () Term)
(declare-fun FStar.Calc.calc_init@tok () Term)

; </end encoding FStar.Calc.calc_init>


; <Start encoding FStar.Calc.calc_step>

(declare-fun Tm_arrow_cfbfcb3d713af6cfef9741902fbd7eae (Term Term Term Term) Term)
(declare-fun Tm_arrow_924fe8a596e8d1052263cdb50ea0b3f9 (Term Term Term) Term)
(declare-fun FStar.Calc.calc_step (Term Term Term Term Term Term Term Term) Term)


(declare-fun Tm_arrow_c19042f2eb54c518b0ae4e8fbbb1b795 () Term)
(declare-fun FStar.Calc.calc_step@tok () Term)

; </end encoding FStar.Calc.calc_step>


; <Start encoding FStar.Calc.calc_finish>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Calc.calc_finish (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Calc.calc_finish@tok () Term)

; </end encoding FStar.Calc.calc_finish>


; <Start encoding FStar.Calc.calc_push_impl>


(declare-fun FStar.Calc.calc_push_impl (Term Term Term) Term)


(declare-fun Tm_arrow_8e288ee6e01162bc0e93f91b1d4ccf81 () Term)
(declare-fun FStar.Calc.calc_push_impl@tok () Term)


; </end encoding FStar.Calc.calc_push_impl>


; End Externals for interface FStar.Calc


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Calc (50 decls; total size 7477)

;;; Start module FStar.Math.Lemmas

; Externals for module FStar.Math.Lemmas


; <Skipped />


; <Skipped FStar.Math.Lemmas.euclidean_div_axiom/>


; <Start encoding FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding FStar.Math.Lemmas.euclidean_div_axiom>


; <Skipped FStar.Math.Lemmas.lemma_eucl_div_bound/>


; <Start encoding FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Skipped FStar.Math.Lemmas.lemma_mult_le_left/>


; <Start encoding FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_le_left>


; <Skipped FStar.Math.Lemmas.lemma_mult_le_right/>


; <Start encoding FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_le_right>


; <Skipped FStar.Math.Lemmas.lemma_mult_lt_left/>


; <Start encoding FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_lt_left>


; <Skipped FStar.Math.Lemmas.lemma_mult_lt_right/>


; <Start encoding FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Skipped FStar.Math.Lemmas.swap_mul/>


; <Start encoding FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding FStar.Math.Lemmas.swap_mul>


; <Skipped FStar.Math.Lemmas.lemma_cancel_mul/>


; <Start encoding FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_cancel_mul>


; <Skipped FStar.Math.Lemmas.distributivity_add_left/>


; <Start encoding FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding FStar.Math.Lemmas.distributivity_add_left>


; <Skipped FStar.Math.Lemmas.distributivity_add_right/>


; <Start encoding FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding FStar.Math.Lemmas.distributivity_add_right>


; <Skipped FStar.Math.Lemmas.paren_mul_left/>


; <Start encoding FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding FStar.Math.Lemmas.paren_mul_left>


; <Skipped FStar.Math.Lemmas.paren_mul_right/>


; <Start encoding FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding FStar.Math.Lemmas.paren_mul_right>


; <Skipped FStar.Math.Lemmas.paren_add_left/>


; <Start encoding FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding FStar.Math.Lemmas.paren_add_left>


; <Skipped FStar.Math.Lemmas.paren_add_right/>


; <Start encoding FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding FStar.Math.Lemmas.paren_add_right>


; <Skipped FStar.Math.Lemmas.addition_is_associative/>


; <Start encoding FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding FStar.Math.Lemmas.addition_is_associative>


; <Skipped FStar.Math.Lemmas.subtraction_is_distributive/>


; <Start encoding FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding FStar.Math.Lemmas.subtraction_is_distributive>


; <Skipped FStar.Math.Lemmas.swap_add_plus_minus/>


; <Start encoding FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding FStar.Math.Lemmas.swap_add_plus_minus>


; <Skipped FStar.Math.Lemmas.neg_mul_left/>


; <Start encoding FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding FStar.Math.Lemmas.neg_mul_left>


; <Skipped FStar.Math.Lemmas.neg_mul_right/>


; <Start encoding FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding FStar.Math.Lemmas.neg_mul_right>


; <Skipped FStar.Math.Lemmas.swap_neg_mul/>


; <Start encoding FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding FStar.Math.Lemmas.swap_neg_mul>


; <Skipped FStar.Math.Lemmas.distributivity_sub_left/>


; <Start encoding FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding FStar.Math.Lemmas.distributivity_sub_left>


; <Skipped FStar.Math.Lemmas.distributivity_sub_right/>


; <Start encoding FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding FStar.Math.Lemmas.distributivity_sub_right>


; <Skipped FStar.Math.Lemmas.mul_binds_tighter/>


; <Start encoding FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_binds_tighter>


; <Skipped FStar.Math.Lemmas.lemma_abs_mul/>


; <Start encoding FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_abs_mul>


; <Skipped FStar.Math.Lemmas.lemma_abs_bound/>


; <Start encoding FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_abs_bound>


; <Skipped FStar.Math.Lemmas.mul_ineq1/>


; <Start encoding FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_ineq1>


; <Start encoding FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Skipped FStar.Math.Lemmas.nat_times_nat_is_nat/>


; <Start encoding FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Skipped FStar.Math.Lemmas.pos_times_pos_is_pos/>


; <Start encoding FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Skipped FStar.Math.Lemmas.nat_over_pos_is_nat/>


; <Start encoding FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Skipped FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma/>


; <Start encoding FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Skipped FStar.Math.Lemmas.int_times_int_equal_zero_lemma/>


; <Start encoding FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Skipped />


; <Skipped FStar.Math.Lemmas.pow2_double_sum/>


; <Start encoding FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_double_sum>


; <Skipped FStar.Math.Lemmas.pow2_double_mult/>


; <Start encoding FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_double_mult>


; <Skipped FStar.Math.Lemmas.pow2_lt_compat/>


; <Start encoding FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_lt_compat>


; <Skipped />


; <Skipped FStar.Math.Lemmas.pow2_le_compat/>


; <Start encoding FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_le_compat>


; <Skipped />


; <Skipped FStar.Math.Lemmas.pow2_plus/>


; <Start encoding FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_plus>


; <Skipped />


; <Skipped FStar.Math.Lemmas.pow2_minus/>


; <Start encoding FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_minus>


; <Skipped FStar.Math.Lemmas.multiply_fractions/>


; <Start encoding FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding FStar.Math.Lemmas.multiply_fractions>


; <Skipped FStar.Math.Lemmas.modulo_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_lemma>


; <Skipped FStar.Math.Lemmas.lemma_div_mod/>


; <Start encoding FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_mod>


; <Skipped FStar.Math.Lemmas.lemma_mod_lt/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_lt>


; <Skipped FStar.Math.Lemmas.lemma_div_lt_nat/>


; <Start encoding FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_lt_nat>


; <Skipped FStar.Math.Lemmas.lemma_div_lt/>


; <Start encoding FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_lt>


; <Skipped FStar.Math.Lemmas.bounded_multiple_is_zero/>


; <Start encoding FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Skipped FStar.Math.Lemmas.small_div/>


; <Start encoding FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding FStar.Math.Lemmas.small_div>


; <Skipped FStar.Math.Lemmas.small_mod/>


; <Start encoding FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding FStar.Math.Lemmas.small_mod>


; <Skipped FStar.Math.Lemmas.lt_multiple_is_equal/>


; <Start encoding FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding FStar.Math.Lemmas.lt_multiple_is_equal>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus>


; <Skipped FStar.Math.Lemmas.lemma_div_plus/>


; <Start encoding FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_mod_plus>


; <Skipped FStar.Math.Lemmas.add_div_mod_1/>


; <Start encoding FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding FStar.Math.Lemmas.add_div_mod_1>


; <Skipped FStar.Math.Lemmas.sub_div_mod_1/>


; <Start encoding FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding FStar.Math.Lemmas.sub_div_mod_1>


; <Skipped />


; <Skipped FStar.Math.Lemmas.cancel_mul_div/>


; <Start encoding FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding FStar.Math.Lemmas.cancel_mul_div>


; <Skipped />


; <Skipped FStar.Math.Lemmas.cancel_mul_mod/>


; <Start encoding FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding FStar.Math.Lemmas.cancel_mul_mod>


; <Skipped FStar.Math.Lemmas.lemma_mod_add_distr/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_add_distr>


; <Skipped FStar.Math.Lemmas.lemma_mod_sub_distr/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Skipped FStar.Math.Lemmas.lemma_mod_sub_0/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_sub_0>


; <Skipped FStar.Math.Lemmas.lemma_mod_sub_1/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_sub_1>


; <Skipped FStar.Math.Lemmas.lemma_mod_mul_distr_l/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Skipped FStar.Math.Lemmas.lemma_mod_mul_distr_r/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Skipped FStar.Math.Lemmas.lemma_mod_injective/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_injective>


; <Skipped FStar.Math.Lemmas.lemma_mul_sub_distr/>


; <Start encoding FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Skipped FStar.Math.Lemmas.lemma_div_exact/>


; <Start encoding FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_exact>


; <Skipped FStar.Math.Lemmas.div_exact_r/>


; <Start encoding FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding FStar.Math.Lemmas.div_exact_r>


; <Skipped FStar.Math.Lemmas.lemma_mod_spec/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_spec>


; <Skipped FStar.Math.Lemmas.lemma_mod_spec2/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_spec2>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus_distr_l/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus_distr_r/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Skipped FStar.Math.Lemmas.lemma_mod_mod/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_mod>


; <Skipped FStar.Math.Lemmas.euclidean_division_definition/>


; <Start encoding FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding FStar.Math.Lemmas.euclidean_division_definition>


; <Skipped FStar.Math.Lemmas.modulo_range_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_range_lemma>


; <Skipped FStar.Math.Lemmas.small_modulo_lemma_1/>


; <Start encoding FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.small_modulo_lemma_1>


; <Skipped FStar.Math.Lemmas.small_modulo_lemma_2/>


; <Start encoding FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.small_modulo_lemma_2>


; <Skipped FStar.Math.Lemmas.small_division_lemma_1/>


; <Start encoding FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.small_division_lemma_1>


; <Skipped FStar.Math.Lemmas.small_division_lemma_2/>


; <Start encoding FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.small_division_lemma_2>


; <Skipped FStar.Math.Lemmas.multiplication_order_lemma/>


; <Start encoding FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.multiplication_order_lemma>


; <Skipped FStar.Math.Lemmas.division_propriety/>


; <Start encoding FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding FStar.Math.Lemmas.division_propriety>


; <Skipped FStar.Math.Lemmas.division_definition_lemma_1/>


; <Start encoding FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.division_definition_lemma_1>


; <Skipped FStar.Math.Lemmas.division_definition_lemma_2/>


; <Start encoding FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.division_definition_lemma_2>


; <Skipped FStar.Math.Lemmas.division_definition/>


; <Start encoding FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding FStar.Math.Lemmas.division_definition>


; <Skipped FStar.Math.Lemmas.multiple_division_lemma/>


; <Start encoding FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.multiple_division_lemma>


; <Skipped FStar.Math.Lemmas.multiple_modulo_lemma/>


; <Start encoding FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.multiple_modulo_lemma>


; <Skipped FStar.Math.Lemmas.division_addition_lemma/>


; <Start encoding FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.division_addition_lemma>


; <Skipped FStar.Math.Lemmas.modulo_distributivity/>


; <Start encoding FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_distributivity>


; <Skipped FStar.Math.Lemmas.lemma_div_le/>


; <Start encoding FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_le>


; <Skipped FStar.Math.Lemmas.division_sub_lemma/>


; <Start encoding FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.division_sub_lemma>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus_mul_distr/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Skipped FStar.Math.Lemmas.modulo_addition_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_addition_lemma>


; <Skipped FStar.Math.Lemmas.lemma_mod_sub/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_sub>


; <Skipped FStar.Math.Lemmas.mod_mult_exact/>


; <Start encoding FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding FStar.Math.Lemmas.mod_mult_exact>


; <Skipped FStar.Math.Lemmas.mod_mul_div_exact/>


; <Start encoding FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding FStar.Math.Lemmas.mod_mul_div_exact>


; <Skipped />


; <Skipped FStar.Math.Lemmas.mod_pow2_div2/>


; <Start encoding FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding FStar.Math.Lemmas.mod_pow2_div2>


; <Skipped />


; <Skipped FStar.Math.Lemmas.lemma_div_lt_cancel/>


; <Start encoding FStar.Math.Lemmas.lemma_div_lt_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_cancel@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_lt_cancel>


; <Skipped FStar.Math.Lemmas.lemma_mod_mult_zero/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_mult_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mult_zero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mult_zero@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_mult_zero>


; <Skipped FStar.Math.Lemmas.division_multiplication_lemma/>


; <Start encoding FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.division_multiplication_lemma>


; <Skipped FStar.Math.Lemmas.cancel_fraction/>


; <Start encoding FStar.Math.Lemmas.cancel_fraction>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_fraction (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_fraction@tok () Term)

; </end encoding FStar.Math.Lemmas.cancel_fraction>


; <Skipped FStar.Math.Lemmas.modulo_scale_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding FStar.Math.Lemmas.modulo_division_lemma_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma_0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma_0@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_division_lemma_0>


; <Skipped FStar.Math.Lemmas.modulo_division_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_division_lemma>


; <Skipped FStar.Math.Lemmas.modulo_modulo_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_modulo_lemma>


; <Skipped FStar.Math.Lemmas.pow2_multiplication_division_lemma_1/>


; <Start encoding FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Skipped FStar.Math.Lemmas.pow2_multiplication_division_lemma_2/>


; <Start encoding FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Skipped FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1/>


; <Start encoding FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Skipped FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2/>


; <Start encoding FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Skipped FStar.Math.Lemmas.pow2_modulo_division_lemma_1/>


; <Start encoding FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Skipped FStar.Math.Lemmas.pow2_modulo_division_lemma_2/>


; <Start encoding FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Skipped FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1/>


; <Start encoding FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Skipped FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2/>


; <Start encoding FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Skipped FStar.Math.Lemmas.modulo_add/>


; <Start encoding FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_add>


; <Skipped FStar.Math.Lemmas.lemma_mod_twice/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_twice>


; <Skipped FStar.Math.Lemmas.modulo_sub/>


; <Start encoding FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_sub>


; <Skipped FStar.Math.Lemmas.mod_add_both/>


; <Start encoding FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding FStar.Math.Lemmas.mod_add_both>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus_injective/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Skipped FStar.Math.Lemmas.modulo_sub_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for module FStar.Math.Lemmas


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Math.Lemmas (616 decls; total size 57092)

;;; Start module FStar.BitVector

; Externals for module FStar.BitVector


; <Start encoding FStar.BitVector.bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding FStar.BitVector.bv_t>


; <Start encoding FStar.BitVector.zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding FStar.BitVector.zero_vec>


; <Start encoding FStar.BitVector.elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding FStar.BitVector.elem_vec>


; <Start encoding FStar.BitVector.ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding FStar.BitVector.ones_vec>


; <Start encoding FStar.BitVector.logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(45,8-45,18); use=FStar.BitVector.fst(45,8-45,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.BitVector.logand_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.BitVector.logand_vec.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.BitVector.logand_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.BitVector.logand_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.logand_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(45,8-45,18); use=FStar.BitVector.fst(45,8-45,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.logand_vec @x0
@x1
@x2)
(FStar.BitVector.logand_vec.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.BitVector.logand_vec @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.BitVector.logand_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.logand_vec.fuel_instrumented))

; </end encoding FStar.BitVector.logand_vec>


; <Start encoding FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding FStar.BitVector.logand_vec_definition>


; <Start encoding FStar.BitVector.logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(57,8-57,18); use=FStar.BitVector.fst(57,8-57,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.BitVector.logxor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.BitVector.logxor_vec.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.BitVector.logxor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.BitVector.logxor_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.logxor_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(57,8-57,18); use=FStar.BitVector.fst(57,8-57,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.logxor_vec @x0
@x1
@x2)
(FStar.BitVector.logxor_vec.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.BitVector.logxor_vec @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.BitVector.logxor_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.logxor_vec.fuel_instrumented))

; </end encoding FStar.BitVector.logxor_vec>


; <Start encoding FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding FStar.BitVector.logxor_vec_definition>


; <Start encoding FStar.BitVector.logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.logor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(69,8-69,17); use=FStar.BitVector.fst(69,8-69,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.BitVector.logor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.BitVector.logor_vec.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.BitVector.logor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.BitVector.logor_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.logor_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.logor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(69,8-69,17); use=FStar.BitVector.fst(69,8-69,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.logor_vec @x0
@x1
@x2)
(FStar.BitVector.logor_vec.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.BitVector.logor_vec @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.BitVector.logor_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.logor_vec.fuel_instrumented))

; </end encoding FStar.BitVector.logor_vec>


; <Start encoding FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding FStar.BitVector.logor_vec_definition>


; <Start encoding FStar.BitVector.lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.lognot_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(81,8-81,18); use=FStar.BitVector.fst(81,8-81,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.lognot_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.BitVector.lognot_vec.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.BitVector.lognot_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.BitVector.lognot_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.lognot_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.lognot_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(81,8-81,18); use=FStar.BitVector.fst(81,8-81,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.BitVector.lognot_vec @x0
@x1)
(FStar.BitVector.lognot_vec.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.BitVector.lognot_vec @x0
@x1))
:qid @fuel_correspondence_FStar.BitVector.lognot_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.lognot_vec.fuel_instrumented))

; </end encoding FStar.BitVector.lognot_vec>


; <Start encoding FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding FStar.BitVector.lognot_vec_definition>


; <Start encoding FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding FStar.BitVector.lemma_xor_bounded>


; <Start encoding FStar.BitVector.is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

(declare-fun Tm_abs_c26b15d92a0324df025664cb1dd69766 (Term Term Term) Term)

; </end encoding FStar.BitVector.is_subset_vec>


; <Start encoding FStar.BitVector.is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

(declare-fun Tm_abs_8fab78d513bbc3161e95814bf48fbd56 (Term Term Term) Term)

; </end encoding FStar.BitVector.is_superset_vec>


; <Start encoding FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding FStar.BitVector.shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding FStar.BitVector.shift_left_vec>


; <Start encoding FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding FStar.BitVector.shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding FStar.BitVector.shift_right_vec>


; <Start encoding FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding FStar.BitVector.shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding FStar.BitVector.shift_arithmetic_right_vec>


; <Start encoding FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for module FStar.BitVector


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.BitVector (154 decls; total size 19963)

;;; Start interface FStar.UInt

; Externals for interface FStar.UInt


; <Start encoding FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)

; </end encoding FStar.UInt.pow2_values>


; <Start encoding FStar.UInt.max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)

; </end encoding FStar.UInt.max_int>


; <Start encoding FStar.UInt.min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)

; </end encoding FStar.UInt.min_int>


; <Start encoding FStar.UInt.fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)

; </end encoding FStar.UInt.fits>


; <Start encoding FStar.UInt.size>

(declare-fun FStar.UInt.size (Term Term) Term)
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)

; </end encoding FStar.UInt.size>


; <Start encoding FStar.UInt.uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)

; </end encoding FStar.UInt.uint_t>


; <Start encoding FStar.UInt.zero>

(declare-fun FStar.UInt.zero (Term) Term)
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding FStar.UInt.zero>


; <Start encoding FStar.UInt.pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding FStar.UInt.pow2_n>


; <Start encoding FStar.UInt.one>

(declare-fun FStar.UInt.one (Term) Term)
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding FStar.UInt.one>


; <Start encoding FStar.UInt.ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding FStar.UInt.ones>


; <Start encoding FStar.UInt.incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding FStar.UInt.incr>


; <Start encoding FStar.UInt.decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding FStar.UInt.decr>


; <Start encoding FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding FStar.UInt.incr_underspec>


; <Start encoding FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding FStar.UInt.decr_underspec>


; <Start encoding FStar.UInt.incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding FStar.UInt.incr_mod>


; <Start encoding FStar.UInt.decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding FStar.UInt.decr_mod>


; <Start encoding FStar.UInt.add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding FStar.UInt.add>


; <Start encoding FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding FStar.UInt.add_underspec>


; <Start encoding FStar.UInt.add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding FStar.UInt.add_mod>


; <Start encoding FStar.UInt.sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding FStar.UInt.sub>


; <Start encoding FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding FStar.UInt.sub_underspec>


; <Start encoding FStar.UInt.sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding FStar.UInt.sub_mod>


; <Start encoding FStar.UInt.mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding FStar.UInt.mul>


; <Start encoding FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding FStar.UInt.mul_underspec>


; <Start encoding FStar.UInt.mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding FStar.UInt.mul_mod>


; <Start encoding FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding FStar.UInt.lt_square_div_lt>


; <Skipped />


; <Start encoding FStar.UInt.mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding FStar.UInt.mul_div>


; <Skipped />


; <Start encoding FStar.UInt.div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding FStar.UInt.div>


; <Start encoding FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding FStar.UInt.div_underspec>


; <Start encoding FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding FStar.UInt.div_size>


; <Start encoding FStar.UInt.udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding FStar.UInt.udiv>


; <Start encoding FStar.UInt.mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding FStar.UInt.mod>


; <Start encoding FStar.UInt.eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding FStar.UInt.eq>


; <Start encoding FStar.UInt.gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding FStar.UInt.gt>


; <Start encoding FStar.UInt.gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding FStar.UInt.gte>


; <Start encoding FStar.UInt.lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding FStar.UInt.lt>


; <Start encoding FStar.UInt.lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding FStar.UInt.lte>


; <Start encoding FStar.UInt.to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding FStar.UInt.to_uint_t>


; <Start encoding FStar.UInt.to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(180,8-180,14); use=FStar.UInt.fsti(180,8-180,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.to_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.UInt.to_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.UInt.to_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.UInt.to_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(180,8-180,14); use=FStar.UInt.fsti(180,8-180,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.to_vec @x0
@x1)
(FStar.UInt.to_vec.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.UInt.to_vec @x0
@x1))
:qid @fuel_correspondence_FStar.UInt.to_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.UInt.to_vec.fuel_instrumented))

; </end encoding FStar.UInt.to_vec>


; <Start encoding FStar.UInt.from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(184,8-184,16); use=FStar.UInt.fsti(184,8-184,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.from_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.UInt.from_vec.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.UInt.from_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.UInt.from_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.UInt.from_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(184,8-184,16); use=FStar.UInt.fsti(184,8-184,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.from_vec @x0
@x1)
(FStar.UInt.from_vec.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.UInt.from_vec @x0
@x1))
:qid @fuel_correspondence_FStar.UInt.from_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.UInt.from_vec.fuel_instrumented))

; </end encoding FStar.UInt.from_vec>


; <Start encoding FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding FStar.UInt.to_vec_lemma_1>


; <Start encoding FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding FStar.UInt.to_vec_lemma_2>


; <Start encoding FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding FStar.UInt.inverse_aux>


; <Start encoding FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding FStar.UInt.inverse_vec_lemma>


; <Start encoding FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding FStar.UInt.inverse_num_lemma>


; <Start encoding FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding FStar.UInt.from_vec_lemma_1>


; <Start encoding FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding FStar.UInt.from_vec_lemma_2>


; <Start encoding FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding FStar.UInt.from_vec_aux>


; <Start encoding FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding FStar.UInt.seq_slice_lemma>


; <Start encoding FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding FStar.UInt.from_vec_propriety>


; <Start encoding FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding FStar.UInt.append_lemma>


; <Start encoding FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding FStar.UInt.slice_left_lemma>


; <Start encoding FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding FStar.UInt.slice_right_lemma>


; <Start encoding FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding FStar.UInt.zero_to_vec_lemma>


; <Start encoding FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding FStar.UInt.zero_from_vec_lemma>


; <Start encoding FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding FStar.UInt.one_to_vec_lemma>


; <Start encoding FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding FStar.UInt.pow2_to_vec_lemma>


; <Start encoding FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding FStar.UInt.pow2_from_vec_lemma>


; <Start encoding FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding FStar.UInt.ones_to_vec_lemma>


; <Start encoding FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding FStar.UInt.ones_from_vec_lemma>


; <Start encoding FStar.UInt.nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding FStar.UInt.nth>


; <Start encoding FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding FStar.UInt.nth_lemma>


; <Start encoding FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding FStar.UInt.zero_nth_lemma>


; <Start encoding FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding FStar.UInt.pow2_nth_lemma>


; <Start encoding FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding FStar.UInt.one_nth_lemma>


; <Start encoding FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding FStar.UInt.ones_nth_lemma>


; <Start encoding FStar.UInt.logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding FStar.UInt.logand>


; <Start encoding FStar.UInt.logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding FStar.UInt.logxor>


; <Start encoding FStar.UInt.logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding FStar.UInt.logor>


; <Start encoding FStar.UInt.lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding FStar.UInt.lognot>


; <Start encoding FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding FStar.UInt.logand_definition>


; <Start encoding FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding FStar.UInt.logxor_definition>


; <Start encoding FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding FStar.UInt.logor_definition>


; <Start encoding FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding FStar.UInt.lognot_definition>


; <Start encoding FStar.UInt.minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding FStar.UInt.minus>


; <Start encoding FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding FStar.UInt.logand_commutative>


; <Start encoding FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding FStar.UInt.logand_associative>


; <Start encoding FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding FStar.UInt.logand_self>


; <Start encoding FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding FStar.UInt.logand_lemma_1>


; <Start encoding FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding FStar.UInt.logand_lemma_2>


; <Start encoding FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding FStar.UInt.subset_vec_le_lemma>


; <Start encoding FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding FStar.UInt.logand_le>


; <Start encoding FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding FStar.UInt.logxor_commutative>


; <Start encoding FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding FStar.UInt.logxor_associative>


; <Start encoding FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding FStar.UInt.logxor_self>


; <Start encoding FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding FStar.UInt.logxor_lemma_1>


; <Start encoding FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding FStar.UInt.logxor_lemma_2>


; <Start encoding FStar.UInt.xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding FStar.UInt.xor>


; <Start encoding FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding FStar.UInt.xor_lemma>


; <Start encoding FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding FStar.UInt.logxor_inv>


; <Start encoding FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding FStar.UInt.logxor_neq_nonzero>


; <Start encoding FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding FStar.UInt.logor_commutative>


; <Start encoding FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding FStar.UInt.logor_associative>


; <Start encoding FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding FStar.UInt.logor_self>


; <Start encoding FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding FStar.UInt.logor_lemma_1>


; <Start encoding FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding FStar.UInt.logor_lemma_2>


; <Start encoding FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding FStar.UInt.superset_vec_ge_lemma>


; <Start encoding FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding FStar.UInt.logor_ge>


; <Start encoding FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding FStar.UInt.lognot_self>


; <Start encoding FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding FStar.UInt.lognot_lemma_1>


; <Start encoding FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding FStar.UInt.index_to_vec_ones>


; <Start encoding FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding FStar.UInt.logor_disjoint>


; <Start encoding FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding FStar.UInt.logand_mask>


; <Start encoding FStar.UInt.shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding FStar.UInt.shift_left>


; <Start encoding FStar.UInt.shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding FStar.UInt.shift_right>


; <Start encoding FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding FStar.UInt.shift_left_lemma_1>


; <Start encoding FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding FStar.UInt.shift_left_lemma_2>


; <Start encoding FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding FStar.UInt.shift_right_lemma_1>


; <Start encoding FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding FStar.UInt.shift_right_lemma_2>


; <Start encoding FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding FStar.UInt.shift_left_logand_lemma>


; <Start encoding FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding FStar.UInt.shift_right_logand_lemma>


; <Start encoding FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding FStar.UInt.shift_left_logxor_lemma>


; <Start encoding FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding FStar.UInt.shift_right_logxor_lemma>


; <Start encoding FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding FStar.UInt.shift_left_logor_lemma>


; <Start encoding FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding FStar.UInt.shift_right_logor_lemma>


; <Start encoding FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding FStar.UInt.shift_left_value_aux_1>


; <Start encoding FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding FStar.UInt.shift_left_value_aux_2>


; <Start encoding FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding FStar.UInt.shift_left_value_aux_3>


; <Start encoding FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)

; </end encoding FStar.UInt.shift_left_value_lemma>


; <Start encoding FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding FStar.UInt.shift_right_value_aux_1>


; <Start encoding FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding FStar.UInt.shift_right_value_aux_2>


; <Start encoding FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding FStar.UInt.shift_right_value_aux_3>


; <Start encoding FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding FStar.UInt.shift_right_value_lemma>


; <Start encoding FStar.UInt.msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding FStar.UInt.msb>


; <Start encoding FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding FStar.UInt.lemma_msb_pow2>


; <Start encoding FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding FStar.UInt.lemma_minus_zero>


; <Start encoding FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding FStar.UInt.lemma_msb_gte>


; <Start encoding FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding FStar.UInt.lemma_uint_mod>


; <Start encoding FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding FStar.UInt.lemma_add_sub_cancel>


; <Start encoding FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding FStar.UInt.lemma_sub_add_cancel>


; <Start encoding FStar.UInt.zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding FStar.UInt.zero_extend_vec>


; <Start encoding FStar.UInt.one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding FStar.UInt.one_extend_vec>


; <Start encoding FStar.UInt.zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding FStar.UInt.zero_extend>


; <Start encoding FStar.UInt.one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding FStar.UInt.one_extend>


; <Start encoding FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding FStar.UInt.lemma_zero_extend>


; <Start encoding FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding FStar.UInt.lemma_one_extend>


; <Start encoding FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_one_ext>


; <Start encoding FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_value_mod>


; <Start encoding FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_value_zero>


; <Start encoding FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding FStar.UInt.lemma_one_mod_pow2>


; <Start encoding FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_value>


; <Start encoding FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.UInt (711 decls; total size 51671)

;;; Start module Vale.Lib.Seqs_s

; Externals for module Vale.Lib.Seqs_s


; <Start encoding Vale.Lib.Seqs_s.compose>



(declare-fun Vale.Lib.Seqs_s.compose (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_866d1e62499df255ff45c8e8ff10dd29 () Term)
(declare-fun Vale.Lib.Seqs_s.compose@tok () Term)




(declare-fun Tm_abs_12f0bbc5cd2aeb167bc7e771b588a4ca (Term Term Term Term) Term)

; </end encoding Vale.Lib.Seqs_s.compose>


; <Start encoding Vale.Lib.Seqs_s.seq_map>


(declare-fun Vale.Lib.Seqs_s.seq_map (Term Term Term Term) Term)


(declare-fun Vale.Lib.Seqs_s.seq_map@tok () Term)


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Lib.Seqs_s.seq_map; Namespace Vale.Lib.Seqs_s
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Seq.Base.index@tok))
:named @kick_partial_app_800bfd27dcd03dc78bae7d14f8e75bc6))

; </end encoding Vale.Lib.Seqs_s.seq_map>


; <Start encoding Vale.Lib.Seqs_s.all_but_last>

(declare-fun Tm_refine_3e04674625ba1e90ddf6da6977508e33 (Term) Term)
(declare-fun Vale.Lib.Seqs_s.all_but_last (Term Term) Term)

(declare-fun Tm_arrow_4865ca07c578e2567d977fc403d746da () Term)
(declare-fun Vale.Lib.Seqs_s.all_but_last@tok () Term)


; </end encoding Vale.Lib.Seqs_s.all_but_last>


; <Start encoding Vale.Lib.Seqs_s.reverse_seq>

(declare-fun Vale.Lib.Seqs_s.reverse_seq (Term Term) Term)
(declare-fun Tm_arrow_945a00a52603cc083259fc2481f7530a () Term)
(declare-fun Vale.Lib.Seqs_s.reverse_seq@tok () Term)


(declare-fun Tm_arrow_5ead088aae36f5466dc4f492316985f2 (Term Term) Term)
(declare-fun Tm_abs_e33894a065c7d8cf9373282d9aa6a27c (Term Term) Term)

; </end encoding Vale.Lib.Seqs_s.reverse_seq>


; End Externals for module Vale.Lib.Seqs_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.Lib.Seqs_s (45 decls; total size 6784)

;;; Start interface FStar.UInt32

; Externals for interface FStar.UInt32


; <Start encoding FStar.UInt32.n>

(declare-fun FStar.UInt32.n (Dummy_sort) Term)

; </end encoding FStar.UInt32.n>


; <Skipped />


; <Start encoding FStar.UInt32.t>

(declare-fun FStar.UInt32.t (Dummy_sort) Term)

; </end encoding FStar.UInt32.t>


; <Start encoding FStar.UInt32.v>

(declare-fun FStar.UInt32.v (Term) Term)
(declare-fun Tm_arrow_33a06d9a3ec1c77524ab958d37ae1453 () Term)
(declare-fun FStar.UInt32.v@tok () Term)

; </end encoding FStar.UInt32.v>


; <Start encoding FStar.UInt32.uint_to_t>

(declare-fun FStar.UInt32.uint_to_t (Term) Term)
(declare-fun Tm_refine_0ea1fba779ad5718e28476faeef94d56 (Term) Term)
(declare-fun Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674 () Term)
(declare-fun FStar.UInt32.uint_to_t@tok () Term)


; </end encoding FStar.UInt32.uint_to_t>


; <Start encoding FStar.UInt32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.uv_inv@tok () Term)

; </end encoding FStar.UInt32.uv_inv>


; <Start encoding FStar.UInt32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.vu_inv@tok () Term)

; </end encoding FStar.UInt32.vu_inv>


; <Start encoding FStar.UInt32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.v_inj@tok () Term)

; </end encoding FStar.UInt32.v_inj>


; <Start encoding FStar.UInt32.zero>

(declare-fun FStar.UInt32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_7cfa0141116db910fdee890408ebbaf1 () Term)


; </end encoding FStar.UInt32.zero>


; <Start encoding FStar.UInt32.one>

(declare-fun FStar.UInt32.one (Dummy_sort) Term)
(declare-fun Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2 () Term)


; </end encoding FStar.UInt32.one>


; <Start encoding FStar.UInt32.add>

(declare-fun FStar.UInt32.add (Term Term) Term)
(declare-fun Tm_refine_709aff84c75b0fff77dcbf3b529649dd (Term Term) Term)
(declare-fun Tm_arrow_5558b72197031b1efc1a0f8298859a47 () Term)
(declare-fun FStar.UInt32.add@tok () Term)


; </end encoding FStar.UInt32.add>


; <Start encoding FStar.UInt32.add_underspec>

(declare-fun FStar.UInt32.add_underspec (Term Term) Term)
(declare-fun Tm_refine_57eacb083aaa8f3c6200eef2872d40a9 (Term Term) Term)
(declare-fun Tm_arrow_2aa4a786718187783c350fff98c0276d () Term)
(declare-fun FStar.UInt32.add_underspec@tok () Term)


; </end encoding FStar.UInt32.add_underspec>


; <Start encoding FStar.UInt32.add_mod>

(declare-fun FStar.UInt32.add_mod (Term Term) Term)
(declare-fun Tm_refine_edc8fb7e909853d860d4ab445ef31337 (Term Term) Term)
(declare-fun Tm_arrow_edbd649f4b12a343efa6ef46e7961890 () Term)
(declare-fun FStar.UInt32.add_mod@tok () Term)


; </end encoding FStar.UInt32.add_mod>


; <Start encoding FStar.UInt32.sub>

(declare-fun FStar.UInt32.sub (Term Term) Term)
(declare-fun Tm_refine_aa4b3d268075d84252df525db1f85524 (Term Term) Term)
(declare-fun Tm_arrow_ac932fe6124478fcfd5be99d334122e8 () Term)
(declare-fun FStar.UInt32.sub@tok () Term)


; </end encoding FStar.UInt32.sub>


; <Start encoding FStar.UInt32.sub_underspec>

(declare-fun FStar.UInt32.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_01926286fa04b785df0ea0da544f2001 (Term Term) Term)
(declare-fun Tm_arrow_a0c271942b2fe7be43f6ae297698cd0b () Term)
(declare-fun FStar.UInt32.sub_underspec@tok () Term)


; </end encoding FStar.UInt32.sub_underspec>


; <Start encoding FStar.UInt32.sub_mod>

(declare-fun FStar.UInt32.sub_mod (Term Term) Term)
(declare-fun Tm_refine_ace23c600fbe87b65e5fc333816f74de (Term Term) Term)
(declare-fun Tm_arrow_4a8c4b67b5977a746f1eeda7c310346f () Term)
(declare-fun FStar.UInt32.sub_mod@tok () Term)


; </end encoding FStar.UInt32.sub_mod>


; <Start encoding FStar.UInt32.mul>

(declare-fun FStar.UInt32.mul (Term Term) Term)
(declare-fun Tm_refine_1ccfb21903aa30ace8832f7a4d067d9b (Term Term) Term)
(declare-fun Tm_arrow_f261941925861d12451675f7409141e5 () Term)
(declare-fun FStar.UInt32.mul@tok () Term)


; </end encoding FStar.UInt32.mul>


; <Start encoding FStar.UInt32.mul_underspec>

(declare-fun FStar.UInt32.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb4ffd3222952e9ac95fc72e8f9913c6 (Term Term) Term)
(declare-fun Tm_arrow_54623a1c9ed03c94751f7d25d259da67 () Term)
(declare-fun FStar.UInt32.mul_underspec@tok () Term)


; </end encoding FStar.UInt32.mul_underspec>


; <Start encoding FStar.UInt32.mul_mod>

(declare-fun FStar.UInt32.mul_mod (Term Term) Term)
(declare-fun Tm_refine_8618df86656cf4c2bc98614452120307 (Term Term) Term)
(declare-fun Tm_arrow_b9ba4f3f3f0a1ea3202a99cc97238a0d () Term)
(declare-fun FStar.UInt32.mul_mod@tok () Term)


; </end encoding FStar.UInt32.mul_mod>


; <Start encoding FStar.UInt32.div>

(declare-fun Tm_refine_0941c9ff95557f2d53bc8f8179ab793e () Term)
(declare-fun FStar.UInt32.div (Term Term) Term)

(declare-fun Tm_refine_74d1ae07763cf2ce5f26906c9df0d2cc (Term Term) Term)
(declare-fun Tm_arrow_61dc5944349c0fd1e6ccd916a51fdfe8 () Term)
(declare-fun FStar.UInt32.div@tok () Term)


; </end encoding FStar.UInt32.div>


; <Start encoding FStar.UInt32.rem>


(declare-fun FStar.UInt32.rem (Term Term) Term)

(declare-fun Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 (Term Term) Term)
(declare-fun Tm_arrow_a00bbce6d7d4a1d495177d4f11116643 () Term)
(declare-fun FStar.UInt32.rem@tok () Term)


; </end encoding FStar.UInt32.rem>


; <Start encoding FStar.UInt32.logand>

(declare-fun FStar.UInt32.logand (Term Term) Term)
(declare-fun Tm_refine_7afd5b0ca8e77c7f6870883658e19d63 (Term Term) Term)
(declare-fun Tm_arrow_eff0426e7af51f8d330de4f569da9534 () Term)
(declare-fun FStar.UInt32.logand@tok () Term)


; </end encoding FStar.UInt32.logand>


; <Start encoding FStar.UInt32.logxor>

(declare-fun FStar.UInt32.logxor (Term Term) Term)
(declare-fun Tm_refine_2b25e5c3b25bc06167200cbfa5d36b3e (Term Term) Term)
(declare-fun Tm_arrow_07d2eb0ad8dc47fa48b862c24603f207 () Term)
(declare-fun FStar.UInt32.logxor@tok () Term)


; </end encoding FStar.UInt32.logxor>


; <Start encoding FStar.UInt32.logor>

(declare-fun FStar.UInt32.logor (Term Term) Term)
(declare-fun Tm_refine_39cb18a1d289e559096741772432b24f (Term Term) Term)
(declare-fun Tm_arrow_f4c0c09b0ba22212b54bc6a7fb947fac () Term)
(declare-fun FStar.UInt32.logor@tok () Term)


; </end encoding FStar.UInt32.logor>


; <Start encoding FStar.UInt32.lognot>

(declare-fun FStar.UInt32.lognot (Term) Term)
(declare-fun Tm_refine_d5743ca0a8d5f3ceec748bdcb132b14f (Term) Term)
(declare-fun Tm_arrow_b6548dae703a0f26a4185c51dee5464b () Term)
(declare-fun FStar.UInt32.lognot@tok () Term)


; </end encoding FStar.UInt32.lognot>


; <Start encoding FStar.UInt32.shift_right>

(declare-fun FStar.UInt32.shift_right (Term Term) Term)
(declare-fun Tm_refine_59202c8b625f4b04caf2081d6778d9e7 (Term Term) Term)
(declare-fun Tm_arrow_13c7acc70a3dd34a798f691f2cee4104 () Term)
(declare-fun FStar.UInt32.shift_right@tok () Term)


; </end encoding FStar.UInt32.shift_right>


; <Start encoding FStar.UInt32.shift_left>

(declare-fun FStar.UInt32.shift_left (Term Term) Term)
(declare-fun Tm_refine_c642c4de19ebed0b1a9b5f85d40989c0 (Term Term) Term)
(declare-fun Tm_arrow_0709d575329517627fac117b134f4462 () Term)
(declare-fun FStar.UInt32.shift_left@tok () Term)


; </end encoding FStar.UInt32.shift_left>


; <Start encoding FStar.UInt32.eq>

(declare-fun FStar.UInt32.eq (Term Term) Term)
(declare-fun Tm_arrow_6de09abf9de7977da03ee416904d3039 () Term)
(declare-fun FStar.UInt32.eq@tok () Term)

; </end encoding FStar.UInt32.eq>


; <Start encoding FStar.UInt32.gt>

(declare-fun FStar.UInt32.gt (Term Term) Term)

(declare-fun FStar.UInt32.gt@tok () Term)

; </end encoding FStar.UInt32.gt>


; <Start encoding FStar.UInt32.gte>

(declare-fun FStar.UInt32.gte (Term Term) Term)

(declare-fun FStar.UInt32.gte@tok () Term)

; </end encoding FStar.UInt32.gte>


; <Start encoding FStar.UInt32.lt>

(declare-fun FStar.UInt32.lt (Term Term) Term)

(declare-fun FStar.UInt32.lt@tok () Term)

; </end encoding FStar.UInt32.lt>


; <Start encoding FStar.UInt32.lte>

(declare-fun FStar.UInt32.lte (Term Term) Term)

(declare-fun FStar.UInt32.lte@tok () Term)

; </end encoding FStar.UInt32.lte>


; <Start encoding FStar.UInt32.minus>

(declare-fun FStar.UInt32.minus (Term) Term)
(declare-fun Tm_arrow_c4b70260248a2080020c883b42aa875d () Term)
(declare-fun FStar.UInt32.minus@tok () Term)

; </end encoding FStar.UInt32.minus>


; <Start encoding FStar.UInt32.n_minus_one>

(declare-fun FStar.UInt32.n_minus_one (Dummy_sort) Term)

; </end encoding FStar.UInt32.n_minus_one>


; <Skipped />


; <Start encoding FStar.UInt32.eq_mask>

(declare-fun FStar.UInt32.eq_mask (Term Term) Term)
(declare-fun Tm_refine_09d9a189c8c7a3bf3fc28db14e6689cd (Term Term) Term)
(declare-fun Tm_arrow_472ed8b8700983a2f5b417531368b430 () Term)
(declare-fun FStar.UInt32.eq_mask@tok () Term)


; </end encoding FStar.UInt32.eq_mask>


; <Start encoding FStar.UInt32.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs@tok () Term)

; </end encoding FStar.UInt32.lemma_sub_msbs>


; <Start encoding FStar.UInt32.gte_mask>

(declare-fun FStar.UInt32.gte_mask (Term Term) Term)
(declare-fun Tm_refine_83df857506788e94d25c8be97271668a (Term Term) Term)
(declare-fun Tm_arrow_a9de8133430dc71a337d9373e485c8b4 () Term)
(declare-fun FStar.UInt32.gte_mask@tok () Term)


; </end encoding FStar.UInt32.gte_mask>


; <Skipped />


; <Start encoding FStar.UInt32.op_Plus_Hat>

(declare-fun FStar.UInt32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Plus_Hat>


; <Start encoding FStar.UInt32.op_Plus_Question_Hat>

(declare-fun FStar.UInt32.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Question_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Plus_Question_Hat>


; <Start encoding FStar.UInt32.op_Plus_Percent_Hat>

(declare-fun FStar.UInt32.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Percent_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Plus_Percent_Hat>


; <Start encoding FStar.UInt32.op_Subtraction_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Subtraction_Hat>


; <Start encoding FStar.UInt32.op_Subtraction_Question_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Question_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Subtraction_Question_Hat>


; <Start encoding FStar.UInt32.op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Subtraction_Percent_Hat>


; <Start encoding FStar.UInt32.op_Star_Hat>

(declare-fun FStar.UInt32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Star_Hat>


; <Start encoding FStar.UInt32.op_Star_Question_Hat>

(declare-fun FStar.UInt32.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Question_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Star_Question_Hat>


; <Start encoding FStar.UInt32.op_Star_Percent_Hat>

(declare-fun FStar.UInt32.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Percent_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Star_Percent_Hat>


; <Start encoding FStar.UInt32.op_Slash_Hat>


(declare-fun FStar.UInt32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Slash_Hat@tok () Term)



; </end encoding FStar.UInt32.op_Slash_Hat>


; <Start encoding FStar.UInt32.op_Percent_Hat>


(declare-fun FStar.UInt32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Percent_Hat@tok () Term)



; </end encoding FStar.UInt32.op_Percent_Hat>


; <Start encoding FStar.UInt32.op_Hat_Hat>

(declare-fun FStar.UInt32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Hat_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Hat_Hat>


; <Start encoding FStar.UInt32.op_Amp_Hat>

(declare-fun FStar.UInt32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Amp_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Amp_Hat>


; <Start encoding FStar.UInt32.op_Bar_Hat>

(declare-fun FStar.UInt32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Bar_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Bar_Hat>


; <Start encoding FStar.UInt32.op_Less_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Less_Less_Hat>


; <Start encoding FStar.UInt32.op_Greater_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Greater_Greater_Hat>


; <Start encoding FStar.UInt32.op_Equals_Hat>

(declare-fun FStar.UInt32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Equals_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Equals_Hat>


; <Start encoding FStar.UInt32.op_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Greater_Hat>


; <Start encoding FStar.UInt32.op_Greater_Equals_Hat>

(declare-fun FStar.UInt32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Greater_Equals_Hat>


; <Start encoding FStar.UInt32.op_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Less_Hat>


; <Start encoding FStar.UInt32.op_Less_Equals_Hat>

(declare-fun FStar.UInt32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Less_Equals_Hat>


; <Start encoding FStar.UInt32.to_string>

(declare-fun FStar.UInt32.to_string (Term) Term)
(declare-fun Tm_arrow_bde0326394a5877aafa8a9dfb4adb318 () Term)
(declare-fun FStar.UInt32.to_string@tok () Term)

; </end encoding FStar.UInt32.to_string>


; <Start encoding FStar.UInt32.to_string_hex>

(declare-fun FStar.UInt32.to_string_hex (Term) Term)

(declare-fun FStar.UInt32.to_string_hex@tok () Term)

; </end encoding FStar.UInt32.to_string_hex>


; <Start encoding FStar.UInt32.to_string_hex_pad>

(declare-fun FStar.UInt32.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt32.to_string_hex_pad@tok () Term)

; </end encoding FStar.UInt32.to_string_hex_pad>


; <Start encoding FStar.UInt32.of_string>

(declare-fun FStar.UInt32.of_string (Term) Term)
(declare-fun Tm_arrow_564534749090ea8f842e229c3182e762 () Term)
(declare-fun FStar.UInt32.of_string@tok () Term)

; </end encoding FStar.UInt32.of_string>


; <Skipped />


; <Start encoding FStar.UInt32.__uint_to_t>

(declare-fun FStar.UInt32.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_67ad727682511dd92ce30d8d55620a8e () Term)
(declare-fun FStar.UInt32.__uint_to_t@tok () Term)

; </end encoding FStar.UInt32.__uint_to_t>


; <Skipped />


; End Externals for interface FStar.UInt32


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.UInt32 (390 decls; total size 20922)

;;; Start interface FStar.UInt8

; Externals for interface FStar.UInt8


; <Start encoding FStar.UInt8.n>

(declare-fun FStar.UInt8.n (Dummy_sort) Term)

; </end encoding FStar.UInt8.n>


; <Skipped />


; <Start encoding FStar.UInt8.t>

(declare-fun FStar.UInt8.t (Dummy_sort) Term)

; </end encoding FStar.UInt8.t>


; <Start encoding FStar.UInt8.v>

(declare-fun FStar.UInt8.v (Term) Term)
(declare-fun Tm_arrow_3777b5a630a36e62279f05e8abae7a72 () Term)
(declare-fun FStar.UInt8.v@tok () Term)

; </end encoding FStar.UInt8.v>


; <Start encoding FStar.UInt8.uint_to_t>

(declare-fun FStar.UInt8.uint_to_t (Term) Term)
(declare-fun Tm_refine_25c72d704900d626b30894312c325451 (Term) Term)
(declare-fun Tm_arrow_99681d89836a4c650badaf3b898e0fd2 () Term)
(declare-fun FStar.UInt8.uint_to_t@tok () Term)


; </end encoding FStar.UInt8.uint_to_t>


; <Start encoding FStar.UInt8.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.uv_inv@tok () Term)

; </end encoding FStar.UInt8.uv_inv>


; <Start encoding FStar.UInt8.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.vu_inv@tok () Term)

; </end encoding FStar.UInt8.vu_inv>


; <Start encoding FStar.UInt8.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.v_inj@tok () Term)

; </end encoding FStar.UInt8.v_inj>


; <Start encoding FStar.UInt8.zero>

(declare-fun FStar.UInt8.zero (Dummy_sort) Term)
(declare-fun Tm_refine_70356e30ad97b892992d5e77127e234b () Term)


; </end encoding FStar.UInt8.zero>


; <Start encoding FStar.UInt8.one>

(declare-fun FStar.UInt8.one (Dummy_sort) Term)
(declare-fun Tm_refine_9a778967dadeb1d9cdc158a156c04472 () Term)


; </end encoding FStar.UInt8.one>


; <Start encoding FStar.UInt8.add>

(declare-fun FStar.UInt8.add (Term Term) Term)
(declare-fun Tm_refine_e7a8c22ddf5fa06051ce01d4308e93c9 (Term Term) Term)
(declare-fun Tm_arrow_93f019685d372e95eac5ee2026269943 () Term)
(declare-fun FStar.UInt8.add@tok () Term)


; </end encoding FStar.UInt8.add>


; <Start encoding FStar.UInt8.add_underspec>

(declare-fun FStar.UInt8.add_underspec (Term Term) Term)
(declare-fun Tm_refine_e2fc73b749d5084f2161a1b2256e684a (Term Term) Term)
(declare-fun Tm_arrow_c4436082bc35b52549c292a4092c74f2 () Term)
(declare-fun FStar.UInt8.add_underspec@tok () Term)


; </end encoding FStar.UInt8.add_underspec>


; <Start encoding FStar.UInt8.add_mod>

(declare-fun FStar.UInt8.add_mod (Term Term) Term)
(declare-fun Tm_refine_c5c06f774ce917320ace84c78a678f3a (Term Term) Term)
(declare-fun Tm_arrow_52ecb5e08ede937a376b797f76452f11 () Term)
(declare-fun FStar.UInt8.add_mod@tok () Term)


; </end encoding FStar.UInt8.add_mod>


; <Start encoding FStar.UInt8.sub>

(declare-fun FStar.UInt8.sub (Term Term) Term)
(declare-fun Tm_refine_b9fa04b492b01fd435452ff429d13919 (Term Term) Term)
(declare-fun Tm_arrow_ec1e3750fe88626fd39551f91ea86fc8 () Term)
(declare-fun FStar.UInt8.sub@tok () Term)


; </end encoding FStar.UInt8.sub>


; <Start encoding FStar.UInt8.sub_underspec>

(declare-fun FStar.UInt8.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_2f0c7364767f32abaf6bd4293573996b (Term Term) Term)
(declare-fun Tm_arrow_9b74ded99c9ac1ce430c56353e375533 () Term)
(declare-fun FStar.UInt8.sub_underspec@tok () Term)


; </end encoding FStar.UInt8.sub_underspec>


; <Start encoding FStar.UInt8.sub_mod>

(declare-fun FStar.UInt8.sub_mod (Term Term) Term)
(declare-fun Tm_refine_31110a8e88288515f5ff8c631a6fc5fd (Term Term) Term)
(declare-fun Tm_arrow_f944420b8232be8a08ac1eac1a8cfc60 () Term)
(declare-fun FStar.UInt8.sub_mod@tok () Term)


; </end encoding FStar.UInt8.sub_mod>


; <Start encoding FStar.UInt8.mul>

(declare-fun FStar.UInt8.mul (Term Term) Term)
(declare-fun Tm_refine_d72a979d91a11894cbd64b344a4b0237 (Term Term) Term)
(declare-fun Tm_arrow_f916cf085880111e18cd4d6a364c6342 () Term)
(declare-fun FStar.UInt8.mul@tok () Term)


; </end encoding FStar.UInt8.mul>


; <Start encoding FStar.UInt8.mul_underspec>

(declare-fun FStar.UInt8.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_12692332647397b458ce816ee08aa096 (Term Term) Term)
(declare-fun Tm_arrow_44a424ccb654a64902b3f4c4584dfee1 () Term)
(declare-fun FStar.UInt8.mul_underspec@tok () Term)


; </end encoding FStar.UInt8.mul_underspec>


; <Start encoding FStar.UInt8.mul_mod>

(declare-fun FStar.UInt8.mul_mod (Term Term) Term)
(declare-fun Tm_refine_4ce5cfa0cf1c69159e9310e6885c3e22 (Term Term) Term)
(declare-fun Tm_arrow_082e5a7318c49f7336161f30b53f326f () Term)
(declare-fun FStar.UInt8.mul_mod@tok () Term)


; </end encoding FStar.UInt8.mul_mod>


; <Start encoding FStar.UInt8.div>

(declare-fun Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0 () Term)
(declare-fun FStar.UInt8.div (Term Term) Term)

(declare-fun Tm_refine_488bac52b9d15f98f9de642f30db345a (Term Term) Term)
(declare-fun Tm_arrow_032d4f95524b20f7a0ffe6be0a29e0dd () Term)
(declare-fun FStar.UInt8.div@tok () Term)


; </end encoding FStar.UInt8.div>


; <Start encoding FStar.UInt8.rem>


(declare-fun FStar.UInt8.rem (Term Term) Term)

(declare-fun Tm_refine_41d38db91700fb5bf8d345e71a7ea813 (Term Term) Term)
(declare-fun Tm_arrow_cce9ccb13b0c72c92896f9584ae44f9a () Term)
(declare-fun FStar.UInt8.rem@tok () Term)


; </end encoding FStar.UInt8.rem>


; <Start encoding FStar.UInt8.logand>

(declare-fun FStar.UInt8.logand (Term Term) Term)
(declare-fun Tm_refine_71d1a346f76194fb038bba96302ce90d (Term Term) Term)
(declare-fun Tm_arrow_606a7fadbc7c16f0b0151a905dbf43f5 () Term)
(declare-fun FStar.UInt8.logand@tok () Term)


; </end encoding FStar.UInt8.logand>


; <Start encoding FStar.UInt8.logxor>

(declare-fun FStar.UInt8.logxor (Term Term) Term)
(declare-fun Tm_refine_97e4a63388ae45ee4261a689ecdcc635 (Term Term) Term)
(declare-fun Tm_arrow_64e5ecb00734a6581a045079ffb5fe59 () Term)
(declare-fun FStar.UInt8.logxor@tok () Term)


; </end encoding FStar.UInt8.logxor>


; <Start encoding FStar.UInt8.logor>

(declare-fun FStar.UInt8.logor (Term Term) Term)
(declare-fun Tm_refine_a7fcc8489f92354d1f8a101b7f900b3b (Term Term) Term)
(declare-fun Tm_arrow_32400c8ec986ceb55a1554f2089e0efa () Term)
(declare-fun FStar.UInt8.logor@tok () Term)


; </end encoding FStar.UInt8.logor>


; <Start encoding FStar.UInt8.lognot>

(declare-fun FStar.UInt8.lognot (Term) Term)
(declare-fun Tm_refine_455031e9fe191e56270c683d0e98b61b (Term) Term)
(declare-fun Tm_arrow_1a84223456a82ceb3bff40c0b2935125 () Term)
(declare-fun FStar.UInt8.lognot@tok () Term)


; </end encoding FStar.UInt8.lognot>


; <Start encoding FStar.UInt8.shift_right>

(declare-fun FStar.UInt8.shift_right (Term Term) Term)
(declare-fun Tm_refine_098e5306776c74ab1df7fd9dd6d3b590 (Term Term) Term)
(declare-fun Tm_arrow_b066c40415d68ecc38942bb71d3e3f6f () Term)
(declare-fun FStar.UInt8.shift_right@tok () Term)


; </end encoding FStar.UInt8.shift_right>


; <Start encoding FStar.UInt8.shift_left>

(declare-fun FStar.UInt8.shift_left (Term Term) Term)
(declare-fun Tm_refine_a97317ecf8cf07e3c11fb9b0d3ed777c (Term Term) Term)
(declare-fun Tm_arrow_07d4bb9ab4248e20b62c52c13b75d97e () Term)
(declare-fun FStar.UInt8.shift_left@tok () Term)


; </end encoding FStar.UInt8.shift_left>


; <Start encoding FStar.UInt8.eq>

(declare-fun FStar.UInt8.eq (Term Term) Term)
(declare-fun Tm_arrow_044ce6ce0f384eef0fc1f6f3f8f2f074 () Term)
(declare-fun FStar.UInt8.eq@tok () Term)

; </end encoding FStar.UInt8.eq>


; <Start encoding FStar.UInt8.gt>

(declare-fun FStar.UInt8.gt (Term Term) Term)

(declare-fun FStar.UInt8.gt@tok () Term)

; </end encoding FStar.UInt8.gt>


; <Start encoding FStar.UInt8.gte>

(declare-fun FStar.UInt8.gte (Term Term) Term)

(declare-fun FStar.UInt8.gte@tok () Term)

; </end encoding FStar.UInt8.gte>


; <Start encoding FStar.UInt8.lt>

(declare-fun FStar.UInt8.lt (Term Term) Term)

(declare-fun FStar.UInt8.lt@tok () Term)

; </end encoding FStar.UInt8.lt>


; <Start encoding FStar.UInt8.lte>

(declare-fun FStar.UInt8.lte (Term Term) Term)

(declare-fun FStar.UInt8.lte@tok () Term)

; </end encoding FStar.UInt8.lte>


; <Start encoding FStar.UInt8.minus>

(declare-fun FStar.UInt8.minus (Term) Term)
(declare-fun Tm_arrow_53a47de46a631aa3eac76ad156b433ff () Term)
(declare-fun FStar.UInt8.minus@tok () Term)

; </end encoding FStar.UInt8.minus>


; <Start encoding FStar.UInt8.n_minus_one>

(declare-fun FStar.UInt8.n_minus_one (Dummy_sort) Term)

; </end encoding FStar.UInt8.n_minus_one>


; <Skipped />


; <Start encoding FStar.UInt8.eq_mask>

(declare-fun FStar.UInt8.eq_mask (Term Term) Term)
(declare-fun Tm_refine_4b365856d6f9222ae4baaff2421b1f3d (Term Term) Term)
(declare-fun Tm_arrow_a445c7cdf140b45a21388352df89d169 () Term)
(declare-fun FStar.UInt8.eq_mask@tok () Term)


; </end encoding FStar.UInt8.eq_mask>


; <Start encoding FStar.UInt8.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.lemma_sub_msbs@tok () Term)

; </end encoding FStar.UInt8.lemma_sub_msbs>


; <Start encoding FStar.UInt8.gte_mask>

(declare-fun FStar.UInt8.gte_mask (Term Term) Term)
(declare-fun Tm_refine_d0b1e2944ee74da332d1b0864caf4a29 (Term Term) Term)
(declare-fun Tm_arrow_fdec4315b860ac38893cb3277ba98c8c () Term)
(declare-fun FStar.UInt8.gte_mask@tok () Term)


; </end encoding FStar.UInt8.gte_mask>


; <Skipped />


; <Start encoding FStar.UInt8.op_Plus_Hat>

(declare-fun FStar.UInt8.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Plus_Hat>


; <Start encoding FStar.UInt8.op_Plus_Question_Hat>

(declare-fun FStar.UInt8.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Question_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Plus_Question_Hat>


; <Start encoding FStar.UInt8.op_Plus_Percent_Hat>

(declare-fun FStar.UInt8.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Percent_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Plus_Percent_Hat>


; <Start encoding FStar.UInt8.op_Subtraction_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Subtraction_Hat>


; <Start encoding FStar.UInt8.op_Subtraction_Question_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Question_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Subtraction_Question_Hat>


; <Start encoding FStar.UInt8.op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Subtraction_Percent_Hat>


; <Start encoding FStar.UInt8.op_Star_Hat>

(declare-fun FStar.UInt8.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Star_Hat>


; <Start encoding FStar.UInt8.op_Star_Question_Hat>

(declare-fun FStar.UInt8.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Question_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Star_Question_Hat>


; <Start encoding FStar.UInt8.op_Star_Percent_Hat>

(declare-fun FStar.UInt8.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Percent_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Star_Percent_Hat>


; <Start encoding FStar.UInt8.op_Slash_Hat>


(declare-fun FStar.UInt8.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt8.op_Slash_Hat@tok () Term)



; </end encoding FStar.UInt8.op_Slash_Hat>


; <Start encoding FStar.UInt8.op_Percent_Hat>


(declare-fun FStar.UInt8.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt8.op_Percent_Hat@tok () Term)



; </end encoding FStar.UInt8.op_Percent_Hat>


; <Start encoding FStar.UInt8.op_Hat_Hat>

(declare-fun FStar.UInt8.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Hat_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Hat_Hat>


; <Start encoding FStar.UInt8.op_Amp_Hat>

(declare-fun FStar.UInt8.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Amp_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Amp_Hat>


; <Start encoding FStar.UInt8.op_Bar_Hat>

(declare-fun FStar.UInt8.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Bar_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Bar_Hat>


; <Start encoding FStar.UInt8.op_Less_Less_Hat>

(declare-fun FStar.UInt8.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Less_Less_Hat>


; <Start encoding FStar.UInt8.op_Greater_Greater_Hat>

(declare-fun FStar.UInt8.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Greater_Greater_Hat>


; <Start encoding FStar.UInt8.op_Equals_Hat>

(declare-fun FStar.UInt8.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Equals_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Equals_Hat>


; <Start encoding FStar.UInt8.op_Greater_Hat>

(declare-fun FStar.UInt8.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Greater_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Greater_Hat>


; <Start encoding FStar.UInt8.op_Greater_Equals_Hat>

(declare-fun FStar.UInt8.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Greater_Equals_Hat>


; <Start encoding FStar.UInt8.op_Less_Hat>

(declare-fun FStar.UInt8.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Less_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Less_Hat>


; <Start encoding FStar.UInt8.op_Less_Equals_Hat>

(declare-fun FStar.UInt8.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Less_Equals_Hat>


; <Start encoding FStar.UInt8.to_string>

(declare-fun FStar.UInt8.to_string (Term) Term)
(declare-fun Tm_arrow_630ce6920914ed05e3724fa72d06132c () Term)
(declare-fun FStar.UInt8.to_string@tok () Term)

; </end encoding FStar.UInt8.to_string>


; <Start encoding FStar.UInt8.to_string_hex>

(declare-fun FStar.UInt8.to_string_hex (Term) Term)

(declare-fun FStar.UInt8.to_string_hex@tok () Term)

; </end encoding FStar.UInt8.to_string_hex>


; <Start encoding FStar.UInt8.to_string_hex_pad>

(declare-fun FStar.UInt8.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt8.to_string_hex_pad@tok () Term)

; </end encoding FStar.UInt8.to_string_hex_pad>


; <Start encoding FStar.UInt8.of_string>

(declare-fun FStar.UInt8.of_string (Term) Term)
(declare-fun Tm_arrow_2b6f4c2bff8eb5d0563e8b6985a71043 () Term)
(declare-fun FStar.UInt8.of_string@tok () Term)

; </end encoding FStar.UInt8.of_string>


; <Skipped />


; <Start encoding FStar.UInt8.__uint_to_t>

(declare-fun FStar.UInt8.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_52383a4d974551ee41b2c1746d04b8c5 () Term)
(declare-fun FStar.UInt8.__uint_to_t@tok () Term)

; </end encoding FStar.UInt8.__uint_to_t>


; <Skipped />


; <Start encoding FStar.UInt8.byte>

(declare-fun FStar.UInt8.byte (Dummy_sort) Term)

; </end encoding FStar.UInt8.byte>


; End Externals for interface FStar.UInt8


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.UInt8 (393 decls; total size 20801)

;;; Start interface Vale.Def.Words_s

; Externals for interface Vale.Def.Words_s


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.Words_s.two (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.two@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Vale.Def.Words_s.two@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.Words_s.Mktwo (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mktwo_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mktwo_lo (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mktwo_hi (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktwo
(declare-fun Vale.Def.Words_s.Mktwo@tok () Term)
(declare-fun Tm_arrow_b34b1dd8ac9a1e25e50e0ed805df5644 () Term)

; <Start encoding Vale.Def.Words_s.two>


; <start constructor Vale.Def.Words_s.two>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.Words_s.two ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(Vale.Def.Words_s.two @x0))
 
;;no pats
:qid is-Vale.Def.Words_s.two))))

; </end constructor Vale.Def.Words_s.two>


; </end encoding Vale.Def.Words_s.two>


; <Start encoding Vale.Def.Words_s.Mktwo>


; <start constructor Vale.Def.Words_s.Mktwo>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.Words_s.Mktwo ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(Vale.Def.Words_s.Mktwo (Vale.Def.Words_s.Mktwo_a __@x0)
(Vale.Def.Words_s.Mktwo_lo __@x0)
(Vale.Def.Words_s.Mktwo_hi __@x0)))))

; </end constructor Vale.Def.Words_s.Mktwo>


; </end encoding Vale.Def.Words_s.Mktwo>


; </end encoding >


; <Start encoding Vale.Def.Words_s.two__uu___haseq>


; </end encoding Vale.Def.Words_s.two__uu___haseq>


; <Start encoding Vale.Def.Words_s.__proj__Mktwo__item__lo>

(declare-fun Vale.Def.Words_s.__proj__Mktwo__item__lo (Term Term) Term)
(declare-fun Tm_arrow_6ff316de5e5bddaae63569f548bc20ff () Term)
(declare-fun Vale.Def.Words_s.__proj__Mktwo__item__lo@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mktwo__item__lo>


; <Skipped Vale.Def.Words_s.__proj__Mktwo__item__lo/>


; <Start encoding Vale.Def.Words_s.__proj__Mktwo__item__hi>

(declare-fun Vale.Def.Words_s.__proj__Mktwo__item__hi (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mktwo__item__hi@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mktwo__item__hi>


; <Skipped Vale.Def.Words_s.__proj__Mktwo__item__hi/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.Words_s.four (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.four@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Vale.Def.Words_s.four@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.Words_s.Mkfour (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkfour_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkfour_lo0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkfour_lo1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkfour_hi2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkfour_hi3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkfour
(declare-fun Vale.Def.Words_s.Mkfour@tok () Term)
(declare-fun Tm_arrow_a2cf7e4096906013a38d69a57c514b02 () Term)

; <Start encoding Vale.Def.Words_s.four>


; <start constructor Vale.Def.Words_s.four>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.Words_s.four ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(exists ((@x0 Term))
 (! (= __@x0
(Vale.Def.Words_s.four @x0))
 
;;no pats
:qid is-Vale.Def.Words_s.four))))

; </end constructor Vale.Def.Words_s.four>


; </end encoding Vale.Def.Words_s.four>


; <Start encoding Vale.Def.Words_s.Mkfour>


; <start constructor Vale.Def.Words_s.Mkfour>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.Words_s.Mkfour ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
123)
(= __@x0
(Vale.Def.Words_s.Mkfour (Vale.Def.Words_s.Mkfour_a __@x0)
(Vale.Def.Words_s.Mkfour_lo0 __@x0)
(Vale.Def.Words_s.Mkfour_lo1 __@x0)
(Vale.Def.Words_s.Mkfour_hi2 __@x0)
(Vale.Def.Words_s.Mkfour_hi3 __@x0)))))

; </end constructor Vale.Def.Words_s.Mkfour>

;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Vale.Def.Words_s.four; Namespace Vale.Def.Words_s; Name Vale.Def.Words_s.Mkfour; Namespace Vale.Def.Words_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Words_s.fsti(17,5-17,9); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Words_s.fsti(17,5-17,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
@x1))
(HasTypeFuel @u0
(Vale.Def.Words_s.Mkfour @x1
@x2
@x3
@x4
@x5)
(Vale.Def.Words_s.four @x1)))
 

:pattern ((HasTypeFuel @u0
(Vale.Def.Words_s.Mkfour @x1
@x2
@x3
@x4
@x5)
(Vale.Def.Words_s.four @x1)))
:qid data_typing_intro_Vale.Def.Words_s.Mkfour@tok))

:named data_typing_intro_Vale.Def.Words_s.Mkfour@tok))

; </end encoding Vale.Def.Words_s.Mkfour>

;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Vale.Def.Words_s.four; Namespace Vale.Def.Words_s; Name Vale.Def.Words_s.Mkfour; Namespace Vale.Def.Words_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Words_s.fsti(17,5-17,9); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Words_s.fsti(17,5-17,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Vale.Def.Words_s.four @x2))
(and (is-Vale.Def.Words_s.Mkfour @x1)
(= @x2
(Vale.Def.Words_s.Mkfour_a @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Vale.Def.Words_s.four @x2)))
:qid fuel_guarded_inversion_Vale.Def.Words_s.four))

:named fuel_guarded_inversion_Vale.Def.Words_s.four))

; </end encoding >


; <Start encoding Vale.Def.Words_s.four__uu___haseq>


; </end encoding Vale.Def.Words_s.four__uu___haseq>


; <Start encoding Vale.Def.Words_s.__proj__Mkfour__item__lo0>

(declare-fun Vale.Def.Words_s.__proj__Mkfour__item__lo0 (Term Term) Term)
(declare-fun Tm_arrow_9128eb5ee5228d627c2aaaf41910f85a () Term)
(declare-fun Vale.Def.Words_s.__proj__Mkfour__item__lo0@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkfour__item__lo0>


; <Skipped Vale.Def.Words_s.__proj__Mkfour__item__lo0/>


; <Start encoding Vale.Def.Words_s.__proj__Mkfour__item__lo1>

(declare-fun Vale.Def.Words_s.__proj__Mkfour__item__lo1 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkfour__item__lo1@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkfour__item__lo1>


; <Skipped Vale.Def.Words_s.__proj__Mkfour__item__lo1/>


; <Start encoding Vale.Def.Words_s.__proj__Mkfour__item__hi2>

(declare-fun Vale.Def.Words_s.__proj__Mkfour__item__hi2 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkfour__item__hi2@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkfour__item__hi2>


; <Skipped Vale.Def.Words_s.__proj__Mkfour__item__hi2/>


; <Start encoding Vale.Def.Words_s.__proj__Mkfour__item__hi3>

(declare-fun Vale.Def.Words_s.__proj__Mkfour__item__hi3 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkfour__item__hi3@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkfour__item__hi3>


; <Skipped Vale.Def.Words_s.__proj__Mkfour__item__hi3/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.Words_s.eight (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.eight@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Vale.Def.Words_s.eight@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.Words_s.Mkeight (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_lo_0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_lo_1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_lo_2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_lo_3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_hi_4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_hi_5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_hi_6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.Words_s.Mkeight_hi_7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkeight
(declare-fun Vale.Def.Words_s.Mkeight@tok () Term)
(declare-fun Tm_arrow_db21917f4285028d7a175dcf64e71ff9 () Term)

; <Start encoding Vale.Def.Words_s.eight>


; <start constructor Vale.Def.Words_s.eight>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.Words_s.eight ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
135)
(exists ((@x0 Term))
 (! (= __@x0
(Vale.Def.Words_s.eight @x0))
 
;;no pats
:qid is-Vale.Def.Words_s.eight))))

; </end constructor Vale.Def.Words_s.eight>


; </end encoding Vale.Def.Words_s.eight>


; <Start encoding Vale.Def.Words_s.Mkeight>


; <start constructor Vale.Def.Words_s.Mkeight>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.Words_s.Mkeight ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
142)
(= __@x0
(Vale.Def.Words_s.Mkeight (Vale.Def.Words_s.Mkeight_a __@x0)
(Vale.Def.Words_s.Mkeight_lo_0 __@x0)
(Vale.Def.Words_s.Mkeight_lo_1 __@x0)
(Vale.Def.Words_s.Mkeight_lo_2 __@x0)
(Vale.Def.Words_s.Mkeight_lo_3 __@x0)
(Vale.Def.Words_s.Mkeight_hi_4 __@x0)
(Vale.Def.Words_s.Mkeight_hi_5 __@x0)
(Vale.Def.Words_s.Mkeight_hi_6 __@x0)
(Vale.Def.Words_s.Mkeight_hi_7 __@x0)))))

; </end constructor Vale.Def.Words_s.Mkeight>


; </end encoding Vale.Def.Words_s.Mkeight>


; </end encoding >


; <Start encoding Vale.Def.Words_s.eight__uu___haseq>


; </end encoding Vale.Def.Words_s.eight__uu___haseq>


; <Start encoding Vale.Def.Words_s.__proj__Mkeight__item__lo_0>

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__lo_0 (Term Term) Term)
(declare-fun Tm_arrow_041ab0ebc8d15f2c660fe316f24bf836 () Term)
(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__lo_0@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkeight__item__lo_0>


; <Skipped Vale.Def.Words_s.__proj__Mkeight__item__lo_0/>


; <Start encoding Vale.Def.Words_s.__proj__Mkeight__item__lo_1>

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__lo_1 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__lo_1@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkeight__item__lo_1>


; <Skipped Vale.Def.Words_s.__proj__Mkeight__item__lo_1/>


; <Start encoding Vale.Def.Words_s.__proj__Mkeight__item__lo_2>

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__lo_2 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__lo_2@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkeight__item__lo_2>


; <Skipped Vale.Def.Words_s.__proj__Mkeight__item__lo_2/>


; <Start encoding Vale.Def.Words_s.__proj__Mkeight__item__lo_3>

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__lo_3 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__lo_3@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkeight__item__lo_3>


; <Skipped Vale.Def.Words_s.__proj__Mkeight__item__lo_3/>


; <Start encoding Vale.Def.Words_s.__proj__Mkeight__item__hi_4>

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__hi_4 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__hi_4@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkeight__item__hi_4>


; <Skipped Vale.Def.Words_s.__proj__Mkeight__item__hi_4/>


; <Start encoding Vale.Def.Words_s.__proj__Mkeight__item__hi_5>

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__hi_5 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__hi_5@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkeight__item__hi_5>


; <Skipped Vale.Def.Words_s.__proj__Mkeight__item__hi_5/>


; <Start encoding Vale.Def.Words_s.__proj__Mkeight__item__hi_6>

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__hi_6 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__hi_6@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkeight__item__hi_6>


; <Skipped Vale.Def.Words_s.__proj__Mkeight__item__hi_6/>


; <Start encoding Vale.Def.Words_s.__proj__Mkeight__item__hi_7>

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__hi_7 (Term Term) Term)

(declare-fun Vale.Def.Words_s.__proj__Mkeight__item__hi_7@tok () Term)

; </end encoding Vale.Def.Words_s.__proj__Mkeight__item__hi_7>


; <Skipped Vale.Def.Words_s.__proj__Mkeight__item__hi_7/>


; <Start encoding Vale.Def.Words_s.pow2_norm>

(declare-fun Vale.Def.Words_s.pow2_norm (Term) Term)

(declare-fun Vale.Def.Words_s.pow2_norm@tok () Term)

; </end encoding Vale.Def.Words_s.pow2_norm>


; <Start encoding Vale.Def.Words_s.pow2_1>

(declare-fun Vale.Def.Words_s.pow2_1 (Dummy_sort) Term)

; </end encoding Vale.Def.Words_s.pow2_1>


; <Start encoding Vale.Def.Words_s.pow2_2>

(declare-fun Vale.Def.Words_s.pow2_2 (Dummy_sort) Term)

; </end encoding Vale.Def.Words_s.pow2_2>


; <Start encoding Vale.Def.Words_s.pow2_4>

(declare-fun Vale.Def.Words_s.pow2_4 (Dummy_sort) Term)

; </end encoding Vale.Def.Words_s.pow2_4>


; <Start encoding Vale.Def.Words_s.pow2_8>

(declare-fun Vale.Def.Words_s.pow2_8 (Dummy_sort) Term)

; </end encoding Vale.Def.Words_s.pow2_8>


; <Start encoding Vale.Def.Words_s.pow2_16>

(declare-fun Vale.Def.Words_s.pow2_16 (Dummy_sort) Term)

; </end encoding Vale.Def.Words_s.pow2_16>


; <Start encoding Vale.Def.Words_s.pow2_32>

(declare-fun Vale.Def.Words_s.pow2_32 (Dummy_sort) Term)

; </end encoding Vale.Def.Words_s.pow2_32>


; <Start encoding Vale.Def.Words_s.pow2_64>

(declare-fun Vale.Def.Words_s.pow2_64 (Dummy_sort) Term)

; </end encoding Vale.Def.Words_s.pow2_64>


; <Start encoding Vale.Def.Words_s.pow2_128>

(declare-fun Vale.Def.Words_s.pow2_128 (Dummy_sort) Term)

; </end encoding Vale.Def.Words_s.pow2_128>


; <Start encoding Vale.Def.Words_s.natN>

(declare-fun Vale.Def.Words_s.natN (Term) Term)

(declare-fun Vale.Def.Words_s.natN@tok () Term)

;;;;;;;;;;;;;;;;Equation for Vale.Def.Words_s.natN
;;; Fact-ids: Name Vale.Def.Words_s.natN; Namespace Vale.Def.Words_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Words_s.fsti(31,4-31,8); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Words_s.fsti(31,4-31,8)
(forall ((@x0 Term))
 (! (= (Vale.Def.Words_s.natN @x0)
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0))
 

:pattern ((Vale.Def.Words_s.natN @x0))
:qid equation_Vale.Def.Words_s.natN))

:named equation_Vale.Def.Words_s.natN))

; </end encoding Vale.Def.Words_s.natN>


; <Start encoding Vale.Def.Words_s.nat1>

(declare-fun Vale.Def.Words_s.nat1 () Term)

; </end encoding Vale.Def.Words_s.nat1>


; <Start encoding Vale.Def.Words_s.nat2>

(declare-fun Vale.Def.Words_s.nat2 () Term)

; </end encoding Vale.Def.Words_s.nat2>


; <Start encoding Vale.Def.Words_s.nat4>

(declare-fun Vale.Def.Words_s.nat4 () Term)

; </end encoding Vale.Def.Words_s.nat4>


; <Start encoding Vale.Def.Words_s.nat8>

(declare-fun Vale.Def.Words_s.nat8 () Term)

; </end encoding Vale.Def.Words_s.nat8>


; <Start encoding Vale.Def.Words_s.nat16>

(declare-fun Vale.Def.Words_s.nat16 () Term)

; </end encoding Vale.Def.Words_s.nat16>


; <Start encoding Vale.Def.Words_s.nat32>

(declare-fun Vale.Def.Words_s.nat32 () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Vale.Def.Words_s.nat32; Namespace Vale.Def.Words_s
(assert (! (HasType Vale.Def.Words_s.nat32
Tm_type)
:named function_token_typing_Vale.Def.Words_s.nat32))
;;;;;;;;;;;;;;;;Equation for Vale.Def.Words_s.nat32
;;; Fact-ids: Name Vale.Def.Words_s.nat32; Namespace Vale.Def.Words_s
(assert (! (= Vale.Def.Words_s.nat32
(Vale.Def.Words_s.natN (BoxInt 4294967296)))
:named equation_Vale.Def.Words_s.nat32))

; </end encoding Vale.Def.Words_s.nat32>


; <Start encoding Vale.Def.Words_s.nat64>

(declare-fun Vale.Def.Words_s.nat64 () Term)
;;;;;;;;;;;;;;;;Equation for Vale.Def.Words_s.nat64
;;; Fact-ids: Name Vale.Def.Words_s.nat64; Namespace Vale.Def.Words_s
(assert (! (= Vale.Def.Words_s.nat64
(Vale.Def.Words_s.natN (BoxInt 18446744073709551616)))
:named equation_Vale.Def.Words_s.nat64))

; </end encoding Vale.Def.Words_s.nat64>


; <Start encoding Vale.Def.Words_s.nat128>

(declare-fun Vale.Def.Words_s.nat128 () Term)

; </end encoding Vale.Def.Words_s.nat128>


; <Start encoding Vale.Def.Words_s.int_to_natN>

(declare-fun Vale.Def.Words_s.int_to_natN (Term Term) Term)
(declare-fun Tm_refine_30c926ebf383bedbae82319bb48dcf51 (Term Term) Term)
(declare-fun Tm_arrow_7e3de5d812aa29dc326ab9e1111e4033 () Term)
(declare-fun Vale.Def.Words_s.int_to_natN@tok () Term)


; </end encoding Vale.Def.Words_s.int_to_natN>


; End Externals for interface Vale.Def.Words_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Def.Words_s (236 decls; total size 22110)

;;; Start interface Vale.Def.Words.Four_s

; Externals for interface Vale.Def.Words.Four_s


; <Start encoding Vale.Def.Words.Four_s.four_map>


(declare-fun Vale.Def.Words.Four_s.four_map (Term Term Term Term) Term)

(declare-fun Tm_arrow_4990930fed2040e0efdbdc37ff6cc5ba () Term)
(declare-fun Vale.Def.Words.Four_s.four_map@tok () Term)


; </end encoding Vale.Def.Words.Four_s.four_map>


; <Start encoding Vale.Def.Words.Four_s.four_map2>

(declare-fun Tm_arrow_ca13e3f48edab78b734271373e04eb58 (Term Term) Term)
(declare-fun Vale.Def.Words.Four_s.four_map2 (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_c3a7bbf95c7690f448075f012393b5b8 () Term)
(declare-fun Vale.Def.Words.Four_s.four_map2@tok () Term)


; </end encoding Vale.Def.Words.Four_s.four_map2>


; <Start encoding Vale.Def.Words.Four_s.two_two_to_four>

(declare-fun Vale.Def.Words.Four_s.two_two_to_four (Term Term) Term)
(declare-fun Tm_arrow_2e65f696c3dfe5550697d8c93d7a3e9b () Term)
(declare-fun Vale.Def.Words.Four_s.two_two_to_four@tok () Term)

; </end encoding Vale.Def.Words.Four_s.two_two_to_four>


; <Start encoding Vale.Def.Words.Four_s.four_to_two_two>

(declare-fun Vale.Def.Words.Four_s.four_to_two_two (Term Term) Term)
(declare-fun Tm_arrow_0df134798787e8f9284f79a835fa6b68 () Term)
(declare-fun Vale.Def.Words.Four_s.four_to_two_two@tok () Term)

; </end encoding Vale.Def.Words.Four_s.four_to_two_two>


; <Start encoding Vale.Def.Words.Four_s.nat_to_four_unfold>

(declare-fun Vale.Def.Words.Four_s.nat_to_four_unfold (Term Term) Term)
(declare-fun Tm_arrow_3411db9d06d17e1f56929dd49c5039c7 () Term)
(declare-fun Vale.Def.Words.Four_s.nat_to_four_unfold@tok () Term)

; </end encoding Vale.Def.Words.Four_s.nat_to_four_unfold>


; <Start encoding Vale.Def.Words.Four_s.nat_to_four>

(declare-fun Vale.Def.Words.Four_s.nat_to_four (Term Term) Term)

(declare-fun Vale.Def.Words.Four_s.nat_to_four@tok () Term)

; </end encoding Vale.Def.Words.Four_s.nat_to_four>


; <Start encoding Vale.Def.Words.Four_s.four_to_nat_unfold>

(declare-fun Vale.Def.Words.Four_s.four_to_nat_unfold (Term Term) Term)
(declare-fun Tm_arrow_8e8890e19356591ca1f9e83b434ba1ba () Term)
(declare-fun Vale.Def.Words.Four_s.four_to_nat_unfold@tok () Term)

; </end encoding Vale.Def.Words.Four_s.four_to_nat_unfold>


; <Start encoding Vale.Def.Words.Four_s.four_to_nat>

(declare-fun Vale.Def.Words.Four_s.four_to_nat (Term Term) Term)

(declare-fun Vale.Def.Words.Four_s.four_to_nat@tok () Term)

; </end encoding Vale.Def.Words.Four_s.four_to_nat>


; <Start encoding Vale.Def.Words.Four_s.four_select>

(declare-fun Vale.Def.Words.Four_s.four_select (Term Term Term) Term)
(declare-fun Tm_arrow_2aa97d2d7aa0af2d73179c21fa4feb8f () Term)
(declare-fun Vale.Def.Words.Four_s.four_select@tok () Term)

; </end encoding Vale.Def.Words.Four_s.four_select>


; <Start encoding Vale.Def.Words.Four_s.four_insert>

(declare-fun Vale.Def.Words.Four_s.four_insert (Term Term Term Term) Term)
(declare-fun Tm_arrow_a947e1d6d04e57b0ff5ff9714c9409fe () Term)
(declare-fun Vale.Def.Words.Four_s.four_insert@tok () Term)

; </end encoding Vale.Def.Words.Four_s.four_insert>


; <Start encoding Vale.Def.Words.Four_s.four_reverse>

(declare-fun Vale.Def.Words.Four_s.four_reverse (Term Term) Term)
(declare-fun Tm_arrow_4c18e3154c1a13a2c27a4ee67452b51d () Term)
(declare-fun Vale.Def.Words.Four_s.four_reverse@tok () Term)

; </end encoding Vale.Def.Words.Four_s.four_reverse>


; End Externals for interface Vale.Def.Words.Four_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Def.Words.Four_s (64 decls; total size 8569)

;;; Start interface Vale.Def.Words.Two_s

; Externals for interface Vale.Def.Words.Two_s


; <Start encoding Vale.Def.Words.Two_s.two_map>


(declare-fun Vale.Def.Words.Two_s.two_map (Term Term Term Term) Term)

(declare-fun Tm_arrow_938f83077ca851a9b1d9a2c26f126b35 () Term)
(declare-fun Vale.Def.Words.Two_s.two_map@tok () Term)


; </end encoding Vale.Def.Words.Two_s.two_map>


; <Start encoding Vale.Def.Words.Two_s.two_map2>


(declare-fun Vale.Def.Words.Two_s.two_map2 (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_2d4242228fd0f03a568ddefe971ab997 () Term)
(declare-fun Vale.Def.Words.Two_s.two_map2@tok () Term)


; </end encoding Vale.Def.Words.Two_s.two_map2>


; <Start encoding Vale.Def.Words.Two_s.nat_to_two_unfold>

(declare-fun Vale.Def.Words.Two_s.nat_to_two_unfold (Term Term) Term)
(declare-fun Tm_arrow_df9237fdea5693ef2471bd60e1cdce35 () Term)
(declare-fun Vale.Def.Words.Two_s.nat_to_two_unfold@tok () Term)

; </end encoding Vale.Def.Words.Two_s.nat_to_two_unfold>


; <Start encoding Vale.Def.Words.Two_s.nat_to_two>

(declare-fun Vale.Def.Words.Two_s.nat_to_two (Term Term) Term)

(declare-fun Vale.Def.Words.Two_s.nat_to_two@tok () Term)

; </end encoding Vale.Def.Words.Two_s.nat_to_two>


; <Start encoding Vale.Def.Words.Two_s.two_to_nat_unfold>

(declare-fun Vale.Def.Words.Two_s.two_to_nat_unfold (Term Term) Term)
(declare-fun Tm_arrow_606321cefa4f7963fec36e3f4eed4ca4 () Term)
(declare-fun Vale.Def.Words.Two_s.two_to_nat_unfold@tok () Term)

; </end encoding Vale.Def.Words.Two_s.two_to_nat_unfold>


; <Start encoding Vale.Def.Words.Two_s.two_to_nat>

(declare-fun Vale.Def.Words.Two_s.two_to_nat (Term Term) Term)

(declare-fun Vale.Def.Words.Two_s.two_to_nat@tok () Term)

; </end encoding Vale.Def.Words.Two_s.two_to_nat>


; <Start encoding Vale.Def.Words.Two_s.two_select>

(declare-fun Vale.Def.Words.Two_s.two_select (Term Term Term) Term)
(declare-fun Tm_arrow_9c243d54399b4f002c5b510935446740 () Term)
(declare-fun Vale.Def.Words.Two_s.two_select@tok () Term)

; </end encoding Vale.Def.Words.Two_s.two_select>


; <Start encoding Vale.Def.Words.Two_s.two_insert>

(declare-fun Vale.Def.Words.Two_s.two_insert (Term Term Term Term) Term)
(declare-fun Tm_arrow_d0d9c12893e24f9e20df73290ee714a3 () Term)
(declare-fun Vale.Def.Words.Two_s.two_insert@tok () Term)

; </end encoding Vale.Def.Words.Two_s.two_insert>


; <Start encoding Vale.Def.Words.Two_s.two_reverse>

(declare-fun Vale.Def.Words.Two_s.two_reverse (Term Term) Term)
(declare-fun Tm_arrow_f2a4f944792fc374b9e411acd9772e3d () Term)
(declare-fun Vale.Def.Words.Two_s.two_reverse@tok () Term)

; </end encoding Vale.Def.Words.Two_s.two_reverse>


; End Externals for interface Vale.Def.Words.Two_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Def.Words.Two_s (54 decls; total size 7795)

;;; Start interface Vale.Def.Words.Seq_s

; Externals for interface Vale.Def.Words.Seq_s


; <Start encoding Vale.Def.Words.Seq_s.seqn>

(declare-fun Vale.Def.Words.Seq_s.seqn (Term Term) Term)
(declare-fun Tm_arrow_505dc2449bd54cb861d3429f6cb919f3 () Term)
(declare-fun Vale.Def.Words.Seq_s.seqn@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seqn>


; <Start encoding Vale.Def.Words.Seq_s.seq2>

(declare-fun Vale.Def.Words.Seq_s.seq2 (Term) Term)

(declare-fun Vale.Def.Words.Seq_s.seq2@tok () Term)

; </end encoding Vale.Def.Words.Seq_s.seq2>


; <Start encoding Vale.Def.Words.Seq_s.seq4>

(declare-fun Vale.Def.Words.Seq_s.seq4 (Term) Term)

(declare-fun Vale.Def.Words.Seq_s.seq4@tok () Term)

; </end encoding Vale.Def.Words.Seq_s.seq4>


; <Start encoding Vale.Def.Words.Seq_s.seq8>

(declare-fun Vale.Def.Words.Seq_s.seq8 (Term) Term)

(declare-fun Vale.Def.Words.Seq_s.seq8@tok () Term)

; </end encoding Vale.Def.Words.Seq_s.seq8>


; <Start encoding Vale.Def.Words.Seq_s.seq16>

(declare-fun Vale.Def.Words.Seq_s.seq16 (Term) Term)

(declare-fun Vale.Def.Words.Seq_s.seq16@tok () Term)

; </end encoding Vale.Def.Words.Seq_s.seq16>


; <Start encoding Vale.Def.Words.Seq_s.seq_to_two_LE>

(declare-fun Vale.Def.Words.Seq_s.seq_to_two_LE (Term Term) Term)
(declare-fun Tm_arrow_9b1e1388ee42f7f85e2e59eb17348487 () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_to_two_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq_s.seq_to_two_LE>


; <Start encoding Vale.Def.Words.Seq_s.seq_to_two_BE>

(declare-fun Vale.Def.Words.Seq_s.seq_to_two_BE (Term Term) Term)

(declare-fun Vale.Def.Words.Seq_s.seq_to_two_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq_s.seq_to_two_BE>


; <Start encoding Vale.Def.Words.Seq_s.seq_to_four_LE>

(declare-fun Vale.Def.Words.Seq_s.seq_to_four_LE (Term Term) Term)
(declare-fun Tm_arrow_5c6001f887ae8c916e4137900009cf06 () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_to_four_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq_s.seq_to_four_LE>


; <Start encoding Vale.Def.Words.Seq_s.seq_to_four_BE>

(declare-fun Vale.Def.Words.Seq_s.seq_to_four_BE (Term Term) Term)

(declare-fun Vale.Def.Words.Seq_s.seq_to_four_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq_s.seq_to_four_BE>


; <Start encoding Vale.Def.Words.Seq_s.two_to_seq_LE>

(declare-fun Vale.Def.Words.Seq_s.two_to_seq_LE (Term Term) Term)
(declare-fun Tm_refine_f9ee523a22c7eb000c4c8d4de6592dcb (Term Term) Term)
(declare-fun Tm_arrow_6f61b06415cbd2603f7364ec4b3fb24d () Term)
(declare-fun Vale.Def.Words.Seq_s.two_to_seq_LE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.two_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq_s.two_to_seq_BE>

(declare-fun Vale.Def.Words.Seq_s.two_to_seq_BE (Term Term) Term)
(declare-fun Tm_refine_49470fa3581c77f310d9f973df510338 (Term Term) Term)
(declare-fun Tm_arrow_17f50aa9d62f1e4a4220b8bb7fc4fc7f () Term)
(declare-fun Vale.Def.Words.Seq_s.two_to_seq_BE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.two_to_seq_BE>


; <Start encoding Vale.Def.Words.Seq_s.four_to_seq_LE>

(declare-fun Vale.Def.Words.Seq_s.four_to_seq_LE (Term Term) Term)
(declare-fun Tm_refine_4543f1a564a33b21cd018d4b2bc02996 (Term Term) Term)
(declare-fun Tm_arrow_34b4fd22fe0b8e6eccc9351206e8f4d4 () Term)
(declare-fun Vale.Def.Words.Seq_s.four_to_seq_LE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.four_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq_s.four_to_seq_BE>

(declare-fun Vale.Def.Words.Seq_s.four_to_seq_BE (Term Term) Term)
(declare-fun Tm_refine_5834f17226f258d10f6cc5e617bb0da1 (Term Term) Term)
(declare-fun Tm_arrow_fe6b8e7820bf687b379be48c904a17e1 () Term)
(declare-fun Vale.Def.Words.Seq_s.four_to_seq_BE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.four_to_seq_BE>


; <Start encoding Vale.Def.Words.Seq_s.seq_two_to_seq_LE>

(declare-fun Vale.Def.Words.Seq_s.seq_two_to_seq_LE (Term Term) Term)
(declare-fun Tm_refine_ad031e03dc982ab0089b0b289d91dee5 (Term Term) Term)
(declare-fun Tm_arrow_1a0789bbb054bf554adbff8a7b92fa32 () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_two_to_seq_LE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_two_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq_s.seq_two_to_seq_BE>

(declare-fun Vale.Def.Words.Seq_s.seq_two_to_seq_BE (Term Term) Term)


(declare-fun Vale.Def.Words.Seq_s.seq_two_to_seq_BE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_two_to_seq_BE>


; <Start encoding Vale.Def.Words.Seq_s.seq_four_to_seq_LE>

(declare-fun Vale.Def.Words.Seq_s.seq_four_to_seq_LE (Term Term) Term)
(declare-fun Tm_refine_12cfdc5e5e9b4a21e137c684eae73d5b (Term Term) Term)
(declare-fun Tm_arrow_b007551277eef35dba1a440e8dee22e2 () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_four_to_seq_LE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_four_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq_s.seq_four_to_seq_BE>

(declare-fun Vale.Def.Words.Seq_s.seq_four_to_seq_BE (Term Term) Term)


(declare-fun Vale.Def.Words.Seq_s.seq_four_to_seq_BE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_four_to_seq_BE>


; <Start encoding Vale.Def.Words.Seq_s.seq_to_seq_two_LE>

(declare-fun Tm_refine_07b97956699676e6ec70385156af5491 (Term) Term)
(declare-fun Vale.Def.Words.Seq_s.seq_to_seq_two_LE (Term Term) Term)

(declare-fun Tm_refine_26e0fee113cf8ba8e9a18183ef58e100 (Term Term) Term)
(declare-fun Tm_arrow_ddac4375171ce6314246b3a7a9137d28 () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_to_seq_two_LE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_to_seq_two_LE>


; <Start encoding Vale.Def.Words.Seq_s.seq_to_seq_two_BE>


(declare-fun Vale.Def.Words.Seq_s.seq_to_seq_two_BE (Term Term) Term)



(declare-fun Vale.Def.Words.Seq_s.seq_to_seq_two_BE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_to_seq_two_BE>


; <Start encoding Vale.Def.Words.Seq_s.seq_to_seq_four_LE>

(declare-fun Tm_refine_0fe8a12189cf4c417dda723cc135a9ac (Term) Term)
(declare-fun Vale.Def.Words.Seq_s.seq_to_seq_four_LE (Term Term) Term)

(declare-fun Tm_refine_4541e819c92681ed9a776d05a593cda6 (Term Term) Term)
(declare-fun Tm_arrow_3fe1fd37659f3da4c7b6e4359ed332ec () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_to_seq_four_LE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_to_seq_four_LE>


; <Start encoding Vale.Def.Words.Seq_s.seq_to_seq_four_BE>


(declare-fun Vale.Def.Words.Seq_s.seq_to_seq_four_BE (Term Term) Term)



(declare-fun Vale.Def.Words.Seq_s.seq_to_seq_four_BE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_to_seq_four_BE>


; <Start encoding Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_LE>

(declare-fun Tm_refine_efdc432e922f5d070b4ab3b67fda1ef1 () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_LE (Term) Term)

(declare-fun Tm_arrow_9a13b43b762c382daae98284e6558e8d () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_LE@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_LE; Namespace Vale.Def.Words.Seq_s
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.Def.Words.Four_s.four_to_nat@tok))
:named @kick_partial_app_a283f8de909a98ca1c29fd6ee180ec4c))

; </end encoding Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_LE>


; <Start encoding Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_BE>


(declare-fun Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_BE (Term) Term)


(declare-fun Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_BE@tok () Term)



; </end encoding Vale.Def.Words.Seq_s.seq_nat8_to_seq_nat32_BE>


; <Start encoding Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_LE>

(declare-fun Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_LE (Term) Term)
(declare-fun Tm_arrow_ed2eff0bf5f8898c5ade1726fd671d91 () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_LE@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_LE; Namespace Vale.Def.Words.Seq_s
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.Def.Words.Four_s.nat_to_four@tok))
:named @kick_partial_app_809df116159b5354ae4a832828a65549))

; </end encoding Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_LE>


; <Start encoding Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_BE>

(declare-fun Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_BE (Term) Term)

(declare-fun Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_BE@tok () Term)


; </end encoding Vale.Def.Words.Seq_s.seq_nat32_to_seq_nat8_BE>


; <Start encoding Vale.Def.Words.Seq_s.seq_nat8_to_seq_uint8>

(declare-fun Vale.Def.Words.Seq_s.seq_nat8_to_seq_uint8 (Term) Term)
(declare-fun Tm_arrow_7574c39c61c5ddb0038b5c94c2ce601d () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_nat8_to_seq_uint8@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Def.Words.Seq_s.seq_nat8_to_seq_uint8; Namespace Vale.Def.Words.Seq_s
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.UInt8.uint_to_t@tok))
:named @kick_partial_app_3fe30244ead2083f0d1fa037da97bed2))

; </end encoding Vale.Def.Words.Seq_s.seq_nat8_to_seq_uint8>


; <Start encoding Vale.Def.Words.Seq_s.seq_uint8_to_seq_nat8>

(declare-fun Vale.Def.Words.Seq_s.seq_uint8_to_seq_nat8 (Term) Term)
(declare-fun Tm_arrow_09ef8f0bda6d136e6d96e53ffd5c70da () Term)
(declare-fun Vale.Def.Words.Seq_s.seq_uint8_to_seq_nat8@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Def.Words.Seq_s.seq_uint8_to_seq_nat8; Namespace Vale.Def.Words.Seq_s
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.UInt8.v@tok))
:named @kick_partial_app_f0b52b1546ac06484960c1a2a4f43f05))

; </end encoding Vale.Def.Words.Seq_s.seq_uint8_to_seq_nat8>


; End Externals for interface Vale.Def.Words.Seq_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Def.Words.Seq_s (183 decls; total size 14680)

;;; Start interface Vale.Def.Opaque_s

; Externals for interface Vale.Def.Opaque_s


; <Start encoding Vale.Def.Opaque_s.opaque_make>

(declare-fun Vale.Def.Opaque_s.opaque_make (Term Term) Term)

(declare-fun Vale.Def.Opaque_s.opaque_make@tok () Term)

; </end encoding Vale.Def.Opaque_s.opaque_make>


; <Start encoding Vale.Def.Opaque_s.opaque_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Opaque_s.opaque_reveal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Opaque_s.opaque_reveal@tok () Term)

; </end encoding Vale.Def.Opaque_s.opaque_reveal>


; <Start encoding Vale.Def.Opaque_s.opaque_assert>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Opaque_s.opaque_assert (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Opaque_s.opaque_assert@tok () Term)

; </end encoding Vale.Def.Opaque_s.opaque_assert>


; <Start encoding Vale.Def.Opaque_s.opaque_revealer>

(declare-fun Vale.Def.Opaque_s.opaque_revealer (Term Term Term Term) Term)
(declare-fun Tm_refine_53461118ca6e1c8a2dd43c4b9b4a788a (Term Term) Term)
(declare-fun Tm_arrow_3a46323f228a06633d8ff48448a1ebff (Term Term) Term)
(declare-fun Tm_refine_a22212e6d17511af83414d03223d511e (Term Term) Term)
(declare-fun Tm_arrow_53d526a016be417a65ce2ed2a5aa2cbd () Term)
(declare-fun Vale.Def.Opaque_s.opaque_revealer@tok () Term)




; </end encoding Vale.Def.Opaque_s.opaque_revealer>


; End Externals for interface Vale.Def.Opaque_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Def.Opaque_s (27 decls; total size 6689)

;;; Start module Vale.Def.Types_s

; Externals for module Vale.Def.Types_s


; <Start encoding Vale.Def.Types_s.nat8>

(declare-fun Vale.Def.Types_s.nat8 () Term)

; </end encoding Vale.Def.Types_s.nat8>


; <Start encoding Vale.Def.Types_s.nat16>

(declare-fun Vale.Def.Types_s.nat16 () Term)

; </end encoding Vale.Def.Types_s.nat16>


; <Start encoding Vale.Def.Types_s.nat32>

(declare-fun Vale.Def.Types_s.nat32 () Term)

; </end encoding Vale.Def.Types_s.nat32>


; <Start encoding Vale.Def.Types_s.nat64>

(declare-fun Vale.Def.Types_s.nat64 () Term)

; </end encoding Vale.Def.Types_s.nat64>


; <Start encoding Vale.Def.Types_s.add_wrap>

(declare-fun Vale.Def.Types_s.add_wrap (Term Term Term) Term)
(declare-fun Tm_arrow_f95af33ad835cb533a2121e082572e78 () Term)
(declare-fun Vale.Def.Types_s.add_wrap@tok () Term)

; </end encoding Vale.Def.Types_s.add_wrap>


; <Start encoding Vale.Def.Types_s.sub_wrap>

(declare-fun Vale.Def.Types_s.sub_wrap (Term Term Term) Term)

(declare-fun Vale.Def.Types_s.sub_wrap@tok () Term)

; </end encoding Vale.Def.Types_s.sub_wrap>


; <Start encoding Vale.Def.Types_s.iand>

(declare-fun Vale.Def.Types_s.iand (Term Term Term) Term)

(declare-fun Vale.Def.Types_s.iand@tok () Term)

; </end encoding Vale.Def.Types_s.iand>


; <Start encoding Vale.Def.Types_s.ixor>

(declare-fun Vale.Def.Types_s.ixor (Term Term Term) Term)

(declare-fun Vale.Def.Types_s.ixor@tok () Term)

; </end encoding Vale.Def.Types_s.ixor>


; <Start encoding Vale.Def.Types_s.ior>

(declare-fun Vale.Def.Types_s.ior (Term Term Term) Term)

(declare-fun Vale.Def.Types_s.ior@tok () Term)

; </end encoding Vale.Def.Types_s.ior>


; <Start encoding Vale.Def.Types_s.inot>

(declare-fun Vale.Def.Types_s.inot (Term Term) Term)
(declare-fun Tm_arrow_f147470ddb176bb638e377e75c0d559b () Term)
(declare-fun Vale.Def.Types_s.inot@tok () Term)

; </end encoding Vale.Def.Types_s.inot>


; <Start encoding Vale.Def.Types_s.ishl>

(declare-fun Vale.Def.Types_s.ishl (Term Term Term) Term)
(declare-fun Tm_arrow_acae18ce8e9518c869d9f1402e357d86 () Term)
(declare-fun Vale.Def.Types_s.ishl@tok () Term)

; </end encoding Vale.Def.Types_s.ishl>


; <Start encoding Vale.Def.Types_s.ishr>

(declare-fun Vale.Def.Types_s.ishr (Term Term Term) Term)

(declare-fun Vale.Def.Types_s.ishr@tok () Term)

; </end encoding Vale.Def.Types_s.ishr>


; <Start encoding Vale.Def.Types_s.nat32_xor>

(declare-fun Vale.Def.Types_s.nat32_xor (Term Term) Term)
(declare-fun Tm_arrow_9d5e7076bf924ce814a9897999540995 () Term)
(declare-fun Vale.Def.Types_s.nat32_xor@tok () Term)

; </end encoding Vale.Def.Types_s.nat32_xor>


; <Start encoding Vale.Def.Types_s.twobits>

(declare-fun Vale.Def.Types_s.twobits (Dummy_sort) Term)

; </end encoding Vale.Def.Types_s.twobits>


; <Start encoding Vale.Def.Types_s.bits_of_byte>

(declare-fun Vale.Def.Types_s.bits_of_byte (Dummy_sort) Term)

; </end encoding Vale.Def.Types_s.bits_of_byte>


; <Start encoding Vale.Def.Types_s.byte_to_twobits>

(declare-fun Vale.Def.Types_s.byte_to_twobits (Term) Term)
(declare-fun Tm_arrow_58c6e688044d69e8c97b7330326f3ba0 () Term)
(declare-fun Vale.Def.Types_s.byte_to_twobits@tok () Term)

; </end encoding Vale.Def.Types_s.byte_to_twobits>


; <Start encoding Vale.Def.Types_s.double32>

(declare-fun Vale.Def.Types_s.double32 (Dummy_sort) Term)

; </end encoding Vale.Def.Types_s.double32>


; <Start encoding Vale.Def.Types_s.quad32>

(declare-fun Vale.Def.Types_s.quad32 (Dummy_sort) Term)
;;;;;;;;;;;;;;;;Equation for Vale.Def.Types_s.quad32
;;; Fact-ids: Name Vale.Def.Types_s.quad32; Namespace Vale.Def.Types_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Types_s.fst(37,5-37,11); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Types_s.fst(37,5-37,11)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Types_s.fst(37,5-37,11); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Types_s.fst(37,5-37,11)
(Vale.Def.Types_s.quad32 @u0)

(Vale.Def.Words_s.four Vale.Def.Words_s.nat32))
 

:pattern (
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Types_s.fst(37,5-37,11); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Types_s.fst(37,5-37,11)
(Vale.Def.Types_s.quad32 @u0)
)
:qid equation_Vale.Def.Types_s.quad32))

:named equation_Vale.Def.Types_s.quad32))

; </end encoding Vale.Def.Types_s.quad32>


; <Start encoding Vale.Def.Types_s.quad32_xor_def>

(declare-fun Vale.Def.Types_s.quad32_xor_def (Term Term) Term)
(declare-fun Tm_arrow_e218595700033f7689da206e060fab75 () Term)
(declare-fun Vale.Def.Types_s.quad32_xor_def@tok () Term)

; </end encoding Vale.Def.Types_s.quad32_xor_def>


; <Start encoding Vale.Def.Types_s.quad32_xor>

(declare-fun Vale.Def.Types_s.quad32_xor (Term Term) Term)

(declare-fun Vale.Def.Types_s.quad32_xor@tok () Term)

; </end encoding Vale.Def.Types_s.quad32_xor>


; <Start encoding Vale.Def.Types_s.quad32_xor_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.quad32_xor_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.quad32_xor_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.quad32_xor_reveal>


; <Start encoding Vale.Def.Types_s.select_word>

(declare-fun Vale.Def.Types_s.select_word (Term Term) Term)
(declare-fun Tm_arrow_f2e4431ddfdbc84ce17b97cc318859e4 () Term)
(declare-fun Vale.Def.Types_s.select_word@tok () Term)

; </end encoding Vale.Def.Types_s.select_word>


; <Start encoding Vale.Def.Types_s.insert_nat32>

(declare-fun Vale.Def.Types_s.insert_nat32 (Term Term Term) Term)
(declare-fun Tm_arrow_817dce841be4a1404a222e1341e3f6e7 () Term)
(declare-fun Vale.Def.Types_s.insert_nat32@tok () Term)

; </end encoding Vale.Def.Types_s.insert_nat32>


; <Start encoding Vale.Def.Types_s.insert_nat64_def>

(declare-fun Vale.Def.Types_s.insert_nat64_def (Term Term Term) Term)
(declare-fun Tm_arrow_67c1cecf678e61ab3cbff29980466174 () Term)
(declare-fun Vale.Def.Types_s.insert_nat64_def@tok () Term)

; </end encoding Vale.Def.Types_s.insert_nat64_def>


; <Start encoding Vale.Def.Types_s.insert_nat64>

(declare-fun Vale.Def.Types_s.insert_nat64 (Term Term Term) Term)

(declare-fun Vale.Def.Types_s.insert_nat64@tok () Term)

; </end encoding Vale.Def.Types_s.insert_nat64>


; <Start encoding Vale.Def.Types_s.insert_nat64_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.insert_nat64_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.insert_nat64_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.insert_nat64_reveal>


; <Start encoding Vale.Def.Types_s.le_bytes_to_nat32>

(declare-fun Vale.Def.Types_s.le_bytes_to_nat32 (Term) Term)
(declare-fun Tm_arrow_a37c9c29f3b831304a0f89c3a8b93ffb () Term)
(declare-fun Vale.Def.Types_s.le_bytes_to_nat32@tok () Term)

; </end encoding Vale.Def.Types_s.le_bytes_to_nat32>


; <Start encoding Vale.Def.Types_s.nat32_to_le_bytes>

(declare-fun Vale.Def.Types_s.nat32_to_le_bytes (Term) Term)
(declare-fun Tm_refine_51c26ed4732c05b88306523aac90b3f0 (Term) Term)
(declare-fun Tm_arrow_0148781fd0191ccb8890bd815b1e37f0 () Term)
(declare-fun Vale.Def.Types_s.nat32_to_le_bytes@tok () Term)


; </end encoding Vale.Def.Types_s.nat32_to_le_bytes>


; <Start encoding Vale.Def.Types_s.be_bytes_to_nat32>

(declare-fun Vale.Def.Types_s.be_bytes_to_nat32 (Term) Term)

(declare-fun Vale.Def.Types_s.be_bytes_to_nat32@tok () Term)

; </end encoding Vale.Def.Types_s.be_bytes_to_nat32>


; <Start encoding Vale.Def.Types_s.nat32_to_be_bytes>

(declare-fun Vale.Def.Types_s.nat32_to_be_bytes (Term) Term)
(declare-fun Tm_refine_fae547c0c57b476075b6de4468df2cfa (Term) Term)
(declare-fun Tm_arrow_ef1bda27e992c1f33494cdf0452b7b1a () Term)
(declare-fun Vale.Def.Types_s.nat32_to_be_bytes@tok () Term)


; </end encoding Vale.Def.Types_s.nat32_to_be_bytes>


; <Start encoding Vale.Def.Types_s.be_bytes_to_nat32_to_be_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.be_bytes_to_nat32_to_be_bytes (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.be_bytes_to_nat32_to_be_bytes@tok () Term)

; </end encoding Vale.Def.Types_s.be_bytes_to_nat32_to_be_bytes>


; <Start encoding Vale.Def.Types_s.le_bytes_to_nat64_def>

(declare-fun Vale.Def.Types_s.le_bytes_to_nat64_def (Term) Term)
(declare-fun Tm_refine_a97bb01c04ffe0871485a0f7264ef673 () Term)
(declare-fun Tm_arrow_1259f1ba902fe2132ffa0d8ef5ba16fb () Term)
(declare-fun Vale.Def.Types_s.le_bytes_to_nat64_def@tok () Term)


; </end encoding Vale.Def.Types_s.le_bytes_to_nat64_def>


; <Start encoding Vale.Def.Types_s.le_bytes_to_nat64>

(declare-fun Vale.Def.Types_s.le_bytes_to_nat64 (Term) Term)


(declare-fun Vale.Def.Types_s.le_bytes_to_nat64@tok () Term)


; </end encoding Vale.Def.Types_s.le_bytes_to_nat64>


; <Start encoding Vale.Def.Types_s.le_bytes_to_nat64_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.le_bytes_to_nat64_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.le_bytes_to_nat64_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.le_bytes_to_nat64_reveal>


; <Start encoding Vale.Def.Types_s.le_nat64_to_bytes_def>

(declare-fun Vale.Def.Types_s.le_nat64_to_bytes_def (Term) Term)
(declare-fun Tm_refine_8333610bdce3cc23e40345e003cba619 () Term)
(declare-fun Tm_arrow_039adeee307e6aba7d8292189ba04985 () Term)
(declare-fun Vale.Def.Types_s.le_nat64_to_bytes_def@tok () Term)


; </end encoding Vale.Def.Types_s.le_nat64_to_bytes_def>


; <Start encoding Vale.Def.Types_s.le_nat64_to_bytes>

(declare-fun Vale.Def.Types_s.le_nat64_to_bytes (Term) Term)


(declare-fun Vale.Def.Types_s.le_nat64_to_bytes@tok () Term)


; </end encoding Vale.Def.Types_s.le_nat64_to_bytes>


; <Start encoding Vale.Def.Types_s.le_nat64_to_bytes_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.le_nat64_to_bytes_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.le_nat64_to_bytes_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.le_nat64_to_bytes_reveal>


; <Start encoding Vale.Def.Types_s.le_bytes_to_quad32_def>

(declare-fun Vale.Def.Types_s.le_bytes_to_quad32_def (Term) Term)
(declare-fun Tm_refine_507ed4c55777344d5e25694fb1d7ecf2 () Term)
(declare-fun Tm_arrow_f68bd08954d42d103a457d92575cca53 () Term)
(declare-fun Vale.Def.Types_s.le_bytes_to_quad32_def@tok () Term)



; </end encoding Vale.Def.Types_s.le_bytes_to_quad32_def>


; <Start encoding Vale.Def.Types_s.le_bytes_to_quad32>

(declare-fun Vale.Def.Types_s.le_bytes_to_quad32 (Term) Term)


(declare-fun Vale.Def.Types_s.le_bytes_to_quad32@tok () Term)


; </end encoding Vale.Def.Types_s.le_bytes_to_quad32>


; <Start encoding Vale.Def.Types_s.le_bytes_to_quad32_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.le_bytes_to_quad32_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.le_bytes_to_quad32_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.le_bytes_to_quad32_reveal>


; <Start encoding Vale.Def.Types_s.be_bytes_to_quad32_def>

(declare-fun Vale.Def.Types_s.be_bytes_to_quad32_def (Term) Term)


(declare-fun Vale.Def.Types_s.be_bytes_to_quad32_def@tok () Term)



; </end encoding Vale.Def.Types_s.be_bytes_to_quad32_def>


; <Start encoding Vale.Def.Types_s.be_bytes_to_quad32>

(declare-fun Vale.Def.Types_s.be_bytes_to_quad32 (Term) Term)


(declare-fun Vale.Def.Types_s.be_bytes_to_quad32@tok () Term)


; </end encoding Vale.Def.Types_s.be_bytes_to_quad32>


; <Start encoding Vale.Def.Types_s.be_bytes_to_quad32_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.be_bytes_to_quad32_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.be_bytes_to_quad32_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.be_bytes_to_quad32_reveal>


; <Start encoding Vale.Def.Types_s.le_quad32_to_bytes>

(declare-fun Vale.Def.Types_s.le_quad32_to_bytes (Term) Term)
(declare-fun Tm_refine_b31e3a3ba71ee334e7dd15a53b9eadcc () Term)
(declare-fun Tm_arrow_bbc02919509ee37b4445fde78552eb29 () Term)
(declare-fun Vale.Def.Types_s.le_quad32_to_bytes@tok () Term)


; </end encoding Vale.Def.Types_s.le_quad32_to_bytes>


; <Start encoding Vale.Def.Types_s.le_seq_quad32_to_bytes_def>

(declare-fun Vale.Def.Types_s.le_seq_quad32_to_bytes_def (Term) Term)
(declare-fun Tm_arrow_4de08b728fb5681cc3564d527a339bba () Term)
(declare-fun Vale.Def.Types_s.le_seq_quad32_to_bytes_def@tok () Term)

; </end encoding Vale.Def.Types_s.le_seq_quad32_to_bytes_def>


; <Start encoding Vale.Def.Types_s.le_seq_quad32_to_bytes>

(declare-fun Vale.Def.Types_s.le_seq_quad32_to_bytes (Term) Term)

(declare-fun Vale.Def.Types_s.le_seq_quad32_to_bytes@tok () Term)

; </end encoding Vale.Def.Types_s.le_seq_quad32_to_bytes>


; <Start encoding Vale.Def.Types_s.le_seq_quad32_to_bytes_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.le_seq_quad32_to_bytes_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.le_seq_quad32_to_bytes_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.le_seq_quad32_to_bytes_reveal>


; <Start encoding Vale.Def.Types_s.le_seq_quad32_to_bytes_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.le_seq_quad32_to_bytes_length (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.le_seq_quad32_to_bytes_length@tok () Term)

; </end encoding Vale.Def.Types_s.le_seq_quad32_to_bytes_length>


; <Start encoding Vale.Def.Types_s.le_bytes_to_seq_quad32>

(declare-fun Vale.Def.Types_s.le_bytes_to_seq_quad32 (Term) Term)
(declare-fun Tm_refine_1c920df238056cce4004409123681721 () Term)
(declare-fun Tm_arrow_405f1c67b49fab6c8a0b715195b7c513 () Term)
(declare-fun Vale.Def.Types_s.le_bytes_to_seq_quad32@tok () Term)


; </end encoding Vale.Def.Types_s.le_bytes_to_seq_quad32>


; <Start encoding Vale.Def.Types_s.be_bytes_to_seq_quad32>

(declare-fun Vale.Def.Types_s.be_bytes_to_seq_quad32 (Term) Term)


(declare-fun Vale.Def.Types_s.be_bytes_to_seq_quad32@tok () Term)


; </end encoding Vale.Def.Types_s.be_bytes_to_seq_quad32>


; <Start encoding Vale.Def.Types_s.reverse_bytes_nat32_def>

(declare-fun Vale.Def.Types_s.reverse_bytes_nat32_def (Term) Term)
(declare-fun Tm_arrow_661e1a12e91e56ff69c6b8ebf83dc218 () Term)
(declare-fun Vale.Def.Types_s.reverse_bytes_nat32_def@tok () Term)

; </end encoding Vale.Def.Types_s.reverse_bytes_nat32_def>


; <Start encoding Vale.Def.Types_s.reverse_bytes_nat32>

(declare-fun Vale.Def.Types_s.reverse_bytes_nat32 (Term) Term)

(declare-fun Vale.Def.Types_s.reverse_bytes_nat32@tok () Term)

; </end encoding Vale.Def.Types_s.reverse_bytes_nat32>


; <Start encoding Vale.Def.Types_s.reverse_bytes_nat32_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.reverse_bytes_nat32_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.reverse_bytes_nat32_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.reverse_bytes_nat32_reveal>


; <Start encoding Vale.Def.Types_s.reverse_bytes_nat64_def>

(declare-fun Vale.Def.Types_s.reverse_bytes_nat64_def (Term) Term)
(declare-fun Tm_arrow_2e0cf4484b4ea1e6c64fba33723bfa3b () Term)
(declare-fun Vale.Def.Types_s.reverse_bytes_nat64_def@tok () Term)

; </end encoding Vale.Def.Types_s.reverse_bytes_nat64_def>


; <Start encoding Vale.Def.Types_s.reverse_bytes_nat64>

(declare-fun Vale.Def.Types_s.reverse_bytes_nat64 (Term) Term)

(declare-fun Vale.Def.Types_s.reverse_bytes_nat64@tok () Term)

; </end encoding Vale.Def.Types_s.reverse_bytes_nat64>


; <Start encoding Vale.Def.Types_s.reverse_bytes_nat64_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.reverse_bytes_nat64_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.reverse_bytes_nat64_reveal@tok () Term)

; </end encoding Vale.Def.Types_s.reverse_bytes_nat64_reveal>


; <Start encoding Vale.Def.Types_s.reverse_bytes_quad32>

(declare-fun Vale.Def.Types_s.reverse_bytes_quad32 (Term) Term)
(declare-fun Tm_arrow_f33a1e80d097b65957309e13d3848492 () Term)
(declare-fun Vale.Def.Types_s.reverse_bytes_quad32@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.Def.Types_s.reverse_bytes_quad32; Namespace Vale.Def.Types_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Types_s.fst(128,11-128,31); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.Types_s.fst(128,11-128,31)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType (Vale.Def.Types_s.reverse_bytes_quad32 @x0)
(Vale.Def.Types_s.quad32 Dummy_value)))
 

:pattern ((Vale.Def.Types_s.reverse_bytes_quad32 @x0))
:qid typing_Vale.Def.Types_s.reverse_bytes_quad32))

:named typing_Vale.Def.Types_s.reverse_bytes_quad32))

; </end encoding Vale.Def.Types_s.reverse_bytes_quad32>


; <Start encoding Vale.Def.Types_s.reveal_reverse_bytes_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.reveal_reverse_bytes_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.reveal_reverse_bytes_quad32@tok () Term)

; </end encoding Vale.Def.Types_s.reveal_reverse_bytes_quad32>


; <Start encoding Vale.Def.Types_s.reverse_bytes_nat32_seq>

(declare-fun Vale.Def.Types_s.reverse_bytes_nat32_seq (Term) Term)
(declare-fun Tm_refine_afc033f4783947c3d425ff758d5e540a (Term) Term)
(declare-fun Tm_arrow_8385ac8f6ec216fc79fdb58d02d9d2dd () Term)
(declare-fun Vale.Def.Types_s.reverse_bytes_nat32_seq@tok () Term)


; </end encoding Vale.Def.Types_s.reverse_bytes_nat32_seq>


; <Start encoding Vale.Def.Types_s.reveal_reverse_bytes_nat32_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Types_s.reveal_reverse_bytes_nat32_seq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Types_s.reveal_reverse_bytes_nat32_seq@tok () Term)

; </end encoding Vale.Def.Types_s.reveal_reverse_bytes_nat32_seq>


; End Externals for module Vale.Def.Types_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.Def.Types_s (306 decls; total size 23870)

;;; Start interface Vale.Math.Poly2.Bits_s

; Externals for interface Vale.Math.Poly2.Bits_s


; <Start encoding Vale.Math.Poly2.Bits_s.to_uint>

(declare-fun Vale.Math.Poly2.Bits_s.to_uint (Term Term) Term)
(declare-fun Tm_arrow_bb6463c2c96669771b74326e84815097 () Term)
(declare-fun Vale.Math.Poly2.Bits_s.to_uint@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.to_uint>


; <Start encoding Vale.Math.Poly2.Bits_s.of_uint>

(declare-fun Vale.Math.Poly2.Bits_s.of_uint (Term Term) Term)
(declare-fun Tm_arrow_054208378c3cae792483a519060f4be9 () Term)
(declare-fun Vale.Math.Poly2.Bits_s.of_uint@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.of_uint>


; <Start encoding Vale.Math.Poly2.Bits_s.to_double32_def>

(declare-fun Vale.Math.Poly2.Bits_s.to_double32_def (Term) Term)
(declare-fun Tm_arrow_2ddddf04dc44ea3e1dda0a8dcbb5b77a () Term)
(declare-fun Vale.Math.Poly2.Bits_s.to_double32_def@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.to_double32_def>


; <Start encoding Vale.Math.Poly2.Bits_s.of_double32_def>

(declare-fun Vale.Math.Poly2.Bits_s.of_double32_def (Term) Term)
(declare-fun Tm_arrow_23a269d0b11ca9343ef8b6409bb944cf () Term)
(declare-fun Vale.Math.Poly2.Bits_s.of_double32_def@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.of_double32_def>


; <Start encoding Vale.Math.Poly2.Bits_s.to_quad32_def>

(declare-fun Vale.Math.Poly2.Bits_s.to_quad32_def (Term) Term)
(declare-fun Tm_arrow_b632784229c4357bd4d0c589a5f86690 () Term)
(declare-fun Vale.Math.Poly2.Bits_s.to_quad32_def@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.to_quad32_def>


; <Start encoding Vale.Math.Poly2.Bits_s.of_quad32_def>

(declare-fun Vale.Math.Poly2.Bits_s.of_quad32_def (Term) Term)
(declare-fun Tm_arrow_8a4c62a54ad3756f7b4a7ddd1c132d5c () Term)
(declare-fun Vale.Math.Poly2.Bits_s.of_quad32_def@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.of_quad32_def>


; <Start encoding Vale.Math.Poly2.Bits_s.to_double32>

(declare-fun Vale.Math.Poly2.Bits_s.to_double32 (Term) Term)

(declare-fun Vale.Math.Poly2.Bits_s.to_double32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.to_double32>


; <Start encoding Vale.Math.Poly2.Bits_s.of_double32>

(declare-fun Vale.Math.Poly2.Bits_s.of_double32 (Term) Term)

(declare-fun Vale.Math.Poly2.Bits_s.of_double32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.of_double32>


; <Start encoding Vale.Math.Poly2.Bits_s.to_quad32>

(declare-fun Vale.Math.Poly2.Bits_s.to_quad32 (Term) Term)

(declare-fun Vale.Math.Poly2.Bits_s.to_quad32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.to_quad32>


; <Start encoding Vale.Math.Poly2.Bits_s.of_quad32>

(declare-fun Vale.Math.Poly2.Bits_s.of_quad32 (Term) Term)

(declare-fun Vale.Math.Poly2.Bits_s.of_quad32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.of_quad32>


; <Start encoding Vale.Math.Poly2.Bits_s.reveal_to_double32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits_s.reveal_to_double32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits_s.reveal_to_double32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.reveal_to_double32>


; <Start encoding Vale.Math.Poly2.Bits_s.reveal_of_double32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits_s.reveal_of_double32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits_s.reveal_of_double32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.reveal_of_double32>


; <Start encoding Vale.Math.Poly2.Bits_s.reveal_to_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits_s.reveal_to_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits_s.reveal_to_quad32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.reveal_to_quad32>


; <Start encoding Vale.Math.Poly2.Bits_s.reveal_of_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits_s.reveal_of_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits_s.reveal_of_quad32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits_s.reveal_of_quad32>


; End Externals for interface Vale.Math.Poly2.Bits_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Math.Poly2.Bits_s (69 decls; total size 9469)

;;; Start interface Vale.Def.Words.Seq

; Externals for interface Vale.Def.Words.Seq


; <Start encoding Vale.Def.Words.Seq.two_to_seq_to_two_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.two_to_seq_to_two_LE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.two_to_seq_to_two_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.two_to_seq_to_two_LE>


; <Start encoding Vale.Def.Words.Seq.seq_to_two_to_seq_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_two_to_seq_LE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_two_to_seq_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_to_two_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq.seq_to_seq_four_to_seq_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_seq_four_to_seq_LE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_seq_four_to_seq_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_to_seq_four_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq.seq_to_seq_four_to_seq_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_seq_four_to_seq_BE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_seq_four_to_seq_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_to_seq_four_to_seq_BE>


; <Start encoding Vale.Def.Words.Seq.seq_four_to_seq_to_seq_four_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_to_seq_four_LE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_to_seq_four_LE@tok () Term)


; </end encoding Vale.Def.Words.Seq.seq_four_to_seq_to_seq_four_LE>


; <Start encoding Vale.Def.Words.Seq.seq_four_to_seq_to_seq_four_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_to_seq_four_BE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_to_seq_four_BE@tok () Term)


; </end encoding Vale.Def.Words.Seq.seq_four_to_seq_to_seq_four_BE>


; <Start encoding Vale.Def.Words.Seq.four_to_nat_to_four_8>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.four_to_nat_to_four_8 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.four_to_nat_to_four_8@tok () Term)

; </end encoding Vale.Def.Words.Seq.four_to_nat_to_four_8>


; <Start encoding Vale.Def.Words.Seq.nat_to_four_to_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.nat_to_four_to_nat (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.nat_to_four_to_nat@tok () Term)

; </end encoding Vale.Def.Words.Seq.nat_to_four_to_nat>


; <Start encoding Vale.Def.Words.Seq.four_to_seq_to_four_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_to_four_LE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_to_four_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.four_to_seq_to_four_LE>


; <Start encoding Vale.Def.Words.Seq.seq_to_four_to_seq_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_four_to_seq_LE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_four_to_seq_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_to_four_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq.four_to_seq_to_four_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_to_four_BE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_to_four_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq.four_to_seq_to_four_BE>


; <Start encoding Vale.Def.Words.Seq.seq_to_four_to_seq_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_four_to_seq_BE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_to_four_to_seq_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_to_four_to_seq_BE>


; <Start encoding Vale.Def.Words.Seq.four_to_seq_LE_is_seq_four_to_seq_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_LE_is_seq_four_to_seq_LE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_LE_is_seq_four_to_seq_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.four_to_seq_LE_is_seq_four_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq.four_to_seq_BE_is_seq_four_to_seq_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_BE_is_seq_four_to_seq_BE (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_BE_is_seq_four_to_seq_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq.four_to_seq_BE_is_seq_four_to_seq_BE>


; <Start encoding Vale.Def.Words.Seq.seq_nat8_to_seq_nat32_to_seq_nat8_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat8_to_seq_nat32_to_seq_nat8_LE (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat8_to_seq_nat32_to_seq_nat8_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_nat8_to_seq_nat32_to_seq_nat8_LE>


; <Start encoding Vale.Def.Words.Seq.seq_nat8_to_seq_nat32_to_seq_nat8_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat8_to_seq_nat32_to_seq_nat8_BE (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat8_to_seq_nat32_to_seq_nat8_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_nat8_to_seq_nat32_to_seq_nat8_BE>


; <Start encoding Vale.Def.Words.Seq.seq_nat32_to_seq_nat8_to_seq_nat32_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat32_to_seq_nat8_to_seq_nat32_LE (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat32_to_seq_nat8_to_seq_nat32_LE@tok () Term)


; </end encoding Vale.Def.Words.Seq.seq_nat32_to_seq_nat8_to_seq_nat32_LE>


; <Start encoding Vale.Def.Words.Seq.seq_nat8_to_seq_uint8_to_seq_nat8>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat8_to_seq_uint8_to_seq_nat8 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat8_to_seq_uint8_to_seq_nat8@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_nat8_to_seq_uint8_to_seq_nat8>


; <Start encoding Vale.Def.Words.Seq.seq_uint8_to_seq_nat8_to_seq_uint8>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_uint8_to_seq_nat8_to_seq_uint8 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_uint8_to_seq_nat8_to_seq_uint8@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_uint8_to_seq_nat8_to_seq_uint8>


; <Start encoding Vale.Def.Words.Seq.seq_nat8_to_seq_uint8_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat8_to_seq_uint8_injective (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_nat8_to_seq_uint8_injective@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_nat8_to_seq_uint8_injective>


; <Start encoding Vale.Def.Words.Seq.seq_four_to_seq_LE_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_LE_injective (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_LE_injective@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_four_to_seq_LE_injective>


; <Start encoding Vale.Def.Words.Seq.seq_four_to_seq_BE_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_BE_injective (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_BE_injective@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_four_to_seq_BE_injective>


; <Start encoding Vale.Def.Words.Seq.seq_four_to_seq_LE_injective_specific>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_LE_injective_specific (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_LE_injective_specific@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_four_to_seq_LE_injective_specific>


; <Start encoding Vale.Def.Words.Seq.seq_four_to_seq_BE_injective_specific>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_BE_injective_specific (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.seq_four_to_seq_BE_injective_specific@tok () Term)

; </end encoding Vale.Def.Words.Seq.seq_four_to_seq_BE_injective_specific>


; <Start encoding Vale.Def.Words.Seq.four_to_seq_LE_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_LE_injective (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_LE_injective@tok () Term)

; </end encoding Vale.Def.Words.Seq.four_to_seq_LE_injective>


; <Start encoding Vale.Def.Words.Seq.four_to_seq_BE_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_BE_injective (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.four_to_seq_BE_injective@tok () Term)

; </end encoding Vale.Def.Words.Seq.four_to_seq_BE_injective>


; <Start encoding Vale.Def.Words.Seq.four_to_nat_8_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.four_to_nat_8_injective (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.four_to_nat_8_injective@tok () Term)

; </end encoding Vale.Def.Words.Seq.four_to_nat_8_injective>


; <Start encoding Vale.Def.Words.Seq.nat_to_four_8_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.nat_to_four_8_injective (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.nat_to_four_8_injective@tok () Term)

; </end encoding Vale.Def.Words.Seq.nat_to_four_8_injective>


; <Start encoding Vale.Def.Words.Seq.append_distributes_seq_to_seq_four_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.append_distributes_seq_to_seq_four_LE (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.append_distributes_seq_to_seq_four_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.append_distributes_seq_to_seq_four_LE>


; <Start encoding Vale.Def.Words.Seq.append_distributes_seq_to_seq_four_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.append_distributes_seq_to_seq_four_BE (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.append_distributes_seq_to_seq_four_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq.append_distributes_seq_to_seq_four_BE>


; <Start encoding Vale.Def.Words.Seq.append_distributes_seq_four_to_seq_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.append_distributes_seq_four_to_seq_LE (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.append_distributes_seq_four_to_seq_LE@tok () Term)

; </end encoding Vale.Def.Words.Seq.append_distributes_seq_four_to_seq_LE>


; <Start encoding Vale.Def.Words.Seq.append_distributes_seq_four_to_seq_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.Words.Seq.append_distributes_seq_four_to_seq_BE (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.Words.Seq.append_distributes_seq_four_to_seq_BE@tok () Term)

; </end encoding Vale.Def.Words.Seq.append_distributes_seq_four_to_seq_BE>


; End Externals for interface Vale.Def.Words.Seq


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Def.Words.Seq (134 decls; total size 18456)

;;; Start module FStar.Exn

; Externals for module FStar.Exn


; <Start encoding FStar.Exn.raise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Exn.raise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Exn.raise@tok () Term)

; </end encoding FStar.Exn.raise>


; End Externals for module FStar.Exn


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Exn (7 decls; total size 5480)

;;; Start interface FStar.Set

; Externals for interface FStar.Set


; <Skipped />


; <Start encoding FStar.Set.set>

(declare-fun FStar.Set.set (Term) Term)

(declare-fun FStar.Set.set@tok () Term)

; </end encoding FStar.Set.set>


; <Start encoding FStar.Set.equal>

(declare-fun FStar.Set.equal (Term Term Term) Term)
(declare-fun Tm_arrow_3c4f6e4cf547bd34ec8e06fa6c99957f () Term)
(declare-fun FStar.Set.equal@tok () Term)

; </end encoding FStar.Set.equal>


; <Start encoding FStar.Set.mem>

(declare-fun FStar.Set.mem (Term Term Term) Term)
(declare-fun Tm_arrow_3622740f6f31d7fd022d9da9e7023a5e () Term)
(declare-fun FStar.Set.mem@tok () Term)

; </end encoding FStar.Set.mem>


; <Start encoding FStar.Set.empty>

(declare-fun FStar.Set.empty (Term) Term)
(declare-fun Tm_arrow_8126140804a823c0abf765b538511539 () Term)
(declare-fun FStar.Set.empty@tok () Term)

; </end encoding FStar.Set.empty>


; <Start encoding FStar.Set.singleton>

(declare-fun FStar.Set.singleton (Term Term) Term)
(declare-fun Tm_arrow_764304f899737575fb0645eff5d55885 () Term)
(declare-fun FStar.Set.singleton@tok () Term)

; </end encoding FStar.Set.singleton>


; <Start encoding FStar.Set.union>

(declare-fun FStar.Set.union (Term Term Term) Term)
(declare-fun Tm_arrow_7571f855c31e3c10cb35bbdc0f3ae878 () Term)
(declare-fun FStar.Set.union@tok () Term)

; </end encoding FStar.Set.union>


; <Start encoding FStar.Set.intersect>

(declare-fun FStar.Set.intersect (Term Term Term) Term)

(declare-fun FStar.Set.intersect@tok () Term)

; </end encoding FStar.Set.intersect>


; <Start encoding FStar.Set.complement>

(declare-fun FStar.Set.complement (Term Term) Term)
(declare-fun Tm_arrow_4a14af1f2d9ff62069ebb44d0d1980f6 () Term)
(declare-fun FStar.Set.complement@tok () Term)

; </end encoding FStar.Set.complement>


; <Start encoding FStar.Set.intension>


(declare-fun FStar.Set.intension (Term Term) Term)

(declare-fun Tm_ghost_arrow_04e42a5c0c55c36964ab6333a076e29e () Term)
(declare-fun FStar.Set.intension@tok () Term)

; </end encoding FStar.Set.intension>


; <Start encoding FStar.Set.disjoint>

(declare-fun FStar.Set.disjoint (Term Term Term) Term)

(declare-fun FStar.Set.disjoint@tok () Term)

; </end encoding FStar.Set.disjoint>


; <Start encoding FStar.Set.subset>

(declare-fun FStar.Set.subset (Term Term Term) Term)
(declare-fun Tm_arrow_9a1bfd7a415bf0250a3dd161144f27fa () Term)
(declare-fun FStar.Set.subset@tok () Term)

(declare-fun Tm_abs_b994f65c6ead01769958409fcca4789b (Term Term Term) Term)

; </end encoding FStar.Set.subset>


; <Start encoding FStar.Set.add>

(declare-fun FStar.Set.add (Term Term Term) Term)
(declare-fun Tm_arrow_3e561cbcf9b0a4b95f6e5d77760b40db () Term)
(declare-fun FStar.Set.add@tok () Term)

; </end encoding FStar.Set.add>


; <Start encoding FStar.Set.remove>

(declare-fun FStar.Set.remove (Term Term Term) Term)

(declare-fun FStar.Set.remove@tok () Term)

; </end encoding FStar.Set.remove>


; <Start encoding FStar.Set.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_empty@tok () Term)

; </end encoding FStar.Set.mem_empty>


; <Start encoding FStar.Set.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_singleton@tok () Term)

; </end encoding FStar.Set.mem_singleton>


; <Start encoding FStar.Set.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_union@tok () Term)

; </end encoding FStar.Set.mem_union>


; <Start encoding FStar.Set.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intersect@tok () Term)

; </end encoding FStar.Set.mem_intersect>


; <Start encoding FStar.Set.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_complement@tok () Term)

; </end encoding FStar.Set.mem_complement>


; <Start encoding FStar.Set.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intension@tok () Term)

; </end encoding FStar.Set.mem_intension>


; <Start encoding FStar.Set.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_subset@tok () Term)

; </end encoding FStar.Set.mem_subset>


; <Start encoding FStar.Set.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.subset_mem@tok () Term)

; </end encoding FStar.Set.subset_mem>


; <Start encoding FStar.Set.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_intro@tok () Term)

; </end encoding FStar.Set.lemma_equal_intro>


; <Start encoding FStar.Set.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_elim@tok () Term)

; </end encoding FStar.Set.lemma_equal_elim>


; <Start encoding FStar.Set.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_refl@tok () Term)

; </end encoding FStar.Set.lemma_equal_refl>


; <Start encoding FStar.Set.disjoint_not_in_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.disjoint_not_in_both (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.disjoint_not_in_both@tok () Term)

; </end encoding FStar.Set.disjoint_not_in_both>


; <Skipped />


; <Start encoding FStar.Set.as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Set.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Set.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.Set.as_set_ (Term Term) Term)
(declare-fun FStar.Set.as_set_@tok () Term)
(declare-fun Tm_arrow_37c32948884378803a50151abdb3cb09 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Set.as_set'; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(125,8-125,15); use=FStar.Set.fsti(125,8-125,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Set.as_set_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Set.as_set_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Set.as_set_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Set.as_set_.fuel_instrumented))

:named @fuel_irrelevance_FStar.Set.as_set_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Set.as_set'; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(125,8-125,15); use=FStar.Set.fsti(125,8-125,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Set.as_set_ @x0
@x1)
(FStar.Set.as_set_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Set.as_set_ @x0
@x1))
:qid @fuel_correspondence_FStar.Set.as_set_.fuel_instrumented))

:named @fuel_correspondence_FStar.Set.as_set_.fuel_instrumented))

; </end encoding FStar.Set.as_set'>


; <Start encoding FStar.Set.as_set>

(declare-fun FStar.Set.as_set (Term Term) Term)

(declare-fun FStar.Set.as_set@tok () Term)

; </end encoding FStar.Set.as_set>


; <Start encoding FStar.Set.lemma_disjoint_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_disjoint_subset (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_disjoint_subset@tok () Term)

; </end encoding FStar.Set.lemma_disjoint_subset>


; End Externals for interface FStar.Set


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Set (140 decls; total size 14011)

;;; Start interface FStar.Monotonic.Witnessed

; Externals for interface FStar.Monotonic.Witnessed


; <Start encoding FStar.Monotonic.Witnessed.witnessed>


(declare-fun FStar.Monotonic.Witnessed.witnessed (Term Term Term) Term)

(declare-fun Tm_arrow_d588830826b7a1087c9fd83547a14841 () Term)
(declare-fun FStar.Monotonic.Witnessed.witnessed@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.witnessed>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_weakening>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_weakening (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_weakening@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_weakening>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_constant>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_constant (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_constant@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_constant>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_nested>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_nested (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_nested@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_nested>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_and (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_and@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_and>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_or (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_or@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_or>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_impl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_impl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_impl@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_impl>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_forall (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_forall@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_forall>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_exists@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_exists>


; End Externals for interface FStar.Monotonic.Witnessed


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Monotonic.Witnessed (42 decls; total size 8922)

;;; Start interface FStar.FunctionalExtensionality

; Externals for interface FStar.FunctionalExtensionality


; <Start encoding FStar.FunctionalExtensionality.arrow>


(declare-fun FStar.FunctionalExtensionality.arrow (Term Term) Term)

(declare-fun Tm_arrow_28022b1931e0c9114f09925e8271570a () Term)
(declare-fun FStar.FunctionalExtensionality.arrow@tok () Term)

(declare-fun Tm_arrow_a7d5cc170be69663c495e8582d2bc62a (Term Term) Term)

; </end encoding FStar.FunctionalExtensionality.arrow>


; <Start encoding FStar.FunctionalExtensionality.efun>


(declare-fun FStar.FunctionalExtensionality.efun (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.efun@tok () Term)



; </end encoding FStar.FunctionalExtensionality.efun>


; <Start encoding FStar.FunctionalExtensionality.feq>




(declare-fun FStar.FunctionalExtensionality.feq (Term Term Term Term) Term)



(declare-fun Tm_arrow_a26edf208afb0682b12235c66ccbd71c () Term)
(declare-fun FStar.FunctionalExtensionality.feq@tok () Term)




(declare-fun Tm_abs_1b77756ea6adb1ccc92aae069369ddc2 (Term Term Term Term) Term)

; </end encoding FStar.FunctionalExtensionality.feq>


; <Start encoding FStar.FunctionalExtensionality.on_domain>



(declare-fun FStar.FunctionalExtensionality.on_domain (Term Term Term) Term)



(declare-fun Tm_arrow_4644eedc14c2df3e417da1b7c07108e6 () Term)
(declare-fun FStar.FunctionalExtensionality.on_domain@tok () Term)


; </end encoding FStar.FunctionalExtensionality.on_domain>


; <Start encoding FStar.FunctionalExtensionality.feq_on_domain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain@tok () Term)



; </end encoding FStar.FunctionalExtensionality.feq_on_domain>


; <Start encoding FStar.FunctionalExtensionality.idempotence_on_domain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain@tok () Term)



; </end encoding FStar.FunctionalExtensionality.idempotence_on_domain>


; <Start encoding FStar.FunctionalExtensionality.is_restricted>



(declare-fun FStar.FunctionalExtensionality.is_restricted (Term Term Term) Term)


(declare-fun Tm_arrow_b9e5e589ff6008bf9dc6c8ac06a76d9b () Term)
(declare-fun FStar.FunctionalExtensionality.is_restricted@tok () Term)




; </end encoding FStar.FunctionalExtensionality.is_restricted>


; <Start encoding FStar.FunctionalExtensionality.restricted_t>


(declare-fun FStar.FunctionalExtensionality.restricted_t (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.restricted_t@tok () Term)


(declare-fun Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e (Term Term) Term)

; </end encoding FStar.FunctionalExtensionality.restricted_t>


; <Start encoding FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater>

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater (Term Term) Term)

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater@tok () Term)

(declare-fun Tm_abs_134069e179ddf4705519081c391c4e10 (Term Term) Term)

; </end encoding FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater>


; <Start encoding FStar.FunctionalExtensionality.on_dom>



(declare-fun FStar.FunctionalExtensionality.on_dom (Term Term Term) Term)


(declare-fun Tm_arrow_2c8a39c5d1179d9b2dbff37a928311ac () Term)
(declare-fun FStar.FunctionalExtensionality.on_dom@tok () Term)



; </end encoding FStar.FunctionalExtensionality.on_dom>


; <Start encoding FStar.FunctionalExtensionality.on>


(declare-fun FStar.FunctionalExtensionality.on (Term Term Term) Term)



(declare-fun Tm_arrow_eab9bf17eb33be7efca62de21f27985c () Term)
(declare-fun FStar.FunctionalExtensionality.on@tok () Term)






; </end encoding FStar.FunctionalExtensionality.on>


; <Start encoding FStar.FunctionalExtensionality.extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality@tok () Term)




; </end encoding FStar.FunctionalExtensionality.extensionality>


; <Start encoding FStar.FunctionalExtensionality.arrow_g>


(declare-fun FStar.FunctionalExtensionality.arrow_g (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.arrow_g@tok () Term)



; </end encoding FStar.FunctionalExtensionality.arrow_g>


; <Start encoding FStar.FunctionalExtensionality.efun_g>


(declare-fun FStar.FunctionalExtensionality.efun_g (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.efun_g@tok () Term)



; </end encoding FStar.FunctionalExtensionality.efun_g>


; <Start encoding FStar.FunctionalExtensionality.feq_g>




(declare-fun FStar.FunctionalExtensionality.feq_g (Term Term Term Term) Term)



(declare-fun Tm_arrow_361ba84e60d273d78a5743d30c9dc908 () Term)
(declare-fun FStar.FunctionalExtensionality.feq_g@tok () Term)







; </end encoding FStar.FunctionalExtensionality.feq_g>


; <Start encoding FStar.FunctionalExtensionality.on_domain_g>



(declare-fun FStar.FunctionalExtensionality.on_domain_g (Term Term Term) Term)



(declare-fun Tm_arrow_bf6371335aea4d90f7963f85ebad8f0d () Term)
(declare-fun FStar.FunctionalExtensionality.on_domain_g@tok () Term)


; </end encoding FStar.FunctionalExtensionality.on_domain_g>


; <Start encoding FStar.FunctionalExtensionality.feq_on_domain_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain_g (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain_g@tok () Term)



; </end encoding FStar.FunctionalExtensionality.feq_on_domain_g>


; <Start encoding FStar.FunctionalExtensionality.idempotence_on_domain_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain_g (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain_g@tok () Term)



; </end encoding FStar.FunctionalExtensionality.idempotence_on_domain_g>


; <Start encoding FStar.FunctionalExtensionality.is_restricted_g>



(declare-fun FStar.FunctionalExtensionality.is_restricted_g (Term Term Term) Term)


(declare-fun Tm_arrow_eadb252d9886eeba4938e11c03ce9b79 () Term)
(declare-fun FStar.FunctionalExtensionality.is_restricted_g@tok () Term)




; </end encoding FStar.FunctionalExtensionality.is_restricted_g>


; <Start encoding FStar.FunctionalExtensionality.restricted_g_t>


(declare-fun FStar.FunctionalExtensionality.restricted_g_t (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.restricted_g_t@tok () Term)


(declare-fun Tm_refine_9185da06fca917c5514ae63042657873 (Term Term) Term)

; </end encoding FStar.FunctionalExtensionality.restricted_g_t>


; <Start encoding FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater>

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater (Term Term) Term)

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater@tok () Term)



; </end encoding FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater>


; <Start encoding FStar.FunctionalExtensionality.on_dom_g>



(declare-fun FStar.FunctionalExtensionality.on_dom_g (Term Term Term) Term)


(declare-fun Tm_arrow_2e3db44d1263cf9452aaa6907eac66cc () Term)
(declare-fun FStar.FunctionalExtensionality.on_dom_g@tok () Term)



; </end encoding FStar.FunctionalExtensionality.on_dom_g>


; <Start encoding FStar.FunctionalExtensionality.on_g>


(declare-fun FStar.FunctionalExtensionality.on_g (Term Term Term) Term)



(declare-fun Tm_arrow_93a363f6461271c3e18b18593d7d03bf () Term)
(declare-fun FStar.FunctionalExtensionality.on_g@tok () Term)






; </end encoding FStar.FunctionalExtensionality.on_g>


; <Start encoding FStar.FunctionalExtensionality.extensionality_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality_g (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality_g@tok () Term)




; </end encoding FStar.FunctionalExtensionality.extensionality_g>


; End Externals for interface FStar.FunctionalExtensionality


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.FunctionalExtensionality (240 decls; total size 13841)

;;; Start module FStar.PropositionalExtensionality

; Externals for module FStar.PropositionalExtensionality


; <Start encoding FStar.PropositionalExtensionality.axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.PropositionalExtensionality.axiom (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.PropositionalExtensionality.axiom@tok () Term)

; </end encoding FStar.PropositionalExtensionality.axiom>


; <Start encoding FStar.PropositionalExtensionality.apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.PropositionalExtensionality.apply (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.PropositionalExtensionality.apply@tok () Term)

; </end encoding FStar.PropositionalExtensionality.apply>


; End Externals for module FStar.PropositionalExtensionality


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.PropositionalExtensionality (11 decls; total size 5998)

;;; Start interface FStar.TSet

; Externals for interface FStar.TSet


; <Skipped />


; <Start encoding FStar.TSet.set>

(declare-fun FStar.TSet.set (Term) Term)

(declare-fun FStar.TSet.set@tok () Term)

; </end encoding FStar.TSet.set>


; <Start encoding FStar.TSet.equal>

(declare-fun FStar.TSet.equal (Term Term Term) Term)
(declare-fun Tm_arrow_a884d17a435ad7c4eff639e843c2e915 () Term)
(declare-fun FStar.TSet.equal@tok () Term)

; </end encoding FStar.TSet.equal>


; <Start encoding FStar.TSet.mem>

(declare-fun FStar.TSet.mem (Term Term Term) Term)
(declare-fun Tm_arrow_873fce3a2d3f7456c376d64b089ed4d6 () Term)
(declare-fun FStar.TSet.mem@tok () Term)

; </end encoding FStar.TSet.mem>


; <Start encoding FStar.TSet.empty>

(declare-fun FStar.TSet.empty (Term) Term)
(declare-fun Tm_arrow_7479bde908a771f633d91cf1e6159164 () Term)
(declare-fun FStar.TSet.empty@tok () Term)

; </end encoding FStar.TSet.empty>


; <Start encoding FStar.TSet.singleton>

(declare-fun FStar.TSet.singleton (Term Term) Term)
(declare-fun Tm_arrow_efd4130c737a1c63982cd396443713d5 () Term)
(declare-fun FStar.TSet.singleton@tok () Term)

; </end encoding FStar.TSet.singleton>


; <Start encoding FStar.TSet.union>

(declare-fun FStar.TSet.union (Term Term Term) Term)
(declare-fun Tm_arrow_3de58fd829d33d9d3ee6c709e8528481 () Term)
(declare-fun FStar.TSet.union@tok () Term)

; </end encoding FStar.TSet.union>


; <Start encoding FStar.TSet.intersect>

(declare-fun FStar.TSet.intersect (Term Term Term) Term)

(declare-fun FStar.TSet.intersect@tok () Term)

; </end encoding FStar.TSet.intersect>


; <Start encoding FStar.TSet.complement>

(declare-fun FStar.TSet.complement (Term Term) Term)
(declare-fun Tm_arrow_0bfcc001675666a8c38e138bf5ac4ee8 () Term)
(declare-fun FStar.TSet.complement@tok () Term)

; </end encoding FStar.TSet.complement>


; <Start encoding FStar.TSet.subset>

(declare-fun FStar.TSet.subset (Term Term Term) Term)

(declare-fun FStar.TSet.subset@tok () Term)

(declare-fun Tm_abs_fe63068de0c50c38f701457141c25b46 (Term Term Term) Term)

; </end encoding FStar.TSet.subset>


; <Start encoding FStar.TSet.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_empty@tok () Term)

; </end encoding FStar.TSet.mem_empty>


; <Start encoding FStar.TSet.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_singleton@tok () Term)

; </end encoding FStar.TSet.mem_singleton>


; <Start encoding FStar.TSet.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_union@tok () Term)

; </end encoding FStar.TSet.mem_union>


; <Start encoding FStar.TSet.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_intersect@tok () Term)

; </end encoding FStar.TSet.mem_intersect>


; <Start encoding FStar.TSet.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_complement@tok () Term)

; </end encoding FStar.TSet.mem_complement>


; <Start encoding FStar.TSet.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_subset@tok () Term)

; </end encoding FStar.TSet.mem_subset>


; <Start encoding FStar.TSet.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.subset_mem@tok () Term)

; </end encoding FStar.TSet.subset_mem>


; <Start encoding FStar.TSet.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_intro@tok () Term)

; </end encoding FStar.TSet.lemma_equal_intro>


; <Start encoding FStar.TSet.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_elim@tok () Term)

; </end encoding FStar.TSet.lemma_equal_elim>


; <Start encoding FStar.TSet.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_refl@tok () Term)

; </end encoding FStar.TSet.lemma_equal_refl>


; <Start encoding FStar.TSet.tset_of_set>

(declare-fun FStar.TSet.tset_of_set (Term Term) Term)
(declare-fun Tm_arrow_3cbed28ab0f3b752d3656db155a3e9f3 () Term)
(declare-fun FStar.TSet.tset_of_set@tok () Term)

; </end encoding FStar.TSet.tset_of_set>


; <Start encoding FStar.TSet.lemma_mem_tset_of_set>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_tset_of_set (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_tset_of_set@tok () Term)

; </end encoding FStar.TSet.lemma_mem_tset_of_set>


; <Start encoding FStar.TSet.filter>


(declare-fun FStar.TSet.filter (Term Term Term) Term)

(declare-fun Tm_arrow_1a001071ad6106aec2470a87b194954c () Term)
(declare-fun FStar.TSet.filter@tok () Term)

; </end encoding FStar.TSet.filter>


; <Start encoding FStar.TSet.lemma_mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_filter@tok () Term)


; </end encoding FStar.TSet.lemma_mem_filter>


; <Start encoding FStar.TSet.map>


(declare-fun FStar.TSet.map (Term Term Term Term) Term)

(declare-fun Tm_arrow_8af532fc458491b78200f8bcb1361e90 () Term)
(declare-fun FStar.TSet.map@tok () Term)

; </end encoding FStar.TSet.map>


; <Start encoding FStar.TSet.lemma_mem_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_map (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_map@tok () Term)


; </end encoding FStar.TSet.lemma_mem_map>


; <Skipped />


; <Start encoding FStar.TSet.as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.TSet.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.TSet.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.TSet.as_set_ (Term Term) Term)
(declare-fun FStar.TSet.as_set_@tok () Term)
(declare-fun Tm_arrow_b205d25f357c7c6022ebceb6497753f3 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.TSet.as_set'; Namespace FStar.TSet
(assert (! 
;; def=FStar.TSet.fsti(120,8-120,15); use=FStar.TSet.fsti(120,8-120,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.TSet.as_set_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.TSet.as_set_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.TSet.as_set_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.TSet.as_set_.fuel_instrumented))

:named @fuel_irrelevance_FStar.TSet.as_set_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.TSet.as_set'; Namespace FStar.TSet
(assert (! 
;; def=FStar.TSet.fsti(120,8-120,15); use=FStar.TSet.fsti(120,8-120,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.TSet.as_set_ @x0
@x1)
(FStar.TSet.as_set_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.TSet.as_set_ @x0
@x1))
:qid @fuel_correspondence_FStar.TSet.as_set_.fuel_instrumented))

:named @fuel_correspondence_FStar.TSet.as_set_.fuel_instrumented))

; </end encoding FStar.TSet.as_set'>


; End Externals for interface FStar.TSet


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.TSet (134 decls; total size 13795)

;;; Start interface FStar.Monotonic.Heap

; Externals for interface FStar.Monotonic.Heap


; <Start encoding FStar.Monotonic.Heap.set>

(declare-fun FStar.Monotonic.Heap.set (Term) Term)

(declare-fun FStar.Monotonic.Heap.set@tok () Term)

; </end encoding FStar.Monotonic.Heap.set>


; <Start encoding FStar.Monotonic.Heap.tset>

(declare-fun FStar.Monotonic.Heap.tset (Term) Term)

(declare-fun FStar.Monotonic.Heap.tset@tok () Term)

; </end encoding FStar.Monotonic.Heap.tset>


; <Start encoding FStar.Monotonic.Heap.heap>

(declare-fun FStar.Monotonic.Heap.heap () Term)

; </end encoding FStar.Monotonic.Heap.heap>


; <Start encoding FStar.Monotonic.Heap.equal>

(declare-fun FStar.Monotonic.Heap.equal (Term Term) Term)
(declare-fun Tm_arrow_22ea7bfd67f4919a6b048e3792f6aac6 () Term)
(declare-fun FStar.Monotonic.Heap.equal@tok () Term)

; </end encoding FStar.Monotonic.Heap.equal>


; <Start encoding FStar.Monotonic.Heap.equal_extensional>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.equal_extensional (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.equal_extensional@tok () Term)

; </end encoding FStar.Monotonic.Heap.equal_extensional>


; <Start encoding FStar.Monotonic.Heap.emp>

(declare-fun FStar.Monotonic.Heap.emp (Dummy_sort) Term)

; </end encoding FStar.Monotonic.Heap.emp>


; <Start encoding FStar.Monotonic.Heap.next_addr>

(declare-fun FStar.Monotonic.Heap.next_addr (Term) Term)
(declare-fun Tm_ghost_arrow_5f9b7d66eebaf7d00b1d1c8781e1bd33 () Term)
(declare-fun FStar.Monotonic.Heap.next_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.next_addr>


; <Start encoding FStar.Monotonic.Heap.core_mref>

(declare-fun FStar.Monotonic.Heap.core_mref (Term) Term)

(declare-fun FStar.Monotonic.Heap.core_mref@tok () Term)

; </end encoding FStar.Monotonic.Heap.core_mref>


; <Start encoding FStar.Monotonic.Heap.mref>

(declare-fun FStar.Monotonic.Heap.mref (Term Term) Term)
(declare-fun Tm_arrow_5bf0606d629ecb30adc0c556c248cd8a () Term)
(declare-fun FStar.Monotonic.Heap.mref@tok () Term)

; </end encoding FStar.Monotonic.Heap.mref>


; <Start encoding FStar.Monotonic.Heap.addr_of>

(declare-fun FStar.Monotonic.Heap.addr_of (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_3e3805ca9fb6a056cde481ca6e6b2666 () Term)
(declare-fun FStar.Monotonic.Heap.addr_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.addr_of>


; <Start encoding FStar.Monotonic.Heap.is_mm>

(declare-fun FStar.Monotonic.Heap.is_mm (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8181c56eb62b6f09010fd19362ec557f () Term)
(declare-fun FStar.Monotonic.Heap.is_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.is_mm>


; <Start encoding FStar.Monotonic.Heap.compare_addrs>

(declare-fun FStar.Monotonic.Heap.compare_addrs (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d9620af24825960ed2af7182687876b1 () Term)
(declare-fun FStar.Monotonic.Heap.compare_addrs@tok () Term)

; </end encoding FStar.Monotonic.Heap.compare_addrs>


; <Start encoding FStar.Monotonic.Heap.contains>

(declare-fun FStar.Monotonic.Heap.contains (Term Term Term Term) Term)
(declare-fun Tm_arrow_78eae2771402d9ca8cd20442a69b19a1 () Term)
(declare-fun FStar.Monotonic.Heap.contains@tok () Term)

; </end encoding FStar.Monotonic.Heap.contains>


; <Start encoding FStar.Monotonic.Heap.addr_unused_in>

(declare-fun FStar.Monotonic.Heap.addr_unused_in (Term Term) Term)
(declare-fun Tm_arrow_5e652491869ddd6d9add00477fe250d4 () Term)
(declare-fun FStar.Monotonic.Heap.addr_unused_in@tok () Term)

; </end encoding FStar.Monotonic.Heap.addr_unused_in>


; <Start encoding FStar.Monotonic.Heap.not_addr_unused_in_nullptr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.not_addr_unused_in_nullptr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.not_addr_unused_in_nullptr@tok () Term)

; </end encoding FStar.Monotonic.Heap.not_addr_unused_in_nullptr>


; <Start encoding FStar.Monotonic.Heap.unused_in>

(declare-fun FStar.Monotonic.Heap.unused_in (Term Term Term Term) Term)
(declare-fun Tm_arrow_63db68eb9811874d358b39a3a3a594c0 () Term)
(declare-fun FStar.Monotonic.Heap.unused_in@tok () Term)

; </end encoding FStar.Monotonic.Heap.unused_in>


; <Start encoding FStar.Monotonic.Heap.fresh>

(declare-fun FStar.Monotonic.Heap.fresh (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_516fb5369267798913835a1aff4b7fe3 () Term)
(declare-fun FStar.Monotonic.Heap.fresh@tok () Term)

; </end encoding FStar.Monotonic.Heap.fresh>


; <Start encoding FStar.Monotonic.Heap.only_t>

(declare-fun FStar.Monotonic.Heap.only_t (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_b5e045c084fdae187553cafe5f60138d () Term)
(declare-fun FStar.Monotonic.Heap.only_t@tok () Term)

; </end encoding FStar.Monotonic.Heap.only_t>


; <Start encoding FStar.Monotonic.Heap.only>

(declare-fun FStar.Monotonic.Heap.only (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_fe5c1d63e245bf0ffcacbc885af17fc3 () Term)
(declare-fun FStar.Monotonic.Heap.only@tok () Term)

; </end encoding FStar.Monotonic.Heap.only>


; <Start encoding FStar.Monotonic.Heap.op_Hat_Plus_Plus>

(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Plus (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_21e6803beb51b9a6b0e4cc69a41b426b () Term)
(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Plus@tok () Term)

; </end encoding FStar.Monotonic.Heap.op_Hat_Plus_Plus>


; <Start encoding FStar.Monotonic.Heap.op_Plus_Plus_Hat>

(declare-fun FStar.Monotonic.Heap.op_Plus_Plus_Hat (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_155b4e9b4b7e1cd02500a5483fe79417 () Term)
(declare-fun FStar.Monotonic.Heap.op_Plus_Plus_Hat@tok () Term)

; </end encoding FStar.Monotonic.Heap.op_Plus_Plus_Hat>


; <Start encoding FStar.Monotonic.Heap.op_Hat_Plus_Hat>

(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Hat (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a3f887bc1beedc82ccf25ac24af9a106 () Term)
(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Hat@tok () Term)

; </end encoding FStar.Monotonic.Heap.op_Hat_Plus_Hat>


; <Start encoding FStar.Monotonic.Heap.sel_tot>

(declare-fun Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 (Term Term Term) Term)
(declare-fun FStar.Monotonic.Heap.sel_tot (Term Term Term Term) Term)

(declare-fun Tm_arrow_b9c7abd21015083a18544d8f5e4bfa5f () Term)
(declare-fun FStar.Monotonic.Heap.sel_tot@tok () Term)

; </end encoding FStar.Monotonic.Heap.sel_tot>


; <Start encoding FStar.Monotonic.Heap.sel>

(declare-fun FStar.Monotonic.Heap.sel (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ffe8429ce0118fe92246c624b0f48cb8 () Term)
(declare-fun FStar.Monotonic.Heap.sel@tok () Term)

; </end encoding FStar.Monotonic.Heap.sel>


; <Start encoding FStar.Monotonic.Heap.upd_tot>


(declare-fun FStar.Monotonic.Heap.upd_tot (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_bc62c38ea3e82ecfe3b8b2ec42ad37db () Term)
(declare-fun FStar.Monotonic.Heap.upd_tot@tok () Term)

; </end encoding FStar.Monotonic.Heap.upd_tot>


; <Start encoding FStar.Monotonic.Heap.upd>

(declare-fun FStar.Monotonic.Heap.upd (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_34a9169877528f6cc19628f2fc55c538 () Term)
(declare-fun FStar.Monotonic.Heap.upd@tok () Term)

; </end encoding FStar.Monotonic.Heap.upd>


; <Start encoding FStar.Monotonic.Heap.alloc>

(declare-fun FStar.Monotonic.Heap.alloc (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1c0aac8fe904b4d396ec54b136d2ffe7 () Term)
(declare-fun FStar.Monotonic.Heap.alloc@tok () Term)

; </end encoding FStar.Monotonic.Heap.alloc>


; <Start encoding FStar.Monotonic.Heap.free_mm>

(declare-fun Tm_refine_5015146880b2d88cf7d4492a6a4488b3 (Term Term Term) Term)
(declare-fun FStar.Monotonic.Heap.free_mm (Term Term Term Term) Term)

(declare-fun Tm_arrow_6ecb62093891266f94b1f3f1a90a448e () Term)
(declare-fun FStar.Monotonic.Heap.free_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.free_mm>


; <Start encoding FStar.Monotonic.Heap.modifies_t>

(declare-fun FStar.Monotonic.Heap.modifies_t (Term Term Term) Term)
(declare-fun Tm_arrow_a4fe7207a94d4c1647746618fee3b728 () Term)
(declare-fun FStar.Monotonic.Heap.modifies_t@tok () Term)
(declare-fun Tm_arrow_b0af2f35e8005ef7e3ba20908101c76d (Term Term) Term)
(declare-fun Tm_abs_8a8ca27930544e5fc9be9d72f0a83048 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a35a7f52eecacc79bffa513619cd3c8 (Term) Term)
(declare-fun Tm_abs_d2f4a5b47ca9998181b7505d9863f51b (Term Term Term Term) Term)

(declare-fun Tm_abs_ffef443a20a6b6cb0a037fef8658073c (Term Term Term) Term)

(declare-fun Tm_abs_204c20fae9e54ba52e38507c25cd375f (Term Term Term Term) Term)

(declare-fun Tm_abs_7ae75c1528636c9b47a86edec9ff33f0 (Term Term Term) Term)

(declare-fun Tm_abs_59c118da13b595105cdd8c9ff05a05cd (Term Term) Term)

(declare-fun Tm_abs_c52a059ca06af964a574baae6464dcd8 (Term Term Term Term) Term)

(declare-fun Tm_abs_4e102dee5e90e8010a884053ae1db5fd (Term Term Term) Term)

(declare-fun Tm_abs_0c074a60a2b4bcc96aa8bfd347e319b8 (Term Term) Term)

(declare-fun Tm_abs_4453e0ae84c959c56724482b72f4be02 (Term Term) Term)

; </end encoding FStar.Monotonic.Heap.modifies_t>


; <Start encoding FStar.Monotonic.Heap.modifies>

(declare-fun FStar.Monotonic.Heap.modifies (Term Term Term) Term)
(declare-fun Tm_arrow_46ebd76bd348c127a0b9b24dfad446fc () Term)
(declare-fun FStar.Monotonic.Heap.modifies@tok () Term)

; </end encoding FStar.Monotonic.Heap.modifies>


; <Start encoding FStar.Monotonic.Heap.equal_dom>

(declare-fun FStar.Monotonic.Heap.equal_dom (Term Term) Term)

(declare-fun FStar.Monotonic.Heap.equal_dom@tok () Term)

(declare-fun Tm_abs_9ee9e40b4202ee7b9159377fbe37cbb5 (Term Term Term Term) Term)

(declare-fun Tm_abs_2d34dc0797c0ccb91806a6c73dc8de99 (Term Term Term) Term)

(declare-fun Tm_abs_e2e9ef4c98e04066fc73873911de0d04 (Term Term) Term)

(declare-fun Tm_abs_a61ebfa8a82cd778f3db8471bab6d609 (Term Term Term Term) Term)

(declare-fun Tm_abs_e48a2c7a3f2cb9d8e08594617aeb730b (Term Term Term) Term)

(declare-fun Tm_abs_693ff78e51234847751b90c40efbc5af (Term Term) Term)

; </end encoding FStar.Monotonic.Heap.equal_dom>


; <Start encoding FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused>


; <Start encoding FStar.Monotonic.Heap.lemma_contains_implies_used>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_implies_used (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_implies_used@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_contains_implies_used>


; <Start encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types>


; <Start encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders>


; <Start encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm>


; <Start encoding FStar.Monotonic.Heap.lemma_distinct_addrs_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_unused (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_unused@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_distinct_addrs_unused>


; <Start encoding FStar.Monotonic.Heap.lemma_alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_alloc@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_alloc>


; <Start encoding FStar.Monotonic.Heap.lemma_free_mm_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_sel (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_sel@tok () Term)


; </end encoding FStar.Monotonic.Heap.lemma_free_mm_sel>


; <Start encoding FStar.Monotonic.Heap.lemma_free_mm_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_contains (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_contains@tok () Term)


; </end encoding FStar.Monotonic.Heap.lemma_free_mm_contains>


; <Start encoding FStar.Monotonic.Heap.lemma_free_mm_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_unused (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_unused@tok () Term)


; </end encoding FStar.Monotonic.Heap.lemma_free_mm_unused>


; <Start encoding FStar.Monotonic.Heap.lemma_free_addr_unused_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_addr_unused_in (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_addr_unused_in@tok () Term)

(declare-fun Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a () Term)

; </end encoding FStar.Monotonic.Heap.lemma_free_addr_unused_in>


; <Start encoding FStar.Monotonic.Heap.lemma_sel_same_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_same_addr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_same_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_sel_same_addr>


; <Start encoding FStar.Monotonic.Heap.lemma_sel_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd1@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_sel_upd1>


; <Start encoding FStar.Monotonic.Heap.lemma_sel_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd2 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd2@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_sel_upd2>


; <Start encoding FStar.Monotonic.Heap.lemma_mref_injectivity>

(declare-fun FStar.Monotonic.Heap.lemma_mref_injectivity () Term)
(declare-fun Tm_refine_e1adf49e5e772ddffa19181e1a812a81 () Term)


; </end encoding FStar.Monotonic.Heap.lemma_mref_injectivity>


; <Start encoding FStar.Monotonic.Heap.lemma_in_dom_emp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_in_dom_emp (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_in_dom_emp@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_in_dom_emp>


; <Start encoding FStar.Monotonic.Heap.lemma_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_upd_contains>


; <Start encoding FStar.Monotonic.Heap.lemma_well_typed_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_well_typed_upd_contains (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_well_typed_upd_contains@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_well_typed_upd_contains>


; <Start encoding FStar.Monotonic.Heap.lemma_unused_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_contains (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_contains@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_unused_upd_contains>


; <Start encoding FStar.Monotonic.Heap.lemma_upd_contains_different_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains_different_addr (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains_different_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_upd_contains_different_addr>


; <Start encoding FStar.Monotonic.Heap.lemma_upd_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_unused (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_unused@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_upd_unused>


; <Start encoding FStar.Monotonic.Heap.lemma_contains_upd_modifies>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_upd_modifies (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_upd_modifies@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_contains_upd_modifies>


; <Start encoding FStar.Monotonic.Heap.lemma_unused_upd_modifies>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_modifies (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_modifies@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_unused_upd_modifies>


; <Start encoding FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs>


; <Start encoding FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs>


; <Start encoding FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr>


; <Start encoding FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr>


; <Start encoding FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd>


; <Start encoding FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel>


; <Start encoding FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_upd_tot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd_tot (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd_tot@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_upd_tot>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_upd>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_alloc@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_alloc>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_free_mm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_free_mm (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_free_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_free_mm>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr>


; <Start encoding FStar.Monotonic.Heap.aref>

(declare-fun FStar.Monotonic.Heap.aref () Term)

; </end encoding FStar.Monotonic.Heap.aref>


; <Start encoding FStar.Monotonic.Heap.dummy_aref>

(declare-fun FStar.Monotonic.Heap.dummy_aref (Dummy_sort) Term)

; </end encoding FStar.Monotonic.Heap.dummy_aref>


; <Start encoding FStar.Monotonic.Heap.aref_equal>

(declare-fun FStar.Monotonic.Heap.aref_equal (Term Term) Term)
(declare-fun Tm_refine_82707a6e3d48caa257bb4bddb01d7d73 (Term Term) Term)
(declare-fun Tm_ghost_arrow_15fb16496d887138d488803245c89d64 () Term)
(declare-fun FStar.Monotonic.Heap.aref_equal@tok () Term)


; </end encoding FStar.Monotonic.Heap.aref_equal>


; <Start encoding FStar.Monotonic.Heap.aref_of>

(declare-fun FStar.Monotonic.Heap.aref_of (Term Term Term) Term)
(declare-fun Tm_arrow_52adf65c8447500d70e5098f6c041a65 () Term)
(declare-fun FStar.Monotonic.Heap.aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_of>


; <Start encoding FStar.Monotonic.Heap.addr_of_aref>

(declare-fun FStar.Monotonic.Heap.addr_of_aref (Term) Term)
(declare-fun Tm_refine_afd51579b90d50ea23e03b743a1fa001 () Term)
(declare-fun Tm_ghost_arrow_168094509145e28b296ce766eea04736 () Term)
(declare-fun FStar.Monotonic.Heap.addr_of_aref@tok () Term)


; </end encoding FStar.Monotonic.Heap.addr_of_aref>


; <Start encoding FStar.Monotonic.Heap.addr_of_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.addr_of_aref_of>


; <Start encoding FStar.Monotonic.Heap.aref_is_mm>

(declare-fun FStar.Monotonic.Heap.aref_is_mm (Term) Term)
(declare-fun Tm_ghost_arrow_86fca776032c40cedacef7de5d660572 () Term)
(declare-fun FStar.Monotonic.Heap.aref_is_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_is_mm>


; <Start encoding FStar.Monotonic.Heap.is_mm_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.is_mm_aref_of>


; <Start encoding FStar.Monotonic.Heap.aref_unused_in>

(declare-fun FStar.Monotonic.Heap.aref_unused_in (Term Term) Term)
(declare-fun Tm_arrow_8227ceb756b15f6c9348698ae3bb9b5e () Term)
(declare-fun FStar.Monotonic.Heap.aref_unused_in@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_unused_in>


; <Start encoding FStar.Monotonic.Heap.unused_in_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_aref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.unused_in_aref_of>


; <Start encoding FStar.Monotonic.Heap.contains_aref_unused_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.contains_aref_unused_in (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.contains_aref_unused_in@tok () Term)

; </end encoding FStar.Monotonic.Heap.contains_aref_unused_in>


; <Start encoding FStar.Monotonic.Heap.aref_live_at>

(declare-fun FStar.Monotonic.Heap.aref_live_at (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c4830390b5ceaaec5e76b4f367d6c11 () Term)
(declare-fun FStar.Monotonic.Heap.aref_live_at@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_live_at>


; <Start encoding FStar.Monotonic.Heap.gref_of>

(declare-fun FStar.Monotonic.Heap.gref_of (Term Term Term) Term)
(declare-fun Tm_refine_f871b1cec1676516ecbdd8b1fdf16da7 (Term Term) Term)
(declare-fun Tm_ghost_arrow_b090c641b42392b5ed08e8774610283a () Term)
(declare-fun FStar.Monotonic.Heap.gref_of@tok () Term)


; </end encoding FStar.Monotonic.Heap.gref_of>


; <Start encoding FStar.Monotonic.Heap.ref_of>

(declare-fun FStar.Monotonic.Heap.ref_of (Term Term Term Term) Term)
(declare-fun Tm_refine_e9f69f18eb8d91697e49057991573e9f (Term Term Term Term) Term)
(declare-fun Tm_arrow_593ebdf0a0f4ac12ef03a2bedce8e97b () Term)
(declare-fun FStar.Monotonic.Heap.ref_of@tok () Term)


; </end encoding FStar.Monotonic.Heap.ref_of>


; <Start encoding FStar.Monotonic.Heap.aref_live_at_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.aref_live_at_aref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.aref_live_at_aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_live_at_aref_of>


; <Start encoding FStar.Monotonic.Heap.contains_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.contains_gref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.contains_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.contains_gref_of>


; <Start encoding FStar.Monotonic.Heap.aref_of_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.aref_of_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.aref_of_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_of_gref_of>


; <Start encoding FStar.Monotonic.Heap.addr_of_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.addr_of_gref_of>


; <Start encoding FStar.Monotonic.Heap.is_mm_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.is_mm_gref_of>


; <Start encoding FStar.Monotonic.Heap.unused_in_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_gref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.unused_in_gref_of>


; <Start encoding FStar.Monotonic.Heap.sel_ref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.sel_ref_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.sel_ref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.sel_ref_of>


; <Start encoding FStar.Monotonic.Heap.upd_ref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.upd_ref_of (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.upd_ref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.upd_ref_of>


; End Externals for interface FStar.Monotonic.Heap


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Monotonic.Heap (438 decls; total size 37963)

;;; Start module FStar.Heap

; Externals for module FStar.Heap


; <Start encoding FStar.Heap.trivial_rel>

(declare-fun FStar.Heap.trivial_rel (Term) Term)
(declare-fun Tm_arrow_5e933b4711265943ba4bba734363561b () Term)
(declare-fun FStar.Heap.trivial_rel@tok () Term)

(declare-fun Tm_abs_568747eb5009c1dec504311dee989dc2 (Term) Term)

; </end encoding FStar.Heap.trivial_rel>


; <Start encoding FStar.Heap.trivial_preorder>

(declare-fun FStar.Heap.trivial_preorder (Term) Term)
(declare-fun Tm_arrow_1a6db055683d4a5b8a00786676e339b5 () Term)
(declare-fun FStar.Heap.trivial_preorder@tok () Term)

; </end encoding FStar.Heap.trivial_preorder>


; <Start encoding FStar.Heap.ref>

(declare-fun FStar.Heap.ref (Term) Term)

(declare-fun FStar.Heap.ref@tok () Term)

; </end encoding FStar.Heap.ref>


; End Externals for module FStar.Heap


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Heap (20 decls; total size 5938)

;;; Start module FStar.ST

; Externals for module FStar.ST


; <Skipped FStar.ST.GST/>


; <Start encoding FStar.ST.gst_pre>

(declare-fun FStar.ST.gst_pre () Term)

; </end encoding FStar.ST.gst_pre>


; <Start encoding FStar.ST.gst_post'>

(declare-fun FStar.ST.gst_post_ (Term Term) Term)

(declare-fun FStar.ST.gst_post_@tok () Term)

; </end encoding FStar.ST.gst_post'>


; <Start encoding FStar.ST.gst_post>

(declare-fun FStar.ST.gst_post (Term) Term)

(declare-fun FStar.ST.gst_post@tok () Term)

; </end encoding FStar.ST.gst_post>


; <Start encoding FStar.ST.gst_wp>

(declare-fun FStar.ST.gst_wp (Term) Term)

(declare-fun FStar.ST.gst_wp@tok () Term)

; </end encoding FStar.ST.gst_wp>


; <Start encoding FStar.ST.lift_div_gst>

(declare-fun FStar.ST.lift_div_gst (Term Term Term Term) Term)
(declare-fun Tm_arrow_bbaeef6680f54609c0f7c85c1ba1bd3c () Term)
(declare-fun FStar.ST.lift_div_gst@tok () Term)



; </end encoding FStar.ST.lift_div_gst>


; <Skipped />


; <Start encoding FStar.ST.heap_rel>

(declare-fun FStar.ST.heap_rel (Term Term) Term)
(declare-fun Tm_arrow_3ffd8da3a1b4fb5a75e097e2a7ead7a9 () Term)
(declare-fun FStar.ST.heap_rel@tok () Term)

(declare-fun Tm_abs_dcdf10d151981dea7db997e407eca7e8 (Term Term Term Term) Term)

(declare-fun Tm_abs_25f36f044c9be09733ed8b33db10f7e3 (Term Term Term) Term)

(declare-fun Tm_abs_659fe0a1fc2df9e48953d53cf96a4134 (Term Term) Term)

; </end encoding FStar.ST.heap_rel>


; <Start encoding FStar.ST.gst_get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_get@tok () Term)

; </end encoding FStar.ST.gst_get>


; <Start encoding FStar.ST.gst_put>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_put (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_put@tok () Term)

; </end encoding FStar.ST.gst_put>


; <Start encoding FStar.ST.heap_predicate>

(declare-fun FStar.ST.heap_predicate () Term)
(declare-fun Tm_arrow_c4185f52507383203d0d6335fd0332a8 () Term)

; </end encoding FStar.ST.heap_predicate>


; <Start encoding FStar.ST.stable>

(declare-fun FStar.ST.stable (Term) Term)
(declare-fun Tm_arrow_6fabddab2e8badc7a54f2fce30469fd3 () Term)
(declare-fun FStar.ST.stable@tok () Term)

(declare-fun Tm_abs_d50f5c9d7c456d2fb662170f9d9c7bc4 (Term Term) Term)

(declare-fun Tm_abs_46f02e95f964a3b2a6736df0b5d51c82 (Term) Term)

; </end encoding FStar.ST.stable>


; <Start encoding FStar.ST.witnessed>

(declare-fun Tm_refine_a11098d99239284f14b49e1dd0266896 () Term)
(declare-fun FStar.ST.witnessed (Term) Term)

(declare-fun Tm_arrow_eda1223bb1d06bd92699e8c3d8f9251d () Term)
(declare-fun FStar.ST.witnessed@tok () Term)

; </end encoding FStar.ST.witnessed>


; <Start encoding FStar.ST.gst_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_witness@tok () Term)

; </end encoding FStar.ST.gst_witness>


; <Start encoding FStar.ST.gst_recall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_recall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_recall@tok () Term)

; </end encoding FStar.ST.gst_recall>


; <Skipped FStar.ST.lemma_functoriality/>


; <Start encoding FStar.ST.lemma_functoriality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.lemma_functoriality (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.lemma_functoriality@tok () Term)

; </end encoding FStar.ST.lemma_functoriality>


; <Start encoding FStar.ST.st_pre>

(declare-fun FStar.ST.st_pre () Term)

; </end encoding FStar.ST.st_pre>


; <Start encoding FStar.ST.st_post'>

(declare-fun FStar.ST.st_post_ (Term Term) Term)

(declare-fun FStar.ST.st_post_@tok () Term)

; </end encoding FStar.ST.st_post'>


; <Start encoding FStar.ST.st_post>

(declare-fun FStar.ST.st_post (Term) Term)

(declare-fun FStar.ST.st_post@tok () Term)

; </end encoding FStar.ST.st_post>


; <Start encoding FStar.ST.st_wp>

(declare-fun FStar.ST.st_wp (Term) Term)

(declare-fun FStar.ST.st_wp@tok () Term)

; </end encoding FStar.ST.st_wp>


; <Skipped FStar.ST.STATE/>


; <Start encoding FStar.ST.lift_gst_state>

(declare-fun FStar.ST.lift_gst_state (Term Term) Term)
(declare-fun Tm_arrow_9f8aa176b7421939c7ff58d9777d1285 () Term)
(declare-fun FStar.ST.lift_gst_state@tok () Term)

; </end encoding FStar.ST.lift_gst_state>


; <Skipped />


; <Skipped FStar.ST.State/>


; <Skipped FStar.ST.ST/>


; <Skipped FStar.ST.St/>


; <Start encoding FStar.ST.contains_pred>

(declare-fun FStar.ST.contains_pred (Term Term Term Term) Term)

(declare-fun FStar.ST.contains_pred@tok () Term)

; </end encoding FStar.ST.contains_pred>


; <Start encoding FStar.ST.mref>

(declare-fun FStar.ST.mref (Term Term) Term)

(declare-fun FStar.ST.mref@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.ST.mref; Namespace FStar.ST
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.ST.contains_pred@tok))
:named @kick_partial_app_ecc2873331cbcc22dfae3795dcb55413))
(declare-fun Tm_refine_e33ef751d600ad1c7f71142479103c47 (Term Term) Term)

; </end encoding FStar.ST.mref>


; <Start encoding FStar.ST.recall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.recall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.recall@tok () Term)

; </end encoding FStar.ST.recall>


; <Start encoding FStar.ST.alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.alloc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.alloc@tok () Term)

; </end encoding FStar.ST.alloc>


; <Start encoding FStar.ST.read>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.read (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.read@tok () Term)

; </end encoding FStar.ST.read>


; <Start encoding FStar.ST.write>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.write (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.write@tok () Term)

; </end encoding FStar.ST.write>


; <Start encoding FStar.ST.get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.get@tok () Term)

; </end encoding FStar.ST.get>


; <Start encoding FStar.ST.op_Bang>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.op_Bang (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.op_Bang@tok () Term)

; </end encoding FStar.ST.op_Bang>


; <Start encoding FStar.ST.op_Colon_Equals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.op_Colon_Equals (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.op_Colon_Equals@tok () Term)

; </end encoding FStar.ST.op_Colon_Equals>


; <Start encoding FStar.ST.ref>

(declare-fun FStar.ST.ref (Term) Term)

(declare-fun FStar.ST.ref@tok () Term)

; </end encoding FStar.ST.ref>


; <Start encoding FStar.ST.modifies_none>

(declare-fun FStar.ST.modifies_none (Term Term) Term)

(declare-fun FStar.ST.modifies_none@tok () Term)

; </end encoding FStar.ST.modifies_none>


; End Externals for module FStar.ST


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.ST (160 decls; total size 12972)

;;; Start module FStar.All

; Externals for module FStar.All


; <Start encoding FStar.All.all_pre>

(declare-fun FStar.All.all_pre () Term)

; </end encoding FStar.All.all_pre>


; <Start encoding FStar.All.all_post'>

(declare-fun FStar.All.all_post_ (Term Term) Term)

(declare-fun FStar.All.all_post_@tok () Term)

; </end encoding FStar.All.all_post'>


; <Start encoding FStar.All.all_post>

(declare-fun FStar.All.all_post (Term) Term)

(declare-fun FStar.All.all_post@tok () Term)

; </end encoding FStar.All.all_post>


; <Start encoding FStar.All.all_wp>

(declare-fun FStar.All.all_wp (Term) Term)

(declare-fun FStar.All.all_wp@tok () Term)

; </end encoding FStar.All.all_wp>


; <Skipped FStar.All.ALL/>


; <Start encoding FStar.All.lift_state_all>

(declare-fun FStar.All.lift_state_all (Term Term Term) Term)
(declare-fun Tm_arrow_3e4fec12f1c8981f71096a48e2abdc84 () Term)
(declare-fun FStar.All.lift_state_all@tok () Term)
(declare-fun Tm_refine_298bc3bb6d69e8b09e25f0f52730a1aa () Term)
(declare-fun Tm_arrow_0fb416478174b228abde05d827bd6313 () Term)
(declare-fun Tm_arrow_23b08cf81278f3c1bdae402318f6ccd9 (Term) Term)
(declare-fun Tm_abs_bdb21fd2b7ca1058c18a3e7e90881ef2 (Term Term) Term)

; </end encoding FStar.All.lift_state_all>


; <Skipped />


; <Start encoding FStar.All.lift_exn_all>

(declare-fun FStar.All.lift_exn_all (Term Term Term Term) Term)
(declare-fun Tm_arrow_135df870f17e8c60e7945fbf1f54fc29 () Term)
(declare-fun FStar.All.lift_exn_all@tok () Term)

(declare-fun Tm_abs_a9ba63c9dfe5bf6c6b349a4bcc1b5528 (Term Term Term) Term)

; </end encoding FStar.All.lift_exn_all>


; <Skipped />


; <Skipped FStar.All.All/>


; <Skipped FStar.All.ML/>


; <Start encoding FStar.All.op_Bar_Greater>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.op_Bar_Greater (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.op_Bar_Greater@tok () Term)

; </end encoding FStar.All.op_Bar_Greater>


; <Start encoding FStar.All.pipe_right>

(declare-fun FStar.All.pipe_right (Term Term) Term)
(declare-fun Non_total_Tm_arrow_dbd48e54c09644d8ab949bdc03fcc73a () Term)
(declare-fun Tm_arrow_cafb0df3e6d9d853af4359dc97ce96a6 () Term)
(declare-fun FStar.All.pipe_right@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.All.pipe_right; Namespace FStar.All
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.All.op_Bar_Greater@tok))
:named @kick_partial_app_4606f13a988298dd15c1c7a9b2694f36))

; </end encoding FStar.All.pipe_right>


; <Start encoding FStar.All.op_Less_Bar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.op_Less_Bar (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.op_Less_Bar@tok () Term)

; </end encoding FStar.All.op_Less_Bar>


; <Start encoding FStar.All.pipe_left>

(declare-fun FStar.All.pipe_left (Term Term) Term)
(declare-fun Non_total_Tm_arrow_4a12d67662be486c76a67a71b05b982f () Term)
(declare-fun Tm_arrow_aa4d5b76c2364fb2f3cd90a8bae7e992 () Term)
(declare-fun FStar.All.pipe_left@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.All.pipe_left; Namespace FStar.All
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.All.op_Less_Bar@tok))
:named @kick_partial_app_53c4af2fdc52bb263c3f6dffdda692c0))

; </end encoding FStar.All.pipe_left>


; <Start encoding FStar.All.exit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.exit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.exit@tok () Term)

; </end encoding FStar.All.exit>


; <Start encoding FStar.All.try_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.try_with (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.try_with@tok () Term)

; </end encoding FStar.All.try_with>


; <Start encoding FStar.All.Failure>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.All.Failure (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.All.Failure_uu___ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Failure
(declare-fun FStar.All.Failure@tok () Term)
(declare-fun Tm_arrow_ba2c44545f37b4cb1ed7c94934918f65 () Term)

; <Start encoding FStar.All.Failure>


; <start constructor FStar.All.Failure>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.All.Failure ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
(FStar.All.Failure (FStar.All.Failure_uu___ __@x0)))))

; </end constructor FStar.All.Failure>


; </end encoding FStar.All.Failure>


; </end encoding FStar.All.Failure>


; <Start encoding FStar.All.uu___is_Failure>

(declare-fun FStar.All.uu___is_Failure (Term) Term)
(declare-fun Tm_arrow_81ab3356926b82578fcb92e97b412345 () Term)
(declare-fun FStar.All.uu___is_Failure@tok () Term)

; </end encoding FStar.All.uu___is_Failure>


; <Skipped FStar.All.uu___is_Failure/>


; <Start encoding FStar.All.__proj__Failure__item__uu___>

(declare-fun Tm_refine_149c6719f34c408becdf9120a4ae2d59 () Term)
(declare-fun FStar.All.__proj__Failure__item__uu___ (Term) Term)

(declare-fun Tm_arrow_931774599ca5f3ca7bd6eb18157a7dec () Term)
(declare-fun FStar.All.__proj__Failure__item__uu___@tok () Term)

; </end encoding FStar.All.__proj__Failure__item__uu___>


; <Skipped FStar.All.__proj__Failure__item__uu___/>


; <Start encoding FStar.All.failwith>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.failwith (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.failwith@tok () Term)

; </end encoding FStar.All.failwith>


; End Externals for module FStar.All


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.All (103 decls; total size 10902)

;;; Start module FStar.List

; Externals for module FStar.List


; <Skipped FStar.List.hd/>


; <Start encoding FStar.List.hd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.hd (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.hd@tok () Term)

; </end encoding FStar.List.hd>


; <Skipped FStar.List.tail/>


; <Start encoding FStar.List.tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.tail@tok () Term)

; </end encoding FStar.List.tail>


; <Skipped FStar.List.tl/>


; <Start encoding FStar.List.tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.tl@tok () Term)

; </end encoding FStar.List.tl>


; <Skipped FStar.List.last/>


; <Start encoding FStar.List.last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.last@tok () Term)

; </end encoding FStar.List.last>


; <Skipped FStar.List.init/>


; <Start encoding FStar.List.init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.init (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.init@tok () Term)

; </end encoding FStar.List.init>


; <Skipped FStar.List.nth/>


; <Start encoding FStar.List.nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.nth@tok () Term)

; </end encoding FStar.List.nth>


; <Skipped FStar.List.iter/>


; <Start encoding FStar.List.iter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.iter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.iter@tok () Term)

; </end encoding FStar.List.iter>


; <Skipped FStar.List.iteri_aux/>


; <Start encoding FStar.List.iteri_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.iteri_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.iteri_aux@tok () Term)

; </end encoding FStar.List.iteri_aux>


; <Skipped FStar.List.iteri/>


; <Start encoding FStar.List.iteri>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.iteri (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.iteri@tok () Term)

; </end encoding FStar.List.iteri>


; <Skipped FStar.List.map/>


; <Start encoding FStar.List.map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.map@tok () Term)

; </end encoding FStar.List.map>


; <Skipped FStar.List.mapT/>


; <Start encoding FStar.List.mapT>


(declare-fun FStar.List.mapT (Term Term Term Term) Term)


(declare-fun FStar.List.mapT@tok () Term)


; </end encoding FStar.List.mapT>


; <Skipped FStar.List.mapi_init/>


; <Start encoding FStar.List.mapi_init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.mapi_init (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.mapi_init@tok () Term)

; </end encoding FStar.List.mapi_init>


; <Skipped FStar.List.mapi/>


; <Start encoding FStar.List.mapi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.mapi (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.mapi@tok () Term)

; </end encoding FStar.List.mapi>


; <Skipped FStar.List.concatMap/>


; <Start encoding FStar.List.concatMap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.concatMap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.concatMap@tok () Term)

; </end encoding FStar.List.concatMap>


; <Skipped FStar.List.map2/>


; <Start encoding FStar.List.map2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.map2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.map2@tok () Term)

; </end encoding FStar.List.map2>


; <Skipped FStar.List.map3/>


; <Start encoding FStar.List.map3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.map3 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.map3@tok () Term)

; </end encoding FStar.List.map3>


; <Skipped FStar.List.fold_left/>


; <Start encoding FStar.List.fold_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.fold_left (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.fold_left@tok () Term)

; </end encoding FStar.List.fold_left>


; <Skipped FStar.List.fold_left2/>


; <Start encoding FStar.List.fold_left2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.fold_left2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.fold_left2@tok () Term)

; </end encoding FStar.List.fold_left2>


; <Skipped FStar.List.fold_right/>


; <Start encoding FStar.List.fold_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.fold_right (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.fold_right@tok () Term)

; </end encoding FStar.List.fold_right>


; <Skipped FStar.List.filter/>


; <Start encoding FStar.List.filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.filter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.filter@tok () Term)

; </end encoding FStar.List.filter>


; <Skipped FStar.List.for_all/>


; <Start encoding FStar.List.for_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.for_all (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.for_all@tok () Term)

; </end encoding FStar.List.for_all>


; <Skipped FStar.List.forall2/>


; <Start encoding FStar.List.forall2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.forall2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.forall2@tok () Term)

; </end encoding FStar.List.forall2>


; <Skipped FStar.List.collect/>


; <Start encoding FStar.List.collect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.collect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.collect@tok () Term)

; </end encoding FStar.List.collect>


; <Skipped FStar.List.tryFind/>


; <Start encoding FStar.List.tryFind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.tryFind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.tryFind@tok () Term)

; </end encoding FStar.List.tryFind>


; <Skipped FStar.List.tryPick/>


; <Start encoding FStar.List.tryPick>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.tryPick (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.tryPick@tok () Term)

; </end encoding FStar.List.tryPick>


; <Skipped FStar.List.choose/>


; <Start encoding FStar.List.choose>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.choose (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.choose@tok () Term)

; </end encoding FStar.List.choose>


; <Skipped FStar.List.partition/>


; <Start encoding FStar.List.partition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.partition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.partition@tok () Term)

; </end encoding FStar.List.partition>


; <Skipped FStar.List.zip/>


; <Start encoding FStar.List.zip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.zip (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.zip@tok () Term)

; </end encoding FStar.List.zip>


; <Skipped FStar.List.sortWith/>


; <Start encoding FStar.List.sortWith>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.sortWith (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.sortWith@tok () Term)

; </end encoding FStar.List.sortWith>


; <Skipped FStar.List.splitAt/>


; <Start encoding FStar.List.splitAt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.splitAt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.splitAt@tok () Term)

; </end encoding FStar.List.splitAt>


; <Start encoding FStar.List.filter_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.filter_map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.filter_map@tok () Term)

; </end encoding FStar.List.filter_map>


; <Skipped FStar.List.index/>


; <Start encoding FStar.List.index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.index@tok () Term)

; </end encoding FStar.List.index>


; End Externals for module FStar.List


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.List (166 decls; total size 15698)

;;; Start interface Vale.Lib.Seqs

; Externals for interface Vale.Lib.Seqs


; <Start encoding Vale.Lib.Seqs.lemma_slice_first_exactly_in_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.lemma_slice_first_exactly_in_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.lemma_slice_first_exactly_in_append@tok () Term)

; </end encoding Vale.Lib.Seqs.lemma_slice_first_exactly_in_append>


; <Start encoding Vale.Lib.Seqs.lemma_all_but_last_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.lemma_all_but_last_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.lemma_all_but_last_append@tok () Term)

; </end encoding Vale.Lib.Seqs.lemma_all_but_last_append>


; <Start encoding Vale.Lib.Seqs.reverse_seq_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.reverse_seq_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.reverse_seq_append@tok () Term)

; </end encoding Vale.Lib.Seqs.reverse_seq_append>


; <Start encoding Vale.Lib.Seqs.reverse_reverse_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.reverse_reverse_seq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.reverse_reverse_seq@tok () Term)

; </end encoding Vale.Lib.Seqs.reverse_reverse_seq>


; <Start encoding Vale.Lib.Seqs.seq_map_i_indexed>


(declare-fun Vale.Lib.Seqs.seq_map_i_indexed (Term Term Term Term Term) Term)

(declare-fun Tm_refine_e4be663f2df3770a92e6e1b126ab924b (Term Term Term Term) Term)
(declare-fun Tm_refine_e1b3c3b0af074cdbbf1cc9570fbc6ed6 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b0eb34eaa3b6a1dd90e87939f0a36f () Term)
(declare-fun Vale.Lib.Seqs.seq_map_i_indexed@tok () Term)



; </end encoding Vale.Lib.Seqs.seq_map_i_indexed>


; <Start encoding Vale.Lib.Seqs.seq_map_i>


(declare-fun Vale.Lib.Seqs.seq_map_i (Term Term Term Term) Term)


(declare-fun Tm_refine_317b468b43caef2660d47cf1a324e801 (Term Term Term Term) Term)
(declare-fun Tm_arrow_965d02e4dc8f5f77f46101615cf0f85f () Term)
(declare-fun Vale.Lib.Seqs.seq_map_i@tok () Term)



; </end encoding Vale.Lib.Seqs.seq_map_i>


; <Start encoding Vale.Lib.Seqs.seq_map_internal_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.seq_map_internal_associative (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.seq_map_internal_associative@tok () Term)

; </end encoding Vale.Lib.Seqs.seq_map_internal_associative>


; <Start encoding Vale.Lib.Seqs.seq_map_inverses>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.seq_map_inverses (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.seq_map_inverses@tok () Term)

; </end encoding Vale.Lib.Seqs.seq_map_inverses>


; <Start encoding Vale.Lib.Seqs.slice_append_adds>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.slice_append_adds (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.slice_append_adds@tok () Term)

; </end encoding Vale.Lib.Seqs.slice_append_adds>


; <Start encoding Vale.Lib.Seqs.slice_seq_map_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.slice_seq_map_commute (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.slice_seq_map_commute@tok () Term)

; </end encoding Vale.Lib.Seqs.slice_seq_map_commute>


; <Start encoding Vale.Lib.Seqs.append_distributes_seq_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.append_distributes_seq_map (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.append_distributes_seq_map@tok () Term)

; </end encoding Vale.Lib.Seqs.append_distributes_seq_map>


; <Start encoding Vale.Lib.Seqs.seq_map_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.seq_map_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.seq_map_injective@tok () Term)

; </end encoding Vale.Lib.Seqs.seq_map_injective>


; <Start encoding Vale.Lib.Seqs.list_to_seq>

(declare-fun Vale.Lib.Seqs.list_to_seq (Term Term) Term)
(declare-fun Tm_refine_8de17eec3c1f64d75609148b2dff3180 (Term Term) Term)
(declare-fun Tm_arrow_ac3e39318b650076ec7e489e7992acc2 () Term)
(declare-fun Vale.Lib.Seqs.list_to_seq@tok () Term)


; </end encoding Vale.Lib.Seqs.list_to_seq>


; <Start encoding Vale.Lib.Seqs.list_to_seq_post>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented_token () Term)
(declare-fun Vale.Lib.Seqs.list_to_seq_post (Term Term Term Term) Term)
(declare-fun Vale.Lib.Seqs.list_to_seq_post@tok () Term)
(declare-fun Tm_refine_cba6401628c885794dc6dccf2cde6b71 () Term)

(declare-fun Tm_arrow_6690e0e2867b306c237aaf0b799e1292 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.Lib.Seqs.list_to_seq_post; Namespace Vale.Lib.Seqs
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Seqs.fsti(56,8-56,24); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Seqs.fsti(56,8-56,24)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented))

:named @fuel_irrelevance_Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.Lib.Seqs.list_to_seq_post; Namespace Vale.Lib.Seqs
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Seqs.fsti(56,8-56,24); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Seqs.fsti(56,8-56,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.Lib.Seqs.list_to_seq_post @x0
@x1
@x2
@x3)
(Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((Vale.Lib.Seqs.list_to_seq_post @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented))

:named @fuel_correspondence_Vale.Lib.Seqs.list_to_seq_post.fuel_instrumented))

; </end encoding Vale.Lib.Seqs.list_to_seq_post>


; <Start encoding Vale.Lib.Seqs.lemma_list_to_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Seqs.lemma_list_to_seq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Seqs.lemma_list_to_seq@tok () Term)

; </end encoding Vale.Lib.Seqs.lemma_list_to_seq>


; End Externals for interface Vale.Lib.Seqs


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Lib.Seqs (88 decls; total size 12708)

;;; Start interface Vale.Arch.Types

; Externals for interface Vale.Arch.Types


; <Start encoding Vale.Arch.Types.op_Star_Hat>

(declare-fun Vale.Arch.Types.op_Star_Hat (Term Term) Term)

(declare-fun Vale.Arch.Types.op_Star_Hat@tok () Term)

; </end encoding Vale.Arch.Types.op_Star_Hat>


; <Start encoding Vale.Arch.Types.op_Star_Hat_Hat>

(declare-fun Vale.Arch.Types.op_Star_Hat_Hat (Term Term) Term)

(declare-fun Vale.Arch.Types.op_Star_Hat_Hat@tok () Term)

; </end encoding Vale.Arch.Types.op_Star_Hat_Hat>


; <Start encoding Vale.Arch.Types.add_wrap32>

(declare-fun Vale.Arch.Types.add_wrap32 (Term Term) Term)

(declare-fun Vale.Arch.Types.add_wrap32@tok () Term)

; </end encoding Vale.Arch.Types.add_wrap32>


; <Start encoding Vale.Arch.Types.add_wrap64>

(declare-fun Vale.Arch.Types.add_wrap64 (Term Term) Term)
(declare-fun Tm_arrow_c72a0dc8dc478a3a61446a6ad81e8d60 () Term)
(declare-fun Vale.Arch.Types.add_wrap64@tok () Term)

; </end encoding Vale.Arch.Types.add_wrap64>


; <Start encoding Vale.Arch.Types.sub_wrap32>

(declare-fun Vale.Arch.Types.sub_wrap32 (Term Term) Term)

(declare-fun Vale.Arch.Types.sub_wrap32@tok () Term)

; </end encoding Vale.Arch.Types.sub_wrap32>


; <Start encoding Vale.Arch.Types.sub_wrap64>

(declare-fun Vale.Arch.Types.sub_wrap64 (Term Term) Term)

(declare-fun Vale.Arch.Types.sub_wrap64@tok () Term)

; </end encoding Vale.Arch.Types.sub_wrap64>


; <Start encoding Vale.Arch.Types.iand32>

(declare-fun Vale.Arch.Types.iand32 (Term Term) Term)

(declare-fun Vale.Arch.Types.iand32@tok () Term)

; </end encoding Vale.Arch.Types.iand32>


; <Start encoding Vale.Arch.Types.ixor32>

(declare-fun Vale.Arch.Types.ixor32 (Term Term) Term)

(declare-fun Vale.Arch.Types.ixor32@tok () Term)

; </end encoding Vale.Arch.Types.ixor32>


; <Start encoding Vale.Arch.Types.ior32>

(declare-fun Vale.Arch.Types.ior32 (Term Term) Term)

(declare-fun Vale.Arch.Types.ior32@tok () Term)

; </end encoding Vale.Arch.Types.ior32>


; <Start encoding Vale.Arch.Types.inot32>

(declare-fun Vale.Arch.Types.inot32 (Term) Term)

(declare-fun Vale.Arch.Types.inot32@tok () Term)

; </end encoding Vale.Arch.Types.inot32>


; <Start encoding Vale.Arch.Types.ishl32>

(declare-fun Vale.Arch.Types.ishl32 (Term Term) Term)
(declare-fun Tm_arrow_2ecefc126d4273a11775408dece375bd () Term)
(declare-fun Vale.Arch.Types.ishl32@tok () Term)

; </end encoding Vale.Arch.Types.ishl32>


; <Start encoding Vale.Arch.Types.ishr32>

(declare-fun Vale.Arch.Types.ishr32 (Term Term) Term)

(declare-fun Vale.Arch.Types.ishr32@tok () Term)

; </end encoding Vale.Arch.Types.ishr32>


; <Start encoding Vale.Arch.Types.iand64>

(declare-fun Vale.Arch.Types.iand64 (Term Term) Term)

(declare-fun Vale.Arch.Types.iand64@tok () Term)

; </end encoding Vale.Arch.Types.iand64>


; <Start encoding Vale.Arch.Types.ixor64>

(declare-fun Vale.Arch.Types.ixor64 (Term Term) Term)

(declare-fun Vale.Arch.Types.ixor64@tok () Term)

; </end encoding Vale.Arch.Types.ixor64>


; <Start encoding Vale.Arch.Types.ior64>

(declare-fun Vale.Arch.Types.ior64 (Term Term) Term)

(declare-fun Vale.Arch.Types.ior64@tok () Term)

; </end encoding Vale.Arch.Types.ior64>


; <Start encoding Vale.Arch.Types.inot64>

(declare-fun Vale.Arch.Types.inot64 (Term) Term)

(declare-fun Vale.Arch.Types.inot64@tok () Term)

; </end encoding Vale.Arch.Types.inot64>


; <Start encoding Vale.Arch.Types.ishl64>

(declare-fun Vale.Arch.Types.ishl64 (Term Term) Term)
(declare-fun Tm_arrow_ffaa401d7847aa0526586e5b673a20d4 () Term)
(declare-fun Vale.Arch.Types.ishl64@tok () Term)

; </end encoding Vale.Arch.Types.ishl64>


; <Start encoding Vale.Arch.Types.ishr64>

(declare-fun Vale.Arch.Types.ishr64 (Term Term) Term)

(declare-fun Vale.Arch.Types.ishr64@tok () Term)

; </end encoding Vale.Arch.Types.ishr64>


; <Start encoding Vale.Arch.Types.iand128>

(declare-fun Vale.Arch.Types.iand128 (Term Term) Term)
(declare-fun Tm_arrow_ac36f780b7617fb68afd21c5f47c1d0d () Term)
(declare-fun Vale.Arch.Types.iand128@tok () Term)

; </end encoding Vale.Arch.Types.iand128>


; <Start encoding Vale.Arch.Types.ixor128>

(declare-fun Vale.Arch.Types.ixor128 (Term Term) Term)

(declare-fun Vale.Arch.Types.ixor128@tok () Term)

; </end encoding Vale.Arch.Types.ixor128>


; <Start encoding Vale.Arch.Types.ior128>

(declare-fun Vale.Arch.Types.ior128 (Term Term) Term)

(declare-fun Vale.Arch.Types.ior128@tok () Term)

; </end encoding Vale.Arch.Types.ior128>


; <Start encoding Vale.Arch.Types.inot128>

(declare-fun Vale.Arch.Types.inot128 (Term) Term)
(declare-fun Tm_arrow_768f9f1702453bf1d3140250c93f388c () Term)
(declare-fun Vale.Arch.Types.inot128@tok () Term)

; </end encoding Vale.Arch.Types.inot128>


; <Start encoding Vale.Arch.Types.ishl128>

(declare-fun Vale.Arch.Types.ishl128 (Term Term) Term)
(declare-fun Tm_arrow_e7edfca447d7c1deb1fbc5ae6f37540b () Term)
(declare-fun Vale.Arch.Types.ishl128@tok () Term)

; </end encoding Vale.Arch.Types.ishl128>


; <Start encoding Vale.Arch.Types.ishr128>

(declare-fun Vale.Arch.Types.ishr128 (Term Term) Term)

(declare-fun Vale.Arch.Types.ishr128@tok () Term)

; </end encoding Vale.Arch.Types.ishr128>


; <Start encoding Vale.Arch.Types.two_to_nat32>

(declare-fun Vale.Arch.Types.two_to_nat32 (Term) Term)
(declare-fun Tm_arrow_c50ba3f21aab9e811914268e4a2d85fb () Term)
(declare-fun Vale.Arch.Types.two_to_nat32@tok () Term)

; </end encoding Vale.Arch.Types.two_to_nat32>


; <Start encoding Vale.Arch.Types.lemma_nat_to_two32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_nat_to_two32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_nat_to_two32@tok () Term)

; </end encoding Vale.Arch.Types.lemma_nat_to_two32>


; <Start encoding Vale.Arch.Types.quad32_shl32>

(declare-fun Vale.Arch.Types.quad32_shl32 (Term) Term)

(declare-fun Vale.Arch.Types.quad32_shl32@tok () Term)

; </end encoding Vale.Arch.Types.quad32_shl32>


; <Start encoding Vale.Arch.Types.add_wrap_quad32>

(declare-fun Vale.Arch.Types.add_wrap_quad32 (Term Term) Term)

(declare-fun Vale.Arch.Types.add_wrap_quad32@tok () Term)

; </end encoding Vale.Arch.Types.add_wrap_quad32>


; <Start encoding Vale.Arch.Types.lemma_BitwiseXorCommutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorCommutative (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorCommutative@tok () Term)

; </end encoding Vale.Arch.Types.lemma_BitwiseXorCommutative>


; <Start encoding Vale.Arch.Types.lemma_BitwiseXorWithZero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorWithZero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorWithZero@tok () Term)

; </end encoding Vale.Arch.Types.lemma_BitwiseXorWithZero>


; <Start encoding Vale.Arch.Types.lemma_BitwiseXorCancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorCancel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorCancel@tok () Term)

; </end encoding Vale.Arch.Types.lemma_BitwiseXorCancel>


; <Start encoding Vale.Arch.Types.lemma_BitwiseXorCancel64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorCancel64 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorCancel64@tok () Term)

; </end encoding Vale.Arch.Types.lemma_BitwiseXorCancel64>


; <Start encoding Vale.Arch.Types.lemma_BitwiseXorAssociative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorAssociative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_BitwiseXorAssociative@tok () Term)

; </end encoding Vale.Arch.Types.lemma_BitwiseXorAssociative>


; <Start encoding Vale.Arch.Types.xor_lemmas>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.xor_lemmas (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.xor_lemmas@tok () Term)

; </end encoding Vale.Arch.Types.xor_lemmas>


; <Start encoding Vale.Arch.Types.lemma_quad32_xor>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_quad32_xor (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_quad32_xor@tok () Term)

; </end encoding Vale.Arch.Types.lemma_quad32_xor>


; <Start encoding Vale.Arch.Types.quad32_double_lo>

(declare-fun Vale.Arch.Types.quad32_double_lo (Term) Term)
(declare-fun Tm_arrow_4ff1244560f16d6d1bf2a3b5c3bc0a99 () Term)
(declare-fun Vale.Arch.Types.quad32_double_lo@tok () Term)

; </end encoding Vale.Arch.Types.quad32_double_lo>


; <Start encoding Vale.Arch.Types.quad32_double_hi>

(declare-fun Vale.Arch.Types.quad32_double_hi (Term) Term)

(declare-fun Vale.Arch.Types.quad32_double_hi@tok () Term)

; </end encoding Vale.Arch.Types.quad32_double_hi>


; <Start encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32@tok () Term)

; </end encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32>


; <Start encoding Vale.Arch.Types.lemma_reverse_bytes_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_bytes_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_bytes_quad32@tok () Term)

; </end encoding Vale.Arch.Types.lemma_reverse_bytes_quad32>


; <Start encoding Vale.Arch.Types.lemma_reverse_bytes_quad32_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_bytes_quad32_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_bytes_quad32_zero@tok () Term)

; </end encoding Vale.Arch.Types.lemma_reverse_bytes_quad32_zero>


; <Start encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_seq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_seq@tok () Term)

; </end encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_seq>


; <Start encoding Vale.Arch.Types.quad32_to_seq>

(declare-fun Vale.Arch.Types.quad32_to_seq (Term) Term)
(declare-fun Tm_arrow_e80ad62fedf01982be69ada15cadbccc () Term)
(declare-fun Vale.Arch.Types.quad32_to_seq@tok () Term)

; </end encoding Vale.Arch.Types.quad32_to_seq>


; <Start encoding Vale.Arch.Types.lemma_insert_nat64_properties>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_insert_nat64_properties (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_insert_nat64_properties@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Arch.Types.lemma_insert_nat64_properties; Namespace Vale.Arch.Types
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.Def.Types_s.insert_nat64@tok))
:named @kick_partial_app_dba6056e169bcad1175d3c862663bfc7))

; </end encoding Vale.Arch.Types.lemma_insert_nat64_properties>


; <Start encoding Vale.Arch.Types.lemma_insert_nat64_nat32s>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_insert_nat64_nat32s (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_insert_nat64_nat32s@tok () Term)

; </end encoding Vale.Arch.Types.lemma_insert_nat64_nat32s>


; <Start encoding Vale.Arch.Types.lo64_def>

(declare-fun Vale.Arch.Types.lo64_def (Term) Term)
(declare-fun Tm_arrow_f2fcf01f3087c69f1b3a2ca077623084 () Term)
(declare-fun Vale.Arch.Types.lo64_def@tok () Term)

; </end encoding Vale.Arch.Types.lo64_def>


; <Start encoding Vale.Arch.Types.lo64>

(declare-fun Vale.Arch.Types.lo64 (Term) Term)

(declare-fun Vale.Arch.Types.lo64@tok () Term)

; </end encoding Vale.Arch.Types.lo64>


; <Start encoding Vale.Arch.Types.lo64_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lo64_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lo64_reveal@tok () Term)

; </end encoding Vale.Arch.Types.lo64_reveal>


; <Start encoding Vale.Arch.Types.hi64_def>

(declare-fun Vale.Arch.Types.hi64_def (Term) Term)

(declare-fun Vale.Arch.Types.hi64_def@tok () Term)

; </end encoding Vale.Arch.Types.hi64_def>


; <Start encoding Vale.Arch.Types.hi64>

(declare-fun Vale.Arch.Types.hi64 (Term) Term)

(declare-fun Vale.Arch.Types.hi64@tok () Term)

; </end encoding Vale.Arch.Types.hi64>


; <Start encoding Vale.Arch.Types.hi64_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.hi64_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.hi64_reveal@tok () Term)

; </end encoding Vale.Arch.Types.hi64_reveal>


; <Start encoding Vale.Arch.Types.lemma_lo64_properties>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_lo64_properties (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_lo64_properties@tok () Term)

; </end encoding Vale.Arch.Types.lemma_lo64_properties>


; <Start encoding Vale.Arch.Types.lemma_hi64_properties>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_hi64_properties (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_hi64_properties@tok () Term)

; </end encoding Vale.Arch.Types.lemma_hi64_properties>


; <Start encoding Vale.Arch.Types.lemma_reverse_bytes_quad32_64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_bytes_quad32_64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_bytes_quad32_64@tok () Term)

; </end encoding Vale.Arch.Types.lemma_reverse_bytes_quad32_64>


; <Start encoding Vale.Arch.Types.lemma_equality_check_helper>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_equality_check_helper (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_equality_check_helper@tok () Term)

; </end encoding Vale.Arch.Types.lemma_equality_check_helper>


; <Start encoding Vale.Arch.Types.lemma_equality_check_helper_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_equality_check_helper_2 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_equality_check_helper_2@tok () Term)

; </end encoding Vale.Arch.Types.lemma_equality_check_helper_2>


; <Start encoding Vale.Arch.Types.push_pop_xmm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.push_pop_xmm (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.push_pop_xmm@tok () Term)

; </end encoding Vale.Arch.Types.push_pop_xmm>


; <Start encoding Vale.Arch.Types.lemma_insrq_extrq_relations>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_insrq_extrq_relations (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_insrq_extrq_relations@tok () Term)

; </end encoding Vale.Arch.Types.lemma_insrq_extrq_relations>


; <Start encoding Vale.Arch.Types.le_bytes_to_nat64_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_nat64_to_bytes (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_nat64_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.le_bytes_to_nat64_to_bytes>


; <Start encoding Vale.Arch.Types.le_nat64_to_bytes_to_nat64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_nat64_to_bytes_to_nat64 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_nat64_to_bytes_to_nat64@tok () Term)

; </end encoding Vale.Arch.Types.le_nat64_to_bytes_to_nat64>


; <Start encoding Vale.Arch.Types.le_bytes_to_seq_quad32_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_seq_quad32_empty (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_seq_quad32_empty@tok () Term)

; </end encoding Vale.Arch.Types.le_bytes_to_seq_quad32_empty>


; <Start encoding Vale.Arch.Types.be_bytes_to_seq_quad32_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_seq_quad32_empty (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_seq_quad32_empty@tok () Term)

; </end encoding Vale.Arch.Types.be_bytes_to_seq_quad32_empty>


; <Start encoding Vale.Arch.Types.le_bytes_to_seq_quad32_to_bytes_one_quad>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_seq_quad32_to_bytes_one_quad (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_seq_quad32_to_bytes_one_quad@tok () Term)

; </end encoding Vale.Arch.Types.le_bytes_to_seq_quad32_to_bytes_one_quad>


; <Start encoding Vale.Arch.Types.be_quad32_to_bytes>

(declare-fun Vale.Arch.Types.be_quad32_to_bytes (Term) Term)
(declare-fun Tm_arrow_b0ab5bce844de3969eb358156524e174 () Term)
(declare-fun Vale.Arch.Types.be_quad32_to_bytes@tok () Term)


; </end encoding Vale.Arch.Types.be_quad32_to_bytes>


; <Start encoding Vale.Arch.Types.be_bytes_to_seq_quad32_to_bytes_one_quad>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_seq_quad32_to_bytes_one_quad (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_seq_quad32_to_bytes_one_quad@tok () Term)

; </end encoding Vale.Arch.Types.be_bytes_to_seq_quad32_to_bytes_one_quad>


; <Start encoding Vale.Arch.Types.le_bytes_to_seq_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_seq_quad32_to_bytes (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_seq_quad32_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.le_bytes_to_seq_quad32_to_bytes>


; <Start encoding Vale.Arch.Types.be_bytes_to_seq_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_seq_quad32_to_bytes (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_seq_quad32_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.be_bytes_to_seq_quad32_to_bytes>


; <Start encoding Vale.Arch.Types.le_seq_quad32_to_bytes_to_seq_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_seq_quad32_to_bytes_to_seq_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_seq_quad32_to_bytes_to_seq_quad32@tok () Term)

; </end encoding Vale.Arch.Types.le_seq_quad32_to_bytes_to_seq_quad32>


; <Start encoding Vale.Arch.Types.le_quad32_to_bytes_to_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_quad32_to_bytes_to_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_quad32_to_bytes_to_quad32@tok () Term)

; </end encoding Vale.Arch.Types.le_quad32_to_bytes_to_quad32>


; <Start encoding Vale.Arch.Types.be_quad32_to_bytes_to_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_quad32_to_bytes_to_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_quad32_to_bytes_to_quad32@tok () Term)

; </end encoding Vale.Arch.Types.be_quad32_to_bytes_to_quad32>


; <Start encoding Vale.Arch.Types.le_seq_quad32_to_bytes_of_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_seq_quad32_to_bytes_of_singleton (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_seq_quad32_to_bytes_of_singleton@tok () Term)

; </end encoding Vale.Arch.Types.le_seq_quad32_to_bytes_of_singleton>


; <Start encoding Vale.Arch.Types.be_seq_quad32_to_bytes_of_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_seq_quad32_to_bytes_of_singleton (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_seq_quad32_to_bytes_of_singleton@tok () Term)

; </end encoding Vale.Arch.Types.be_seq_quad32_to_bytes_of_singleton>


; <Start encoding Vale.Arch.Types.le_quad32_to_bytes_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_quad32_to_bytes_injective (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_quad32_to_bytes_injective@tok () Term)

; </end encoding Vale.Arch.Types.le_quad32_to_bytes_injective>


; <Start encoding Vale.Arch.Types.be_quad32_to_bytes_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_quad32_to_bytes_injective (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_quad32_to_bytes_injective@tok () Term)

; </end encoding Vale.Arch.Types.be_quad32_to_bytes_injective>


; <Start encoding Vale.Arch.Types.le_quad32_to_bytes_injective_specific>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_quad32_to_bytes_injective_specific (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_quad32_to_bytes_injective_specific@tok () Term)

; </end encoding Vale.Arch.Types.le_quad32_to_bytes_injective_specific>


; <Start encoding Vale.Arch.Types.be_quad32_to_bytes_injective_specific>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_quad32_to_bytes_injective_specific (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_quad32_to_bytes_injective_specific@tok () Term)

; </end encoding Vale.Arch.Types.be_quad32_to_bytes_injective_specific>


; <Start encoding Vale.Arch.Types.le_seq_quad32_to_bytes_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_seq_quad32_to_bytes_injective (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_seq_quad32_to_bytes_injective@tok () Term)

; </end encoding Vale.Arch.Types.le_seq_quad32_to_bytes_injective>


; <Start encoding Vale.Arch.Types.seq_to_four_LE_is_seq_to_seq_four_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.seq_to_four_LE_is_seq_to_seq_four_LE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.seq_to_four_LE_is_seq_to_seq_four_LE@tok () Term)

; </end encoding Vale.Arch.Types.seq_to_four_LE_is_seq_to_seq_four_LE>


; <Start encoding Vale.Arch.Types.seq_to_four_BE_is_seq_to_seq_four_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.seq_to_four_BE_is_seq_to_seq_four_BE (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.seq_to_four_BE_is_seq_to_seq_four_BE@tok () Term)

; </end encoding Vale.Arch.Types.seq_to_four_BE_is_seq_to_seq_four_BE>


; <Start encoding Vale.Arch.Types.le_bytes_to_seq_quad_of_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_seq_quad_of_singleton (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_seq_quad_of_singleton@tok () Term)

; </end encoding Vale.Arch.Types.le_bytes_to_seq_quad_of_singleton>


; <Start encoding Vale.Arch.Types.be_bytes_to_seq_quad_of_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_seq_quad_of_singleton (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_seq_quad_of_singleton@tok () Term)

; </end encoding Vale.Arch.Types.be_bytes_to_seq_quad_of_singleton>


; <Start encoding Vale.Arch.Types.le_bytes_to_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_quad32_to_bytes (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.le_bytes_to_quad32_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.le_bytes_to_quad32_to_bytes>


; <Start encoding Vale.Arch.Types.be_bytes_to_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_quad32_to_bytes (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.be_bytes_to_quad32_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.be_bytes_to_quad32_to_bytes>


; <Start encoding Vale.Arch.Types.reverse_bytes_nat32_quad32>

(declare-fun Vale.Arch.Types.reverse_bytes_nat32_quad32 (Term) Term)

(declare-fun Vale.Arch.Types.reverse_bytes_nat32_quad32@tok () Term)

; </end encoding Vale.Arch.Types.reverse_bytes_nat32_quad32>


; <Start encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_quad32@tok () Term)

; </end encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_quad32>


; <Start encoding Vale.Arch.Types.reverse_bytes_nat32_quad32_seq>

(declare-fun Vale.Arch.Types.reverse_bytes_nat32_quad32_seq (Term) Term)
(declare-fun Tm_arrow_851e15c75fe62a663dfcb7ec875622e5 () Term)
(declare-fun Vale.Arch.Types.reverse_bytes_nat32_quad32_seq@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Arch.Types.reverse_bytes_nat32_quad32_seq; Namespace Vale.Arch.Types
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.Arch.Types.reverse_bytes_nat32_quad32@tok))
:named @kick_partial_app_64bdf892f720c162647344c387ab50c2))

; </end encoding Vale.Arch.Types.reverse_bytes_nat32_quad32_seq>


; <Start encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_quad32_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_quad32_seq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_quad32_seq@tok () Term)

; </end encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_nat32_quad32_seq>


; <Start encoding Vale.Arch.Types.reverse_bytes_quad32_seq>

(declare-fun Vale.Arch.Types.reverse_bytes_quad32_seq (Term) Term)

(declare-fun Vale.Arch.Types.reverse_bytes_quad32_seq@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.Arch.Types.reverse_bytes_quad32_seq; Namespace Vale.Arch.Types
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.Def.Types_s.reverse_bytes_quad32@tok))
:named @kick_partial_app_151f5be04108dd14c945a9eece169509))

; </end encoding Vale.Arch.Types.reverse_bytes_quad32_seq>


; <Start encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_quad32_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_quad32_seq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_reverse_reverse_bytes_quad32_seq@tok () Term)

; </end encoding Vale.Arch.Types.lemma_reverse_reverse_bytes_quad32_seq>


; <Start encoding Vale.Arch.Types.lemma_le_seq_quad32_to_bytes_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_le_seq_quad32_to_bytes_length (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_le_seq_quad32_to_bytes_length@tok () Term)

; </end encoding Vale.Arch.Types.lemma_le_seq_quad32_to_bytes_length>


; <Start encoding Vale.Arch.Types.lemma_be_seq_quad32_to_bytes_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.lemma_be_seq_quad32_to_bytes_length (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.lemma_be_seq_quad32_to_bytes_length@tok () Term)

; </end encoding Vale.Arch.Types.lemma_be_seq_quad32_to_bytes_length>


; <Start encoding Vale.Arch.Types.slice_commutes_seq_four_to_seq_LE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.slice_commutes_seq_four_to_seq_LE (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.slice_commutes_seq_four_to_seq_LE@tok () Term)

; </end encoding Vale.Arch.Types.slice_commutes_seq_four_to_seq_LE>


; <Start encoding Vale.Arch.Types.slice_commutes_seq_four_to_seq_BE>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.slice_commutes_seq_four_to_seq_BE (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.slice_commutes_seq_four_to_seq_BE@tok () Term)

; </end encoding Vale.Arch.Types.slice_commutes_seq_four_to_seq_BE>


; <Start encoding Vale.Arch.Types.slice_commutes_le_seq_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.slice_commutes_le_seq_quad32_to_bytes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.slice_commutes_le_seq_quad32_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.slice_commutes_le_seq_quad32_to_bytes>


; <Start encoding Vale.Arch.Types.slice_commutes_be_seq_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.slice_commutes_be_seq_quad32_to_bytes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.slice_commutes_be_seq_quad32_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.slice_commutes_be_seq_quad32_to_bytes>


; <Start encoding Vale.Arch.Types.slice_commutes_le_seq_quad32_to_bytes0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.slice_commutes_le_seq_quad32_to_bytes0 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.slice_commutes_le_seq_quad32_to_bytes0@tok () Term)

; </end encoding Vale.Arch.Types.slice_commutes_le_seq_quad32_to_bytes0>


; <Start encoding Vale.Arch.Types.slice_commutes_be_seq_quad32_to_bytes0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.slice_commutes_be_seq_quad32_to_bytes0 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.slice_commutes_be_seq_quad32_to_bytes0@tok () Term)

; </end encoding Vale.Arch.Types.slice_commutes_be_seq_quad32_to_bytes0>


; <Start encoding Vale.Arch.Types.append_distributes_le_bytes_to_seq_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.append_distributes_le_bytes_to_seq_quad32 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.append_distributes_le_bytes_to_seq_quad32@tok () Term)

; </end encoding Vale.Arch.Types.append_distributes_le_bytes_to_seq_quad32>


; <Start encoding Vale.Arch.Types.append_distributes_be_bytes_to_seq_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.append_distributes_be_bytes_to_seq_quad32 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.append_distributes_be_bytes_to_seq_quad32@tok () Term)

; </end encoding Vale.Arch.Types.append_distributes_be_bytes_to_seq_quad32>


; <Start encoding Vale.Arch.Types.append_distributes_le_seq_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.append_distributes_le_seq_quad32_to_bytes (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.append_distributes_le_seq_quad32_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.append_distributes_le_seq_quad32_to_bytes>


; <Start encoding Vale.Arch.Types.append_distributes_be_seq_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.Types.append_distributes_be_seq_quad32_to_bytes (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.Types.append_distributes_be_seq_quad32_to_bytes@tok () Term)

; </end encoding Vale.Arch.Types.append_distributes_be_seq_quad32_to_bytes>


; End Externals for interface Vale.Arch.Types


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Arch.Types (445 decls; total size 39766)

;;; Start interface Vale.Math.Poly2.Bits

; Externals for interface Vale.Math.Poly2.Bits


; <Start encoding Vale.Math.Poly2.Bits.lemma_to_of_uint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_to_of_uint (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_to_of_uint@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_to_of_uint>


; <Start encoding Vale.Math.Poly2.Bits.of_nat>

(declare-fun Vale.Math.Poly2.Bits.of_nat (Term) Term)

(declare-fun Vale.Math.Poly2.Bits.of_nat@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.of_nat>


; <Start encoding Vale.Math.Poly2.Bits.of_uint_>

(declare-fun Vale.Math.Poly2.Bits.of_uint_ (Term Term) Term)
(declare-fun Tm_arrow_efaf869bfbb2ef13fc23260f25e9d3b4 () Term)
(declare-fun Vale.Math.Poly2.Bits.of_uint_@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.of_uint_>


; <Start encoding Vale.Math.Poly2.Bits.lemma_of_nat_of_uint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_nat_of_uint (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_nat_of_uint@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_of_nat_of_uint>


; <Start encoding Vale.Math.Poly2.Bits.poly_nat_eq_rec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented_token () Term)
(declare-fun Vale.Math.Poly2.Bits.poly_nat_eq_rec (Term Term Term Term) Term)
(declare-fun Vale.Math.Poly2.Bits.poly_nat_eq_rec@tok () Term)
(declare-fun Tm_arrow_b70d6381768bd2c925c35f66ff46a15f () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.Math.Poly2.Bits.poly_nat_eq_rec; Namespace Vale.Math.Poly2.Bits
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/math/Vale.Math.Poly2.Bits.fsti(27,8-27,23); use=/home/guido/r/everest/hacl-star/vale/code/lib/math/Vale.Math.Poly2.Bits.fsti(27,8-27,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented))

:named @fuel_irrelevance_Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.Math.Poly2.Bits.poly_nat_eq_rec; Namespace Vale.Math.Poly2.Bits
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/math/Vale.Math.Poly2.Bits.fsti(27,8-27,23); use=/home/guido/r/everest/hacl-star/vale/code/lib/math/Vale.Math.Poly2.Bits.fsti(27,8-27,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.Math.Poly2.Bits.poly_nat_eq_rec @x0
@x1
@x2
@x3)
(Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((Vale.Math.Poly2.Bits.poly_nat_eq_rec @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented))

:named @fuel_correspondence_Vale.Math.Poly2.Bits.poly_nat_eq_rec.fuel_instrumented))

; </end encoding Vale.Math.Poly2.Bits.poly_nat_eq_rec>


; <Start encoding Vale.Math.Poly2.Bits.lemma_to_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_to_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_to_nat@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_to_nat>


; <Start encoding Vale.Math.Poly2.Bits.of_nat32>

(declare-fun Vale.Math.Poly2.Bits.of_nat32 (Term) Term)
(declare-fun Tm_refine_37b3edec16faddba730e4e710f565937 (Term) Term)
(declare-fun Tm_arrow_282640fecef1b5b43830d0e6cf471523 () Term)
(declare-fun Vale.Math.Poly2.Bits.of_nat32@tok () Term)


; </end encoding Vale.Math.Poly2.Bits.of_nat32>


; <Start encoding Vale.Math.Poly2.Bits.of_nat32_zero>

(declare-fun Vale.Math.Poly2.Bits.of_nat32_zero () Term)
(declare-fun Tm_refine_4337ec945cb4c294d0e8ff2d420e64d7 () Term)


; </end encoding Vale.Math.Poly2.Bits.of_nat32_zero>


; <Start encoding Vale.Math.Poly2.Bits.of_nat32_ones>

(declare-fun Vale.Math.Poly2.Bits.of_nat32_ones () Term)
(declare-fun Tm_refine_10fce5557d0593095ff373cff619471e () Term)


; </end encoding Vale.Math.Poly2.Bits.of_nat32_ones>


; <Start encoding Vale.Math.Poly2.Bits.of_nat32_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.of_nat32_eq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.of_nat32_eq@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.of_nat32_eq>


; <Start encoding Vale.Math.Poly2.Bits.of_nat32_xor>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.of_nat32_xor (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.of_nat32_xor@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.of_nat32_xor>


; <Start encoding Vale.Math.Poly2.Bits.of_nat32_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.of_nat32_and (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.of_nat32_and@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.of_nat32_and>


; <Start encoding Vale.Math.Poly2.Bits.poly128_of_poly32s>

(declare-fun Vale.Math.Poly2.Bits.poly128_of_poly32s (Term Term Term Term) Term)
(declare-fun Tm_arrow_512321e0bcb6bbee60dde311d586fa69 () Term)
(declare-fun Vale.Math.Poly2.Bits.poly128_of_poly32s@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.poly128_of_poly32s>


; <Start encoding Vale.Math.Poly2.Bits.poly128_of_nat32s>

(declare-fun Vale.Math.Poly2.Bits.poly128_of_nat32s (Term Term Term Term) Term)
(declare-fun Tm_arrow_9dba1ede22cbce70a2ce2f98b29b397c () Term)
(declare-fun Vale.Math.Poly2.Bits.poly128_of_nat32s@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.poly128_of_nat32s>


; <Start encoding Vale.Math.Poly2.Bits.lemma_poly128_extract_nat32s>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_poly128_extract_nat32s (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_poly128_extract_nat32s@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_poly128_extract_nat32s>


; <Start encoding Vale.Math.Poly2.Bits.lemma_quad32_of_nat32s>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_quad32_of_nat32s (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_quad32_of_nat32s@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_quad32_of_nat32s>


; <Start encoding Vale.Math.Poly2.Bits.lemma_quad32_to_nat32s>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_quad32_to_nat32s (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_quad32_to_nat32s@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_quad32_to_nat32s>


; <Start encoding Vale.Math.Poly2.Bits.lemma_quad32_extract_nat32s>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_quad32_extract_nat32s (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_quad32_extract_nat32s@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_quad32_extract_nat32s>


; <Start encoding Vale.Math.Poly2.Bits.lemma_quad32_double>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_quad32_double (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_quad32_double@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_quad32_double>


; <Start encoding Vale.Math.Poly2.Bits.lemma_of_double32_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_double32_degree (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_double32_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_of_double32_degree>


; <Start encoding Vale.Math.Poly2.Bits.lemma_of_quad32_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_quad32_degree (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_quad32_degree@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_of_quad32_degree>


; <Start encoding Vale.Math.Poly2.Bits.lemma_to_of_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_to_of_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_to_of_quad32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_to_of_quad32>


; <Start encoding Vale.Math.Poly2.Bits.lemma_of_to_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_to_quad32 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_to_quad32@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_of_to_quad32>


; <Start encoding Vale.Math.Poly2.Bits.lemma_of_to_quad32_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_to_quad32_mask (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Bits.lemma_of_to_quad32_mask@tok () Term)

; </end encoding Vale.Math.Poly2.Bits.lemma_of_to_quad32_mask>


; End Externals for interface Vale.Math.Poly2.Bits


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Math.Poly2.Bits (113 decls; total size 15551)

;;; Start interface Vale.Math.Poly2.Words

; Externals for interface Vale.Math.Poly2.Words


; <Start encoding Vale.Math.Poly2.Words.lemma_quad32_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_quad32_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_quad32_zero@tok () Term)

; </end encoding Vale.Math.Poly2.Words.lemma_quad32_zero>


; <Start encoding Vale.Math.Poly2.Words.lemma_quad32_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_quad32_ones (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_quad32_ones@tok () Term)

; </end encoding Vale.Math.Poly2.Words.lemma_quad32_ones>


; <Start encoding Vale.Math.Poly2.Words.lemma_add128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_add128 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_add128@tok () Term)

; </end encoding Vale.Math.Poly2.Words.lemma_add128>


; <Start encoding Vale.Math.Poly2.Words.lemma_add_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_add_quad32 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_add_quad32@tok () Term)

; </end encoding Vale.Math.Poly2.Words.lemma_add_quad32>


; <Start encoding Vale.Math.Poly2.Words.lemma_and128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_and128 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_and128@tok () Term)

; </end encoding Vale.Math.Poly2.Words.lemma_and128>


; <Start encoding Vale.Math.Poly2.Words.lemma_and_quad32>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_and_quad32 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_and_quad32@tok () Term)

; </end encoding Vale.Math.Poly2.Words.lemma_and_quad32>


; <Start encoding Vale.Math.Poly2.Words.lemma_quad32_double_shift>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_quad32_double_shift (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_quad32_double_shift@tok () Term)

; </end encoding Vale.Math.Poly2.Words.lemma_quad32_double_shift>


; <Start encoding Vale.Math.Poly2.Words.lemma_quad32_double_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_quad32_double_swap (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Math.Poly2.Words.lemma_quad32_double_swap@tok () Term)

; </end encoding Vale.Math.Poly2.Words.lemma_quad32_double_swap>


; End Externals for interface Vale.Math.Poly2.Words


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Math.Poly2.Words (35 decls; total size 8251)

;;; Start module Vale.Def.Prop_s

; Externals for module Vale.Def.Prop_s


; <Start encoding Vale.Def.Prop_s.prop0>

(declare-fun Vale.Def.Prop_s.prop0 () Term)

; </end encoding Vale.Def.Prop_s.prop0>


; End Externals for module Vale.Def.Prop_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.Def.Prop_s (6 decls; total size 5338)

;;; Start module Vale.AES.AES_common_s

; Externals for module Vale.AES.AES_common_s


; <Start encoding Vale.AES.AES_common_s.sub_bytes>

(declare-fun Vale.AES.AES_common_s.sub_bytes (Term) Term)

(declare-fun Vale.AES.AES_common_s.sub_bytes@tok () Term)

; </end encoding Vale.AES.AES_common_s.sub_bytes>


; <Start encoding Vale.AES.AES_common_s.inv_sub_bytes>

(declare-fun Vale.AES.AES_common_s.inv_sub_bytes (Term) Term)

(declare-fun Vale.AES.AES_common_s.inv_sub_bytes@tok () Term)

; </end encoding Vale.AES.AES_common_s.inv_sub_bytes>


; <Start encoding Vale.AES.AES_common_s.sub_word>

(declare-fun Vale.AES.AES_common_s.sub_word (Term) Term)

(declare-fun Vale.AES.AES_common_s.sub_word@tok () Term)

; </end encoding Vale.AES.AES_common_s.sub_word>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.AES.AES_common_s.algorithm () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.AES.AES_common_s.AES_128 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: AES_128
(declare-fun Vale.AES.AES_common_s.AES_128@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.AES.AES_common_s.AES_192 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: AES_192
(declare-fun Vale.AES.AES_common_s.AES_192@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.AES.AES_common_s.AES_256 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: AES_256
(declare-fun Vale.AES.AES_common_s.AES_256@tok () Term)

; <Start encoding Vale.AES.AES_common_s.algorithm>


; <start constructor Vale.AES.AES_common_s.algorithm>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.AES.AES_common_s.algorithm ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
Vale.AES.AES_common_s.algorithm)))

; </end constructor Vale.AES.AES_common_s.algorithm>


; </end encoding Vale.AES.AES_common_s.algorithm>


; <Start encoding Vale.AES.AES_common_s.AES_128>


; <start constructor Vale.AES.AES_common_s.AES_128>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.AES.AES_common_s.AES_128 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
Vale.AES.AES_common_s.AES_128)))

; </end constructor Vale.AES.AES_common_s.AES_128>


; </end encoding Vale.AES.AES_common_s.AES_128>


; <Start encoding Vale.AES.AES_common_s.AES_192>


; <start constructor Vale.AES.AES_common_s.AES_192>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.AES.AES_common_s.AES_192 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
115)
(= __@x0
Vale.AES.AES_common_s.AES_192)))

; </end constructor Vale.AES.AES_common_s.AES_192>


; </end encoding Vale.AES.AES_common_s.AES_192>


; <Start encoding Vale.AES.AES_common_s.AES_256>


; <start constructor Vale.AES.AES_common_s.AES_256>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.AES.AES_common_s.AES_256 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
Vale.AES.AES_common_s.AES_256)))

; </end constructor Vale.AES.AES_common_s.AES_256>


; </end encoding Vale.AES.AES_common_s.AES_256>


; </end encoding >


; <Start encoding Vale.AES.AES_common_s.algorithm__uu___haseq>


; </end encoding Vale.AES.AES_common_s.algorithm__uu___haseq>


; <Start encoding Vale.AES.AES_common_s.uu___is_AES_128>

(declare-fun Vale.AES.AES_common_s.uu___is_AES_128 (Term) Term)
(declare-fun Tm_arrow_5fd50701703766e27a270af9359db3cd () Term)
(declare-fun Vale.AES.AES_common_s.uu___is_AES_128@tok () Term)

; </end encoding Vale.AES.AES_common_s.uu___is_AES_128>


; <Skipped Vale.AES.AES_common_s.uu___is_AES_128/>


; <Start encoding Vale.AES.AES_common_s.uu___is_AES_192>

(declare-fun Vale.AES.AES_common_s.uu___is_AES_192 (Term) Term)

(declare-fun Vale.AES.AES_common_s.uu___is_AES_192@tok () Term)

; </end encoding Vale.AES.AES_common_s.uu___is_AES_192>


; <Skipped Vale.AES.AES_common_s.uu___is_AES_192/>


; <Start encoding Vale.AES.AES_common_s.uu___is_AES_256>

(declare-fun Vale.AES.AES_common_s.uu___is_AES_256 (Term) Term)

(declare-fun Vale.AES.AES_common_s.uu___is_AES_256@tok () Term)

; </end encoding Vale.AES.AES_common_s.uu___is_AES_256>


; <Skipped Vale.AES.AES_common_s.uu___is_AES_256/>


; <Start encoding Vale.AES.AES_common_s.aes_rcon>

(declare-fun Vale.AES.AES_common_s.aes_rcon (Term) Term)
(declare-fun Tm_arrow_812ec3735f5869583369c609ddf48033 () Term)
(declare-fun Vale.AES.AES_common_s.aes_rcon@tok () Term)

; </end encoding Vale.AES.AES_common_s.aes_rcon>


; <Start encoding Vale.AES.AES_common_s.nb>

(declare-fun Vale.AES.AES_common_s.nb (Dummy_sort) Term)

; </end encoding Vale.AES.AES_common_s.nb>


; <Start encoding Vale.AES.AES_common_s.nk>

(declare-fun Vale.AES.AES_common_s.nk (Term) Term)
(declare-fun Tm_arrow_c5b1be26de72b7c0cdf2dabfb4261d06 () Term)
(declare-fun Vale.AES.AES_common_s.nk@tok () Term)

; </end encoding Vale.AES.AES_common_s.nk>


; <Start encoding Vale.AES.AES_common_s.nr>

(declare-fun Vale.AES.AES_common_s.nr (Term) Term)

(declare-fun Vale.AES.AES_common_s.nr@tok () Term)

; </end encoding Vale.AES.AES_common_s.nr>


; <Start encoding Vale.AES.AES_common_s.is_aes_key>

(declare-fun Vale.AES.AES_common_s.is_aes_key (Term Term) Term)
(declare-fun Tm_arrow_a82d9d50344d8eca401f7729819b7b83 () Term)
(declare-fun Vale.AES.AES_common_s.is_aes_key@tok () Term)

; </end encoding Vale.AES.AES_common_s.is_aes_key>


; <Start encoding Vale.AES.AES_common_s.aes_key>

(declare-fun Vale.AES.AES_common_s.aes_key (Term) Term)
(declare-fun Tm_arrow_89221e37a889e51c9f0e543aca59ba03 () Term)
(declare-fun Vale.AES.AES_common_s.aes_key@tok () Term)
(declare-fun Tm_refine_1e97dd46d30ba48388dbb87d88106659 (Term) Term)

; </end encoding Vale.AES.AES_common_s.aes_key>


; End Externals for module Vale.AES.AES_common_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.AES.AES_common_s (96 decls; total size 10769)

;;; Start interface FStar.Map

; Externals for interface FStar.Map


; <Start encoding FStar.Map.t>

(declare-fun FStar.Map.t (Term Term) Term)
(declare-fun Tm_arrow_2b8b9bde9fdc9f797e5827d0c154aeeb () Term)
(declare-fun FStar.Map.t@tok () Term)

; </end encoding FStar.Map.t>


; <Start encoding FStar.Map.sel>

(declare-fun FStar.Map.sel (Term Term Term Term) Term)
(declare-fun Tm_arrow_28a168f8d4c6d78564a214862be72b08 () Term)
(declare-fun FStar.Map.sel@tok () Term)

; </end encoding FStar.Map.sel>


; <Start encoding FStar.Map.upd>

(declare-fun FStar.Map.upd (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b19283e90b47034162373413c6a19933 () Term)
(declare-fun FStar.Map.upd@tok () Term)

; </end encoding FStar.Map.upd>


; <Start encoding FStar.Map.const>

(declare-fun FStar.Map.const (Term Term Term) Term)
(declare-fun Tm_arrow_867ad7c8cdd01bd87f415b1f9e0b39ac () Term)
(declare-fun FStar.Map.const@tok () Term)

; </end encoding FStar.Map.const>


; <Start encoding FStar.Map.domain>

(declare-fun FStar.Map.domain (Term Term Term) Term)
(declare-fun Tm_arrow_6e8371e4f424600b54c69f2eb03b48d8 () Term)
(declare-fun FStar.Map.domain@tok () Term)

; </end encoding FStar.Map.domain>


; <Start encoding FStar.Map.contains>

(declare-fun FStar.Map.contains (Term Term Term Term) Term)
(declare-fun Tm_arrow_32b461b2324f01c7a6bc6b577725566d () Term)
(declare-fun FStar.Map.contains@tok () Term)

; </end encoding FStar.Map.contains>


; <Start encoding FStar.Map.concat>

(declare-fun FStar.Map.concat (Term Term Term Term) Term)
(declare-fun Tm_arrow_b137090ab92fa6ffe958df8f30b9f54e () Term)
(declare-fun FStar.Map.concat@tok () Term)

; </end encoding FStar.Map.concat>


; <Start encoding FStar.Map.map_val>


(declare-fun FStar.Map.map_val (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_9123217b92d7c89a4449fe44590b9f47 () Term)
(declare-fun FStar.Map.map_val@tok () Term)

; </end encoding FStar.Map.map_val>


; <Start encoding FStar.Map.restrict>

(declare-fun FStar.Map.restrict (Term Term Term Term) Term)
(declare-fun Tm_arrow_e8f96ed4bf330326d457be2f8416d734 () Term)
(declare-fun FStar.Map.restrict@tok () Term)

; </end encoding FStar.Map.restrict>


; <Start encoding FStar.Map.const_on>

(declare-fun FStar.Map.const_on (Term Term Term Term) Term)
(declare-fun Tm_arrow_f99b4e662f3e4a97cdb11f6ede73601e () Term)
(declare-fun FStar.Map.const_on@tok () Term)

; </end encoding FStar.Map.const_on>


; <Start encoding FStar.Map.map_literal>


(declare-fun FStar.Map.map_literal (Term Term Term) Term)

(declare-fun Tm_arrow_fb1dd96195814b8107d05d25a2bbb566 () Term)
(declare-fun FStar.Map.map_literal@tok () Term)

; </end encoding FStar.Map.map_literal>


; <Start encoding FStar.Map.disjoint_dom>

(declare-fun FStar.Map.disjoint_dom (Term Term Term Term) Term)
(declare-fun Tm_arrow_556fc2b76256aeb4c51415a912920e4f () Term)
(declare-fun FStar.Map.disjoint_dom@tok () Term)

(declare-fun Tm_abs_0845446648867882896439280f19dc64 (Term Term Term Term) Term)

; </end encoding FStar.Map.disjoint_dom>


; <Start encoding FStar.Map.has_dom>

(declare-fun FStar.Map.has_dom (Term Term Term Term) Term)
(declare-fun Tm_arrow_978eafbacd55316f8accb3c830570c46 () Term)
(declare-fun FStar.Map.has_dom@tok () Term)

(declare-fun Tm_abs_728e8d591f8433d6e0c285d90ff0e83d (Term Term Term Term) Term)

; </end encoding FStar.Map.has_dom>


; <Start encoding FStar.Map.lemma_SelUpd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelUpd1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelUpd1@tok () Term)

; </end encoding FStar.Map.lemma_SelUpd1>


; <Start encoding FStar.Map.lemma_SelUpd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelUpd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelUpd2@tok () Term)

; </end encoding FStar.Map.lemma_SelUpd2>


; <Start encoding FStar.Map.lemma_SelConst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConst (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConst@tok () Term)

; </end encoding FStar.Map.lemma_SelConst>


; <Start encoding FStar.Map.lemma_SelRestrict>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelRestrict (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelRestrict@tok () Term)

; </end encoding FStar.Map.lemma_SelRestrict>


; <Start encoding FStar.Map.lemma_SelConcat1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConcat1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConcat1@tok () Term)

; </end encoding FStar.Map.lemma_SelConcat1>


; <Start encoding FStar.Map.lemma_SelConcat2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConcat2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConcat2@tok () Term)

; </end encoding FStar.Map.lemma_SelConcat2>


; <Start encoding FStar.Map.lemma_SelMapVal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelMapVal (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelMapVal@tok () Term)


; </end encoding FStar.Map.lemma_SelMapVal>


; <Start encoding FStar.Map.lemma_InDomUpd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomUpd1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomUpd1@tok () Term)

; </end encoding FStar.Map.lemma_InDomUpd1>


; <Start encoding FStar.Map.lemma_InDomUpd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomUpd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomUpd2@tok () Term)

; </end encoding FStar.Map.lemma_InDomUpd2>


; <Start encoding FStar.Map.lemma_InDomConstMap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomConstMap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomConstMap@tok () Term)

; </end encoding FStar.Map.lemma_InDomConstMap>


; <Start encoding FStar.Map.lemma_InDomConcat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomConcat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomConcat@tok () Term)

; </end encoding FStar.Map.lemma_InDomConcat>


; <Start encoding FStar.Map.lemma_InMapVal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InMapVal (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InMapVal@tok () Term)


; </end encoding FStar.Map.lemma_InMapVal>


; <Start encoding FStar.Map.lemma_InDomRestrict>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomRestrict (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomRestrict@tok () Term)

; </end encoding FStar.Map.lemma_InDomRestrict>


; <Start encoding FStar.Map.lemma_ContainsDom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_ContainsDom (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_ContainsDom@tok () Term)

; </end encoding FStar.Map.lemma_ContainsDom>


; <Start encoding FStar.Map.lemma_UpdDomain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_UpdDomain (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_UpdDomain@tok () Term)

; </end encoding FStar.Map.lemma_UpdDomain>


; <Start encoding FStar.Map.lemma_map_literal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_map_literal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_map_literal@tok () Term)


; </end encoding FStar.Map.lemma_map_literal>


; <Start encoding FStar.Map.equal>

(declare-fun FStar.Map.equal (Term Term Term Term) Term)
(declare-fun Tm_arrow_8d5e09121919a406639e2201d1f5d3dd () Term)
(declare-fun FStar.Map.equal@tok () Term)

; </end encoding FStar.Map.equal>


; <Start encoding FStar.Map.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_intro@tok () Term)

; </end encoding FStar.Map.lemma_equal_intro>


; <Start encoding FStar.Map.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_elim (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_elim@tok () Term)

; </end encoding FStar.Map.lemma_equal_elim>


; <Start encoding FStar.Map.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_refl@tok () Term)

; </end encoding FStar.Map.lemma_equal_refl>


; End Externals for interface FStar.Map


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.Map (160 decls; total size 15214)

;;; Start module Vale.Arch.HeapTypes_s

; Externals for module Vale.Arch.HeapTypes_s


; <Start encoding Vale.Arch.HeapTypes_s.__reduce__>

(declare-fun Vale.Arch.HeapTypes_s.__reduce__ (Dummy_sort) Term)

; </end encoding Vale.Arch.HeapTypes_s.__reduce__>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.base_typ () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.TUInt8 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: TUInt8
(declare-fun Vale.Arch.HeapTypes_s.TUInt8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.TUInt16 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: TUInt16
(declare-fun Vale.Arch.HeapTypes_s.TUInt16@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.TUInt32 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: TUInt32
(declare-fun Vale.Arch.HeapTypes_s.TUInt32@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.TUInt64 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: TUInt64
(declare-fun Vale.Arch.HeapTypes_s.TUInt64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.TUInt128 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: TUInt128
(declare-fun Vale.Arch.HeapTypes_s.TUInt128@tok () Term)

; <Start encoding Vale.Arch.HeapTypes_s.base_typ>


; <start constructor Vale.Arch.HeapTypes_s.base_typ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.base_typ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
Vale.Arch.HeapTypes_s.base_typ)))

; </end constructor Vale.Arch.HeapTypes_s.base_typ>


; </end encoding Vale.Arch.HeapTypes_s.base_typ>


; <Start encoding Vale.Arch.HeapTypes_s.TUInt8>


; <start constructor Vale.Arch.HeapTypes_s.TUInt8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.TUInt8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
Vale.Arch.HeapTypes_s.TUInt8)))

; </end constructor Vale.Arch.HeapTypes_s.TUInt8>


; </end encoding Vale.Arch.HeapTypes_s.TUInt8>


; <Start encoding Vale.Arch.HeapTypes_s.TUInt16>


; <start constructor Vale.Arch.HeapTypes_s.TUInt16>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.TUInt16 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
Vale.Arch.HeapTypes_s.TUInt16)))

; </end constructor Vale.Arch.HeapTypes_s.TUInt16>


; </end encoding Vale.Arch.HeapTypes_s.TUInt16>


; <Start encoding Vale.Arch.HeapTypes_s.TUInt32>


; <start constructor Vale.Arch.HeapTypes_s.TUInt32>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.TUInt32 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Vale.Arch.HeapTypes_s.TUInt32)))

; </end constructor Vale.Arch.HeapTypes_s.TUInt32>


; </end encoding Vale.Arch.HeapTypes_s.TUInt32>


; <Start encoding Vale.Arch.HeapTypes_s.TUInt64>


; <start constructor Vale.Arch.HeapTypes_s.TUInt64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.TUInt64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
Vale.Arch.HeapTypes_s.TUInt64)))

; </end constructor Vale.Arch.HeapTypes_s.TUInt64>


; </end encoding Vale.Arch.HeapTypes_s.TUInt64>


; <Start encoding Vale.Arch.HeapTypes_s.TUInt128>


; <start constructor Vale.Arch.HeapTypes_s.TUInt128>

;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Vale.Arch.HeapTypes_s.base_typ; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt8; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt16; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt32; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt64; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt128; Namespace Vale.Arch.HeapTypes_s
(assert (! (= 115
(Term_constr_id Vale.Arch.HeapTypes_s.TUInt128))
:named constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.TUInt128 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
115)
(= __@x0
Vale.Arch.HeapTypes_s.TUInt128)))

; </end constructor Vale.Arch.HeapTypes_s.TUInt128>

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Vale.Arch.HeapTypes_s.base_typ; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt8; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt16; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt32; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt64; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt128; Namespace Vale.Arch.HeapTypes_s
(assert (! (HasType Vale.Arch.HeapTypes_s.TUInt128@tok
Vale.Arch.HeapTypes_s.base_typ)
:named typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Vale.Arch.HeapTypes_s.base_typ; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt8; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt16; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt32; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt64; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.TUInt128; Namespace Vale.Arch.HeapTypes_s
(assert (! (= Vale.Arch.HeapTypes_s.TUInt128@tok
Vale.Arch.HeapTypes_s.TUInt128)
:named equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok))

; </end encoding Vale.Arch.HeapTypes_s.TUInt128>


; </end encoding >


; <Start encoding Vale.Arch.HeapTypes_s.base_typ__uu___haseq>


; </end encoding Vale.Arch.HeapTypes_s.base_typ__uu___haseq>


; <Start encoding Vale.Arch.HeapTypes_s.uu___is_TUInt8>

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt8 (Term) Term)
(declare-fun Tm_arrow_d7b54b47546d1f7798951a3dae42cdee () Term)
(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt8@tok () Term)

; </end encoding Vale.Arch.HeapTypes_s.uu___is_TUInt8>


; <Skipped Vale.Arch.HeapTypes_s.uu___is_TUInt8/>


; <Start encoding Vale.Arch.HeapTypes_s.uu___is_TUInt16>

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt16 (Term) Term)

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt16@tok () Term)

; </end encoding Vale.Arch.HeapTypes_s.uu___is_TUInt16>


; <Skipped Vale.Arch.HeapTypes_s.uu___is_TUInt16/>


; <Start encoding Vale.Arch.HeapTypes_s.uu___is_TUInt32>

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt32 (Term) Term)

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt32@tok () Term)

; </end encoding Vale.Arch.HeapTypes_s.uu___is_TUInt32>


; <Skipped Vale.Arch.HeapTypes_s.uu___is_TUInt32/>


; <Start encoding Vale.Arch.HeapTypes_s.uu___is_TUInt64>

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt64 (Term) Term)

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt64@tok () Term)

; </end encoding Vale.Arch.HeapTypes_s.uu___is_TUInt64>


; <Skipped Vale.Arch.HeapTypes_s.uu___is_TUInt64/>


; <Start encoding Vale.Arch.HeapTypes_s.uu___is_TUInt128>

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt128 (Term) Term)

(declare-fun Vale.Arch.HeapTypes_s.uu___is_TUInt128@tok () Term)

; </end encoding Vale.Arch.HeapTypes_s.uu___is_TUInt128>


; <Skipped Vale.Arch.HeapTypes_s.uu___is_TUInt128/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.taint () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.Public () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Public
(declare-fun Vale.Arch.HeapTypes_s.Public@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapTypes_s.Secret () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Secret
(declare-fun Vale.Arch.HeapTypes_s.Secret@tok () Term)

; <Start encoding Vale.Arch.HeapTypes_s.taint>


; <start constructor Vale.Arch.HeapTypes_s.taint>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.taint ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
126)
(= __@x0
Vale.Arch.HeapTypes_s.taint)))

; </end constructor Vale.Arch.HeapTypes_s.taint>


; </end encoding Vale.Arch.HeapTypes_s.taint>


; <Start encoding Vale.Arch.HeapTypes_s.Public>


; <start constructor Vale.Arch.HeapTypes_s.Public>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.Public ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
Vale.Arch.HeapTypes_s.Public)))

; </end constructor Vale.Arch.HeapTypes_s.Public>


; </end encoding Vale.Arch.HeapTypes_s.Public>


; <Start encoding Vale.Arch.HeapTypes_s.Secret>


; <start constructor Vale.Arch.HeapTypes_s.Secret>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapTypes_s.Secret ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(= __@x0
Vale.Arch.HeapTypes_s.Secret)))

; </end constructor Vale.Arch.HeapTypes_s.Secret>

;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Vale.Arch.HeapTypes_s.taint; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.Public; Namespace Vale.Arch.HeapTypes_s; Name Vale.Arch.HeapTypes_s.Secret; Namespace Vale.Arch.HeapTypes_s
(assert (! (= Vale.Arch.HeapTypes_s.Secret@tok
Vale.Arch.HeapTypes_s.Secret)
:named equality_tok_Vale.Arch.HeapTypes_s.Secret@tok))

; </end encoding Vale.Arch.HeapTypes_s.Secret>


; </end encoding >


; <Start encoding Vale.Arch.HeapTypes_s.taint__uu___haseq>


; </end encoding Vale.Arch.HeapTypes_s.taint__uu___haseq>


; <Start encoding Vale.Arch.HeapTypes_s.uu___is_Public>

(declare-fun Vale.Arch.HeapTypes_s.uu___is_Public (Term) Term)
(declare-fun Tm_arrow_e0ffb06a71d6cc352b464ecf6ce7777b () Term)
(declare-fun Vale.Arch.HeapTypes_s.uu___is_Public@tok () Term)

; </end encoding Vale.Arch.HeapTypes_s.uu___is_Public>


; <Skipped Vale.Arch.HeapTypes_s.uu___is_Public/>


; <Start encoding Vale.Arch.HeapTypes_s.uu___is_Secret>

(declare-fun Vale.Arch.HeapTypes_s.uu___is_Secret (Term) Term)

(declare-fun Vale.Arch.HeapTypes_s.uu___is_Secret@tok () Term)

; </end encoding Vale.Arch.HeapTypes_s.uu___is_Secret>


; <Skipped Vale.Arch.HeapTypes_s.uu___is_Secret/>


; <Start encoding Vale.Arch.HeapTypes_s.memTaint_t>

(declare-fun Vale.Arch.HeapTypes_s.memTaint_t () Term)
(declare-fun Tm_refine_c2c488db3214c38826155caf10d30036 () Term)

; </end encoding Vale.Arch.HeapTypes_s.memTaint_t>


; End Externals for module Vale.Arch.HeapTypes_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.Arch.HeapTypes_s (125 decls; total size 15320)

;;; Start module Vale.X64.Machine_s

; Externals for module Vale.X64.Machine_s


; <Start encoding Vale.X64.Machine_s.va_qattr>

(declare-fun Vale.X64.Machine_s.va_qattr (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.va_qattr>


; <Start encoding Vale.X64.Machine_s.pow2_32>

(declare-fun Vale.X64.Machine_s.pow2_32 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.pow2_32>


; <Start encoding Vale.X64.Machine_s.pow2_64>

(declare-fun Vale.X64.Machine_s.pow2_64 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.pow2_64>


; <Start encoding Vale.X64.Machine_s.pow2_128>

(declare-fun Vale.X64.Machine_s.pow2_128 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.pow2_128>


; <Start encoding Vale.X64.Machine_s.nat64>

(declare-fun Vale.X64.Machine_s.nat64 () Term)

; </end encoding Vale.X64.Machine_s.nat64>


; <Start encoding Vale.X64.Machine_s.int_to_nat64>

(declare-fun Vale.X64.Machine_s.int_to_nat64 (Term) Term)
(declare-fun Tm_refine_2eca80506deab4a219e64b0b606d01bf (Term) Term)
(declare-fun Tm_arrow_07717be18aa359aedafd161dc7d38115 () Term)
(declare-fun Vale.X64.Machine_s.int_to_nat64@tok () Term)


; </end encoding Vale.X64.Machine_s.int_to_nat64>


; <Start encoding Vale.X64.Machine_s.nat128>

(declare-fun Vale.X64.Machine_s.nat128 () Term)

; </end encoding Vale.X64.Machine_s.nat128>


; <Start encoding Vale.X64.Machine_s.quad32>

(declare-fun Vale.X64.Machine_s.quad32 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.quad32>


; <Start encoding Vale.X64.Machine_s.flag>

(declare-fun Vale.X64.Machine_s.flag (Dummy_sort) Term)
(declare-fun Tm_refine_72758763fd3a331db555502c82719e64 () Term)

; </end encoding Vale.X64.Machine_s.flag>


; <Start encoding Vale.X64.Machine_s.fCarry>

(declare-fun Vale.X64.Machine_s.fCarry (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.fCarry>


; <Start encoding Vale.X64.Machine_s.fOverflow>

(declare-fun Vale.X64.Machine_s.fOverflow (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.fOverflow>


; <Start encoding Vale.X64.Machine_s.n_reg_files>

(declare-fun Vale.X64.Machine_s.n_reg_files (Dummy_sort) Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Machine_s.n_reg_files
;;; Fact-ids: Name Vale.X64.Machine_s.n_reg_files; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(21,4-21,15); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(21,4-21,15)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(21,4-21,15); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(21,4-21,15)
(Vale.X64.Machine_s.n_reg_files @u0)

(BoxInt 2))
 

:pattern (
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(21,4-21,15); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(21,4-21,15)
(Vale.X64.Machine_s.n_reg_files @u0)
)
:qid equation_Vale.X64.Machine_s.n_reg_files))

:named equation_Vale.X64.Machine_s.n_reg_files))

; </end encoding Vale.X64.Machine_s.n_reg_files>


; <Start encoding Vale.X64.Machine_s.reg_file_id>

(declare-fun Vale.X64.Machine_s.reg_file_id () Term)
(declare-fun Tm_refine_d9979b96a3f2b18961b3dd63a2783b64 () Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Vale.X64.Machine_s.reg_file_id; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(22,18-22,42); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(22,18-22,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_d9979b96a3f2b18961b3dd63a2783b64)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(22,25-22,41); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(22,25-22,41)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Vale.X64.Machine_s.n_reg_files Dummy_value)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_d9979b96a3f2b18961b3dd63a2783b64))
:qid refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64))

:named refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64))
;;;;;;;;;;;;;;;;Equation for Vale.X64.Machine_s.reg_file_id
;;; Fact-ids: Name Vale.X64.Machine_s.reg_file_id; Namespace Vale.X64.Machine_s
(assert (! (= Vale.X64.Machine_s.reg_file_id
Tm_refine_d9979b96a3f2b18961b3dd63a2783b64)
:named equation_Vale.X64.Machine_s.reg_file_id))

; </end encoding Vale.X64.Machine_s.reg_file_id>


; <Start encoding Vale.X64.Machine_s.n_regs>

(declare-fun Vale.X64.Machine_s.n_regs (Term) Term)
(declare-fun Tm_arrow_9abc0be89d23468ad1e06544a3b24d23 () Term)
(declare-fun Vale.X64.Machine_s.n_regs@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Machine_s.n_regs
;;; Fact-ids: Name Vale.X64.Machine_s.n_regs; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(23,4-23,10); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(23,4-23,10)
(forall ((@x0 Term))
 (! (= (Vale.X64.Machine_s.n_regs @x0)
(let ((@lb1 @x0))
(ite (= @lb1
(BoxInt 0))
(BoxInt 16)
(ite (= @lb1
(BoxInt 1))
(BoxInt 16)
Tm_unit))))
 

:pattern ((Vale.X64.Machine_s.n_regs @x0))
:qid equation_Vale.X64.Machine_s.n_regs))

:named equation_Vale.X64.Machine_s.n_regs))

; </end encoding Vale.X64.Machine_s.n_regs>


; <Start encoding Vale.X64.Machine_s.t_reg_file>

(declare-fun Vale.X64.Machine_s.t_reg_file (Term) Term)
(declare-fun Tm_arrow_26425fe6b917b4fa40a7951dbe5dec46 () Term)
(declare-fun Vale.X64.Machine_s.t_reg_file@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Machine_s.t_reg_file
;;; Fact-ids: Name Vale.X64.Machine_s.t_reg_file; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(27,4-27,14); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(27,4-27,14)
(forall ((@x0 Term))
 (! (= (Vale.X64.Machine_s.t_reg_file @x0)
(let ((@lb1 @x0))
(ite (= @lb1
(BoxInt 0))
Vale.Def.Words_s.nat64
(ite (= @lb1
(BoxInt 1))
(Vale.Def.Types_s.quad32 Dummy_value)
Tm_unit))))
 

:pattern ((Vale.X64.Machine_s.t_reg_file @x0))
:qid equation_Vale.X64.Machine_s.t_reg_file))

:named equation_Vale.X64.Machine_s.t_reg_file))

; </end encoding Vale.X64.Machine_s.t_reg_file>


; <Start encoding Vale.X64.Machine_s.reg_id>

(declare-fun Vale.X64.Machine_s.reg_id (Term) Term)

(declare-fun Vale.X64.Machine_s.reg_id@tok () Term)
(declare-fun Tm_refine_0559236e7a05befcc7b6302f3642ad81 (Term) Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Vale.X64.Machine_s.reg_id; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(32,38-32,58); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(32,38-32,58)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_0559236e7a05befcc7b6302f3642ad81 @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(32,44-32,57); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(32,44-32,57)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Vale.X64.Machine_s.n_regs @x2)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_0559236e7a05befcc7b6302f3642ad81 @x2)))
:qid refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81))

:named refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81))
;;;;;;;;;;;;;;;;Equation for Vale.X64.Machine_s.reg_id
;;; Fact-ids: Name Vale.X64.Machine_s.reg_id; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(32,4-32,10); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(32,4-32,10)
(forall ((@x0 Term))
 (! (= (Vale.X64.Machine_s.reg_id @x0)
(Tm_refine_0559236e7a05befcc7b6302f3642ad81 @x0))
 

:pattern ((Vale.X64.Machine_s.reg_id @x0))
:qid equation_Vale.X64.Machine_s.reg_id))

:named equation_Vale.X64.Machine_s.reg_id))

; </end encoding Vale.X64.Machine_s.reg_id>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.reg () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.Reg (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.Reg_rf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.Reg_r (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Reg
(declare-fun Vale.X64.Machine_s.Reg@tok () Term)
(declare-fun Tm_arrow_9ff49be28b117866e500fa9c10ab862d () Term)

; <Start encoding Vale.X64.Machine_s.reg>


; <start constructor Vale.X64.Machine_s.reg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.reg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
Vale.X64.Machine_s.reg)))

; </end constructor Vale.X64.Machine_s.reg>


; </end encoding Vale.X64.Machine_s.reg>


; <Start encoding Vale.X64.Machine_s.Reg>


; <start constructor Vale.X64.Machine_s.Reg>

;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.X64.Machine_s.reg; Namespace Vale.X64.Machine_s; Name Vale.X64.Machine_s.Reg; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(36,4-36,7); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(36,4-36,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.Machine_s.Reg_rf (Vale.X64.Machine_s.Reg @x0
@x1))
@x0)
 

:pattern ((Vale.X64.Machine_s.Reg @x0
@x1))
:qid projection_inverse_Vale.X64.Machine_s.Reg_rf))

:named projection_inverse_Vale.X64.Machine_s.Reg_rf))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.Reg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
(Vale.X64.Machine_s.Reg (Vale.X64.Machine_s.Reg_rf __@x0)
(Vale.X64.Machine_s.Reg_r __@x0)))))

; </end constructor Vale.X64.Machine_s.Reg>

;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Vale.X64.Machine_s.reg; Namespace Vale.X64.Machine_s; Name Vale.X64.Machine_s.Reg; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(36,4-36,7); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(36,4-36,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Vale.X64.Machine_s.reg_file_id)
(HasTypeFuel @u0
@x2
(Vale.X64.Machine_s.reg_id @x1)))
(HasTypeFuel @u0
(Vale.X64.Machine_s.Reg @x1
@x2)
Vale.X64.Machine_s.reg))
 

:pattern ((HasTypeFuel @u0
(Vale.X64.Machine_s.Reg @x1
@x2)
Vale.X64.Machine_s.reg))
:qid data_typing_intro_Vale.X64.Machine_s.Reg@tok))

:named data_typing_intro_Vale.X64.Machine_s.Reg@tok))

; </end encoding Vale.X64.Machine_s.Reg>


; </end encoding >


; <Start encoding Vale.X64.Machine_s.reg__uu___haseq>


; </end encoding Vale.X64.Machine_s.reg__uu___haseq>


; <Start encoding Vale.X64.Machine_s.uu___is_Reg>

(declare-fun Vale.X64.Machine_s.uu___is_Reg (Term) Term)
(declare-fun Tm_arrow_fdb8ae54b32fc45d4acbbd113e1375bb () Term)
(declare-fun Vale.X64.Machine_s.uu___is_Reg@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_Reg>


; <Skipped Vale.X64.Machine_s.uu___is_Reg/>


; <Start encoding Vale.X64.Machine_s.__proj__Reg__item__rf>

(declare-fun Vale.X64.Machine_s.__proj__Reg__item__rf (Term) Term)
(declare-fun Tm_arrow_e8bfe6ff5b6750f2e1ea4fd98aef5ed7 () Term)
(declare-fun Vale.X64.Machine_s.__proj__Reg__item__rf@tok () Term)
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.X64.Machine_s.__proj__Reg__item__rf; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(36,9-36,11); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(36,9-36,11)
(forall ((@x0 Term))
 (! (= (Vale.X64.Machine_s.__proj__Reg__item__rf @x0)
(Vale.X64.Machine_s.Reg_rf @x0))
 

:pattern ((Vale.X64.Machine_s.__proj__Reg__item__rf @x0))
:qid proj_equation_Vale.X64.Machine_s.Reg_rf))

:named proj_equation_Vale.X64.Machine_s.Reg_rf))

; </end encoding Vale.X64.Machine_s.__proj__Reg__item__rf>


; <Skipped Vale.X64.Machine_s.__proj__Reg__item__rf/>


; <Start encoding Vale.X64.Machine_s.__proj__Reg__item__r>

(declare-fun Vale.X64.Machine_s.__proj__Reg__item__r (Term) Term)
(declare-fun Tm_arrow_4f4ace0fc5588200c3a92d2d0d874f1c () Term)
(declare-fun Vale.X64.Machine_s.__proj__Reg__item__r@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__Reg__item__r>


; <Skipped Vale.X64.Machine_s.__proj__Reg__item__r/>


; <Start encoding Vale.X64.Machine_s.t_reg>

(declare-fun Vale.X64.Machine_s.t_reg (Term) Term)
(declare-fun Tm_arrow_a3d9ef307178ed6e6eb0fe5485c5ade0 () Term)
(declare-fun Vale.X64.Machine_s.t_reg@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Machine_s.t_reg
;;; Fact-ids: Name Vale.X64.Machine_s.t_reg; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(38,4-38,9); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(38,4-38,9)
(forall ((@x0 Term))
 (! (= (Vale.X64.Machine_s.t_reg @x0)
(Vale.X64.Machine_s.t_reg_file (Vale.X64.Machine_s.__proj__Reg__item__rf @x0)))
 

:pattern ((Vale.X64.Machine_s.t_reg @x0))
:qid equation_Vale.X64.Machine_s.t_reg))

:named equation_Vale.X64.Machine_s.t_reg))

; </end encoding Vale.X64.Machine_s.t_reg>


; <Start encoding Vale.X64.Machine_s.t_reg_to_int>

(declare-fun Vale.X64.Machine_s.t_reg_to_int (Term Term) Term)
(declare-fun Tm_arrow_6b21d19d1787f3c5dfc638723e3fe556 () Term)
(declare-fun Vale.X64.Machine_s.t_reg_to_int@tok () Term)

; </end encoding Vale.X64.Machine_s.t_reg_to_int>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.maddr () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.MConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.MConst_n (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MConst
(declare-fun Vale.X64.Machine_s.MConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.MReg (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.MReg_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.MReg_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MReg
(declare-fun Vale.X64.Machine_s.MReg@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.MIndex (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.MIndex_base (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.MIndex_scale (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.MIndex_index (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.MIndex_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MIndex
(declare-fun Vale.X64.Machine_s.MIndex@tok () Term)
(declare-fun Tm_arrow_92929fd10115926a88db6a9a4ee0c3c2 () Term)
(declare-fun Tm_arrow_e4c63fc96b36fe4a5fbc02d372def2b0 () Term)
(declare-fun Tm_arrow_fd431d36ae1df9ceadb04ac732406b2b () Term)

; <Start encoding Vale.X64.Machine_s.maddr>


; <start constructor Vale.X64.Machine_s.maddr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.maddr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(= __@x0
Vale.X64.Machine_s.maddr)))

; </end constructor Vale.X64.Machine_s.maddr>


; </end encoding Vale.X64.Machine_s.maddr>


; <Start encoding Vale.X64.Machine_s.MConst>


; <start constructor Vale.X64.Machine_s.MConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.MConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
140)
(= __@x0
(Vale.X64.Machine_s.MConst (Vale.X64.Machine_s.MConst_n __@x0)))))

; </end constructor Vale.X64.Machine_s.MConst>


; </end encoding Vale.X64.Machine_s.MConst>


; <Start encoding Vale.X64.Machine_s.MReg>


; <start constructor Vale.X64.Machine_s.MReg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.MReg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
145)
(= __@x0
(Vale.X64.Machine_s.MReg (Vale.X64.Machine_s.MReg_r __@x0)
(Vale.X64.Machine_s.MReg_offset __@x0)))))

; </end constructor Vale.X64.Machine_s.MReg>


; </end encoding Vale.X64.Machine_s.MReg>


; <Start encoding Vale.X64.Machine_s.MIndex>


; <start constructor Vale.X64.Machine_s.MIndex>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.MIndex ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(= __@x0
(Vale.X64.Machine_s.MIndex (Vale.X64.Machine_s.MIndex_base __@x0)
(Vale.X64.Machine_s.MIndex_scale __@x0)
(Vale.X64.Machine_s.MIndex_index __@x0)
(Vale.X64.Machine_s.MIndex_offset __@x0)))))

; </end constructor Vale.X64.Machine_s.MIndex>


; </end encoding Vale.X64.Machine_s.MIndex>


; </end encoding >


; <Start encoding Vale.X64.Machine_s.maddr__uu___haseq>


; </end encoding Vale.X64.Machine_s.maddr__uu___haseq>


; <Start encoding Vale.X64.Machine_s.uu___is_MConst>

(declare-fun Vale.X64.Machine_s.uu___is_MConst (Term) Term)
(declare-fun Tm_arrow_f394c8d2a7dae6e7eac5f2a2d040b99d () Term)
(declare-fun Vale.X64.Machine_s.uu___is_MConst@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_MConst>


; <Skipped Vale.X64.Machine_s.uu___is_MConst/>


; <Start encoding Vale.X64.Machine_s.__proj__MConst__item__n>

(declare-fun Tm_refine_ba45d2688e3fd04e2e5908c939c77b9a () Term)
(declare-fun Vale.X64.Machine_s.__proj__MConst__item__n (Term) Term)

(declare-fun Tm_arrow_40f10a83ef979fea1ee66f41384fc8f9 () Term)
(declare-fun Vale.X64.Machine_s.__proj__MConst__item__n@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__MConst__item__n>


; <Skipped Vale.X64.Machine_s.__proj__MConst__item__n/>


; <Start encoding Vale.X64.Machine_s.uu___is_MReg>

(declare-fun Vale.X64.Machine_s.uu___is_MReg (Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_MReg@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_MReg>


; <Skipped Vale.X64.Machine_s.uu___is_MReg/>


; <Start encoding Vale.X64.Machine_s.__proj__MReg__item__r>

(declare-fun Tm_refine_c60fc719647aa74bcc3bff5ee709f429 () Term)
(declare-fun Vale.X64.Machine_s.__proj__MReg__item__r (Term) Term)

(declare-fun Tm_arrow_811b49de97b0f3ba6be221089a53388e () Term)
(declare-fun Vale.X64.Machine_s.__proj__MReg__item__r@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__MReg__item__r>


; <Skipped Vale.X64.Machine_s.__proj__MReg__item__r/>


; <Start encoding Vale.X64.Machine_s.__proj__MReg__item__offset>


(declare-fun Vale.X64.Machine_s.__proj__MReg__item__offset (Term) Term)

(declare-fun Tm_arrow_be4c373413d8023de0a71489550bc81c () Term)
(declare-fun Vale.X64.Machine_s.__proj__MReg__item__offset@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__MReg__item__offset>


; <Skipped Vale.X64.Machine_s.__proj__MReg__item__offset/>


; <Start encoding Vale.X64.Machine_s.uu___is_MIndex>

(declare-fun Vale.X64.Machine_s.uu___is_MIndex (Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_MIndex@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_MIndex>


; <Skipped Vale.X64.Machine_s.uu___is_MIndex/>


; <Start encoding Vale.X64.Machine_s.__proj__MIndex__item__base>

(declare-fun Tm_refine_7355595e080da4f6c86cbe87ff8f3f86 () Term)
(declare-fun Vale.X64.Machine_s.__proj__MIndex__item__base (Term) Term)

(declare-fun Tm_arrow_e8746ac63ee9b2c53a8fcfc7b582bf6c () Term)
(declare-fun Vale.X64.Machine_s.__proj__MIndex__item__base@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__MIndex__item__base>


; <Skipped Vale.X64.Machine_s.__proj__MIndex__item__base/>


; <Start encoding Vale.X64.Machine_s.__proj__MIndex__item__scale>


(declare-fun Vale.X64.Machine_s.__proj__MIndex__item__scale (Term) Term)

(declare-fun Tm_arrow_04aff4dd32a1262f1e7b1c5d13bb279c () Term)
(declare-fun Vale.X64.Machine_s.__proj__MIndex__item__scale@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__MIndex__item__scale>


; <Skipped Vale.X64.Machine_s.__proj__MIndex__item__scale/>


; <Start encoding Vale.X64.Machine_s.__proj__MIndex__item__index>


(declare-fun Vale.X64.Machine_s.__proj__MIndex__item__index (Term) Term)


(declare-fun Vale.X64.Machine_s.__proj__MIndex__item__index@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__MIndex__item__index>


; <Skipped Vale.X64.Machine_s.__proj__MIndex__item__index/>


; <Start encoding Vale.X64.Machine_s.__proj__MIndex__item__offset>


(declare-fun Vale.X64.Machine_s.__proj__MIndex__item__offset (Term) Term)


(declare-fun Vale.X64.Machine_s.__proj__MIndex__item__offset@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__MIndex__item__offset>


; <Skipped Vale.X64.Machine_s.__proj__MIndex__item__offset/>


; <Start encoding Vale.X64.Machine_s.tmaddr>

(declare-fun Vale.X64.Machine_s.tmaddr (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.tmaddr>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.operand (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.operand@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.operand@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Vale.X64.Machine_s.operand@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.OConst (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OConst_tc (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OConst_tr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OConst_n (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: OConst
(declare-fun Vale.X64.Machine_s.OConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.OReg (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OReg_tc (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OReg_tr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OReg_r (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: OReg
(declare-fun Vale.X64.Machine_s.OReg@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.OMem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OMem_tc (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OMem_tr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OMem_m (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: OMem
(declare-fun Vale.X64.Machine_s.OMem@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.OStack (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OStack_tc (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OStack_tr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.OStack_m (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: OStack
(declare-fun Vale.X64.Machine_s.OStack@tok () Term)
(declare-fun Tm_arrow_ed23db23de6e11b46e1a126ec4ab6dbb () Term)
(declare-fun Tm_arrow_6243326b45851b6a21d7b8c3d3cdfc7c () Term)
(declare-fun Tm_arrow_f6bc9e369b65d0373e5d353af7eee3c8 () Term)


; <Start encoding Vale.X64.Machine_s.operand>


; <start constructor Vale.X64.Machine_s.operand>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.operand ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
188)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Vale.X64.Machine_s.operand @x0
@x1))
 
;;no pats
:qid is-Vale.X64.Machine_s.operand))))

; </end constructor Vale.X64.Machine_s.operand>


; </end encoding Vale.X64.Machine_s.operand>


; <Start encoding Vale.X64.Machine_s.OConst>


; <start constructor Vale.X64.Machine_s.OConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.OConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
195)
(= __@x0
(Vale.X64.Machine_s.OConst (Vale.X64.Machine_s.OConst_tc __@x0)
(Vale.X64.Machine_s.OConst_tr __@x0)
(Vale.X64.Machine_s.OConst_n __@x0)))))

; </end constructor Vale.X64.Machine_s.OConst>


; </end encoding Vale.X64.Machine_s.OConst>


; <Start encoding Vale.X64.Machine_s.OReg>


; <start constructor Vale.X64.Machine_s.OReg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.OReg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
200)
(= __@x0
(Vale.X64.Machine_s.OReg (Vale.X64.Machine_s.OReg_tc __@x0)
(Vale.X64.Machine_s.OReg_tr __@x0)
(Vale.X64.Machine_s.OReg_r __@x0)))))

; </end constructor Vale.X64.Machine_s.OReg>


; </end encoding Vale.X64.Machine_s.OReg>


; <Start encoding Vale.X64.Machine_s.OMem>


; <start constructor Vale.X64.Machine_s.OMem>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.OMem ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
205)
(= __@x0
(Vale.X64.Machine_s.OMem (Vale.X64.Machine_s.OMem_tc __@x0)
(Vale.X64.Machine_s.OMem_tr __@x0)
(Vale.X64.Machine_s.OMem_m __@x0)))))

; </end constructor Vale.X64.Machine_s.OMem>


; </end encoding Vale.X64.Machine_s.OMem>


; <Start encoding Vale.X64.Machine_s.OStack>


; <start constructor Vale.X64.Machine_s.OStack>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.OStack ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
210)
(= __@x0
(Vale.X64.Machine_s.OStack (Vale.X64.Machine_s.OStack_tc __@x0)
(Vale.X64.Machine_s.OStack_tr __@x0)
(Vale.X64.Machine_s.OStack_m __@x0)))))

; </end constructor Vale.X64.Machine_s.OStack>


; </end encoding Vale.X64.Machine_s.OStack>


; </end encoding >


; <Start encoding Vale.X64.Machine_s.operand__uu___haseq>


; </end encoding Vale.X64.Machine_s.operand__uu___haseq>


; <Start encoding Vale.X64.Machine_s.uu___is_OConst>

(declare-fun Vale.X64.Machine_s.uu___is_OConst (Term Term Term) Term)
(declare-fun Tm_arrow_fe9824e9e44f6327625fe58bf5f97f34 () Term)
(declare-fun Vale.X64.Machine_s.uu___is_OConst@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_OConst>


; <Skipped Vale.X64.Machine_s.uu___is_OConst/>


; <Start encoding Vale.X64.Machine_s.__proj__OConst__item__n>

(declare-fun Tm_refine_db12994d84d9b6d7c0660d6d33952e45 (Term Term) Term)
(declare-fun Vale.X64.Machine_s.__proj__OConst__item__n (Term Term Term) Term)

(declare-fun Tm_arrow_e6c90814de821d8558989aa5ff7808b2 () Term)
(declare-fun Vale.X64.Machine_s.__proj__OConst__item__n@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__OConst__item__n>


; <Skipped Vale.X64.Machine_s.__proj__OConst__item__n/>


; <Start encoding Vale.X64.Machine_s.uu___is_OReg>

(declare-fun Vale.X64.Machine_s.uu___is_OReg (Term Term Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_OReg@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_OReg>


; <Skipped Vale.X64.Machine_s.uu___is_OReg/>


; <Start encoding Vale.X64.Machine_s.__proj__OReg__item__r>

(declare-fun Tm_refine_e7e8c9464c24212d7cc1d1b3047a8440 (Term Term) Term)
(declare-fun Vale.X64.Machine_s.__proj__OReg__item__r (Term Term Term) Term)

(declare-fun Tm_arrow_dcdfde5cc52c85d1323edbcad588ca1b () Term)
(declare-fun Vale.X64.Machine_s.__proj__OReg__item__r@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__OReg__item__r>


; <Skipped Vale.X64.Machine_s.__proj__OReg__item__r/>


; <Start encoding Vale.X64.Machine_s.uu___is_OMem>

(declare-fun Vale.X64.Machine_s.uu___is_OMem (Term Term Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_OMem@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_OMem>


; <Skipped Vale.X64.Machine_s.uu___is_OMem/>


; <Start encoding Vale.X64.Machine_s.__proj__OMem__item__m>

(declare-fun Tm_refine_12d7e4741e449358bfb593c2d177b831 (Term Term) Term)
(declare-fun Vale.X64.Machine_s.__proj__OMem__item__m (Term Term Term) Term)

(declare-fun Tm_arrow_e754d53bcfa278870ad34a54fbd204a4 () Term)
(declare-fun Vale.X64.Machine_s.__proj__OMem__item__m@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__OMem__item__m>


; <Skipped Vale.X64.Machine_s.__proj__OMem__item__m/>


; <Start encoding Vale.X64.Machine_s.uu___is_OStack>

(declare-fun Vale.X64.Machine_s.uu___is_OStack (Term Term Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_OStack@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_OStack>


; <Skipped Vale.X64.Machine_s.uu___is_OStack/>


; <Start encoding Vale.X64.Machine_s.__proj__OStack__item__m>

(declare-fun Tm_refine_ba9505ad2c29cc6490e2327dd9964a3e (Term Term) Term)
(declare-fun Vale.X64.Machine_s.__proj__OStack__item__m (Term Term Term) Term)

(declare-fun Tm_arrow_c8732f0877e727f58ec36f87289e0f4d () Term)
(declare-fun Vale.X64.Machine_s.__proj__OStack__item__m@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__OStack__item__m>


; <Skipped Vale.X64.Machine_s.__proj__OStack__item__m/>


; <Start encoding Vale.X64.Machine_s.operand_rf>

(declare-fun Vale.X64.Machine_s.operand_rf (Term) Term)
(declare-fun Tm_arrow_1d9732c6b4b9b30602ebe293b88edefd () Term)
(declare-fun Vale.X64.Machine_s.operand_rf@tok () Term)

; </end encoding Vale.X64.Machine_s.operand_rf>


; <Start encoding Vale.X64.Machine_s.oreg>

(declare-fun Vale.X64.Machine_s.oreg (Term) Term)
(declare-fun Tm_arrow_513c428cde52a6ca75473d92e1f6b72d () Term)
(declare-fun Vale.X64.Machine_s.oreg@tok () Term)

; </end encoding Vale.X64.Machine_s.oreg>


; <Start encoding Vale.X64.Machine_s.reg_64>

(declare-fun Vale.X64.Machine_s.reg_64 () Term)
(declare-fun Tm_refine_c365eb902b454950de62fba701d9049d () Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Vale.X64.Machine_s.reg_64; Namespace Vale.X64.Machine_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(68,21-68,34); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(68,21-68,34)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_c365eb902b454950de62fba701d9049d)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(68,27-68,33); use=/home/guido/r/everest/hacl-star/vale/specs/hardware/Vale.X64.Machine_s.fst(68,27-68,33)
(< (BoxInt_proj_0 @x1)
16)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_c365eb902b454950de62fba701d9049d))
:qid refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d))

:named refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d))
;;;;;;;;;;;;;;;;Equation for Vale.X64.Machine_s.reg_64
;;; Fact-ids: Name Vale.X64.Machine_s.reg_64; Namespace Vale.X64.Machine_s
(assert (! (= Vale.X64.Machine_s.reg_64
Tm_refine_c365eb902b454950de62fba701d9049d)
:named equation_Vale.X64.Machine_s.reg_64))

; </end encoding Vale.X64.Machine_s.reg_64>


; <Start encoding Vale.X64.Machine_s.reg_xmm>

(declare-fun Vale.X64.Machine_s.reg_xmm () Term)

;;;;;;;;;;;;;;;;Equation for Vale.X64.Machine_s.reg_xmm
;;; Fact-ids: Name Vale.X64.Machine_s.reg_xmm; Namespace Vale.X64.Machine_s
(assert (! (= Vale.X64.Machine_s.reg_xmm
Tm_refine_c365eb902b454950de62fba701d9049d)
:named equation_Vale.X64.Machine_s.reg_xmm))

; </end encoding Vale.X64.Machine_s.reg_xmm>


; <Start encoding Vale.X64.Machine_s.rRax>

(declare-fun Vale.X64.Machine_s.rRax (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rRax>


; <Start encoding Vale.X64.Machine_s.rRbx>

(declare-fun Vale.X64.Machine_s.rRbx (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rRbx>


; <Start encoding Vale.X64.Machine_s.rRcx>

(declare-fun Vale.X64.Machine_s.rRcx (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rRcx>


; <Start encoding Vale.X64.Machine_s.rRdx>

(declare-fun Vale.X64.Machine_s.rRdx (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rRdx>


; <Start encoding Vale.X64.Machine_s.rRsi>

(declare-fun Vale.X64.Machine_s.rRsi (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rRsi>


; <Start encoding Vale.X64.Machine_s.rRdi>

(declare-fun Vale.X64.Machine_s.rRdi (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rRdi>


; <Start encoding Vale.X64.Machine_s.rRbp>

(declare-fun Vale.X64.Machine_s.rRbp (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rRbp>


; <Start encoding Vale.X64.Machine_s.rRsp>

(declare-fun Vale.X64.Machine_s.rRsp (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rRsp>


; <Start encoding Vale.X64.Machine_s.rR8>

(declare-fun Vale.X64.Machine_s.rR8 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rR8>


; <Start encoding Vale.X64.Machine_s.rR9>

(declare-fun Vale.X64.Machine_s.rR9 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rR9>


; <Start encoding Vale.X64.Machine_s.rR10>

(declare-fun Vale.X64.Machine_s.rR10 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rR10>


; <Start encoding Vale.X64.Machine_s.rR11>

(declare-fun Vale.X64.Machine_s.rR11 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rR11>


; <Start encoding Vale.X64.Machine_s.rR12>

(declare-fun Vale.X64.Machine_s.rR12 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rR12>


; <Start encoding Vale.X64.Machine_s.rR13>

(declare-fun Vale.X64.Machine_s.rR13 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rR13>


; <Start encoding Vale.X64.Machine_s.rR14>

(declare-fun Vale.X64.Machine_s.rR14 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rR14>


; <Start encoding Vale.X64.Machine_s.rR15>

(declare-fun Vale.X64.Machine_s.rR15 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.rR15>


; <Start encoding Vale.X64.Machine_s.reg_Rax>

(declare-fun Vale.X64.Machine_s.reg_Rax (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_Rax>


; <Start encoding Vale.X64.Machine_s.reg_Rbx>

(declare-fun Vale.X64.Machine_s.reg_Rbx (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_Rbx>


; <Start encoding Vale.X64.Machine_s.reg_Rcx>

(declare-fun Vale.X64.Machine_s.reg_Rcx (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_Rcx>


; <Start encoding Vale.X64.Machine_s.reg_Rdx>

(declare-fun Vale.X64.Machine_s.reg_Rdx (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_Rdx>


; <Start encoding Vale.X64.Machine_s.reg_Rsi>

(declare-fun Vale.X64.Machine_s.reg_Rsi (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_Rsi>


; <Start encoding Vale.X64.Machine_s.reg_Rdi>

(declare-fun Vale.X64.Machine_s.reg_Rdi (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_Rdi>


; <Start encoding Vale.X64.Machine_s.reg_Rbp>

(declare-fun Vale.X64.Machine_s.reg_Rbp (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_Rbp>


; <Start encoding Vale.X64.Machine_s.reg_Rsp>

(declare-fun Vale.X64.Machine_s.reg_Rsp (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_Rsp>


; <Start encoding Vale.X64.Machine_s.reg_R8>

(declare-fun Vale.X64.Machine_s.reg_R8 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_R8>


; <Start encoding Vale.X64.Machine_s.reg_R9>

(declare-fun Vale.X64.Machine_s.reg_R9 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_R9>


; <Start encoding Vale.X64.Machine_s.reg_R10>

(declare-fun Vale.X64.Machine_s.reg_R10 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_R10>


; <Start encoding Vale.X64.Machine_s.reg_R11>

(declare-fun Vale.X64.Machine_s.reg_R11 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_R11>


; <Start encoding Vale.X64.Machine_s.reg_R12>

(declare-fun Vale.X64.Machine_s.reg_R12 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_R12>


; <Start encoding Vale.X64.Machine_s.reg_R13>

(declare-fun Vale.X64.Machine_s.reg_R13 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_R13>


; <Start encoding Vale.X64.Machine_s.reg_R14>

(declare-fun Vale.X64.Machine_s.reg_R14 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_R14>


; <Start encoding Vale.X64.Machine_s.reg_R15>

(declare-fun Vale.X64.Machine_s.reg_R15 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.reg_R15>


; <Start encoding Vale.X64.Machine_s.operand64>

(declare-fun Vale.X64.Machine_s.operand64 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.operand64>


; <Start encoding Vale.X64.Machine_s.operand128>

(declare-fun Vale.X64.Machine_s.operand128 (Dummy_sort) Term)

; </end encoding Vale.X64.Machine_s.operand128>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.precode (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.precode@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.precode@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Vale.X64.Machine_s.precode@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.Ins (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.Ins_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.Ins_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.Ins_ins (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Ins
(declare-fun Vale.X64.Machine_s.Ins@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.Block (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.Block_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.Block_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.Block_block (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Block
(declare-fun Vale.X64.Machine_s.Block@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.IfElse (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.IfElse_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.IfElse_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.IfElse_ifCond (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.IfElse_ifTrue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.IfElse_ifFalse (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: IfElse
(declare-fun Vale.X64.Machine_s.IfElse@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.While (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.While_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.While_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.While_whileCond (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.While_whileBody (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: While
(declare-fun Vale.X64.Machine_s.While@tok () Term)
(declare-fun Tm_arrow_cc524adbd2e719e59c0cb438630420b4 () Term)
(declare-fun Tm_arrow_9d0e0e450037f133ddd9d43490ff6377 () Term)
(declare-fun Tm_arrow_77898f80254805fbe951c84b245ca59b () Term)
(declare-fun Tm_arrow_175bff354f210890252bc620549548ee () Term)

; <Start encoding Vale.X64.Machine_s.precode>


; <start constructor Vale.X64.Machine_s.precode>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.precode ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
244)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Vale.X64.Machine_s.precode @x0
@x1))
 
;;no pats
:qid is-Vale.X64.Machine_s.precode))))

; </end constructor Vale.X64.Machine_s.precode>


; </end encoding Vale.X64.Machine_s.precode>


; <Start encoding Vale.X64.Machine_s.Ins>


; <start constructor Vale.X64.Machine_s.Ins>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.Ins ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
251)
(= __@x0
(Vale.X64.Machine_s.Ins (Vale.X64.Machine_s.Ins_t_ins __@x0)
(Vale.X64.Machine_s.Ins_t_ocmp __@x0)
(Vale.X64.Machine_s.Ins_ins __@x0)))))

; </end constructor Vale.X64.Machine_s.Ins>


; </end encoding Vale.X64.Machine_s.Ins>


; <Start encoding Vale.X64.Machine_s.Block>


; <start constructor Vale.X64.Machine_s.Block>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.Block ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
256)
(= __@x0
(Vale.X64.Machine_s.Block (Vale.X64.Machine_s.Block_t_ins __@x0)
(Vale.X64.Machine_s.Block_t_ocmp __@x0)
(Vale.X64.Machine_s.Block_block __@x0)))))

; </end constructor Vale.X64.Machine_s.Block>


; </end encoding Vale.X64.Machine_s.Block>


; <Start encoding Vale.X64.Machine_s.IfElse>


; <start constructor Vale.X64.Machine_s.IfElse>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.IfElse ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(= __@x0
(Vale.X64.Machine_s.IfElse (Vale.X64.Machine_s.IfElse_t_ins __@x0)
(Vale.X64.Machine_s.IfElse_t_ocmp __@x0)
(Vale.X64.Machine_s.IfElse_ifCond __@x0)
(Vale.X64.Machine_s.IfElse_ifTrue __@x0)
(Vale.X64.Machine_s.IfElse_ifFalse __@x0)))))

; </end constructor Vale.X64.Machine_s.IfElse>


; </end encoding Vale.X64.Machine_s.IfElse>


; <Start encoding Vale.X64.Machine_s.While>


; <start constructor Vale.X64.Machine_s.While>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.While ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
266)
(= __@x0
(Vale.X64.Machine_s.While (Vale.X64.Machine_s.While_t_ins __@x0)
(Vale.X64.Machine_s.While_t_ocmp __@x0)
(Vale.X64.Machine_s.While_whileCond __@x0)
(Vale.X64.Machine_s.While_whileBody __@x0)))))

; </end constructor Vale.X64.Machine_s.While>


; </end encoding Vale.X64.Machine_s.While>


; </end encoding >


; <Start encoding Vale.X64.Machine_s.uu___is_Ins>

(declare-fun Vale.X64.Machine_s.uu___is_Ins (Term Term Term) Term)
(declare-fun Tm_arrow_fbade46d8e81addcf0a1111b8a9e37af () Term)
(declare-fun Vale.X64.Machine_s.uu___is_Ins@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_Ins>


; <Skipped Vale.X64.Machine_s.uu___is_Ins/>


; <Start encoding Vale.X64.Machine_s.__proj__Ins__item__ins>

(declare-fun Tm_refine_bf287cd7801c59db9c693887788476a6 (Term Term) Term)
(declare-fun Vale.X64.Machine_s.__proj__Ins__item__ins (Term Term Term) Term)

(declare-fun Tm_arrow_aeba6d48d333ef46ced4f5747f8a1d2d () Term)
(declare-fun Vale.X64.Machine_s.__proj__Ins__item__ins@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__Ins__item__ins>


; <Skipped Vale.X64.Machine_s.__proj__Ins__item__ins/>


; <Start encoding Vale.X64.Machine_s.uu___is_Block>

(declare-fun Vale.X64.Machine_s.uu___is_Block (Term Term Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_Block@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_Block>


; <Skipped Vale.X64.Machine_s.uu___is_Block/>


; <Start encoding Vale.X64.Machine_s.__proj__Block__item__block>

(declare-fun Tm_refine_a7bbfd6b3498c17c8d1674fce71b8656 (Term Term) Term)
(declare-fun Vale.X64.Machine_s.__proj__Block__item__block (Term Term Term) Term)

(declare-fun Tm_arrow_b2179c2e955904699217a60ce91e7a7f () Term)
(declare-fun Vale.X64.Machine_s.__proj__Block__item__block@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__Block__item__block>


; <Skipped Vale.X64.Machine_s.__proj__Block__item__block/>


; <Start encoding Vale.X64.Machine_s.uu___is_IfElse>

(declare-fun Vale.X64.Machine_s.uu___is_IfElse (Term Term Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_IfElse@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_IfElse>


; <Skipped Vale.X64.Machine_s.uu___is_IfElse/>


; <Start encoding Vale.X64.Machine_s.__proj__IfElse__item__ifCond>

(declare-fun Tm_refine_936e87655f3f541d857ac072da8c1df0 (Term Term) Term)
(declare-fun Vale.X64.Machine_s.__proj__IfElse__item__ifCond (Term Term Term) Term)

(declare-fun Tm_arrow_2fc66068dbe784c4570364c2166d66fb () Term)
(declare-fun Vale.X64.Machine_s.__proj__IfElse__item__ifCond@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__IfElse__item__ifCond>


; <Skipped Vale.X64.Machine_s.__proj__IfElse__item__ifCond/>


; <Start encoding Vale.X64.Machine_s.__proj__IfElse__item__ifTrue>


(declare-fun Vale.X64.Machine_s.__proj__IfElse__item__ifTrue (Term Term Term) Term)

(declare-fun Tm_arrow_a73ffd8c3bdfc9e6e22b67fbcfa88a71 () Term)
(declare-fun Vale.X64.Machine_s.__proj__IfElse__item__ifTrue@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__IfElse__item__ifTrue>


; <Skipped Vale.X64.Machine_s.__proj__IfElse__item__ifTrue/>


; <Start encoding Vale.X64.Machine_s.__proj__IfElse__item__ifFalse>


(declare-fun Vale.X64.Machine_s.__proj__IfElse__item__ifFalse (Term Term Term) Term)


(declare-fun Vale.X64.Machine_s.__proj__IfElse__item__ifFalse@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__IfElse__item__ifFalse>


; <Skipped Vale.X64.Machine_s.__proj__IfElse__item__ifFalse/>


; <Start encoding Vale.X64.Machine_s.uu___is_While>

(declare-fun Vale.X64.Machine_s.uu___is_While (Term Term Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_While@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_While>


; <Skipped Vale.X64.Machine_s.uu___is_While/>


; <Start encoding Vale.X64.Machine_s.__proj__While__item__whileCond>

(declare-fun Tm_refine_8d7684ca1be7acf48e31bf17f1a9fe2b (Term Term) Term)
(declare-fun Vale.X64.Machine_s.__proj__While__item__whileCond (Term Term Term) Term)

(declare-fun Tm_arrow_743d4d34b04c0c0d66451e3ec2d83819 () Term)
(declare-fun Vale.X64.Machine_s.__proj__While__item__whileCond@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__While__item__whileCond>


; <Skipped Vale.X64.Machine_s.__proj__While__item__whileCond/>


; <Start encoding Vale.X64.Machine_s.__proj__While__item__whileBody>


(declare-fun Vale.X64.Machine_s.__proj__While__item__whileBody (Term Term Term) Term)

(declare-fun Tm_arrow_de4f09828ec5bc123fb4822b21c79a3a () Term)
(declare-fun Vale.X64.Machine_s.__proj__While__item__whileBody@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__While__item__whileBody>


; <Skipped Vale.X64.Machine_s.__proj__While__item__whileBody/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.observation () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.BranchPredicate (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.BranchPredicate_pred (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: BranchPredicate
(declare-fun Vale.X64.Machine_s.BranchPredicate@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Machine_s.MemAccess (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Machine_s.MemAccess_addr (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MemAccess
(declare-fun Vale.X64.Machine_s.MemAccess@tok () Term)
(declare-fun Tm_arrow_0fb46124352c0f702e68dd9f1d0302ef () Term)
(declare-fun Tm_arrow_39901856734833f836e6aafee0a2c628 () Term)

; <Start encoding Vale.X64.Machine_s.observation>


; <start constructor Vale.X64.Machine_s.observation>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.observation ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
306)
(= __@x0
Vale.X64.Machine_s.observation)))

; </end constructor Vale.X64.Machine_s.observation>


; </end encoding Vale.X64.Machine_s.observation>


; <Start encoding Vale.X64.Machine_s.BranchPredicate>


; <start constructor Vale.X64.Machine_s.BranchPredicate>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.BranchPredicate ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
312)
(= __@x0
(Vale.X64.Machine_s.BranchPredicate (Vale.X64.Machine_s.BranchPredicate_pred __@x0)))))

; </end constructor Vale.X64.Machine_s.BranchPredicate>


; </end encoding Vale.X64.Machine_s.BranchPredicate>


; <Start encoding Vale.X64.Machine_s.MemAccess>


; <start constructor Vale.X64.Machine_s.MemAccess>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Machine_s.MemAccess ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
317)
(= __@x0
(Vale.X64.Machine_s.MemAccess (Vale.X64.Machine_s.MemAccess_addr __@x0)))))

; </end constructor Vale.X64.Machine_s.MemAccess>


; </end encoding Vale.X64.Machine_s.MemAccess>


; </end encoding >


; <Start encoding Vale.X64.Machine_s.observation__uu___haseq>


; </end encoding Vale.X64.Machine_s.observation__uu___haseq>


; <Start encoding Vale.X64.Machine_s.uu___is_BranchPredicate>

(declare-fun Vale.X64.Machine_s.uu___is_BranchPredicate (Term) Term)
(declare-fun Tm_arrow_ede44e8773c129eb91bd285a52b140aa () Term)
(declare-fun Vale.X64.Machine_s.uu___is_BranchPredicate@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_BranchPredicate>


; <Skipped Vale.X64.Machine_s.uu___is_BranchPredicate/>


; <Start encoding Vale.X64.Machine_s.__proj__BranchPredicate__item__pred>

(declare-fun Tm_refine_665855d5d2c2e8d0f359546a27d4e0a8 () Term)
(declare-fun Vale.X64.Machine_s.__proj__BranchPredicate__item__pred (Term) Term)

(declare-fun Tm_arrow_b55e314d9d11466dd27e550e35f632a5 () Term)
(declare-fun Vale.X64.Machine_s.__proj__BranchPredicate__item__pred@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__BranchPredicate__item__pred>


; <Skipped Vale.X64.Machine_s.__proj__BranchPredicate__item__pred/>


; <Start encoding Vale.X64.Machine_s.uu___is_MemAccess>

(declare-fun Vale.X64.Machine_s.uu___is_MemAccess (Term) Term)

(declare-fun Vale.X64.Machine_s.uu___is_MemAccess@tok () Term)

; </end encoding Vale.X64.Machine_s.uu___is_MemAccess>


; <Skipped Vale.X64.Machine_s.uu___is_MemAccess/>


; <Start encoding Vale.X64.Machine_s.__proj__MemAccess__item__addr>

(declare-fun Tm_refine_9314f39e5dace3fd827ffe198da8b3c3 () Term)
(declare-fun Vale.X64.Machine_s.__proj__MemAccess__item__addr (Term) Term)

(declare-fun Tm_arrow_f12c185148065d947cb0be65b2c89a9c () Term)
(declare-fun Vale.X64.Machine_s.__proj__MemAccess__item__addr@tok () Term)

; </end encoding Vale.X64.Machine_s.__proj__MemAccess__item__addr>


; <Skipped Vale.X64.Machine_s.__proj__MemAccess__item__addr/>


; End Externals for module Vale.X64.Machine_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.X64.Machine_s (671 decls; total size 54909)

;;; Start interface Vale.Lib.Map16

; Externals for interface Vale.Lib.Map16


; <Start encoding Vale.Lib.Map16.map2>

(declare-fun Vale.Lib.Map16.map2 (Term) Term)

(declare-fun Vale.Lib.Map16.map2@tok () Term)

; </end encoding Vale.Lib.Map16.map2>


; <Start encoding Vale.Lib.Map16.map4>

(declare-fun Vale.Lib.Map16.map4 (Term) Term)

(declare-fun Vale.Lib.Map16.map4@tok () Term)

; </end encoding Vale.Lib.Map16.map4>


; <Start encoding Vale.Lib.Map16.map8>

(declare-fun Vale.Lib.Map16.map8 (Term) Term)

(declare-fun Vale.Lib.Map16.map8@tok () Term)

; </end encoding Vale.Lib.Map16.map8>


; <Start encoding Vale.Lib.Map16.map16>

(declare-fun Vale.Lib.Map16.map16 (Term) Term)

(declare-fun Vale.Lib.Map16.map16@tok () Term)

; </end encoding Vale.Lib.Map16.map16>


; <Start encoding Vale.Lib.Map16.sel2>

(declare-fun Vale.Lib.Map16.sel2 (Term Term Term) Term)
(declare-fun Tm_arrow_d3d7b9b0195059a4a1a0917b365b5506 () Term)
(declare-fun Vale.Lib.Map16.sel2@tok () Term)

; </end encoding Vale.Lib.Map16.sel2>


; <Start encoding Vale.Lib.Map16.sel4>

(declare-fun Vale.Lib.Map16.sel4 (Term Term Term) Term)
(declare-fun Tm_arrow_a90d8207ec47ceda7dbae1bedd213cb0 () Term)
(declare-fun Vale.Lib.Map16.sel4@tok () Term)

; </end encoding Vale.Lib.Map16.sel4>


; <Start encoding Vale.Lib.Map16.sel8>

(declare-fun Vale.Lib.Map16.sel8 (Term Term Term) Term)
(declare-fun Tm_arrow_ada0c9fcaa568a016f51e89c292f86ba () Term)
(declare-fun Vale.Lib.Map16.sel8@tok () Term)

; </end encoding Vale.Lib.Map16.sel8>


; <Start encoding Vale.Lib.Map16.sel16>

(declare-fun Vale.Lib.Map16.sel16 (Term Term Term) Term)
(declare-fun Tm_arrow_53df293a159933e2901f9509756d4585 () Term)
(declare-fun Vale.Lib.Map16.sel16@tok () Term)

; </end encoding Vale.Lib.Map16.sel16>


; <Start encoding Vale.Lib.Map16.upd2>

(declare-fun Vale.Lib.Map16.upd2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_7ab9e3410c0a0fd7a30d07580af4ed34 () Term)
(declare-fun Vale.Lib.Map16.upd2@tok () Term)

; </end encoding Vale.Lib.Map16.upd2>


; <Start encoding Vale.Lib.Map16.upd4>

(declare-fun Vale.Lib.Map16.upd4 (Term Term Term Term) Term)
(declare-fun Tm_arrow_47443cd7128e7a935d63859fac00e159 () Term)
(declare-fun Vale.Lib.Map16.upd4@tok () Term)

; </end encoding Vale.Lib.Map16.upd4>


; <Start encoding Vale.Lib.Map16.upd8>

(declare-fun Vale.Lib.Map16.upd8 (Term Term Term Term) Term)
(declare-fun Tm_arrow_3c5b54aba29c25f02a318cc53fe7bdd5 () Term)
(declare-fun Vale.Lib.Map16.upd8@tok () Term)

; </end encoding Vale.Lib.Map16.upd8>


; <Start encoding Vale.Lib.Map16.upd16>

(declare-fun Vale.Lib.Map16.upd16 (Term Term Term Term) Term)
(declare-fun Tm_arrow_117bfebd27894677c8581abe92eccdd6 () Term)
(declare-fun Vale.Lib.Map16.upd16@tok () Term)

; </end encoding Vale.Lib.Map16.upd16>


; <Start encoding Vale.Lib.Map16.lemma_self16>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_self16 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_self16@tok () Term)

; </end encoding Vale.Lib.Map16.lemma_self16>


; <Start encoding Vale.Lib.Map16.lemma_other16>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_other16 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_other16@tok () Term)

; </end encoding Vale.Lib.Map16.lemma_other16>


; <Start encoding Vale.Lib.Map16.lemma_equal16>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_equal16 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_equal16@tok () Term)

; </end encoding Vale.Lib.Map16.lemma_equal16>


; <Start encoding Vale.Lib.Map16.sel>

(declare-fun Vale.Lib.Map16.sel (Term Term Term) Term)

(declare-fun Vale.Lib.Map16.sel@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.Lib.Map16.sel; Namespace Vale.Lib.Map16
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(66,4-66,7); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(66,4-66,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Vale.Lib.Map16.map16 @x0))
(HasType @x2
Prims.int))
(HasType (Vale.Lib.Map16.sel @x0
@x1
@x2)
@x0))
 

:pattern ((Vale.Lib.Map16.sel @x0
@x1
@x2))
:qid typing_Vale.Lib.Map16.sel))

:named typing_Vale.Lib.Map16.sel))

; </end encoding Vale.Lib.Map16.sel>


; <Start encoding Vale.Lib.Map16.upd>

(declare-fun Vale.Lib.Map16.upd (Term Term Term Term) Term)

(declare-fun Vale.Lib.Map16.upd@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.Lib.Map16.upd; Namespace Vale.Lib.Map16
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(70,4-70,7); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(70,4-70,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Vale.Lib.Map16.map16 @x0))
(HasType @x2
Prims.int)
(HasType @x3
@x0))
(HasType (Vale.Lib.Map16.upd @x0
@x1
@x2
@x3)
(Vale.Lib.Map16.map16 @x0)))
 

:pattern ((Vale.Lib.Map16.upd @x0
@x1
@x2
@x3))
:qid typing_Vale.Lib.Map16.upd))

:named typing_Vale.Lib.Map16.upd))

; </end encoding Vale.Lib.Map16.upd>


; <Start encoding Vale.Lib.Map16.get>

(declare-fun Vale.Lib.Map16.get (Term Term Term) Term)

(declare-fun Vale.Lib.Map16.get@tok () Term)

; </end encoding Vale.Lib.Map16.get>


; <Start encoding Vale.Lib.Map16.eta16>

(declare-fun Vale.Lib.Map16.eta16 (Term Term) Term)
(declare-fun Tm_arrow_4d4fc1b5c1cad9576bc90e0327d05af2 () Term)
(declare-fun Vale.Lib.Map16.eta16@tok () Term)

; </end encoding Vale.Lib.Map16.eta16>


; <Start encoding Vale.Lib.Map16.eta>

(declare-fun Vale.Lib.Map16.eta (Term Term) Term)

(declare-fun Vale.Lib.Map16.eta@tok () Term)

; </end encoding Vale.Lib.Map16.eta>


; <Start encoding Vale.Lib.Map16.lemma_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_self (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_self@tok () Term)

; </end encoding Vale.Lib.Map16.lemma_self>


; <Start encoding Vale.Lib.Map16.lemma_other>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_other (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_other@tok () Term)
;;;;;;;;;;;;;;;;Lemma: Vale.Lib.Map16.lemma_other
;;; Fact-ids: Name Vale.Lib.Map16.lemma_other; Namespace Vale.Lib.Map16
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Vale.Lib.Map16.map16 @x0))
(HasType @x2
Prims.int)
(HasType @x3
Prims.int)
(HasType @x4
@x0)

;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,12-94,19); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,12-94,19)
(<= 0
(BoxInt_proj_0 @x2))


;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,23-94,30); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,23-94,30)
(< (BoxInt_proj_0 @x2)
16)


;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,34-94,41); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,34-94,41)
(<= 0
(BoxInt_proj_0 @x3))


;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,45-94,52); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,45-94,52)
(< (BoxInt_proj_0 @x3)
16)


;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,56-94,65); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,56-94,65)
(not 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,56-94,65); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(94,56-94,65)
(= @x2
@x3)
)
)

;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(95,11-95,42); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(95,11-95,42)
(= (Vale.Lib.Map16.sel @x0
(Vale.Lib.Map16.upd @x0
@x1
@x2
@x4)
@x3)
(Vale.Lib.Map16.sel @x0
@x1
@x3))
)
 

:pattern ((Vale.Lib.Map16.sel @x0
(Vale.Lib.Map16.upd @x0
@x1
@x2
@x4)
@x3))
:qid lemma_Vale.Lib.Map16.lemma_other))
:named lemma_Vale.Lib.Map16.lemma_other))

; </end encoding Vale.Lib.Map16.lemma_other>


; <Start encoding Vale.Lib.Map16.lemma_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_equal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_equal@tok () Term)

; </end encoding Vale.Lib.Map16.lemma_equal>


; <Start encoding Vale.Lib.Map16.lemma_eta16>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_eta16 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_eta16@tok () Term)

; </end encoding Vale.Lib.Map16.lemma_eta16>


; <Start encoding Vale.Lib.Map16.lemma_eta>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_eta (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_eta@tok () Term)

; </end encoding Vale.Lib.Map16.lemma_eta>


; <Start encoding Vale.Lib.Map16.equal>

(declare-fun Vale.Lib.Map16.equal (Term Term Term) Term)
(declare-fun Tm_arrow_2a13188e13b70b52366b9e9917a0b29f () Term)
(declare-fun Vale.Lib.Map16.equal@tok () Term)

; </end encoding Vale.Lib.Map16.equal>


; <Start encoding Vale.Lib.Map16.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_equal_intro@tok () Term)

; </end encoding Vale.Lib.Map16.lemma_equal_intro>


; <Start encoding Vale.Lib.Map16.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Lib.Map16.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Lib.Map16.lemma_equal_elim@tok () Term)
;;;;;;;;;;;;;;;;Lemma: Vale.Lib.Map16.lemma_equal_elim
;;; Fact-ids: Name Vale.Lib.Map16.lemma_equal_elim; Namespace Vale.Lib.Map16
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Vale.Lib.Map16.map16 @x0))
(HasType @x2
(Vale.Lib.Map16.map16 @x0))

;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(117,12-117,23); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(117,12-117,23)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(117,12-117,23); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(117,12-117,23)
(Vale.Lib.Map16.equal @x0
@x1
@x2)
)
)

;; def=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(118,11-118,19); use=/home/guido/r/everest/hacl-star/vale/code/lib/collections/Vale.Lib.Map16.fsti(118,11-118,19)
(= @x1
@x2)
)
 

:pattern ((Vale.Lib.Map16.equal @x0
@x1
@x2))
:qid lemma_Vale.Lib.Map16.lemma_equal_elim))
:named lemma_Vale.Lib.Map16.lemma_equal_elim))

; </end encoding Vale.Lib.Map16.lemma_equal_elim>


; <Start encoding Vale.Lib.Map16.init>


(declare-fun Tm_arrow_5f78710e6c51b84c0712f86e7d9a7774 (Term) Term)
(declare-fun Vale.Lib.Map16.init (Term Term) Term)


(declare-fun Tm_refine_4543a763845fb9ee743da31f24be9c8b (Term Term) Term)
(declare-fun Tm_arrow_56de00588316eed730b248b0a24544d4 () Term)
(declare-fun Vale.Lib.Map16.init@tok () Term)


; </end encoding Vale.Lib.Map16.init>


; <Start encoding Vale.Lib.Map16.init_ghost>


(declare-fun Tm_ghost_arrow_2e5abb8e34fd9b3e7ad14efe3ad244cb (Term) Term)
(declare-fun Vale.Lib.Map16.init_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_6091236b7461e8686771e281c4959dcb () Term)
(declare-fun Vale.Lib.Map16.init_ghost@tok () Term)


; </end encoding Vale.Lib.Map16.init_ghost>


; End Externals for interface Vale.Lib.Map16


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Lib.Map16 (159 decls; total size 17763)

;;; Start interface Vale.X64.Flags

; Externals for interface Vale.X64.Flags


; <Start encoding Vale.X64.Flags.flag_val_t>

(declare-fun Vale.X64.Flags.flag_val_t () Term)

; </end encoding Vale.X64.Flags.flag_val_t>


; <Start encoding Vale.X64.Flags.t>

(declare-fun Vale.X64.Flags.t () Term)

; </end encoding Vale.X64.Flags.t>


; <Start encoding Vale.X64.Flags.sel>

(declare-fun Vale.X64.Flags.sel (Term Term) Term)
(declare-fun Tm_arrow_5cdf7c3926d41be6de7afe2ebb26f595 () Term)
(declare-fun Vale.X64.Flags.sel@tok () Term)

; </end encoding Vale.X64.Flags.sel>


; <Start encoding Vale.X64.Flags.upd>

(declare-fun Vale.X64.Flags.upd (Term Term Term) Term)
(declare-fun Tm_arrow_daf9573efa353c481126cb3ecba277b0 () Term)
(declare-fun Vale.X64.Flags.upd@tok () Term)

; </end encoding Vale.X64.Flags.upd>


; <Start encoding Vale.X64.Flags.sel_curry>

(declare-fun Vale.X64.Flags.sel_curry (Term Term) Term)
(declare-fun Tm_arrow_c9f84314ba6aade3760e20965d165b65 () Term)
(declare-fun Vale.X64.Flags.sel_curry@tok () Term)

; </end encoding Vale.X64.Flags.sel_curry>


; <Start encoding Vale.X64.Flags.to_fun>

(declare-fun Vale.X64.Flags.to_fun (Term) Term)
(declare-fun Tm_arrow_59570c1b09fcfe77d38fb81f91091100 () Term)
(declare-fun Tm_abs_f086d77986b470aab4bfebc171e6c366 () Term)
(declare-fun Tm_arrow_b8ef033c8634900985f9caac19588f3f () Term)
(declare-fun Vale.X64.Flags.to_fun@tok () Term)




;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.Flags.to_fun; Namespace Vale.X64.Flags
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.Flags.sel_curry@tok))
:named @kick_partial_app_3b1ceece3101a69ebe5559ece8274817))

; </end encoding Vale.X64.Flags.to_fun>


; <Start encoding Vale.X64.Flags.of_fun>

(declare-fun Tm_arrow_6d1d81ae558d658d7d34082785eb5144 () Term)
(declare-fun Vale.X64.Flags.of_fun (Term) Term)

(declare-fun Tm_refine_423a970236765465eb8eb63b6e1b8f53 (Term) Term)
(declare-fun Tm_arrow_c8dfe12d601ea757abf2a06317ef3b58 () Term)
(declare-fun Vale.X64.Flags.of_fun@tok () Term)


; </end encoding Vale.X64.Flags.of_fun>


; <Start encoding Vale.X64.Flags.lemma_upd_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Flags.lemma_upd_eq (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Flags.lemma_upd_eq@tok () Term)

; </end encoding Vale.X64.Flags.lemma_upd_eq>


; <Start encoding Vale.X64.Flags.lemma_upd_ne>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Flags.lemma_upd_ne (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Flags.lemma_upd_ne@tok () Term)

; </end encoding Vale.X64.Flags.lemma_upd_ne>


; <Start encoding Vale.X64.Flags.equal>

(declare-fun Vale.X64.Flags.equal (Term Term) Term)
(declare-fun Tm_arrow_fd80b3c425f64338d4d55b37accf1460 () Term)
(declare-fun Vale.X64.Flags.equal@tok () Term)

; </end encoding Vale.X64.Flags.equal>


; <Start encoding Vale.X64.Flags.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Flags.lemma_equal_intro (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Flags.lemma_equal_intro@tok () Term)

; </end encoding Vale.X64.Flags.lemma_equal_intro>


; <Start encoding Vale.X64.Flags.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Flags.lemma_equal_elim (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Flags.lemma_equal_elim@tok () Term)

; </end encoding Vale.X64.Flags.lemma_equal_elim>


; End Externals for interface Vale.X64.Flags


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.Flags (66 decls; total size 8822)

;;; Start interface Vale.AES.OptPublic

; Externals for interface Vale.AES.OptPublic


; <Start encoding Vale.AES.OptPublic.hkeys_reqs_pub>

(declare-fun Vale.AES.OptPublic.hkeys_reqs_pub (Term Term) Term)
(declare-fun Tm_arrow_46521152914be20f813117ef3d3af744 () Term)
(declare-fun Vale.AES.OptPublic.hkeys_reqs_pub@tok () Term)

; </end encoding Vale.AES.OptPublic.hkeys_reqs_pub>


; <Start encoding Vale.AES.OptPublic.get_hkeys_reqs>

(declare-fun Vale.AES.OptPublic.get_hkeys_reqs (Term) Term)
(declare-fun Tm_refine_79f1f8b4d6774015af27e4432311c913 (Term) Term)
(declare-fun Tm_arrow_88fbd901cd645e86f7032d91263b2d37 () Term)
(declare-fun Vale.AES.OptPublic.get_hkeys_reqs@tok () Term)


; </end encoding Vale.AES.OptPublic.get_hkeys_reqs>


; <Start encoding Vale.AES.OptPublic.get_hkeys_reqs_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.OptPublic.get_hkeys_reqs_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.OptPublic.get_hkeys_reqs_injective@tok () Term)

; </end encoding Vale.AES.OptPublic.get_hkeys_reqs_injective>


; End Externals for interface Vale.AES.OptPublic


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.OptPublic (19 decls; total size 6282)

;;; Start interface Vale.AES.GF128_s

; Externals for interface Vale.AES.GF128_s


; <Start encoding Vale.AES.GF128_s.gf128_modulus_low_terms>

(declare-fun Vale.AES.GF128_s.gf128_modulus_low_terms (Dummy_sort) Term)

(declare-fun Tm_abs_91a45626d634360d0cb72d9b8d62e58c () Term)

; </end encoding Vale.AES.GF128_s.gf128_modulus_low_terms>


; <Start encoding Vale.AES.GF128_s.gf128_modulus>

(declare-fun Vale.AES.GF128_s.gf128_modulus (Dummy_sort) Term)

; </end encoding Vale.AES.GF128_s.gf128_modulus>


; <Start encoding Vale.AES.GF128_s.gf128_add>

(declare-fun Vale.AES.GF128_s.gf128_add (Term Term) Term)

(declare-fun Vale.AES.GF128_s.gf128_add@tok () Term)

; </end encoding Vale.AES.GF128_s.gf128_add>


; <Start encoding Vale.AES.GF128_s.gf128_mul>

(declare-fun Vale.AES.GF128_s.gf128_mul (Term Term) Term)

(declare-fun Vale.AES.GF128_s.gf128_mul@tok () Term)

; </end encoding Vale.AES.GF128_s.gf128_mul>


; <Start encoding Vale.AES.GF128_s.gf128_to_quad32>

(declare-fun Vale.AES.GF128_s.gf128_to_quad32 (Term) Term)

(declare-fun Vale.AES.GF128_s.gf128_to_quad32@tok () Term)

; </end encoding Vale.AES.GF128_s.gf128_to_quad32>


; <Start encoding Vale.AES.GF128_s.gf128_of_quad32>

(declare-fun Vale.AES.GF128_s.gf128_of_quad32 (Term) Term)

(declare-fun Vale.AES.GF128_s.gf128_of_quad32@tok () Term)

; </end encoding Vale.AES.GF128_s.gf128_of_quad32>


; End Externals for interface Vale.AES.GF128_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.GF128_s (31 decls; total size 6508)

;;; Start interface Vale.AES.GF128

; Externals for interface Vale.AES.GF128


; <Start encoding Vale.AES.GF128.quad32_shift_left_1>

(declare-fun Vale.AES.GF128.quad32_shift_left_1 (Term) Term)

(declare-fun Vale.AES.GF128.quad32_shift_left_1@tok () Term)

; </end encoding Vale.AES.GF128.quad32_shift_left_1>


; <Start encoding Vale.AES.GF128.quad32_shift_2_left_1>

(declare-fun Vale.AES.GF128.quad32_shift_2_left_1 (Term Term) Term)
(declare-fun Tm_arrow_63cb653415b762946e53a077941d8839 () Term)
(declare-fun Vale.AES.GF128.quad32_shift_2_left_1@tok () Term)

; </end encoding Vale.AES.GF128.quad32_shift_2_left_1>


; <Start encoding Vale.AES.GF128.lemma_shift_left_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_shift_left_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_shift_left_1@tok () Term)

; </end encoding Vale.AES.GF128.lemma_shift_left_1>


; <Start encoding Vale.AES.GF128.lemma_shift_2_left_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_shift_2_left_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_shift_2_left_1@tok () Term)

; </end encoding Vale.AES.GF128.lemma_shift_2_left_1>


; <Start encoding Vale.AES.GF128.lemma_reverse_reverse>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_reverse_reverse (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_reverse_reverse@tok () Term)

; </end encoding Vale.AES.GF128.lemma_reverse_reverse>


; <Start encoding Vale.AES.GF128.lemma_gf128_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_degree (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_degree@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_degree>


; <Start encoding Vale.AES.GF128.lemma_gf128_constant_rev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_constant_rev (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_constant_rev@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_constant_rev>


; <Start encoding Vale.AES.GF128.lemma_quad32_double_hi_rev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_quad32_double_hi_rev (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_quad32_double_hi_rev@tok () Term)

; </end encoding Vale.AES.GF128.lemma_quad32_double_hi_rev>


; <Start encoding Vale.AES.GF128.lemma_gf128_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_mul>


; <Start encoding Vale.AES.GF128.lemma_gf128_reduce>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_reduce (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_reduce@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_reduce>


; <Start encoding Vale.AES.GF128.lemma_gf128_reduce_rev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_reduce_rev (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_reduce_rev@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_reduce_rev>


; <Start encoding Vale.AES.GF128.lemma_reduce_rev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_reduce_rev (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_reduce_rev@tok () Term)

; </end encoding Vale.AES.GF128.lemma_reduce_rev>


; <Start encoding Vale.AES.GF128.gf128_low_shift>

(declare-fun Vale.AES.GF128.gf128_low_shift (Dummy_sort) Term)

; </end encoding Vale.AES.GF128.gf128_low_shift>


; <Start encoding Vale.AES.GF128.gf128_rev_shift>

(declare-fun Vale.AES.GF128.gf128_rev_shift (Dummy_sort) Term)

; </end encoding Vale.AES.GF128.gf128_rev_shift>


; <Start encoding Vale.AES.GF128.lemma_gf128_low_shift>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_low_shift (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_low_shift@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_low_shift>


; <Start encoding Vale.AES.GF128.lemma_gf128_high_bit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_high_bit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_high_bit@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_high_bit>


; <Start encoding Vale.AES.GF128.lemma_gf128_low_shift_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_low_shift_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_low_shift_1@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_low_shift_1>


; <Start encoding Vale.AES.GF128.gf128_mul_rev>

(declare-fun Vale.AES.GF128.gf128_mul_rev (Term Term) Term)

(declare-fun Vale.AES.GF128.gf128_mul_rev@tok () Term)

; </end encoding Vale.AES.GF128.gf128_mul_rev>


; <Start encoding Vale.AES.GF128.op_Star_Tilde>

(declare-fun Vale.AES.GF128.op_Star_Tilde (Term Term) Term)

(declare-fun Vale.AES.GF128.op_Star_Tilde@tok () Term)

; </end encoding Vale.AES.GF128.op_Star_Tilde>


; <Start encoding Vale.AES.GF128.lemma_gf128_mul_rev_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul_rev_commute (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul_rev_commute@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_mul_rev_commute>


; <Start encoding Vale.AES.GF128.lemma_gf128_mul_rev_associate>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul_rev_associate (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul_rev_associate@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_mul_rev_associate>


; <Start encoding Vale.AES.GF128.lemma_gf128_mul_rev_distribute_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul_rev_distribute_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul_rev_distribute_left@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_mul_rev_distribute_left>


; <Start encoding Vale.AES.GF128.lemma_gf128_mul_rev_distribute_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul_rev_distribute_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_gf128_mul_rev_distribute_right@tok () Term)

; </end encoding Vale.AES.GF128.lemma_gf128_mul_rev_distribute_right>


; <Start encoding Vale.AES.GF128.mod_rev>

(declare-fun Vale.AES.GF128.mod_rev (Term Term Term) Term)
(declare-fun Tm_arrow_4fcac80471124652e6c6afed468d5e5a () Term)
(declare-fun Vale.AES.GF128.mod_rev@tok () Term)

; </end encoding Vale.AES.GF128.mod_rev>


; <Start encoding Vale.AES.GF128.lemma_add_mod_rev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_add_mod_rev (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_add_mod_rev@tok () Term)

; </end encoding Vale.AES.GF128.lemma_add_mod_rev>


; <Start encoding Vale.AES.GF128.shift_key_1>

(declare-fun Vale.AES.GF128.shift_key_1 (Term Term Term) Term)

(declare-fun Vale.AES.GF128.shift_key_1@tok () Term)

; </end encoding Vale.AES.GF128.shift_key_1>


; <Start encoding Vale.AES.GF128.lemma_shift_key_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_shift_key_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_shift_key_1@tok () Term)

; </end encoding Vale.AES.GF128.lemma_shift_key_1>


; <Start encoding Vale.AES.GF128.lemma_test_high_bit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_test_high_bit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_test_high_bit@tok () Term)

; </end encoding Vale.AES.GF128.lemma_test_high_bit>


; <Start encoding Vale.AES.GF128.lemma_Mul128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_Mul128 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_Mul128@tok () Term)

; </end encoding Vale.AES.GF128.lemma_Mul128>


; <Start encoding Vale.AES.GF128.lemma_Mul128_accum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GF128.lemma_Mul128_accum (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GF128.lemma_Mul128_accum@tok () Term)

; </end encoding Vale.AES.GF128.lemma_Mul128_accum>


; End Externals for interface Vale.AES.GF128


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.GF128 (127 decls; total size 15164)

;;; Start module Vale.AES.AES_s

; Externals for module Vale.AES.AES_s


; <Start encoding Vale.AES.AES_s.mix_columns_LE>

(declare-fun Vale.AES.AES_s.mix_columns_LE (Term) Term)

(declare-fun Vale.AES.AES_s.mix_columns_LE@tok () Term)

; </end encoding Vale.AES.AES_s.mix_columns_LE>


; <Start encoding Vale.AES.AES_s.inv_mix_columns_LE>

(declare-fun Vale.AES.AES_s.inv_mix_columns_LE (Term) Term)

(declare-fun Vale.AES.AES_s.inv_mix_columns_LE@tok () Term)

; </end encoding Vale.AES.AES_s.inv_mix_columns_LE>


; <Start encoding Vale.AES.AES_s.shift_rows_LE>

(declare-fun Vale.AES.AES_s.shift_rows_LE (Term) Term)

(declare-fun Vale.AES.AES_s.shift_rows_LE@tok () Term)

; </end encoding Vale.AES.AES_s.shift_rows_LE>


; <Start encoding Vale.AES.AES_s.inv_shift_rows_LE>

(declare-fun Vale.AES.AES_s.inv_shift_rows_LE (Term) Term)

(declare-fun Vale.AES.AES_s.inv_shift_rows_LE@tok () Term)

; </end encoding Vale.AES.AES_s.inv_shift_rows_LE>


; <Start encoding Vale.AES.AES_s.rot_word_LE>

(declare-fun Vale.AES.AES_s.rot_word_LE (Term) Term)

(declare-fun Vale.AES.AES_s.rot_word_LE@tok () Term)

; </end encoding Vale.AES.AES_s.rot_word_LE>


; <Start encoding Vale.AES.AES_s.commute_sub_bytes_shift_rows>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_s.commute_sub_bytes_shift_rows (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_s.commute_sub_bytes_shift_rows@tok () Term)

; </end encoding Vale.AES.AES_s.commute_sub_bytes_shift_rows>


; <Start encoding Vale.AES.AES_s.commute_rot_word_sub_word>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_s.commute_rot_word_sub_word (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_s.commute_rot_word_sub_word@tok () Term)

; </end encoding Vale.AES.AES_s.commute_rot_word_sub_word>


; <Start encoding Vale.AES.AES_s.is_aes_key_LE>

(declare-fun Vale.AES.AES_s.is_aes_key_LE (Term Term) Term)
(declare-fun Tm_arrow_f6ce5943980b0de726e72ee1e0e488a5 () Term)
(declare-fun Vale.AES.AES_s.is_aes_key_LE@tok () Term)

; </end encoding Vale.AES.AES_s.is_aes_key_LE>


; <Start encoding Vale.AES.AES_s.aes_key_LE>

(declare-fun Vale.AES.AES_s.aes_key_LE (Term) Term)

(declare-fun Vale.AES.AES_s.aes_key_LE@tok () Term)
(declare-fun Tm_refine_7ecc9ff2104c1b3467333d052c1b37c3 (Term) Term)

; </end encoding Vale.AES.AES_s.aes_key_LE>


; <Start encoding Vale.AES.AES_s.eval_round>

(declare-fun Vale.AES.AES_s.eval_round (Term Term) Term)

(declare-fun Vale.AES.AES_s.eval_round@tok () Term)

; </end encoding Vale.AES.AES_s.eval_round>


; <Start encoding Vale.AES.AES_s.eval_rounds_def>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.AES_s.eval_rounds_def.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.AES_s.eval_rounds_def.fuel_instrumented_token () Term)
(declare-fun Vale.AES.AES_s.eval_rounds_def (Term Term Term) Term)
(declare-fun Vale.AES.AES_s.eval_rounds_def@tok () Term)
(declare-fun Tm_refine_4efd8dd7c0f50f53e2308e4a3404dfa9 (Term) Term)


(declare-fun Tm_arrow_c67edb36720a37355be6aeed3972bdbd () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.AES_s.eval_rounds_def; Namespace Vale.AES.AES_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(41,8-41,23); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(41,8-41,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.AES.AES_s.eval_rounds_def.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(Vale.AES.AES_s.eval_rounds_def.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((Vale.AES.AES_s.eval_rounds_def.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_Vale.AES.AES_s.eval_rounds_def.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.AES_s.eval_rounds_def.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.AES_s.eval_rounds_def; Namespace Vale.AES.AES_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(41,8-41,23); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(41,8-41,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.AES.AES_s.eval_rounds_def @x0
@x1
@x2)
(Vale.AES.AES_s.eval_rounds_def.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((Vale.AES.AES_s.eval_rounds_def @x0
@x1
@x2))
:qid @fuel_correspondence_Vale.AES.AES_s.eval_rounds_def.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.AES_s.eval_rounds_def.fuel_instrumented))

; </end encoding Vale.AES.AES_s.eval_rounds_def>


; <Start encoding Vale.AES.AES_s.eval_rounds>


(declare-fun Vale.AES.AES_s.eval_rounds (Term Term Term) Term)


(declare-fun Vale.AES.AES_s.eval_rounds@tok () Term)

; </end encoding Vale.AES.AES_s.eval_rounds>


; <Start encoding Vale.AES.AES_s.eval_rounds_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_s.eval_rounds_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_s.eval_rounds_reveal@tok () Term)

; </end encoding Vale.AES.AES_s.eval_rounds_reveal>


; <Start encoding Vale.AES.AES_s.eval_cipher_def>

(declare-fun Vale.AES.AES_s.eval_cipher_def (Term Term Term) Term)

(declare-fun Tm_arrow_185ee74eff768b096a1e31d7c1d98f86 () Term)
(declare-fun Vale.AES.AES_s.eval_cipher_def@tok () Term)


; </end encoding Vale.AES.AES_s.eval_cipher_def>


; <Start encoding Vale.AES.AES_s.eval_cipher>

(declare-fun Vale.AES.AES_s.eval_cipher (Term Term Term) Term)


(declare-fun Vale.AES.AES_s.eval_cipher@tok () Term)


; </end encoding Vale.AES.AES_s.eval_cipher>


; <Start encoding Vale.AES.AES_s.eval_cipher_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_s.eval_cipher_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_s.eval_cipher_reveal@tok () Term)

; </end encoding Vale.AES.AES_s.eval_cipher_reveal>


; <Start encoding Vale.AES.AES_s.expand_key_def>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.AES_s.expand_key_def.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.AES_s.expand_key_def.fuel_instrumented_token () Term)
(declare-fun Vale.AES.AES_s.expand_key_def (Term Term Term) Term)
(declare-fun Vale.AES.AES_s.expand_key_def@tok () Term)
(declare-fun Tm_refine_760f8c1faa02b7e0a5e3490e13dadfa1 (Term) Term)
(declare-fun Tm_refine_86c893bd73295cad27c95bea9e692abe (Term) Term)



(declare-fun Tm_arrow_df34148addc877501a33a49764a51fb9 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.AES_s.expand_key_def; Namespace Vale.AES.AES_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(62,8-62,22); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(62,8-62,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.AES.AES_s.expand_key_def.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(Vale.AES.AES_s.expand_key_def.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((Vale.AES.AES_s.expand_key_def.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_Vale.AES.AES_s.expand_key_def.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.AES_s.expand_key_def.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.AES_s.expand_key_def; Namespace Vale.AES.AES_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(62,8-62,22); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(62,8-62,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.AES.AES_s.expand_key_def @x0
@x1
@x2)
(Vale.AES.AES_s.expand_key_def.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((Vale.AES.AES_s.expand_key_def @x0
@x1
@x2))
:qid @fuel_correspondence_Vale.AES.AES_s.expand_key_def.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.AES_s.expand_key_def.fuel_instrumented))

; </end encoding Vale.AES.AES_s.expand_key_def>


; <Start encoding Vale.AES.AES_s.expand_key>


(declare-fun Vale.AES.AES_s.expand_key (Term Term Term) Term)



(declare-fun Vale.AES.AES_s.expand_key@tok () Term)


; </end encoding Vale.AES.AES_s.expand_key>


; <Start encoding Vale.AES.AES_s.expand_key_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_s.expand_key_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_s.expand_key_reveal@tok () Term)

; </end encoding Vale.AES.AES_s.expand_key_reveal>


; <Start encoding Vale.AES.AES_s.key_schedule_to_round_keys>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented_token () Term)
(declare-fun Vale.AES.AES_s.key_schedule_to_round_keys (Term Term) Term)
(declare-fun Vale.AES.AES_s.key_schedule_to_round_keys@tok () Term)
(declare-fun Tm_refine_492bc8822bd3ab3615cbddc21f2b2327 (Term) Term)
(declare-fun Tm_refine_9c2d74ae21ebe21dc37eb1ac96ddb62a (Term) Term)



(declare-fun Tm_arrow_fa94c47f0b771e180927c1aa2bfb5cb4 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.AES_s.key_schedule_to_round_keys; Namespace Vale.AES.AES_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(83,8-83,34); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(83,8-83,34)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.AES_s.key_schedule_to_round_keys; Namespace Vale.AES.AES_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(83,8-83,34); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.AES_s.fst(83,8-83,34)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.AES.AES_s.key_schedule_to_round_keys @x0
@x1)
(Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.AES.AES_s.key_schedule_to_round_keys @x0
@x1))
:qid @fuel_correspondence_Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.AES_s.key_schedule_to_round_keys.fuel_instrumented))

; </end encoding Vale.AES.AES_s.key_schedule_to_round_keys>


; <Start encoding Vale.AES.AES_s.key_to_round_keys_LE>

(declare-fun Vale.AES.AES_s.key_to_round_keys_LE (Term Term) Term)
(declare-fun Tm_refine_8bf7b005c03805b917f5228c650ea3ce (Term) Term)
(declare-fun Tm_arrow_e10f46e3761797a99caf1f2085022353 () Term)
(declare-fun Vale.AES.AES_s.key_to_round_keys_LE@tok () Term)


; </end encoding Vale.AES.AES_s.key_to_round_keys_LE>


; <Start encoding Vale.AES.AES_s.aes_encrypt_LE_def>

(declare-fun Vale.AES.AES_s.aes_encrypt_LE_def (Term Term Term) Term)

(declare-fun Tm_arrow_83596bcd2029b73601ec00ef619212d4 () Term)
(declare-fun Vale.AES.AES_s.aes_encrypt_LE_def@tok () Term)


; </end encoding Vale.AES.AES_s.aes_encrypt_LE_def>


; <Start encoding Vale.AES.AES_s.aes_encrypt_LE>

(declare-fun Vale.AES.AES_s.aes_encrypt_LE (Term Term Term) Term)


(declare-fun Vale.AES.AES_s.aes_encrypt_LE@tok () Term)


; </end encoding Vale.AES.AES_s.aes_encrypt_LE>


; <Start encoding Vale.AES.AES_s.aes_encrypt_LE_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_s.aes_encrypt_LE_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_s.aes_encrypt_LE_reveal@tok () Term)

; </end encoding Vale.AES.AES_s.aes_encrypt_LE_reveal>


; <Skipped />


; <Start encoding Vale.AES.AES_s.key_to_round_keys>

(declare-fun Vale.AES.AES_s.key_to_round_keys (Term Term) Term)
(declare-fun Tm_refine_c99e476e9b0de415e9205d6437867bf2 (Term) Term)
(declare-fun Tm_arrow_8e0baa1a47c6e045612d3fa5e3615611 () Term)
(declare-fun Vale.AES.AES_s.key_to_round_keys@tok () Term)


; </end encoding Vale.AES.AES_s.key_to_round_keys>


; <Skipped />


; <Start encoding Vale.AES.AES_s.aes_encrypt>

(declare-fun Vale.AES.AES_s.aes_encrypt (Term Term Term) Term)
(declare-fun Tm_arrow_484bef1f9f94f4bd0744bac2c2f78dea () Term)
(declare-fun Vale.AES.AES_s.aes_encrypt@tok () Term)

; </end encoding Vale.AES.AES_s.aes_encrypt>


; End Externals for module Vale.AES.AES_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.AES.AES_s (175 decls; total size 18305)

;;; Start module Vale.AES.GCTR_s

; Externals for module Vale.AES.GCTR_s


; <Start encoding Vale.AES.GCTR_s.is_gctr_plain_LE>

(declare-fun Vale.AES.GCTR_s.is_gctr_plain_LE (Term) Term)
(declare-fun Tm_arrow_6f5fcdc944ac4fdace5b566beb19bfaf () Term)
(declare-fun Vale.AES.GCTR_s.is_gctr_plain_LE@tok () Term)

; </end encoding Vale.AES.GCTR_s.is_gctr_plain_LE>


; <Start encoding Vale.AES.GCTR_s.gctr_plain_LE>

(declare-fun Vale.AES.GCTR_s.gctr_plain_LE (Dummy_sort) Term)
(declare-fun Tm_refine_27cb8547ad2b1e854c0d481d51e2247a () Term)

; </end encoding Vale.AES.GCTR_s.gctr_plain_LE>


; <Start encoding Vale.AES.GCTR_s.gctr_plain_internal_LE>

(declare-fun Vale.AES.GCTR_s.gctr_plain_internal_LE (Dummy_sort) Term)

; </end encoding Vale.AES.GCTR_s.gctr_plain_internal_LE>


; <Start encoding Vale.AES.GCTR_s.inc32>

(declare-fun Vale.AES.GCTR_s.inc32 (Term Term) Term)
(declare-fun Tm_arrow_4ee03744edce0cbb98ad02d03e0acdc9 () Term)
(declare-fun Vale.AES.GCTR_s.inc32@tok () Term)

; </end encoding Vale.AES.GCTR_s.inc32>


; <Start encoding Vale.AES.GCTR_s.gctr_encrypt_block>

(declare-fun Vale.AES.GCTR_s.gctr_encrypt_block (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_f95deb8cce019f4cf3378b621ea8a202 () Term)
(declare-fun Vale.AES.GCTR_s.gctr_encrypt_block@tok () Term)


; </end encoding Vale.AES.GCTR_s.gctr_encrypt_block>


; <Start encoding Vale.AES.GCTR_s.gctr_encrypt_recursive>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented_token () Term)
(declare-fun Vale.AES.GCTR_s.gctr_encrypt_recursive (Term Term Term Term Term) Term)
(declare-fun Vale.AES.GCTR_s.gctr_encrypt_recursive@tok () Term)
(declare-fun Tm_arrow_44801a108109712fa277bd3fd50cb936 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.GCTR_s.gctr_encrypt_recursive; Namespace Vale.AES.GCTR_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.GCTR_s.fst(31,8-31,30); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.GCTR_s.fst(31,8-31,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.GCTR_s.gctr_encrypt_recursive; Namespace Vale.AES.GCTR_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.GCTR_s.fst(31,8-31,30); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.GCTR_s.fst(31,8-31,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Vale.AES.GCTR_s.gctr_encrypt_recursive @x0
@x1
@x2
@x3
@x4)
(Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((Vale.AES.GCTR_s.gctr_encrypt_recursive @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.GCTR_s.gctr_encrypt_recursive.fuel_instrumented))

; </end encoding Vale.AES.GCTR_s.gctr_encrypt_recursive>


; <Start encoding Vale.AES.GCTR_s.pad_to_128_bits>

(declare-fun Vale.AES.GCTR_s.pad_to_128_bits (Term) Term)
(declare-fun Tm_refine_06b9f0ab8ff3c0e49aa83954383f15a4 (Term) Term)
(declare-fun Tm_arrow_55de014154b7f7dbb3657294455ed5f4 () Term)
(declare-fun Vale.AES.GCTR_s.pad_to_128_bits@tok () Term)


; </end encoding Vale.AES.GCTR_s.pad_to_128_bits>


; <Start encoding Vale.AES.GCTR_s.gctr_encrypt_LE_def>

(declare-fun Vale.AES.GCTR_s.gctr_encrypt_LE_def (Term Term Term Term) Term)
(declare-fun Tm_refine_d8fce04e8bccfa647d7d1934fc54ffd3 () Term)
(declare-fun Tm_arrow_40234852c19ecf0a34f4dbed69d31c1e () Term)
(declare-fun Vale.AES.GCTR_s.gctr_encrypt_LE_def@tok () Term)


; </end encoding Vale.AES.GCTR_s.gctr_encrypt_LE_def>


; <Start encoding Vale.AES.GCTR_s.gctr_encrypt_LE>

(declare-fun Vale.AES.GCTR_s.gctr_encrypt_LE (Term Term Term Term) Term)


(declare-fun Vale.AES.GCTR_s.gctr_encrypt_LE@tok () Term)


; </end encoding Vale.AES.GCTR_s.gctr_encrypt_LE>


; <Start encoding Vale.AES.GCTR_s.gctr_encrypt_LE_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR_s.gctr_encrypt_LE_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR_s.gctr_encrypt_LE_reveal@tok () Term)

; </end encoding Vale.AES.GCTR_s.gctr_encrypt_LE_reveal>


; End Externals for module Vale.AES.GCTR_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.AES.GCTR_s (61 decls; total size 10127)

;;; Start interface Vale.AES.GCM_helpers

; Externals for interface Vale.AES.GCM_helpers


; <Start encoding Vale.AES.GCM_helpers.bytes_to_quad_size>

(declare-fun Vale.AES.GCM_helpers.bytes_to_quad_size (Term) Term)

(declare-fun Vale.AES.GCM_helpers.bytes_to_quad_size@tok () Term)

; </end encoding Vale.AES.GCM_helpers.bytes_to_quad_size>


; <Start encoding Vale.AES.GCM_helpers.bytes_to_quad_size_no_extra_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCM_helpers.bytes_to_quad_size_no_extra_bytes (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCM_helpers.bytes_to_quad_size_no_extra_bytes@tok () Term)

; </end encoding Vale.AES.GCM_helpers.bytes_to_quad_size_no_extra_bytes>


; <Start encoding Vale.AES.GCM_helpers.no_extra_bytes_helper>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCM_helpers.no_extra_bytes_helper (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCM_helpers.no_extra_bytes_helper@tok () Term)

; </end encoding Vale.AES.GCM_helpers.no_extra_bytes_helper>


; <Start encoding Vale.AES.GCM_helpers.le_seq_quad32_to_bytes_tail_prefix>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCM_helpers.le_seq_quad32_to_bytes_tail_prefix (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCM_helpers.le_seq_quad32_to_bytes_tail_prefix@tok () Term)

; </end encoding Vale.AES.GCM_helpers.le_seq_quad32_to_bytes_tail_prefix>


; <Start encoding Vale.AES.GCM_helpers.pad_to_128_bits_le_quad32_to_bytes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCM_helpers.pad_to_128_bits_le_quad32_to_bytes (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCM_helpers.pad_to_128_bits_le_quad32_to_bytes@tok () Term)

; </end encoding Vale.AES.GCM_helpers.pad_to_128_bits_le_quad32_to_bytes>


; <Start encoding Vale.AES.GCM_helpers.le_quad32_to_bytes_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCM_helpers.le_quad32_to_bytes_sel (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCM_helpers.le_quad32_to_bytes_sel@tok () Term)

; </end encoding Vale.AES.GCM_helpers.le_quad32_to_bytes_sel>


; <Start encoding Vale.AES.GCM_helpers.pad_to_128_bits_lower>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCM_helpers.pad_to_128_bits_lower (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCM_helpers.pad_to_128_bits_lower@tok () Term)

; </end encoding Vale.AES.GCM_helpers.pad_to_128_bits_lower>


; <Start encoding Vale.AES.GCM_helpers.pad_to_128_bits_upper>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCM_helpers.pad_to_128_bits_upper (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCM_helpers.pad_to_128_bits_upper@tok () Term)

; </end encoding Vale.AES.GCM_helpers.pad_to_128_bits_upper>


; End Externals for interface Vale.AES.GCM_helpers


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.GCM_helpers (36 decls; total size 8367)

;;; Start module Vale.AES.GHash_s

; Externals for module Vale.AES.GHash_s


; <Start encoding Vale.AES.GHash_s.ghash_plain_LE>

(declare-fun Vale.AES.GHash_s.ghash_plain_LE (Dummy_sort) Term)
(declare-fun Tm_refine_3cde0f73125500a52bff30114a1a1137 () Term)

; </end encoding Vale.AES.GHash_s.ghash_plain_LE>


; <Start encoding Vale.AES.GHash_s.gf128_mul_LE>

(declare-fun Vale.AES.GHash_s.gf128_mul_LE (Term Term) Term)

(declare-fun Vale.AES.GHash_s.gf128_mul_LE@tok () Term)

; </end encoding Vale.AES.GHash_s.gf128_mul_LE>


; <Start encoding Vale.AES.GHash_s.ghash_LE_def>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented_token () Term)
(declare-fun Vale.AES.GHash_s.ghash_LE_def (Term Term) Term)
(declare-fun Vale.AES.GHash_s.ghash_LE_def@tok () Term)
(declare-fun Tm_arrow_2c9a06145f4c9cb11ab5bc2f32cb793e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.GHash_s.ghash_LE_def; Namespace Vale.AES.GHash_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.GHash_s.fst(19,8-19,20); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.GHash_s.fst(19,8-19,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.GHash_s.ghash_LE_def; Namespace Vale.AES.GHash_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.GHash_s.fst(19,8-19,20); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.AES.GHash_s.fst(19,8-19,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.AES.GHash_s.ghash_LE_def @x0
@x1)
(Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.AES.GHash_s.ghash_LE_def @x0
@x1))
:qid @fuel_correspondence_Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.GHash_s.ghash_LE_def.fuel_instrumented))

; </end encoding Vale.AES.GHash_s.ghash_LE_def>


; <Start encoding Vale.AES.GHash_s.ghash_LE>

(declare-fun Vale.AES.GHash_s.ghash_LE (Term Term) Term)

(declare-fun Vale.AES.GHash_s.ghash_LE@tok () Term)

; </end encoding Vale.AES.GHash_s.ghash_LE>


; <Start encoding Vale.AES.GHash_s.ghash_LE_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash_s.ghash_LE_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash_s.ghash_LE_reveal@tok () Term)

; </end encoding Vale.AES.GHash_s.ghash_LE_reveal>


; End Externals for module Vale.AES.GHash_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.AES.GHash_s (30 decls; total size 8185)

;;; Start interface Vale.AES.GHash

; Externals for interface Vale.AES.GHash


; <Skipped />


; <Start encoding Vale.AES.GHash.poly128>

(declare-fun Vale.AES.GHash.poly128 () Term)
(declare-fun Tm_refine_f54be9bebc70c1c037e0ec20437e5c81 () Term)

; </end encoding Vale.AES.GHash.poly128>


; <Start encoding Vale.AES.GHash.fun_seq_quad32_LE_poly128>

(declare-fun Vale.AES.GHash.fun_seq_quad32_LE_poly128 (Term) Term)
(declare-fun Tm_arrow_15ceef7ed9aea3b9eeb1e60e5343be5b () Term)
(declare-fun Tm_arrow_e08d3fabe0cebf63a55bab906bc9480d () Term)
(declare-fun Vale.AES.GHash.fun_seq_quad32_LE_poly128@tok () Term)


(declare-fun Tm_abs_2a4e5f30c6fdc83783b57e5a74d18144 (Term) Term)

; </end encoding Vale.AES.GHash.fun_seq_quad32_LE_poly128>


; <Start encoding Vale.AES.GHash.ghash_poly>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.GHash.ghash_poly.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.GHash.ghash_poly.fuel_instrumented_token () Term)
(declare-fun Vale.AES.GHash.ghash_poly (Term Term Term Term Term) Term)
(declare-fun Vale.AES.GHash.ghash_poly@tok () Term)



(declare-fun Tm_arrow_0c7fe91adada82db64e3be8080cc0bb1 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.GHash.ghash_poly; Namespace Vale.AES.GHash
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(30,8-30,18); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(30,8-30,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.AES.GHash.ghash_poly.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(Vale.AES.GHash.ghash_poly.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((Vale.AES.GHash.ghash_poly.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_Vale.AES.GHash.ghash_poly.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.GHash.ghash_poly.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.GHash.ghash_poly; Namespace Vale.AES.GHash
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(30,8-30,18); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(30,8-30,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Vale.AES.GHash.ghash_poly @x0
@x1
@x2
@x3
@x4)
(Vale.AES.GHash.ghash_poly.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((Vale.AES.GHash.ghash_poly @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_Vale.AES.GHash.ghash_poly.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.GHash.ghash_poly.fuel_instrumented))

; </end encoding Vale.AES.GHash.ghash_poly>


; <Start encoding Vale.AES.GHash.g_power>

(declare-fun Vale.AES.GHash.g_power (Term Term) Term)

(declare-fun Vale.AES.GHash.g_power@tok () Term)

; </end encoding Vale.AES.GHash.g_power>


; <Start encoding Vale.AES.GHash.lemma_g_power_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_g_power_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_g_power_1@tok () Term)

; </end encoding Vale.AES.GHash.lemma_g_power_1>


; <Start encoding Vale.AES.GHash.lemma_g_power_n>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_g_power_n (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_g_power_n@tok () Term)

; </end encoding Vale.AES.GHash.lemma_g_power_n>


; <Start encoding Vale.AES.GHash.gf128_power>

(declare-fun Vale.AES.GHash.gf128_power (Term Term) Term)

(declare-fun Vale.AES.GHash.gf128_power@tok () Term)

; </end encoding Vale.AES.GHash.gf128_power>


; <Start encoding Vale.AES.GHash.lemma_gf128_power>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_gf128_power (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_gf128_power@tok () Term)

; </end encoding Vale.AES.GHash.lemma_gf128_power>


; <Start encoding Vale.AES.GHash.hkeys_reqs_priv>

(declare-fun Vale.AES.GHash.hkeys_reqs_priv (Term Term) Term)

(declare-fun Vale.AES.GHash.hkeys_reqs_priv@tok () Term)

; </end encoding Vale.AES.GHash.hkeys_reqs_priv>


; <Start encoding Vale.AES.GHash.lemma_hkeys_reqs_pub_priv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_hkeys_reqs_pub_priv (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_hkeys_reqs_pub_priv@tok () Term)

; </end encoding Vale.AES.GHash.lemma_hkeys_reqs_pub_priv>


; <Start encoding Vale.AES.GHash.ghash_unroll>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.GHash.ghash_unroll.fuel_instrumented (Fuel Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.GHash.ghash_unroll.fuel_instrumented_token () Term)
(declare-fun Vale.AES.GHash.ghash_unroll (Term Term Term Term Term Term) Term)
(declare-fun Vale.AES.GHash.ghash_unroll@tok () Term)



(declare-fun Tm_arrow_ca925deaaf90fb735bd52556ccfcc962 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.GHash.ghash_unroll; Namespace Vale.AES.GHash
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(59,8-59,20); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(59,8-59,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Vale.AES.GHash.ghash_unroll.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6)
(Vale.AES.GHash.ghash_unroll.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((Vale.AES.GHash.ghash_unroll.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6))
:qid @fuel_irrelevance_Vale.AES.GHash.ghash_unroll.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.GHash.ghash_unroll.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.GHash.ghash_unroll; Namespace Vale.AES.GHash
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(59,8-59,20); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(59,8-59,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.AES.GHash.ghash_unroll @x0
@x1
@x2
@x3
@x4
@x5)
(Vale.AES.GHash.ghash_unroll.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((Vale.AES.GHash.ghash_unroll @x0
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_correspondence_Vale.AES.GHash.ghash_unroll.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.GHash.ghash_unroll.fuel_instrumented))

; </end encoding Vale.AES.GHash.ghash_unroll>


; <Start encoding Vale.AES.GHash.ghash_unroll_back>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.GHash.ghash_unroll_back.fuel_instrumented (Fuel Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.GHash.ghash_unroll_back.fuel_instrumented_token () Term)
(declare-fun Vale.AES.GHash.ghash_unroll_back (Term Term Term Term Term Term) Term)
(declare-fun Vale.AES.GHash.ghash_unroll_back@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.GHash.ghash_unroll_back; Namespace Vale.AES.GHash
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(66,8-66,25); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(66,8-66,25)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Vale.AES.GHash.ghash_unroll_back.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6)
(Vale.AES.GHash.ghash_unroll_back.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((Vale.AES.GHash.ghash_unroll_back.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6))
:qid @fuel_irrelevance_Vale.AES.GHash.ghash_unroll_back.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.GHash.ghash_unroll_back.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.GHash.ghash_unroll_back; Namespace Vale.AES.GHash
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(66,8-66,25); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(66,8-66,25)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.AES.GHash.ghash_unroll_back @x0
@x1
@x2
@x3
@x4
@x5)
(Vale.AES.GHash.ghash_unroll_back.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((Vale.AES.GHash.ghash_unroll_back @x0
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_correspondence_Vale.AES.GHash.ghash_unroll_back.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.GHash.ghash_unroll_back.fuel_instrumented))

; </end encoding Vale.AES.GHash.ghash_unroll_back>


; <Start encoding Vale.AES.GHash.lemma_ghash_unroll_back_forward>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_unroll_back_forward (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_unroll_back_forward@tok () Term)

; </end encoding Vale.AES.GHash.lemma_ghash_unroll_back_forward>


; <Start encoding Vale.AES.GHash.lemma_ghash_poly_degree>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_poly_degree (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_poly_degree@tok () Term)


; </end encoding Vale.AES.GHash.lemma_ghash_poly_degree>


; <Start encoding Vale.AES.GHash.lemma_ghash_poly_of_unroll>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_poly_of_unroll (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_poly_of_unroll@tok () Term)

; </end encoding Vale.AES.GHash.lemma_ghash_poly_of_unroll>


; <Start encoding Vale.AES.GHash.lemma_add_manip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_add_manip (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_add_manip@tok () Term)

; </end encoding Vale.AES.GHash.lemma_add_manip>


; <Start encoding Vale.AES.GHash.ghash_incremental_def>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.GHash.ghash_incremental_def.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.GHash.ghash_incremental_def.fuel_instrumented_token () Term)
(declare-fun Vale.AES.GHash.ghash_incremental_def (Term Term Term) Term)
(declare-fun Vale.AES.GHash.ghash_incremental_def@tok () Term)
(declare-fun Tm_arrow_05e0cba04fd3243b43ad0832f9e8ded1 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.GHash.ghash_incremental_def; Namespace Vale.AES.GHash
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(103,8-103,29); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(103,8-103,29)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.AES.GHash.ghash_incremental_def.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(Vale.AES.GHash.ghash_incremental_def.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((Vale.AES.GHash.ghash_incremental_def.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_Vale.AES.GHash.ghash_incremental_def.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.GHash.ghash_incremental_def.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.GHash.ghash_incremental_def; Namespace Vale.AES.GHash
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(103,8-103,29); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GHash.fsti(103,8-103,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.AES.GHash.ghash_incremental_def @x0
@x1
@x2)
(Vale.AES.GHash.ghash_incremental_def.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((Vale.AES.GHash.ghash_incremental_def @x0
@x1
@x2))
:qid @fuel_correspondence_Vale.AES.GHash.ghash_incremental_def.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.GHash.ghash_incremental_def.fuel_instrumented))

; </end encoding Vale.AES.GHash.ghash_incremental_def>


; <Start encoding Vale.AES.GHash.ghash_incremental>

(declare-fun Vale.AES.GHash.ghash_incremental (Term Term Term) Term)

(declare-fun Vale.AES.GHash.ghash_incremental@tok () Term)

; </end encoding Vale.AES.GHash.ghash_incremental>


; <Start encoding Vale.AES.GHash.ghash_incremental_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.ghash_incremental_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.ghash_incremental_reveal@tok () Term)

; </end encoding Vale.AES.GHash.ghash_incremental_reveal>


; <Start encoding Vale.AES.GHash.lemma_ghash_incremental_poly>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental_poly (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental_poly@tok () Term)

; </end encoding Vale.AES.GHash.lemma_ghash_incremental_poly>


; <Start encoding Vale.AES.GHash.lemma_ghash_incremental_def_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental_def_0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental_def_0@tok () Term)

; </end encoding Vale.AES.GHash.lemma_ghash_incremental_def_0>


; <Start encoding Vale.AES.GHash.ghash_incremental_to_ghash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.ghash_incremental_to_ghash (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.ghash_incremental_to_ghash@tok () Term)

; </end encoding Vale.AES.GHash.ghash_incremental_to_ghash>


; <Start encoding Vale.AES.GHash.lemma_hash_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_hash_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_hash_append@tok () Term)

; </end encoding Vale.AES.GHash.lemma_hash_append>


; <Start encoding Vale.AES.GHash.ghash_incremental0>

(declare-fun Vale.AES.GHash.ghash_incremental0 (Term Term Term) Term)

(declare-fun Vale.AES.GHash.ghash_incremental0@tok () Term)

; </end encoding Vale.AES.GHash.ghash_incremental0>


; <Start encoding Vale.AES.GHash.lemma_ghash_incremental0_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental0_append (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental0_append@tok () Term)

; </end encoding Vale.AES.GHash.lemma_ghash_incremental0_append>


; <Start encoding Vale.AES.GHash.lemma_hash_append2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_hash_append2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_hash_append2@tok () Term)

; </end encoding Vale.AES.GHash.lemma_hash_append2>


; <Start encoding Vale.AES.GHash.lemma_hash_append3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_hash_append3 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_hash_append3@tok () Term)

; </end encoding Vale.AES.GHash.lemma_hash_append3>


; <Start encoding Vale.AES.GHash.ghash_incremental_bytes_pure_no_extra>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.ghash_incremental_bytes_pure_no_extra (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.ghash_incremental_bytes_pure_no_extra@tok () Term)

; </end encoding Vale.AES.GHash.ghash_incremental_bytes_pure_no_extra>


; <Skipped />


; <Start encoding Vale.AES.GHash.lemma_ghash_incremental_bytes_extra_helper>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental_bytes_extra_helper (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental_bytes_extra_helper@tok () Term)

; </end encoding Vale.AES.GHash.lemma_ghash_incremental_bytes_extra_helper>


; <Start encoding Vale.AES.GHash.lemma_ghash_incremental_bytes_extra_helper_alt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental_bytes_extra_helper_alt (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_incremental_bytes_extra_helper_alt@tok () Term)

; </end encoding Vale.AES.GHash.lemma_ghash_incremental_bytes_extra_helper_alt>


; <Start encoding Vale.AES.GHash.lemma_ghash_registers>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_registers (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GHash.lemma_ghash_registers@tok () Term)

; </end encoding Vale.AES.GHash.lemma_ghash_registers>


; End Externals for interface Vale.AES.GHash


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.GHash (169 decls; total size 23531)

;;; Start module Vale.X64.CPU_Features_s

; Externals for module Vale.X64.CPU_Features_s


; <Start encoding Vale.X64.CPU_Features_s.aesni_enabled>

(declare-fun Vale.X64.CPU_Features_s.aesni_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.aesni_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx_cpuid_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx_cpuid_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx_cpuid_enabled>


; <Start encoding Vale.X64.CPU_Features_s.pclmulqdq_enabled>

(declare-fun Vale.X64.CPU_Features_s.pclmulqdq_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.pclmulqdq_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx2_cpuid_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx2_cpuid_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx2_cpuid_enabled>


; <Start encoding Vale.X64.CPU_Features_s.bmi2_enabled>

(declare-fun Vale.X64.CPU_Features_s.bmi2_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.bmi2_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx512f_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx512f_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx512f_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx512dq_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx512dq_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx512dq_enabled>


; <Start encoding Vale.X64.CPU_Features_s.adx_enabled>

(declare-fun Vale.X64.CPU_Features_s.adx_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.adx_enabled>


; <Start encoding Vale.X64.CPU_Features_s.sha_enabled>

(declare-fun Vale.X64.CPU_Features_s.sha_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.sha_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx512bw_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx512bw_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx512bw_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx512vl_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx512vl_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx512vl_enabled>


; <Start encoding Vale.X64.CPU_Features_s.sse2_enabled>

(declare-fun Vale.X64.CPU_Features_s.sse2_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.sse2_enabled>


; <Start encoding Vale.X64.CPU_Features_s.ssse3_enabled>

(declare-fun Vale.X64.CPU_Features_s.ssse3_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.ssse3_enabled>


; <Start encoding Vale.X64.CPU_Features_s.sse4_1_enabled>

(declare-fun Vale.X64.CPU_Features_s.sse4_1_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.sse4_1_enabled>


; <Start encoding Vale.X64.CPU_Features_s.movbe_enabled>

(declare-fun Vale.X64.CPU_Features_s.movbe_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.movbe_enabled>


; <Start encoding Vale.X64.CPU_Features_s.osxsave_enabled>

(declare-fun Vale.X64.CPU_Features_s.osxsave_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.osxsave_enabled>


; <Start encoding Vale.X64.CPU_Features_s.rdrand_enabled>

(declare-fun Vale.X64.CPU_Features_s.rdrand_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.rdrand_enabled>


; <Start encoding Vale.X64.CPU_Features_s.sse_enabled>

(declare-fun Vale.X64.CPU_Features_s.sse_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.sse_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx512_cpuid_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx512_cpuid_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx512_cpuid_enabled>


; <Start encoding Vale.X64.CPU_Features_s.cpuid>

(declare-fun Vale.X64.CPU_Features_s.cpuid (Term Term Term) Term)
(declare-fun Tm_arrow_72d88468cd145c9d73e7351dfbe1b820 () Term)
(declare-fun Vale.X64.CPU_Features_s.cpuid@tok () Term)

; </end encoding Vale.X64.CPU_Features_s.cpuid>


; <Start encoding Vale.X64.CPU_Features_s.cpuid_features>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.CPU_Features_s.cpuid_features (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.CPU_Features_s.cpuid_features@tok () Term)

; </end encoding Vale.X64.CPU_Features_s.cpuid_features>


; <Start encoding Vale.X64.CPU_Features_s.sse_xcr0_enabled>

(declare-fun Vale.X64.CPU_Features_s.sse_xcr0_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.sse_xcr0_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx_xcr0_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx_xcr0_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx_xcr0_enabled>


; <Start encoding Vale.X64.CPU_Features_s.opmask_xcr0_enabled>

(declare-fun Vale.X64.CPU_Features_s.opmask_xcr0_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.opmask_xcr0_enabled>


; <Start encoding Vale.X64.CPU_Features_s.zmm_hi256_xcr0_enabled>

(declare-fun Vale.X64.CPU_Features_s.zmm_hi256_xcr0_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.zmm_hi256_xcr0_enabled>


; <Start encoding Vale.X64.CPU_Features_s.hi16_zmm_xcr0_enabled>

(declare-fun Vale.X64.CPU_Features_s.hi16_zmm_xcr0_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.hi16_zmm_xcr0_enabled>


; <Start encoding Vale.X64.CPU_Features_s.xgetbv>

(declare-fun Vale.X64.CPU_Features_s.xgetbv (Term Term) Term)
(declare-fun Tm_arrow_ba7ad5eacc0bd2eea4aa740e99d33fb3 () Term)
(declare-fun Vale.X64.CPU_Features_s.xgetbv@tok () Term)

; </end encoding Vale.X64.CPU_Features_s.xgetbv>


; <Start encoding Vale.X64.CPU_Features_s.xgetbv_features>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.CPU_Features_s.xgetbv_features (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.CPU_Features_s.xgetbv_features@tok () Term)

; </end encoding Vale.X64.CPU_Features_s.xgetbv_features>


; <Start encoding Vale.X64.CPU_Features_s.avx_xcr0>

(declare-fun Vale.X64.CPU_Features_s.avx_xcr0 (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx_xcr0>


; <Start encoding Vale.X64.CPU_Features_s.avx512_xcr0>

(declare-fun Vale.X64.CPU_Features_s.avx512_xcr0 (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx512_xcr0>


; <Start encoding Vale.X64.CPU_Features_s.avx_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx2_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx2_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx2_enabled>


; <Start encoding Vale.X64.CPU_Features_s.avx512_enabled>

(declare-fun Vale.X64.CPU_Features_s.avx512_enabled (Dummy_sort) Term)

; </end encoding Vale.X64.CPU_Features_s.avx512_enabled>


; End Externals for module Vale.X64.CPU_Features_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.X64.CPU_Features_s (108 decls; total size 12106)

;;; Start interface Vale.X64.Regs

; Externals for interface Vale.X64.Regs


; <Start encoding Vale.X64.Regs.regs_fun>

(declare-fun Vale.X64.Regs.regs_fun () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.Regs.regs_fun; Namespace Vale.X64.Regs
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.Machine_s.t_reg@tok))
:named @kick_partial_app_a27866a061695add61492e7fad703f39))

; </end encoding Vale.X64.Regs.regs_fun>


; <Start encoding Vale.X64.Regs.regs_def>

(declare-fun Vale.X64.Regs.regs_def () Term)

; </end encoding Vale.X64.Regs.regs_def>


; <Start encoding Vale.X64.Regs.t>

(declare-fun Vale.X64.Regs.t () Term)

; </end encoding Vale.X64.Regs.t>


; <Start encoding Vale.X64.Regs.sel>

(declare-fun Vale.X64.Regs.sel (Term Term) Term)
(declare-fun Tm_arrow_ad231330febd9e08dd5d04c67fcdb74b () Term)
(declare-fun Vale.X64.Regs.sel@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.Regs.sel; Namespace Vale.X64.Regs
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(16,4-16,7); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(16,4-16,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Vale.X64.Machine_s.reg)
(HasType @x1
Vale.X64.Regs.t))
(HasType (Vale.X64.Regs.sel @x0
@x1)
(Vale.X64.Machine_s.t_reg @x0)))
 

:pattern ((Vale.X64.Regs.sel @x0
@x1))
:qid typing_Vale.X64.Regs.sel))

:named typing_Vale.X64.Regs.sel))

; </end encoding Vale.X64.Regs.sel>


; <Start encoding Vale.X64.Regs.upd>

(declare-fun Vale.X64.Regs.upd (Term Term Term) Term)
(declare-fun Tm_arrow_e5047b68d2a0b6a5fe4e7f279325035c () Term)
(declare-fun Vale.X64.Regs.upd@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.Regs.upd; Namespace Vale.X64.Regs
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(24,4-24,7); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(24,4-24,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Vale.X64.Machine_s.reg)
(HasType @x1
(Vale.X64.Machine_s.t_reg @x0))
(HasType @x2
Vale.X64.Regs.t))
(HasType (Vale.X64.Regs.upd @x0
@x1
@x2)
Vale.X64.Regs.t))
 

:pattern ((Vale.X64.Regs.upd @x0
@x1
@x2))
:qid typing_Vale.X64.Regs.upd))

:named typing_Vale.X64.Regs.upd))

; </end encoding Vale.X64.Regs.upd>


; <Start encoding Vale.X64.Regs.eta_sel>

(declare-fun Vale.X64.Regs.eta_sel (Term Term) Term)
(declare-fun Tm_refine_f9ad94596474231e26a90e389b8461f6 (Term Term) Term)
(declare-fun Tm_arrow_d878603db523ac11921881260c262b4e () Term)
(declare-fun Vale.X64.Regs.eta_sel@tok () Term)


; </end encoding Vale.X64.Regs.eta_sel>


; <Start encoding Vale.X64.Regs.eta>

(declare-fun Vale.X64.Regs.eta (Term) Term)
(declare-fun Tm_arrow_7bb2be8e25bf1ab306e2d5f2a729f465 () Term)
(declare-fun Vale.X64.Regs.eta@tok () Term)

; </end encoding Vale.X64.Regs.eta>


; <Start encoding Vale.X64.Regs.to_fun>

(declare-fun Vale.X64.Regs.to_fun (Term) Term)
(declare-fun Tm_arrow_883f30b009e9dcc8eebec446400c8303 () Term)
(declare-fun Vale.X64.Regs.to_fun@tok () Term)

(declare-fun Tm_arrow_ef1cb164cb5e999e95914068a32c6a77 () Term)
(declare-fun Tm_abs_6c306f6a24efa681d9f42f76d1aa10ba (Term) Term)

; </end encoding Vale.X64.Regs.to_fun>


; <Start encoding Vale.X64.Regs.of_fun>


(declare-fun Vale.X64.Regs.of_fun (Term) Term)

(declare-fun Tm_refine_3b1a603d57602642cd8cec1a9fa6b2c7 (Term) Term)
(declare-fun Tm_arrow_59cf4c1fb841fa5e5f8ccceca9af6d8e () Term)
(declare-fun Vale.X64.Regs.of_fun@tok () Term)


; </end encoding Vale.X64.Regs.of_fun>


; <Start encoding Vale.X64.Regs.lemma_upd_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Regs.lemma_upd_eq (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Regs.lemma_upd_eq@tok () Term)

; </end encoding Vale.X64.Regs.lemma_upd_eq>


; <Start encoding Vale.X64.Regs.lemma_upd_ne>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Regs.lemma_upd_ne (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Regs.lemma_upd_ne@tok () Term)

; </end encoding Vale.X64.Regs.lemma_upd_ne>


; <Start encoding Vale.X64.Regs.equal>

(declare-fun Vale.X64.Regs.equal (Term Term) Term)
(declare-fun Tm_arrow_12905813aae67ef1c209a79ec2daef07 () Term)
(declare-fun Vale.X64.Regs.equal@tok () Term)

; </end encoding Vale.X64.Regs.equal>


; <Start encoding Vale.X64.Regs.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Regs.lemma_equal_intro (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Regs.lemma_equal_intro@tok () Term)

; </end encoding Vale.X64.Regs.lemma_equal_intro>


; <Start encoding Vale.X64.Regs.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Regs.lemma_equal_elim (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Regs.lemma_equal_elim@tok () Term)
;;;;;;;;;;;;;;;;Lemma: Vale.X64.Regs.lemma_equal_elim
;;; Fact-ids: Name Vale.X64.Regs.lemma_equal_elim; Namespace Vale.X64.Regs
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Vale.X64.Regs.t)
(HasType @x1
Vale.X64.Regs.t)

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(77,12-77,29); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(77,12-77,29)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(77,12-77,29); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(77,12-77,29)
(Vale.X64.Regs.equal @x0
@x1)
)
)

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(78,11-78,25); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Regs.fsti(78,11-78,25)
(= @x0
@x1)
)
 

:pattern ((Vale.X64.Regs.equal @x0
@x1))
:qid lemma_Vale.X64.Regs.lemma_equal_elim))
:named lemma_Vale.X64.Regs.lemma_equal_elim))

; </end encoding Vale.X64.Regs.lemma_equal_elim>


; <Start encoding Vale.X64.Regs.lemma_eta>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Regs.lemma_eta (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Regs.lemma_eta@tok () Term)

; </end encoding Vale.X64.Regs.lemma_eta>


; End Externals for interface Vale.X64.Regs


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.Regs (80 decls; total size 11623)

;;; Start module FStar.Monotonic.Pure

; Externals for module FStar.Monotonic.Pure


; <Start encoding FStar.Monotonic.Pure.is_monotonic>

(declare-fun FStar.Monotonic.Pure.is_monotonic (Term Term) Term)

(declare-fun FStar.Monotonic.Pure.is_monotonic@tok () Term)









; </end encoding FStar.Monotonic.Pure.is_monotonic>


; <Start encoding FStar.Monotonic.Pure.elim_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity@tok () Term)

; </end encoding FStar.Monotonic.Pure.elim_pure_wp_monotonicity>


; <Start encoding FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall@tok () Term)

; </end encoding FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall>


; <Start encoding FStar.Monotonic.Pure.intro_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity@tok () Term)

; </end encoding FStar.Monotonic.Pure.intro_pure_wp_monotonicity>


; <Start encoding FStar.Monotonic.Pure.as_pure_wp>

(declare-fun FStar.Monotonic.Pure.as_pure_wp (Term Term) Term)
(declare-fun Tm_refine_5578b11cc349512589a3d2a8bfe37c29 (Term Term) Term)
(declare-fun Tm_arrow_169997680175178f95069b947929b45b () Term)
(declare-fun FStar.Monotonic.Pure.as_pure_wp@tok () Term)


; </end encoding FStar.Monotonic.Pure.as_pure_wp>


; <Start encoding FStar.Monotonic.Pure.elim_pure>



(declare-fun Tm_arrow_61bb9550f39772f18eaab129c43c3788 (Term) Term)
(declare-fun Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 (Term Term) Term)
(declare-fun Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 (Term Term) Term)



(declare-fun Tm_abs_735bfa0400a12573ed48312f042e45e7 (Term) Term)
(declare-fun Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd (Term Term) Term)
(declare-fun FStar.Monotonic.Pure.elim_pure (Term Term Term Term) Term)











(declare-fun Tm_arrow_08f6df717f4cfecbf9659e86cd16d49b () Term)
(declare-fun FStar.Monotonic.Pure.elim_pure@tok () Term)












; </end encoding FStar.Monotonic.Pure.elim_pure>


; End Externals for module FStar.Monotonic.Pure


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module FStar.Monotonic.Pure (72 decls; total size 7750)

;;; Start interface FStar.BigOps

; Externals for interface FStar.BigOps


; <Start encoding FStar.BigOps.__reduce__>

(declare-fun FStar.BigOps.__reduce__ (Dummy_sort) Term)

; </end encoding FStar.BigOps.__reduce__>


; <Start encoding FStar.BigOps.normal>

(declare-fun FStar.BigOps.normal (Term Term) Term)

(declare-fun FStar.BigOps.normal@tok () Term)

; </end encoding FStar.BigOps.normal>


; <Start encoding FStar.BigOps.normal_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.normal_eq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.normal_eq@tok () Term)

; </end encoding FStar.BigOps.normal_eq>


; <Start encoding FStar.BigOps.map_op'>



(declare-fun FStar.BigOps.map_op_ (Term Term Term Term Term Term Term) Term)


(declare-fun Tm_ghost_arrow_5175d6b8aaa87ad5985a728f8e0304a4 () Term)
(declare-fun FStar.BigOps.map_op_@tok () Term)



(declare-fun Tm_abs_84d777d109851c58da209e2a4a34fb6f (Term Term Term Term) Term)

; </end encoding FStar.BigOps.map_op'>


; <Start encoding FStar.BigOps.map_op'_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.map_op__nil (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.map_op__nil@tok () Term)

; </end encoding FStar.BigOps.map_op'_nil>


; <Start encoding FStar.BigOps.map_op'_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.map_op__cons (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.map_op__cons@tok () Term)

; </end encoding FStar.BigOps.map_op'_cons>


; <Start encoding FStar.BigOps.big_and'>


(declare-fun FStar.BigOps.big_and_ (Term Term Term) Term)

(declare-fun Tm_arrow_e873d8ceceaa83cda2609338157fecb6 () Term)
(declare-fun FStar.BigOps.big_and_@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.BigOps.big_and'; Namespace FStar.BigOps
(assert (! (Valid (ApplyTT __uu__PartialApp
Prims.l_and@tok))
:named @kick_partial_app_b075726243eeb905be2a38368bb95dd6))

; </end encoding FStar.BigOps.big_and'>


; <Start encoding FStar.BigOps.big_and'_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.big_and__nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.big_and__nil@tok () Term)

; </end encoding FStar.BigOps.big_and'_nil>


; <Start encoding FStar.BigOps.big_and'_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.big_and__cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.big_and__cons@tok () Term)

; </end encoding FStar.BigOps.big_and'_cons>


; <Start encoding FStar.BigOps.big_and'_prop>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.big_and__prop (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.big_and__prop@tok () Term)

; </end encoding FStar.BigOps.big_and'_prop>


; <Start encoding FStar.BigOps.big_and'_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.big_and__forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.big_and__forall@tok () Term)

; </end encoding FStar.BigOps.big_and'_forall>


; <Start encoding FStar.BigOps.big_and>


(declare-fun FStar.BigOps.big_and (Term Term Term) Term)

(declare-fun Tm_arrow_e98e3a8ab4e98f2897e121257d806d34 () Term)
(declare-fun FStar.BigOps.big_and@tok () Term)

(declare-fun Tm_arrow_cd4d1dbe6cb1e82887be0d046c3880d1 (Term) Term)
(declare-fun Tm_abs_83fc5b4e600334821fe82579d338f6c7 (Term Term) Term)

; </end encoding FStar.BigOps.big_and>


; <Start encoding FStar.BigOps.big_or'>


(declare-fun FStar.BigOps.big_or_ (Term Term Term) Term)


(declare-fun FStar.BigOps.big_or_@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.BigOps.big_or'; Namespace FStar.BigOps
(assert (! (Valid (ApplyTT __uu__PartialApp
Prims.l_or@tok))
:named @kick_partial_app_bc68f55160436cc7bace85b355e140f7))

; </end encoding FStar.BigOps.big_or'>


; <Start encoding FStar.BigOps.big_or'_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.big_or__nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.big_or__nil@tok () Term)

; </end encoding FStar.BigOps.big_or'_nil>


; <Start encoding FStar.BigOps.big_or'_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.big_or__cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.big_or__cons@tok () Term)

; </end encoding FStar.BigOps.big_or'_cons>


; <Start encoding FStar.BigOps.big_or'_prop>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.big_or__prop (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.big_or__prop@tok () Term)

; </end encoding FStar.BigOps.big_or'_prop>


; <Start encoding FStar.BigOps.big_or'_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.big_or__exists (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.big_or__exists@tok () Term)

; </end encoding FStar.BigOps.big_or'_exists>


; <Start encoding FStar.BigOps.big_or>


(declare-fun FStar.BigOps.big_or (Term Term Term) Term)


(declare-fun FStar.BigOps.big_or@tok () Term)


(declare-fun Tm_abs_362099f3e90de77d5057c72819919ae4 (Term Term) Term)

; </end encoding FStar.BigOps.big_or>


; <Start encoding FStar.BigOps.pairwise_op'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BigOps.pairwise_op_.fuel_instrumented (Fuel Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BigOps.pairwise_op_.fuel_instrumented_token () Term)
(declare-fun FStar.BigOps.pairwise_op_ (Term Term Term Term Term Term) Term)
(declare-fun FStar.BigOps.pairwise_op_@tok () Term)
(declare-fun Tm_ghost_arrow_4893cf450fdcb12f9a707dc878f6dac3 (Term) Term)





(declare-fun Tm_ghost_arrow_5479df6f0f5c1abb82fddcdbde37c7c2 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BigOps.pairwise_op'; Namespace FStar.BigOps
(assert (! 
;; def=FStar.BigOps.fsti(177,8-177,20); use=FStar.BigOps.fsti(177,8-177,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.BigOps.pairwise_op_.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.BigOps.pairwise_op_.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((FStar.BigOps.pairwise_op_.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6))
:qid @fuel_irrelevance_FStar.BigOps.pairwise_op_.fuel_instrumented))

:named @fuel_irrelevance_FStar.BigOps.pairwise_op_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BigOps.pairwise_op'; Namespace FStar.BigOps
(assert (! 
;; def=FStar.BigOps.fsti(177,8-177,20); use=FStar.BigOps.fsti(177,8-177,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.BigOps.pairwise_op_ @x0
@x1
@x2
@x3
@x4
@x5)
(FStar.BigOps.pairwise_op_.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.BigOps.pairwise_op_ @x0
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_correspondence_FStar.BigOps.pairwise_op_.fuel_instrumented))

:named @fuel_correspondence_FStar.BigOps.pairwise_op_.fuel_instrumented))

; </end encoding FStar.BigOps.pairwise_op'>


; <Start encoding FStar.BigOps.symmetric>


(declare-fun FStar.BigOps.symmetric (Term Term) Term)

(declare-fun Tm_arrow_e22f73890b9e7636d758b483baa50870 () Term)
(declare-fun FStar.BigOps.symmetric@tok () Term)


(declare-fun Tm_abs_8cc9f0ac207bc00b51efcc0db105398d (Term Term Term) Term)

(declare-fun Tm_abs_60b9c881e2d6a767f57d71aedcae4635 (Term Term) Term)

; </end encoding FStar.BigOps.symmetric>


; <Start encoding FStar.BigOps.reflexive>


(declare-fun FStar.BigOps.reflexive (Term Term) Term)


(declare-fun FStar.BigOps.reflexive@tok () Term)





; </end encoding FStar.BigOps.reflexive>


; <Start encoding FStar.BigOps.anti_reflexive>


(declare-fun FStar.BigOps.anti_reflexive (Term Term) Term)


(declare-fun FStar.BigOps.anti_reflexive@tok () Term)


(declare-fun Tm_abs_3fd0105a30e88f5151e88f442a21cb79 (Term Term) Term)

; </end encoding FStar.BigOps.anti_reflexive>


; <Start encoding FStar.BigOps.pairwise_and'>


(declare-fun FStar.BigOps.pairwise_and_ (Term Term Term) Term)

(declare-fun Tm_arrow_2a12734a60ac29aabed4542839b69d60 () Term)
(declare-fun FStar.BigOps.pairwise_and_@tok () Term)



; </end encoding FStar.BigOps.pairwise_and'>


; <Start encoding FStar.BigOps.pairwise_and'_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_and__nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_and__nil@tok () Term)

; </end encoding FStar.BigOps.pairwise_and'_nil>


; <Start encoding FStar.BigOps.pairwise_and'_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_and__cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_and__cons@tok () Term)

; </end encoding FStar.BigOps.pairwise_and'_cons>


; <Start encoding FStar.BigOps.pairwise_and'_prop>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_and__prop (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_and__prop@tok () Term)

; </end encoding FStar.BigOps.pairwise_and'_prop>


; <Start encoding FStar.BigOps.pairwise_and'_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_and__forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_and__forall@tok () Term)

; </end encoding FStar.BigOps.pairwise_and'_forall>


; <Start encoding FStar.BigOps.pairwise_and'_forall_no_repeats>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_and__forall_no_repeats (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_and__forall_no_repeats@tok () Term)

; </end encoding FStar.BigOps.pairwise_and'_forall_no_repeats>


; <Start encoding FStar.BigOps.pairwise_and>


(declare-fun FStar.BigOps.pairwise_and (Term Term Term) Term)

(declare-fun Tm_arrow_0a5519c925d8d5a2d5d9a5ddf82fcee9 () Term)
(declare-fun FStar.BigOps.pairwise_and@tok () Term)




; </end encoding FStar.BigOps.pairwise_and>


; <Start encoding FStar.BigOps.pairwise_or'>


(declare-fun FStar.BigOps.pairwise_or_ (Term Term Term) Term)


(declare-fun FStar.BigOps.pairwise_or_@tok () Term)



; </end encoding FStar.BigOps.pairwise_or'>


; <Start encoding FStar.BigOps.pairwise_or'_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_or__nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_or__nil@tok () Term)

; </end encoding FStar.BigOps.pairwise_or'_nil>


; <Start encoding FStar.BigOps.pairwise_or'_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_or__cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_or__cons@tok () Term)

; </end encoding FStar.BigOps.pairwise_or'_cons>


; <Start encoding FStar.BigOps.pairwise_or'_prop>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_or__prop (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_or__prop@tok () Term)

; </end encoding FStar.BigOps.pairwise_or'_prop>


; <Start encoding FStar.BigOps.pairwise_or'_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_or__exists (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_or__exists@tok () Term)

; </end encoding FStar.BigOps.pairwise_or'_exists>


; <Start encoding FStar.BigOps.pairwise_or'_exists_no_repeats>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BigOps.pairwise_or__exists_no_repeats (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BigOps.pairwise_or__exists_no_repeats@tok () Term)

; </end encoding FStar.BigOps.pairwise_or'_exists_no_repeats>


; <Start encoding FStar.BigOps.pairwise_or>


(declare-fun FStar.BigOps.pairwise_or (Term Term Term) Term)


(declare-fun FStar.BigOps.pairwise_or@tok () Term)




; </end encoding FStar.BigOps.pairwise_or>


; End Externals for interface FStar.BigOps


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface FStar.BigOps (232 decls; total size 18562)

;;; Start interface Vale.Arch.HeapImpl

; Externals for interface Vale.Arch.HeapImpl


; <Start encoding Vale.Arch.HeapImpl.heaplet_id>

(declare-fun Vale.Arch.HeapImpl.heaplet_id () Term)

;;;;;;;;;;;;;;;;Equation for Vale.Arch.HeapImpl.heaplet_id
;;; Fact-ids: Name Vale.Arch.HeapImpl.heaplet_id; Namespace Vale.Arch.HeapImpl
(assert (! (= Vale.Arch.HeapImpl.heaplet_id
Tm_refine_c365eb902b454950de62fba701d9049d)
:named equation_Vale.Arch.HeapImpl.heaplet_id))

; </end encoding Vale.Arch.HeapImpl.heaplet_id>


; <Start encoding Vale.Arch.HeapImpl.buffer>

(declare-fun Vale.Arch.HeapImpl.buffer (Term) Term)
(declare-fun Tm_arrow_be30a885a8be2e239b3017c936ef2b39 () Term)
(declare-fun Vale.Arch.HeapImpl.buffer@tok () Term)

; </end encoding Vale.Arch.HeapImpl.buffer>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.mutability () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.Mutable () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mutable
(declare-fun Vale.Arch.HeapImpl.Mutable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.Immutable () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Immutable
(declare-fun Vale.Arch.HeapImpl.Immutable@tok () Term)

; <Start encoding Vale.Arch.HeapImpl.mutability>


; <start constructor Vale.Arch.HeapImpl.mutability>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.mutability ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
104)
(= __@x0
Vale.Arch.HeapImpl.mutability)))

; </end constructor Vale.Arch.HeapImpl.mutability>


; </end encoding Vale.Arch.HeapImpl.mutability>


; <Start encoding Vale.Arch.HeapImpl.Mutable>


; <start constructor Vale.Arch.HeapImpl.Mutable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.Mutable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
110)
(= __@x0
Vale.Arch.HeapImpl.Mutable)))

; </end constructor Vale.Arch.HeapImpl.Mutable>


; </end encoding Vale.Arch.HeapImpl.Mutable>


; <Start encoding Vale.Arch.HeapImpl.Immutable>


; <start constructor Vale.Arch.HeapImpl.Immutable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.Immutable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
Vale.Arch.HeapImpl.Immutable)))

; </end constructor Vale.Arch.HeapImpl.Immutable>


; </end encoding Vale.Arch.HeapImpl.Immutable>


; </end encoding >


; <Start encoding Vale.Arch.HeapImpl.mutability__uu___haseq>


; </end encoding Vale.Arch.HeapImpl.mutability__uu___haseq>


; <Start encoding Vale.Arch.HeapImpl.uu___is_Mutable>

(declare-fun Vale.Arch.HeapImpl.uu___is_Mutable (Term) Term)
(declare-fun Tm_arrow_9fd2e0ce687ec24550f1ad38121e60a4 () Term)
(declare-fun Vale.Arch.HeapImpl.uu___is_Mutable@tok () Term)

; </end encoding Vale.Arch.HeapImpl.uu___is_Mutable>


; <Skipped Vale.Arch.HeapImpl.uu___is_Mutable/>


; <Start encoding Vale.Arch.HeapImpl.uu___is_Immutable>

(declare-fun Vale.Arch.HeapImpl.uu___is_Immutable (Term) Term)

(declare-fun Vale.Arch.HeapImpl.uu___is_Immutable@tok () Term)

; </end encoding Vale.Arch.HeapImpl.uu___is_Immutable>


; <Skipped Vale.Arch.HeapImpl.uu___is_Immutable/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.buffer_info () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.Mkbuffer_info (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkbuffer_info_bi_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkbuffer_info_bi_buffer (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkbuffer_info_bi_heaplet (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkbuffer_info_bi_taint (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkbuffer_info_bi_mutable (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkbuffer_info
(declare-fun Vale.Arch.HeapImpl.Mkbuffer_info@tok () Term)
(declare-fun Tm_arrow_69fab4e3e5730e069a727d7f507c9f02 () Term)

; <Start encoding Vale.Arch.HeapImpl.buffer_info>


; <start constructor Vale.Arch.HeapImpl.buffer_info>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.buffer_info ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
Vale.Arch.HeapImpl.buffer_info)))

; </end constructor Vale.Arch.HeapImpl.buffer_info>


; </end encoding Vale.Arch.HeapImpl.buffer_info>


; <Start encoding Vale.Arch.HeapImpl.Mkbuffer_info>


; <start constructor Vale.Arch.HeapImpl.Mkbuffer_info>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.Mkbuffer_info ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
123)
(= __@x0
(Vale.Arch.HeapImpl.Mkbuffer_info (Vale.Arch.HeapImpl.Mkbuffer_info_bi_typ __@x0)
(Vale.Arch.HeapImpl.Mkbuffer_info_bi_buffer __@x0)
(Vale.Arch.HeapImpl.Mkbuffer_info_bi_heaplet __@x0)
(Vale.Arch.HeapImpl.Mkbuffer_info_bi_taint __@x0)
(Vale.Arch.HeapImpl.Mkbuffer_info_bi_mutable __@x0)))))

; </end constructor Vale.Arch.HeapImpl.Mkbuffer_info>


; </end encoding Vale.Arch.HeapImpl.Mkbuffer_info>


; </end encoding >


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_typ>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_typ (Term) Term)
(declare-fun Tm_arrow_d26ed68b859793a53e04190df55f24e9 () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_typ@tok () Term)

; </end encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_typ>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_typ/>


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_buffer>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_buffer (Term) Term)
(declare-fun Tm_arrow_b84de53a7b02c74871be4ce528a5fb1d () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_buffer@tok () Term)

; </end encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_buffer>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_buffer/>


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_heaplet>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_heaplet (Term) Term)
(declare-fun Tm_arrow_e3eaa1d8cbb0066356b5f486ef2c25a5 () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_heaplet@tok () Term)

; </end encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_heaplet>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_heaplet/>


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_taint>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_taint (Term) Term)
(declare-fun Tm_arrow_4fa976a8d38d1b8c772eaf7775297ffd () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_taint@tok () Term)

; </end encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_taint>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_taint/>


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_mutable>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_mutable (Term) Term)
(declare-fun Tm_arrow_8db5e1f957614fbc7ebaf74a79fce40d () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_mutable@tok () Term)

; </end encoding Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_mutable>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkbuffer_info__item__bi_mutable/>


; <Start encoding Vale.Arch.HeapImpl.vale_heap>

(declare-fun Vale.Arch.HeapImpl.vale_heap () Term)
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Vale.Arch.HeapImpl.vale_heap; Namespace Vale.Arch.HeapImpl
(assert (! (HasType Vale.Arch.HeapImpl.vale_heap
Tm_type)
:named function_token_typing_Vale.Arch.HeapImpl.vale_heap))

; </end encoding Vale.Arch.HeapImpl.vale_heap>


; <Start encoding Vale.Arch.HeapImpl.vale_heap_layout_inner>

(declare-fun Vale.Arch.HeapImpl.vale_heap_layout_inner () Term)

; </end encoding Vale.Arch.HeapImpl.vale_heap_layout_inner>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.vale_heap_layout () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.Mkvale_heap_layout (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkvale_heap_layout_vl_inner (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkvale_heap_layout_vl_taint (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkvale_heap_layout
(declare-fun Vale.Arch.HeapImpl.Mkvale_heap_layout@tok () Term)
(declare-fun Tm_arrow_51b889b5e600e45e0d34c086d894a2a9 () Term)

; <Start encoding Vale.Arch.HeapImpl.vale_heap_layout>


; <start constructor Vale.Arch.HeapImpl.vale_heap_layout>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.vale_heap_layout ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
Vale.Arch.HeapImpl.vale_heap_layout)))

; </end constructor Vale.Arch.HeapImpl.vale_heap_layout>


; </end encoding Vale.Arch.HeapImpl.vale_heap_layout>


; <Start encoding Vale.Arch.HeapImpl.Mkvale_heap_layout>


; <start constructor Vale.Arch.HeapImpl.Mkvale_heap_layout>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.Mkvale_heap_layout ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
143)
(= __@x0
(Vale.Arch.HeapImpl.Mkvale_heap_layout (Vale.Arch.HeapImpl.Mkvale_heap_layout_vl_inner __@x0)
(Vale.Arch.HeapImpl.Mkvale_heap_layout_vl_taint __@x0)))))

; </end constructor Vale.Arch.HeapImpl.Mkvale_heap_layout>


; </end encoding Vale.Arch.HeapImpl.Mkvale_heap_layout>


; </end encoding >


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_inner>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_inner (Term) Term)
(declare-fun Tm_arrow_a0b47065bd918c5814d15bbd845d12e7 () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_inner@tok () Term)

; </end encoding Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_inner>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_inner/>


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_taint>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_taint (Term) Term)
(declare-fun Tm_arrow_b648a54f9585e06a5f752a291200d7cf () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_taint@tok () Term)

; </end encoding Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_taint>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_taint/>


; <Start encoding Vale.Arch.HeapImpl.vale_heaplets>

(declare-fun Vale.Arch.HeapImpl.vale_heaplets () Term)
;;;;;;;;;;;;;;;;Equation for Vale.Arch.HeapImpl.vale_heaplets
;;; Fact-ids: Name Vale.Arch.HeapImpl.vale_heaplets; Namespace Vale.Arch.HeapImpl
(assert (! (= Vale.Arch.HeapImpl.vale_heaplets
(Vale.Lib.Map16.map16 Vale.Arch.HeapImpl.vale_heap))
:named equation_Vale.Arch.HeapImpl.vale_heaplets))

; </end encoding Vale.Arch.HeapImpl.vale_heaplets>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.vale_full_heap () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Arch.HeapImpl.Mkvale_full_heap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkvale_full_heap
(declare-fun Vale.Arch.HeapImpl.Mkvale_full_heap@tok () Term)
(declare-fun Tm_arrow_7c045660d5e5c748ad4aea8d88e9ee79 () Term)

; <Start encoding Vale.Arch.HeapImpl.vale_full_heap>


; <start constructor Vale.Arch.HeapImpl.vale_full_heap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.vale_full_heap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
151)
(= __@x0
Vale.Arch.HeapImpl.vale_full_heap)))

; </end constructor Vale.Arch.HeapImpl.vale_full_heap>


; </end encoding Vale.Arch.HeapImpl.vale_full_heap>


; <Start encoding Vale.Arch.HeapImpl.Mkvale_full_heap>


; <start constructor Vale.Arch.HeapImpl.Mkvale_full_heap>

;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.Arch.HeapImpl.vale_full_heap; Namespace Vale.Arch.HeapImpl; Name Vale.Arch.HeapImpl.Mkvale_full_heap; Namespace Vale.Arch.HeapImpl
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(41,10-41,24); use=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(41,10-41,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout (Vale.Arch.HeapImpl.Mkvale_full_heap @x0
@x1
@x2))
@x0)
 

:pattern ((Vale.Arch.HeapImpl.Mkvale_full_heap @x0
@x1
@x2))
:qid projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout))

:named projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.Arch.HeapImpl.vale_full_heap; Namespace Vale.Arch.HeapImpl; Name Vale.Arch.HeapImpl.Mkvale_full_heap; Namespace Vale.Arch.HeapImpl
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(41,10-41,24); use=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(41,10-41,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets (Vale.Arch.HeapImpl.Mkvale_full_heap @x0
@x1
@x2))
@x2)
 

:pattern ((Vale.Arch.HeapImpl.Mkvale_full_heap @x0
@x1
@x2))
:qid projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets))

:named projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Arch.HeapImpl.Mkvale_full_heap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Vale.Arch.HeapImpl.Mkvale_full_heap (Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout __@x0)
(Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap __@x0)
(Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets __@x0)))))

; </end constructor Vale.Arch.HeapImpl.Mkvale_full_heap>


; </end encoding Vale.Arch.HeapImpl.Mkvale_full_heap>

;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Vale.Arch.HeapImpl.vale_full_heap; Namespace Vale.Arch.HeapImpl; Name Vale.Arch.HeapImpl.Mkvale_full_heap; Namespace Vale.Arch.HeapImpl
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(41,10-41,24); use=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(41,10-41,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Vale.Arch.HeapImpl.vale_full_heap)
(is-Vale.Arch.HeapImpl.Mkvale_full_heap @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Vale.Arch.HeapImpl.vale_full_heap))
:qid fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap))

:named fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap))

; </end encoding >


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Term) Term)
(declare-fun Tm_arrow_95a875a46bb9f9f20d487efd4608d956 () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout@tok () Term)
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout; Namespace Vale.Arch.HeapImpl
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(42,2-42,11); use=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(42,2-42,11)
(forall ((@x0 Term))
 (! (= (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout @x0)
(Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout @x0))
 

:pattern ((Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout @x0))
:qid proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout))

:named proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout))

; </end encoding Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout/>


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap (Term) Term)
(declare-fun Tm_arrow_1a529553495c5d0795b8b68c7610d9f2 () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap; Namespace Vale.Arch.HeapImpl
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(43,2-43,9); use=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(43,2-43,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Vale.Arch.HeapImpl.vale_full_heap)
(HasType (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap @x0)
Vale.Arch.HeapImpl.vale_heap))
 

:pattern ((Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap @x0))
:qid typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap))

:named typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap; Namespace Vale.Arch.HeapImpl
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(43,2-43,9); use=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(43,2-43,9)
(forall ((@x0 Term))
 (! (= (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap @x0)
(Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap @x0))
 

:pattern ((Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap @x0))
:qid proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap))

:named proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap))

; </end encoding Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap/>


; <Start encoding Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets>

(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Term) Term)
(declare-fun Tm_arrow_0b16d9494a02bcf86033deed4d7d7b21 () Term)
(declare-fun Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets; Namespace Vale.Arch.HeapImpl
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(44,2-44,13); use=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(44,2-44,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Vale.Arch.HeapImpl.vale_full_heap)
(HasType (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets @x0)
Vale.Arch.HeapImpl.vale_heaplets))
 

:pattern ((Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets @x0))
:qid typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets))

:named typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets; Namespace Vale.Arch.HeapImpl
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(44,2-44,13); use=/home/guido/r/everest/hacl-star/vale/code/arch/Vale.Arch.HeapImpl.fsti(44,2-44,13)
(forall ((@x0 Term))
 (! (= (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets @x0)
(Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets @x0))
 

:pattern ((Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets @x0))
:qid proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets))

:named proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets))

; </end encoding Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets>


; <Skipped Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets/>


; <Start encoding Vale.Arch.HeapImpl.full_heap_taint>

(declare-fun Vale.Arch.HeapImpl.full_heap_taint (Term) Term)
(declare-fun Tm_arrow_27329f451ae0e604ed66846342fd9702 () Term)
(declare-fun Vale.Arch.HeapImpl.full_heap_taint@tok () Term)

; </end encoding Vale.Arch.HeapImpl.full_heap_taint>


; End Externals for interface Vale.Arch.HeapImpl


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Arch.HeapImpl (191 decls; total size 25429)

;;; Start interface Vale.X64.Memory

; Externals for interface Vale.X64.Memory


; <Start encoding Vale.X64.Memory.vale_heap>

(declare-fun Vale.X64.Memory.vale_heap () Term)

; </end encoding Vale.X64.Memory.vale_heap>


; <Start encoding Vale.X64.Memory.vale_full_heap>

(declare-fun Vale.X64.Memory.vale_full_heap () Term)

; </end encoding Vale.X64.Memory.vale_full_heap>


; <Start encoding Vale.X64.Memory.heaplet_id>

(declare-fun Vale.X64.Memory.heaplet_id () Term)

; </end encoding Vale.X64.Memory.heaplet_id>


; <Start encoding Vale.X64.Memory.get_vale_heap>

(declare-fun Vale.X64.Memory.get_vale_heap (Term) Term)

(declare-fun Vale.X64.Memory.get_vale_heap@tok () Term)

; </end encoding Vale.X64.Memory.get_vale_heap>


; <Start encoding Vale.X64.Memory.set_vale_heap>

(declare-fun Vale.X64.Memory.set_vale_heap (Term Term) Term)
(declare-fun Tm_arrow_203a4389bf40b65e86bc073c1a9c24e1 () Term)
(declare-fun Vale.X64.Memory.set_vale_heap@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Memory.set_vale_heap
;;; Fact-ids: Name Vale.X64.Memory.set_vale_heap; Namespace Vale.X64.Memory
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(17,4-17,17); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(17,4-17,17)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.Memory.set_vale_heap @x0
@x1)
(Vale.Arch.HeapImpl.Mkvale_full_heap (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout @x0)
@x1
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets @x0)))
 

:pattern ((Vale.X64.Memory.set_vale_heap @x0
@x1))
:qid equation_Vale.X64.Memory.set_vale_heap))

:named equation_Vale.X64.Memory.set_vale_heap))

; </end encoding Vale.X64.Memory.set_vale_heap>


; <Start encoding Vale.X64.Memory.vale_full_heap_equal>

(declare-fun Vale.X64.Memory.vale_full_heap_equal (Term Term) Term)
(declare-fun Tm_arrow_8b0fe2226c473e4c727b222a3184ae31 () Term)
(declare-fun Vale.X64.Memory.vale_full_heap_equal@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Memory.vale_full_heap_equal
;;; Fact-ids: Name Vale.X64.Memory.vale_full_heap_equal; Namespace Vale.X64.Memory
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(20,4-20,24); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(20,4-20,24)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Vale.X64.Memory.vale_full_heap_equal @x0
@x1))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(21,2-23,43); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(21,2-23,43)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(21,2-21,30); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(21,2-21,30)
(= (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout @x0)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout @x1))


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(22,2-22,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(22,2-22,26)
(= (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap @x0)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap @x1))


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(23,2-23,43); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(23,2-23,43)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(23,2-23,43); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(23,2-23,43)
(Vale.Lib.Map16.equal Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets @x0)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets @x1))
)
)
)
 

:pattern ((Vale.X64.Memory.vale_full_heap_equal @x0
@x1))
:qid equation_Vale.X64.Memory.vale_full_heap_equal))

:named equation_Vale.X64.Memory.vale_full_heap_equal))

; </end encoding Vale.X64.Memory.vale_full_heap_equal>


; <Start encoding Vale.X64.Memory.get_heaplet_id>

(declare-fun Vale.X64.Memory.get_heaplet_id (Term) Term)
(declare-fun Tm_arrow_77ccb9a94bed3fb1e0533046b733593a () Term)
(declare-fun Vale.X64.Memory.get_heaplet_id@tok () Term)

; </end encoding Vale.X64.Memory.get_heaplet_id>


; <Start encoding Vale.X64.Memory.nat8>

(declare-fun Vale.X64.Memory.nat8 () Term)

; </end encoding Vale.X64.Memory.nat8>


; <Start encoding Vale.X64.Memory.nat16>

(declare-fun Vale.X64.Memory.nat16 () Term)

; </end encoding Vale.X64.Memory.nat16>


; <Start encoding Vale.X64.Memory.nat32>

(declare-fun Vale.X64.Memory.nat32 () Term)

; </end encoding Vale.X64.Memory.nat32>


; <Start encoding Vale.X64.Memory.nat64>

(declare-fun Vale.X64.Memory.nat64 () Term)

; </end encoding Vale.X64.Memory.nat64>


; <Start encoding Vale.X64.Memory.quad32>

(declare-fun Vale.X64.Memory.quad32 (Dummy_sort) Term)

; </end encoding Vale.X64.Memory.quad32>


; <Start encoding Vale.X64.Memory.base_typ_as_vale_type>

(declare-fun Vale.X64.Memory.base_typ_as_vale_type (Term) Term)
(declare-fun Tm_arrow_7b903fd23d140fa27e1ca8ca7325186c () Term)
(declare-fun Vale.X64.Memory.base_typ_as_vale_type@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Memory.base_typ_as_vale_type
;;; Fact-ids: Name Vale.X64.Memory.base_typ_as_vale_type; Namespace Vale.X64.Memory
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(33,4-33,25); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(33,4-33,25)
(forall ((@x0 Term))
 (! (= (Vale.X64.Memory.base_typ_as_vale_type @x0)
(let ((@lb1 @x0))
(ite (is-Vale.Arch.HeapTypes_s.TUInt8 @lb1)
Vale.Def.Words_s.nat8
(ite (is-Vale.Arch.HeapTypes_s.TUInt16 @lb1)
Vale.Def.Words_s.nat16
(ite (is-Vale.Arch.HeapTypes_s.TUInt32 @lb1)
Vale.Def.Words_s.nat32
(ite (is-Vale.Arch.HeapTypes_s.TUInt64 @lb1)
Vale.Def.Words_s.nat64
(ite (is-Vale.Arch.HeapTypes_s.TUInt128 @lb1)
(Vale.Def.Types_s.quad32 Dummy_value)
Tm_unit)))))))
 

:pattern ((Vale.X64.Memory.base_typ_as_vale_type @x0))
:qid equation_Vale.X64.Memory.base_typ_as_vale_type))

:named equation_Vale.X64.Memory.base_typ_as_vale_type))

; </end encoding Vale.X64.Memory.base_typ_as_vale_type>


; <Start encoding Vale.X64.Memory.scale_by>

(declare-fun Vale.X64.Memory.scale_by (Term Term) Term)

(declare-fun Vale.X64.Memory.scale_by@tok () Term)

; </end encoding Vale.X64.Memory.scale_by>


; <Start encoding Vale.X64.Memory.scale2>

(declare-fun Vale.X64.Memory.scale2 (Term) Term)

(declare-fun Vale.X64.Memory.scale2@tok () Term)

; </end encoding Vale.X64.Memory.scale2>


; <Start encoding Vale.X64.Memory.scale4>

(declare-fun Vale.X64.Memory.scale4 (Term) Term)

(declare-fun Vale.X64.Memory.scale4@tok () Term)

; </end encoding Vale.X64.Memory.scale4>


; <Start encoding Vale.X64.Memory.scale8>

(declare-fun Vale.X64.Memory.scale8 (Term) Term)

(declare-fun Vale.X64.Memory.scale8@tok () Term)

; </end encoding Vale.X64.Memory.scale8>


; <Start encoding Vale.X64.Memory.scale16>

(declare-fun Vale.X64.Memory.scale16 (Term) Term)

(declare-fun Vale.X64.Memory.scale16@tok () Term)

; </end encoding Vale.X64.Memory.scale16>


; <Start encoding Vale.X64.Memory.buffer>

(declare-fun Vale.X64.Memory.buffer (Term) Term)

(declare-fun Vale.X64.Memory.buffer@tok () Term)

; </end encoding Vale.X64.Memory.buffer>


; <Start encoding Vale.X64.Memory.buffer_as_seq>

(declare-fun Vale.X64.Memory.buffer_as_seq (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7f540e1c932d2e353e1da05ddd10bd0b () Term)
(declare-fun Vale.X64.Memory.buffer_as_seq@tok () Term)

; </end encoding Vale.X64.Memory.buffer_as_seq>


; <Start encoding Vale.X64.Memory.buffer_readable>

(declare-fun Vale.X64.Memory.buffer_readable (Term Term Term) Term)
(declare-fun Tm_arrow_3c705c53e4c12841028d5c040f4b93c5 () Term)
(declare-fun Vale.X64.Memory.buffer_readable@tok () Term)

; </end encoding Vale.X64.Memory.buffer_readable>


; <Start encoding Vale.X64.Memory.buffer_writeable>

(declare-fun Vale.X64.Memory.buffer_writeable (Term Term) Term)
(declare-fun Tm_arrow_3c1153978961016138d98795f387e06f () Term)
(declare-fun Vale.X64.Memory.buffer_writeable@tok () Term)

; </end encoding Vale.X64.Memory.buffer_writeable>


; <Start encoding Vale.X64.Memory.buffer_length>

(declare-fun Vale.X64.Memory.buffer_length (Term Term) Term)
(declare-fun Tm_ghost_arrow_2fed428a71a98d16ceee58ba804ae777 () Term)
(declare-fun Vale.X64.Memory.buffer_length@tok () Term)

; </end encoding Vale.X64.Memory.buffer_length>


; <Start encoding Vale.X64.Memory.loc>

(declare-fun Vale.X64.Memory.loc () Term)

; </end encoding Vale.X64.Memory.loc>


; <Start encoding Vale.X64.Memory.loc_none>

(declare-fun Vale.X64.Memory.loc_none (Dummy_sort) Term)

; </end encoding Vale.X64.Memory.loc_none>


; <Start encoding Vale.X64.Memory.loc_union>

(declare-fun Vale.X64.Memory.loc_union (Term Term) Term)
(declare-fun Tm_ghost_arrow_54f3d6191d91c89c49e593736338b0cc () Term)
(declare-fun Vale.X64.Memory.loc_union@tok () Term)

; </end encoding Vale.X64.Memory.loc_union>


; <Start encoding Vale.X64.Memory.loc_buffer>

(declare-fun Vale.X64.Memory.loc_buffer (Term Term) Term)
(declare-fun Tm_ghost_arrow_ee2c6fbeecd1e446cb8c8162fd27eca6 () Term)
(declare-fun Vale.X64.Memory.loc_buffer@tok () Term)

; </end encoding Vale.X64.Memory.loc_buffer>


; <Start encoding Vale.X64.Memory.loc_disjoint>

(declare-fun Vale.X64.Memory.loc_disjoint (Term Term) Term)
(declare-fun Tm_arrow_071066746b808b9ec2189e9851dfbf87 () Term)
(declare-fun Vale.X64.Memory.loc_disjoint@tok () Term)

; </end encoding Vale.X64.Memory.loc_disjoint>


; <Start encoding Vale.X64.Memory.loc_includes>

(declare-fun Vale.X64.Memory.loc_includes (Term Term) Term)

(declare-fun Vale.X64.Memory.loc_includes@tok () Term)

; </end encoding Vale.X64.Memory.loc_includes>


; <Start encoding Vale.X64.Memory.modifies>

(declare-fun Vale.X64.Memory.modifies (Term Term Term) Term)
(declare-fun Tm_arrow_b6ebdbb61437e3729d28ac011b1f3f3d () Term)
(declare-fun Vale.X64.Memory.modifies@tok () Term)

; </end encoding Vale.X64.Memory.modifies>


; <Start encoding Vale.X64.Memory.valid_buffer_read>

(declare-fun Vale.X64.Memory.valid_buffer_read (Term Term Term Term) Term)
(declare-fun Tm_arrow_a37952fbaf7f858148a290280bce5f0d () Term)
(declare-fun Vale.X64.Memory.valid_buffer_read@tok () Term)

; </end encoding Vale.X64.Memory.valid_buffer_read>


; <Start encoding Vale.X64.Memory.valid_buffer_write>

(declare-fun Vale.X64.Memory.valid_buffer_write (Term Term Term Term) Term)

(declare-fun Vale.X64.Memory.valid_buffer_write@tok () Term)

; </end encoding Vale.X64.Memory.valid_buffer_write>


; <Start encoding Vale.X64.Memory.vuint8>

(declare-fun Vale.X64.Memory.vuint8 (Dummy_sort) Term)

; </end encoding Vale.X64.Memory.vuint8>


; <Start encoding Vale.X64.Memory.vuint16>

(declare-fun Vale.X64.Memory.vuint16 (Dummy_sort) Term)

; </end encoding Vale.X64.Memory.vuint16>


; <Start encoding Vale.X64.Memory.vuint32>

(declare-fun Vale.X64.Memory.vuint32 (Dummy_sort) Term)

; </end encoding Vale.X64.Memory.vuint32>


; <Start encoding Vale.X64.Memory.vuint64>

(declare-fun Vale.X64.Memory.vuint64 (Dummy_sort) Term)

; </end encoding Vale.X64.Memory.vuint64>


; <Start encoding Vale.X64.Memory.vuint128>

(declare-fun Vale.X64.Memory.vuint128 (Dummy_sort) Term)

; </end encoding Vale.X64.Memory.vuint128>


; <Start encoding Vale.X64.Memory.buffer8>

(declare-fun Vale.X64.Memory.buffer8 () Term)

; </end encoding Vale.X64.Memory.buffer8>


; <Start encoding Vale.X64.Memory.buffer16>

(declare-fun Vale.X64.Memory.buffer16 () Term)

; </end encoding Vale.X64.Memory.buffer16>


; <Start encoding Vale.X64.Memory.buffer32>

(declare-fun Vale.X64.Memory.buffer32 () Term)

; </end encoding Vale.X64.Memory.buffer32>


; <Start encoding Vale.X64.Memory.buffer64>

(declare-fun Vale.X64.Memory.buffer64 () Term)

; </end encoding Vale.X64.Memory.buffer64>


; <Start encoding Vale.X64.Memory.buffer128>

(declare-fun Vale.X64.Memory.buffer128 () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Memory.buffer128
;;; Fact-ids: Name Vale.X64.Memory.buffer128; Namespace Vale.X64.Memory
(assert (! (= Vale.X64.Memory.buffer128
(Vale.Arch.HeapImpl.buffer Vale.Arch.HeapTypes_s.TUInt128@tok))
:named equation_Vale.X64.Memory.buffer128))

; </end encoding Vale.X64.Memory.buffer128>


; <Start encoding Vale.X64.Memory.buffer_addr>

(declare-fun Vale.X64.Memory.buffer_addr (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_98ade55938b64dc56e88fa024325706b () Term)
(declare-fun Vale.X64.Memory.buffer_addr@tok () Term)

; </end encoding Vale.X64.Memory.buffer_addr>


; <Start encoding Vale.X64.Memory.locs_disjoint>

(declare-fun Vale.X64.Memory.locs_disjoint (Term) Term)
(declare-fun Tm_arrow_60d845db3cb6dbd1ec34f1c7eb67d8d3 () Term)
(declare-fun Vale.X64.Memory.locs_disjoint@tok () Term)

(declare-fun Tm_arrow_a10ce0674b24eddc0b6f5a380d0f3ca8 () Term)
(declare-fun Tm_abs_c12b5b23596475af4616a9563ab2c7bc (Term) Term)

(declare-fun Tm_arrow_3d6c27c57133d89acbda15df36e4de3a () Term)
(declare-fun Tm_abs_e235811f26f6c67f3abe258d99f5ee3b () Term)

; </end encoding Vale.X64.Memory.locs_disjoint>


; <Start encoding Vale.X64.Memory.modifies_goal_directed>

(declare-fun Vale.X64.Memory.modifies_goal_directed (Term Term Term) Term)

(declare-fun Vale.X64.Memory.modifies_goal_directed@tok () Term)

; </end encoding Vale.X64.Memory.modifies_goal_directed>


; <Start encoding Vale.X64.Memory.lemma_modifies_goal_directed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_modifies_goal_directed (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_modifies_goal_directed@tok () Term)

; </end encoding Vale.X64.Memory.lemma_modifies_goal_directed>


; <Start encoding Vale.X64.Memory.buffer_length_buffer_as_seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.buffer_length_buffer_as_seq (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.buffer_length_buffer_as_seq@tok () Term)
;;;;;;;;;;;;;;;;Lemma: Vale.X64.Memory.buffer_length_buffer_as_seq
;;; Fact-ids: Name Vale.X64.Memory.buffer_length_buffer_as_seq; Namespace Vale.X64.Memory
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Vale.Arch.HeapTypes_s.base_typ)
(HasType @x1
Vale.Arch.HeapImpl.vale_heap)
(HasType @x2
(Vale.Arch.HeapImpl.buffer @x0)))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(92,11-92,62); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(92,11-92,62)
(= (FStar.Seq.Base.length (Vale.X64.Memory.base_typ_as_vale_type @x0)
(Vale.X64.Memory.buffer_as_seq @x0
@x1
@x2))
(Vale.X64.Memory.buffer_length @x0
@x2))
)
 

:pattern ((FStar.Seq.Base.length (Vale.X64.Memory.base_typ_as_vale_type @x0)
(Vale.X64.Memory.buffer_as_seq @x0
@x1
@x2)))
:qid lemma_Vale.X64.Memory.buffer_length_buffer_as_seq))
:named lemma_Vale.X64.Memory.buffer_length_buffer_as_seq))

; </end encoding Vale.X64.Memory.buffer_length_buffer_as_seq>


; <Start encoding Vale.X64.Memory.modifies_buffer_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_buffer_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_buffer_elim@tok () Term)

; </end encoding Vale.X64.Memory.modifies_buffer_elim>


; <Start encoding Vale.X64.Memory.modifies_buffer_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_buffer_addr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_buffer_addr@tok () Term)

; </end encoding Vale.X64.Memory.modifies_buffer_addr>


; <Start encoding Vale.X64.Memory.modifies_buffer_readable>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_buffer_readable (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_buffer_readable@tok () Term)

; </end encoding Vale.X64.Memory.modifies_buffer_readable>


; <Start encoding Vale.X64.Memory.loc_disjoint_none_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.loc_disjoint_none_r (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.loc_disjoint_none_r@tok () Term)

; </end encoding Vale.X64.Memory.loc_disjoint_none_r>


; <Start encoding Vale.X64.Memory.loc_disjoint_union_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.loc_disjoint_union_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.loc_disjoint_union_r@tok () Term)

; </end encoding Vale.X64.Memory.loc_disjoint_union_r>


; <Start encoding Vale.X64.Memory.loc_includes_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.loc_includes_refl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.loc_includes_refl@tok () Term)

; </end encoding Vale.X64.Memory.loc_includes_refl>


; <Start encoding Vale.X64.Memory.loc_includes_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.loc_includes_trans (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.loc_includes_trans@tok () Term)

; </end encoding Vale.X64.Memory.loc_includes_trans>


; <Start encoding Vale.X64.Memory.loc_includes_union_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.loc_includes_union_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.loc_includes_union_r@tok () Term)

; </end encoding Vale.X64.Memory.loc_includes_union_r>


; <Start encoding Vale.X64.Memory.loc_includes_union_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.loc_includes_union_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.loc_includes_union_l@tok () Term)

; </end encoding Vale.X64.Memory.loc_includes_union_l>


; <Start encoding Vale.X64.Memory.loc_includes_union_l_buffer>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.loc_includes_union_l_buffer (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.loc_includes_union_l_buffer@tok () Term)

; </end encoding Vale.X64.Memory.loc_includes_union_l_buffer>


; <Start encoding Vale.X64.Memory.loc_includes_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.loc_includes_none (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.loc_includes_none@tok () Term)

; </end encoding Vale.X64.Memory.loc_includes_none>


; <Start encoding Vale.X64.Memory.modifies_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_refl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_refl@tok () Term)

; </end encoding Vale.X64.Memory.modifies_refl>


; <Start encoding Vale.X64.Memory.modifies_goal_directed_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_goal_directed_refl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_goal_directed_refl@tok () Term)

; </end encoding Vale.X64.Memory.modifies_goal_directed_refl>


; <Start encoding Vale.X64.Memory.modifies_loc_includes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_loc_includes (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_loc_includes@tok () Term)

; </end encoding Vale.X64.Memory.modifies_loc_includes>


; <Start encoding Vale.X64.Memory.modifies_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_trans (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_trans@tok () Term)

; </end encoding Vale.X64.Memory.modifies_trans>


; <Start encoding Vale.X64.Memory.modifies_goal_directed_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_goal_directed_trans (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_goal_directed_trans@tok () Term)

; </end encoding Vale.X64.Memory.modifies_goal_directed_trans>


; <Start encoding Vale.X64.Memory.modifies_goal_directed_trans2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_goal_directed_trans2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_goal_directed_trans2@tok () Term)

; </end encoding Vale.X64.Memory.modifies_goal_directed_trans2>


; <Start encoding Vale.X64.Memory.buffer_read>

(declare-fun Vale.X64.Memory.buffer_read (Term Term Term Term) Term)
(declare-fun Tm_refine_8545a50511781623fc41e3fb8428bce0 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_0e708c329b084934428da7ba7ca822ad () Term)
(declare-fun Vale.X64.Memory.buffer_read@tok () Term)


; </end encoding Vale.X64.Memory.buffer_read>


; <Start encoding Vale.X64.Memory.buffer_write>

(declare-fun Vale.X64.Memory.buffer_write (Term Term Term Term Term) Term)
(declare-fun Tm_refine_41db9fdf9444e7dc3929e8f963c015c7 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_01667ba1b25d6ca596e2045a6287bdf5 () Term)
(declare-fun Vale.X64.Memory.buffer_write@tok () Term)


; </end encoding Vale.X64.Memory.buffer_write>


; <Start encoding Vale.X64.Memory.valid_mem64>

(declare-fun Vale.X64.Memory.valid_mem64 (Term Term) Term)
(declare-fun Tm_ghost_arrow_11d97eab9b6ac1749ea11b0263994b63 () Term)
(declare-fun Vale.X64.Memory.valid_mem64@tok () Term)

; </end encoding Vale.X64.Memory.valid_mem64>


; <Start encoding Vale.X64.Memory.writeable_mem64>

(declare-fun Vale.X64.Memory.writeable_mem64 (Term Term) Term)

(declare-fun Vale.X64.Memory.writeable_mem64@tok () Term)

; </end encoding Vale.X64.Memory.writeable_mem64>


; <Start encoding Vale.X64.Memory.load_mem64>

(declare-fun Vale.X64.Memory.load_mem64 (Term Term) Term)
(declare-fun Tm_ghost_arrow_0c2aca7d0ea5422931332a4726b84d98 () Term)
(declare-fun Vale.X64.Memory.load_mem64@tok () Term)

; </end encoding Vale.X64.Memory.load_mem64>


; <Start encoding Vale.X64.Memory.store_mem64>

(declare-fun Vale.X64.Memory.store_mem64 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_64f781c5c5d298a1272a84d06a0f31cc () Term)
(declare-fun Vale.X64.Memory.store_mem64@tok () Term)

; </end encoding Vale.X64.Memory.store_mem64>


; <Start encoding Vale.X64.Memory.valid_mem128>

(declare-fun Vale.X64.Memory.valid_mem128 (Term Term) Term)

(declare-fun Vale.X64.Memory.valid_mem128@tok () Term)

; </end encoding Vale.X64.Memory.valid_mem128>


; <Start encoding Vale.X64.Memory.writeable_mem128>

(declare-fun Vale.X64.Memory.writeable_mem128 (Term Term) Term)

(declare-fun Vale.X64.Memory.writeable_mem128@tok () Term)

; </end encoding Vale.X64.Memory.writeable_mem128>


; <Start encoding Vale.X64.Memory.load_mem128>

(declare-fun Vale.X64.Memory.load_mem128 (Term Term) Term)
(declare-fun Tm_ghost_arrow_171cfb5527466a1c280707c1f83ef6f7 () Term)
(declare-fun Vale.X64.Memory.load_mem128@tok () Term)

; </end encoding Vale.X64.Memory.load_mem128>


; <Start encoding Vale.X64.Memory.store_mem128>

(declare-fun Vale.X64.Memory.store_mem128 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_027ef8da21b90904ed3de5756265133b () Term)
(declare-fun Vale.X64.Memory.store_mem128@tok () Term)

; </end encoding Vale.X64.Memory.store_mem128>


; <Start encoding Vale.X64.Memory.lemma_valid_mem64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_valid_mem64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_valid_mem64@tok () Term)

; </end encoding Vale.X64.Memory.lemma_valid_mem64>


; <Start encoding Vale.X64.Memory.lemma_writeable_mem64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_writeable_mem64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_writeable_mem64@tok () Term)

; </end encoding Vale.X64.Memory.lemma_writeable_mem64>


; <Start encoding Vale.X64.Memory.lemma_load_mem64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_load_mem64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_load_mem64@tok () Term)

; </end encoding Vale.X64.Memory.lemma_load_mem64>


; <Start encoding Vale.X64.Memory.lemma_store_mem64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_store_mem64 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_store_mem64@tok () Term)

; </end encoding Vale.X64.Memory.lemma_store_mem64>


; <Start encoding Vale.X64.Memory.lemma_valid_mem128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_valid_mem128 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_valid_mem128@tok () Term)

; </end encoding Vale.X64.Memory.lemma_valid_mem128>


; <Start encoding Vale.X64.Memory.lemma_writeable_mem128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_writeable_mem128 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_writeable_mem128@tok () Term)

; </end encoding Vale.X64.Memory.lemma_writeable_mem128>


; <Start encoding Vale.X64.Memory.lemma_load_mem128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_load_mem128 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_load_mem128@tok () Term)

; </end encoding Vale.X64.Memory.lemma_load_mem128>


; <Start encoding Vale.X64.Memory.lemma_store_mem128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_store_mem128 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_store_mem128@tok () Term)

; </end encoding Vale.X64.Memory.lemma_store_mem128>


; <Start encoding Vale.X64.Memory.memtaint>

(declare-fun Vale.X64.Memory.memtaint () Term)

; </end encoding Vale.X64.Memory.memtaint>


; <Start encoding Vale.X64.Memory.valid_taint_buf>

(declare-fun Vale.X64.Memory.valid_taint_buf (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20bb370fa0133cf49fad44a752f75e53 () Term)
(declare-fun Vale.X64.Memory.valid_taint_buf@tok () Term)

; </end encoding Vale.X64.Memory.valid_taint_buf>


; <Start encoding Vale.X64.Memory.valid_taint_buf64>

(declare-fun Vale.X64.Memory.valid_taint_buf64 (Term Term Term Term) Term)
(declare-fun Tm_arrow_3c4c8abf55c0beb188e9ef5bec97bf27 () Term)
(declare-fun Vale.X64.Memory.valid_taint_buf64@tok () Term)

; </end encoding Vale.X64.Memory.valid_taint_buf64>


; <Start encoding Vale.X64.Memory.valid_taint_buf128>

(declare-fun Vale.X64.Memory.valid_taint_buf128 (Term Term Term Term) Term)
(declare-fun Tm_arrow_ebb56eaa020066ca071fbfed181469b4 () Term)
(declare-fun Vale.X64.Memory.valid_taint_buf128@tok () Term)

; </end encoding Vale.X64.Memory.valid_taint_buf128>


; <Start encoding Vale.X64.Memory.lemma_valid_taint64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_valid_taint64 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_valid_taint64@tok () Term)

; </end encoding Vale.X64.Memory.lemma_valid_taint64>


; <Start encoding Vale.X64.Memory.lemma_valid_taint128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_valid_taint128 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_valid_taint128@tok () Term)

; </end encoding Vale.X64.Memory.lemma_valid_taint128>


; <Start encoding Vale.X64.Memory.same_memTaint64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.same_memTaint64 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.same_memTaint64@tok () Term)

; </end encoding Vale.X64.Memory.same_memTaint64>


; <Start encoding Vale.X64.Memory.same_memTaint128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.same_memTaint128 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.same_memTaint128@tok () Term)

; </end encoding Vale.X64.Memory.same_memTaint128>


; <Start encoding Vale.X64.Memory.modifies_valid_taint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_valid_taint (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_valid_taint@tok () Term)

; </end encoding Vale.X64.Memory.modifies_valid_taint>


; <Start encoding Vale.X64.Memory.modifies_same_heaplet_id>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.modifies_same_heaplet_id (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.modifies_same_heaplet_id@tok () Term)

; </end encoding Vale.X64.Memory.modifies_same_heaplet_id>


; <Start encoding Vale.X64.Memory.buffer_info_disjoint>

(declare-fun Vale.X64.Memory.buffer_info_disjoint (Term Term) Term)
(declare-fun Tm_arrow_b93fb3bdb0f073f45c88e710226dc209 () Term)
(declare-fun Vale.X64.Memory.buffer_info_disjoint@tok () Term)

; </end encoding Vale.X64.Memory.buffer_info_disjoint>


; <Start encoding Vale.X64.Memory.init_heaplets_req>

(declare-fun Vale.X64.Memory.init_heaplets_req (Term Term) Term)
(declare-fun Tm_arrow_2e3e4b3389625d32ea2c8c14982455e0 () Term)
(declare-fun Vale.X64.Memory.init_heaplets_req@tok () Term)

(declare-fun Tm_abs_3d4ce8b3c7fb640f8f98e45b515e2109 (Term Term) Term)

(declare-fun Tm_abs_6704b3e8020c3a066b44b7d538037f30 (Term Term) Term)

(declare-fun Tm_abs_1b2b4347826c49afd9269dc4c32a218f (Term) Term)

; </end encoding Vale.X64.Memory.init_heaplets_req>


; <Start encoding Vale.X64.Memory.loc_mutable_buffers>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented_token () Term)
(declare-fun Vale.X64.Memory.loc_mutable_buffers (Term) Term)
(declare-fun Vale.X64.Memory.loc_mutable_buffers@tok () Term)
(declare-fun Tm_ghost_arrow_f512c3e23b04cda74311de4c38e5231e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.Memory.loc_mutable_buffers; Namespace Vale.X64.Memory
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(384,8-384,27); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(384,8-384,27)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented (SFuel @u0)
@x1)
(Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented ZFuel
@x1))
 

:pattern ((Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.Memory.loc_mutable_buffers; Namespace Vale.X64.Memory
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(384,8-384,27); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(384,8-384,27)
(forall ((@x0 Term))
 (! (= (Vale.X64.Memory.loc_mutable_buffers @x0)
(Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Vale.X64.Memory.loc_mutable_buffers @x0))
:qid @fuel_correspondence_Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.Memory.loc_mutable_buffers.fuel_instrumented))

; </end encoding Vale.X64.Memory.loc_mutable_buffers>


; <Start encoding Vale.X64.Memory.valid_layout_buffer_id>

(declare-fun Vale.X64.Memory.valid_layout_buffer_id (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e8e01d225153c84be2d9979067637c () Term)
(declare-fun Vale.X64.Memory.valid_layout_buffer_id@tok () Term)

; </end encoding Vale.X64.Memory.valid_layout_buffer_id>


; <Start encoding Vale.X64.Memory.valid_layout_buffer>

(declare-fun Vale.X64.Memory.valid_layout_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e746838453e619a07936510a903c4a04 () Term)
(declare-fun Vale.X64.Memory.valid_layout_buffer@tok () Term)

; </end encoding Vale.X64.Memory.valid_layout_buffer>


; <Start encoding Vale.X64.Memory.is_initial_heap>

(declare-fun Vale.X64.Memory.is_initial_heap (Term Term) Term)
(declare-fun Tm_arrow_d6b351fbd0b9f732fa95ac8f95796db4 () Term)
(declare-fun Vale.X64.Memory.is_initial_heap@tok () Term)

; </end encoding Vale.X64.Memory.is_initial_heap>


; <Start encoding Vale.X64.Memory.mem_inv>

(declare-fun Vale.X64.Memory.mem_inv (Term) Term)
(declare-fun Tm_arrow_ba1ac5be376b5ea0d7a15acc94cbf82d () Term)
(declare-fun Vale.X64.Memory.mem_inv@tok () Term)

; </end encoding Vale.X64.Memory.mem_inv>


; <Start encoding Vale.X64.Memory.layout_heaplets_initialized>

(declare-fun Vale.X64.Memory.layout_heaplets_initialized (Term) Term)
(declare-fun Tm_arrow_570abfd09b643110ed493c0616cffe26 () Term)
(declare-fun Vale.X64.Memory.layout_heaplets_initialized@tok () Term)

; </end encoding Vale.X64.Memory.layout_heaplets_initialized>


; <Start encoding Vale.X64.Memory.layout_old_heap>

(declare-fun Vale.X64.Memory.layout_old_heap (Term) Term)
(declare-fun Tm_arrow_fcb7d68e4b7f938aecd22299665bac30 () Term)
(declare-fun Vale.X64.Memory.layout_old_heap@tok () Term)

; </end encoding Vale.X64.Memory.layout_old_heap>


; <Start encoding Vale.X64.Memory.layout_modifies_loc>

(declare-fun Vale.X64.Memory.layout_modifies_loc (Term) Term)
(declare-fun Tm_arrow_5e64757b6213e205f0ea69eec533cba0 () Term)
(declare-fun Vale.X64.Memory.layout_modifies_loc@tok () Term)

; </end encoding Vale.X64.Memory.layout_modifies_loc>


; <Start encoding Vale.X64.Memory.layout_buffers>

(declare-fun Vale.X64.Memory.layout_buffers (Term) Term)
(declare-fun Tm_arrow_9df90f7a9db6ee27af3838d664e06a89 () Term)
(declare-fun Vale.X64.Memory.layout_buffers@tok () Term)

; </end encoding Vale.X64.Memory.layout_buffers>


; <Start encoding Vale.X64.Memory.buffer_info_has_id>

(declare-fun Vale.X64.Memory.buffer_info_has_id (Term Term Term) Term)
(declare-fun Tm_arrow_f2662dfe9eb3296f27a56370a615623a () Term)
(declare-fun Vale.X64.Memory.buffer_info_has_id@tok () Term)

; </end encoding Vale.X64.Memory.buffer_info_has_id>


; <Start encoding Vale.X64.Memory.heaps_match>

(declare-fun Vale.X64.Memory.heaps_match (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ccb18bff2c656a6f7acfd07b577e57e3 () Term)
(declare-fun Vale.X64.Memory.heaps_match@tok () Term)

; </end encoding Vale.X64.Memory.heaps_match>


; <Start encoding Vale.X64.Memory.lemma_heaps_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Memory.lemma_heaps_match (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Memory.lemma_heaps_match@tok () Term)

; </end encoding Vale.X64.Memory.lemma_heaps_match>


; End Externals for interface Vale.X64.Memory


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.Memory (482 decls; total size 42109)

;;; Start interface Vale.X64.Stack_i

; Externals for interface Vale.X64.Stack_i


; <Start encoding Vale.X64.Stack_i.vale_stack>

(declare-fun Vale.X64.Stack_i.vale_stack () Term)

; </end encoding Vale.X64.Stack_i.vale_stack>


; <Start encoding Vale.X64.Stack_i.valid_src_stack64>

(declare-fun Vale.X64.Stack_i.valid_src_stack64 (Term Term) Term)
(declare-fun Tm_ghost_arrow_f9c9a7cfc5a943527ff6333bc7b8dedd () Term)
(declare-fun Vale.X64.Stack_i.valid_src_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.valid_src_stack64>


; <Start encoding Vale.X64.Stack_i.load_stack64>

(declare-fun Vale.X64.Stack_i.load_stack64 (Term Term) Term)
(declare-fun Tm_ghost_arrow_cb15bed5dd0d8d64f5a09592bfa78aeb () Term)
(declare-fun Vale.X64.Stack_i.load_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.load_stack64>


; <Start encoding Vale.X64.Stack_i.store_stack64>

(declare-fun Vale.X64.Stack_i.store_stack64 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_1a0ceccf2601a88cd2e506446a4470a2 () Term)
(declare-fun Vale.X64.Stack_i.store_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.store_stack64>


; <Start encoding Vale.X64.Stack_i.free_stack64>

(declare-fun Vale.X64.Stack_i.free_stack64 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_900fbbc761773f043b7f477fbeac99ac () Term)
(declare-fun Vale.X64.Stack_i.free_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.free_stack64>


; <Start encoding Vale.X64.Stack_i.valid_src_stack128>

(declare-fun Vale.X64.Stack_i.valid_src_stack128 (Term Term) Term)

(declare-fun Vale.X64.Stack_i.valid_src_stack128@tok () Term)

; </end encoding Vale.X64.Stack_i.valid_src_stack128>


; <Start encoding Vale.X64.Stack_i.load_stack128>

(declare-fun Vale.X64.Stack_i.load_stack128 (Term Term) Term)
(declare-fun Tm_ghost_arrow_53f002cc4e41031255878157b25500f2 () Term)
(declare-fun Vale.X64.Stack_i.load_stack128@tok () Term)

; </end encoding Vale.X64.Stack_i.load_stack128>


; <Start encoding Vale.X64.Stack_i.store_stack128>

(declare-fun Vale.X64.Stack_i.store_stack128 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_6bae65c0bba29cf4e6bda0d78e7dd6bd () Term)
(declare-fun Vale.X64.Stack_i.store_stack128@tok () Term)

; </end encoding Vale.X64.Stack_i.store_stack128>


; <Start encoding Vale.X64.Stack_i.init_rsp>

(declare-fun Vale.X64.Stack_i.init_rsp (Term) Term)
(declare-fun Tm_refine_7d29e56e66c8277ffbad10980c3bdf4c () Term)
(declare-fun Tm_arrow_97e79bc73278f59c82754ebaa016bdaa () Term)
(declare-fun Vale.X64.Stack_i.init_rsp@tok () Term)


; </end encoding Vale.X64.Stack_i.init_rsp>


; <Start encoding Vale.X64.Stack_i.modifies_stack>

(declare-fun Vale.X64.Stack_i.modifies_stack (Term Term Term Term) Term)
(declare-fun Tm_arrow_2cb04fa7be0f503aa0508d5d0a630dce () Term)
(declare-fun Vale.X64.Stack_i.modifies_stack@tok () Term)
(declare-fun Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2 () Term)
(declare-fun Tm_abs_77a503f579bea12df4c15df0bcf90494 (Term Term Term Term) Term)

; </end encoding Vale.X64.Stack_i.modifies_stack>


; <Start encoding Vale.X64.Stack_i.valid_src_stack64s>

(declare-fun Vale.X64.Stack_i.valid_src_stack64s (Term Term Term) Term)
(declare-fun Tm_arrow_46e767823874bb2c4535d2f554f6fb9a () Term)
(declare-fun Vale.X64.Stack_i.valid_src_stack64s@tok () Term)

(declare-fun Tm_abs_03297c3772653c6b6f83c2a17447c97c (Term Term Term) Term)

; </end encoding Vale.X64.Stack_i.valid_src_stack64s>


; <Start encoding Vale.X64.Stack_i.lemma_store_stack_same_valid64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_store_stack_same_valid64 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_store_stack_same_valid64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_store_stack_same_valid64>


; <Start encoding Vale.X64.Stack_i.lemma_free_stack_same_valid64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_free_stack_same_valid64 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_free_stack_same_valid64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_free_stack_same_valid64>


; <Start encoding Vale.X64.Stack_i.lemma_store_new_valid64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_store_new_valid64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_store_new_valid64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_store_new_valid64>


; <Start encoding Vale.X64.Stack_i.lemma_correct_store_load_stack64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_correct_store_load_stack64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_correct_store_load_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_correct_store_load_stack64>


; <Start encoding Vale.X64.Stack_i.lemma_frame_store_load_stack64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_frame_store_load_stack64 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_frame_store_load_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_frame_store_load_stack64>


; <Start encoding Vale.X64.Stack_i.lemma_free_stack_same_load64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_free_stack_same_load64 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_free_stack_same_load64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_free_stack_same_load64>


; <Start encoding Vale.X64.Stack_i.lemma_compose_free_stack64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_compose_free_stack64 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_compose_free_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_compose_free_stack64>


; <Start encoding Vale.X64.Stack_i.lemma_same_init_rsp_free_stack64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_same_init_rsp_free_stack64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_same_init_rsp_free_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_same_init_rsp_free_stack64>


; <Start encoding Vale.X64.Stack_i.lemma_same_init_rsp_store_stack64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_same_init_rsp_store_stack64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_same_init_rsp_store_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_same_init_rsp_store_stack64>


; <Start encoding Vale.X64.Stack_i.valid_taint_stack64>

(declare-fun Vale.X64.Stack_i.valid_taint_stack64 (Term Term Term) Term)
(declare-fun Tm_arrow_ca99fdcdd35962f02bb21d33bd355d01 () Term)
(declare-fun Vale.X64.Stack_i.valid_taint_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.valid_taint_stack64>


; <Start encoding Vale.X64.Stack_i.valid_taint_stack128>

(declare-fun Vale.X64.Stack_i.valid_taint_stack128 (Term Term Term) Term)

(declare-fun Vale.X64.Stack_i.valid_taint_stack128@tok () Term)

; </end encoding Vale.X64.Stack_i.valid_taint_stack128>


; <Start encoding Vale.X64.Stack_i.store_taint_stack64>

(declare-fun Vale.X64.Stack_i.store_taint_stack64 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_fede6a161d1ca85af1670fc6ad5bc876 () Term)
(declare-fun Vale.X64.Stack_i.store_taint_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.store_taint_stack64>


; <Start encoding Vale.X64.Stack_i.lemma_valid_taint_stack64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_valid_taint_stack64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_valid_taint_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_valid_taint_stack64>


; <Start encoding Vale.X64.Stack_i.lemma_valid_taint_stack128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_valid_taint_stack128 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_valid_taint_stack128@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_valid_taint_stack128>


; <Start encoding Vale.X64.Stack_i.lemma_valid_taint_stack64_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_valid_taint_stack64_reveal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_valid_taint_stack64_reveal@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_valid_taint_stack64_reveal>


; <Start encoding Vale.X64.Stack_i.lemma_correct_store_load_taint_stack64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_correct_store_load_taint_stack64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_correct_store_load_taint_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_correct_store_load_taint_stack64>


; <Start encoding Vale.X64.Stack_i.lemma_frame_store_load_taint_stack64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Stack_i.lemma_frame_store_load_taint_stack64 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Stack_i.lemma_frame_store_load_taint_stack64@tok () Term)

; </end encoding Vale.X64.Stack_i.lemma_frame_store_load_taint_stack64>


; <Start encoding Vale.X64.Stack_i.valid_stack_slot64>

(declare-fun Vale.X64.Stack_i.valid_stack_slot64 (Term Term Term Term) Term)
(declare-fun Tm_arrow_b50e2876284d2134855ce230ec74fbf7 () Term)
(declare-fun Vale.X64.Stack_i.valid_stack_slot64@tok () Term)

; </end encoding Vale.X64.Stack_i.valid_stack_slot64>


; <Start encoding Vale.X64.Stack_i.valid_stack_slot64s>

(declare-fun Vale.X64.Stack_i.valid_stack_slot64s (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ebe89e0be768a94ff596c069f4a05f5 () Term)
(declare-fun Vale.X64.Stack_i.valid_stack_slot64s@tok () Term)

(declare-fun Tm_abs_ea8133cb5ab7957209a2b2136dd6e1af (Term Term Term Term Term) Term)

; </end encoding Vale.X64.Stack_i.valid_stack_slot64s>


; <Start encoding Vale.X64.Stack_i.modifies_stacktaint>

(declare-fun Vale.X64.Stack_i.modifies_stacktaint (Term Term Term Term) Term)
(declare-fun Tm_arrow_3968bdc49faf95286e6a63042d6f324b () Term)
(declare-fun Vale.X64.Stack_i.modifies_stacktaint@tok () Term)
(declare-fun Tm_arrow_6523566ff9893b4a9178dc1e35bb2ce9 () Term)
(declare-fun Tm_abs_e043f5cdd38b8f46abf163d7ef10a15f (Term Term Term Term Term) Term)

(declare-fun Tm_abs_acfbeadf94a5588b9f2371be1e38f83f (Term Term Term Term) Term)

; </end encoding Vale.X64.Stack_i.modifies_stacktaint>


; End Externals for interface Vale.X64.Stack_i


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.Stack_i (154 decls; total size 16577)

;;; Start interface Vale.X64.State

; Externals for interface Vale.X64.State


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.State.vale_state () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.State.Mkvale_state (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.State.Mkvale_state_vs_ok (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.State.Mkvale_state_vs_regs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.State.Mkvale_state_vs_flags (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.State.Mkvale_state_vs_heap (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.State.Mkvale_state_vs_stack (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.State.Mkvale_state_vs_stackTaint (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkvale_state
(declare-fun Vale.X64.State.Mkvale_state@tok () Term)
(declare-fun Tm_arrow_2bec8bba6b6ced89a9701112f86fb40a () Term)

; <Start encoding Vale.X64.State.vale_state>


; <start constructor Vale.X64.State.vale_state>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.State.vale_state ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
Vale.X64.State.vale_state)))

; </end constructor Vale.X64.State.vale_state>


; </end encoding Vale.X64.State.vale_state>


; <Start encoding Vale.X64.State.Mkvale_state>


; <start constructor Vale.X64.State.Mkvale_state>

;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.X64.State.vale_state; Namespace Vale.X64.State; Name Vale.X64.State.Mkvale_state; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.State.Mkvale_state_vs_ok (Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_Vale.X64.State.Mkvale_state_vs_ok))

:named projection_inverse_Vale.X64.State.Mkvale_state_vs_ok))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.X64.State.vale_state; Namespace Vale.X64.State; Name Vale.X64.State.Mkvale_state; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.State.Mkvale_state_vs_regs (Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_Vale.X64.State.Mkvale_state_vs_regs))

:named projection_inverse_Vale.X64.State.Mkvale_state_vs_regs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.X64.State.vale_state; Namespace Vale.X64.State; Name Vale.X64.State.Mkvale_state; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.State.Mkvale_state_vs_flags (Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_Vale.X64.State.Mkvale_state_vs_flags))

:named projection_inverse_Vale.X64.State.Mkvale_state_vs_flags))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.X64.State.vale_state; Namespace Vale.X64.State; Name Vale.X64.State.Mkvale_state; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.State.Mkvale_state_vs_heap (Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_Vale.X64.State.Mkvale_state_vs_heap))

:named projection_inverse_Vale.X64.State.Mkvale_state_vs_heap))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.X64.State.vale_state; Namespace Vale.X64.State; Name Vale.X64.State.Mkvale_state; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.State.Mkvale_state_vs_stack (Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_Vale.X64.State.Mkvale_state_vs_stack))

:named projection_inverse_Vale.X64.State.Mkvale_state_vs_stack))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Vale.X64.State.vale_state; Namespace Vale.X64.State; Name Vale.X64.State.Mkvale_state; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.State.Mkvale_state_vs_stackTaint (Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((Vale.X64.State.Mkvale_state @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint))

:named projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.State.Mkvale_state ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(Vale.X64.State.Mkvale_state (Vale.X64.State.Mkvale_state_vs_ok __@x0)
(Vale.X64.State.Mkvale_state_vs_regs __@x0)
(Vale.X64.State.Mkvale_state_vs_flags __@x0)
(Vale.X64.State.Mkvale_state_vs_heap __@x0)
(Vale.X64.State.Mkvale_state_vs_stack __@x0)
(Vale.X64.State.Mkvale_state_vs_stackTaint __@x0)))))

; </end constructor Vale.X64.State.Mkvale_state>


; </end encoding Vale.X64.State.Mkvale_state>

;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Vale.X64.State.vale_state; Namespace Vale.X64.State; Name Vale.X64.State.Mkvale_state; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(14,10-14,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Vale.X64.State.vale_state)
(is-Vale.X64.State.Mkvale_state @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Vale.X64.State.vale_state))
:qid fuel_guarded_inversion_Vale.X64.State.vale_state))

:named fuel_guarded_inversion_Vale.X64.State.vale_state))

; </end encoding >


; <Start encoding Vale.X64.State.__proj__Mkvale_state__item__vs_ok>

(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_ok (Term) Term)
(declare-fun Tm_arrow_dd8e5b96e148b6fd465d66bd9e6c98cc () Term)
(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_ok@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_ok; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(15,2-15,7); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(15,2-15,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Vale.X64.State.vale_state)
(HasType (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x0)
Prims.bool))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x0))
:qid typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok))

:named typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_ok; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(15,2-15,7); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(15,2-15,7)
(forall ((@x0 Term))
 (! (= (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x0)
(Vale.X64.State.Mkvale_state_vs_ok @x0))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x0))
:qid proj_equation_Vale.X64.State.Mkvale_state_vs_ok))

:named proj_equation_Vale.X64.State.Mkvale_state_vs_ok))

; </end encoding Vale.X64.State.__proj__Mkvale_state__item__vs_ok>


; <Skipped Vale.X64.State.__proj__Mkvale_state__item__vs_ok/>


; <Start encoding Vale.X64.State.__proj__Mkvale_state__item__vs_regs>

(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Term) Term)
(declare-fun Tm_arrow_8c22cfae297fba3f2139b4ba46f67a13 () Term)
(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_regs@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_regs; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(16,2-16,9); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(16,2-16,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Vale.X64.State.vale_state)
(HasType (Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)
Vale.X64.Regs.t))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))
:qid typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs))

:named typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_regs; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(16,2-16,9); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(16,2-16,9)
(forall ((@x0 Term))
 (! (= (Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)
(Vale.X64.State.Mkvale_state_vs_regs @x0))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))
:qid proj_equation_Vale.X64.State.Mkvale_state_vs_regs))

:named proj_equation_Vale.X64.State.Mkvale_state_vs_regs))

; </end encoding Vale.X64.State.__proj__Mkvale_state__item__vs_regs>


; <Skipped Vale.X64.State.__proj__Mkvale_state__item__vs_regs/>


; <Start encoding Vale.X64.State.__proj__Mkvale_state__item__vs_flags>

(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_flags (Term) Term)
(declare-fun Tm_arrow_adbf57bae927fc29134021cae373e302 () Term)
(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_flags@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_flags; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(17,2-17,10); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(17,2-17,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Vale.X64.State.vale_state)
(HasType (Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x0)
Vale.X64.Flags.t))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x0))
:qid typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags))

:named typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_flags; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(17,2-17,10); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(17,2-17,10)
(forall ((@x0 Term))
 (! (= (Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x0)
(Vale.X64.State.Mkvale_state_vs_flags @x0))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x0))
:qid proj_equation_Vale.X64.State.Mkvale_state_vs_flags))

:named proj_equation_Vale.X64.State.Mkvale_state_vs_flags))

; </end encoding Vale.X64.State.__proj__Mkvale_state__item__vs_flags>


; <Skipped Vale.X64.State.__proj__Mkvale_state__item__vs_flags/>


; <Start encoding Vale.X64.State.__proj__Mkvale_state__item__vs_heap>

(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Term) Term)
(declare-fun Tm_arrow_c70cd110d8c70a4f4af606dcfba5d2ef () Term)
(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_heap@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_heap; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(18,2-18,9); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(18,2-18,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Vale.X64.State.vale_state)
(HasType (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0)
Vale.Arch.HeapImpl.vale_full_heap))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
:qid typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap))

:named typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_heap; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(18,2-18,9); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(18,2-18,9)
(forall ((@x0 Term))
 (! (= (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0)
(Vale.X64.State.Mkvale_state_vs_heap @x0))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
:qid proj_equation_Vale.X64.State.Mkvale_state_vs_heap))

:named proj_equation_Vale.X64.State.Mkvale_state_vs_heap))

; </end encoding Vale.X64.State.__proj__Mkvale_state__item__vs_heap>


; <Skipped Vale.X64.State.__proj__Mkvale_state__item__vs_heap/>


; <Start encoding Vale.X64.State.__proj__Mkvale_state__item__vs_stack>

(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_stack (Term) Term)
(declare-fun Tm_arrow_0b0c2a105d00a2af23986afab43ef5e7 () Term)
(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_stack@tok () Term)
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_stack; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(19,2-19,10); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(19,2-19,10)
(forall ((@x0 Term))
 (! (= (Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x0)
(Vale.X64.State.Mkvale_state_vs_stack @x0))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x0))
:qid proj_equation_Vale.X64.State.Mkvale_state_vs_stack))

:named proj_equation_Vale.X64.State.Mkvale_state_vs_stack))

; </end encoding Vale.X64.State.__proj__Mkvale_state__item__vs_stack>


; <Skipped Vale.X64.State.__proj__Mkvale_state__item__vs_stack/>


; <Start encoding Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint>

(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint (Term) Term)
(declare-fun Tm_arrow_638331bdbed3fc5aba633f6d6a4d39b1 () Term)
(declare-fun Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint@tok () Term)
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(20,2-20,15); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(20,2-20,15)
(forall ((@x0 Term))
 (! (= (Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x0)
(Vale.X64.State.Mkvale_state_vs_stackTaint @x0))
 

:pattern ((Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x0))
:qid proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint))

:named proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint))

; </end encoding Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint>


; <Skipped Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint/>


; <Start encoding Vale.X64.State.vs_get_vale_heap>

(declare-fun Vale.X64.State.vs_get_vale_heap (Term) Term)
(declare-fun Tm_arrow_2cd584f4e414566053965ed97b829dcd () Term)
(declare-fun Vale.X64.State.vs_get_vale_heap@tok () Term)

; </end encoding Vale.X64.State.vs_get_vale_heap>


; <Start encoding Vale.X64.State.eval_reg>

(declare-fun Vale.X64.State.eval_reg (Term Term) Term)
(declare-fun Tm_arrow_e12b54cabbc0391b2bad037717433f2f () Term)
(declare-fun Vale.X64.State.eval_reg@tok () Term)

; </end encoding Vale.X64.State.eval_reg>


; <Start encoding Vale.X64.State.eval_reg_int>

(declare-fun Vale.X64.State.eval_reg_int (Term Term) Term)
(declare-fun Tm_arrow_649f30054b9e0dcac4e7b61a40efcc6c () Term)
(declare-fun Vale.X64.State.eval_reg_int@tok () Term)

; </end encoding Vale.X64.State.eval_reg_int>


; <Start encoding Vale.X64.State.eval_flag>

(declare-fun Vale.X64.State.eval_flag (Term Term) Term)
(declare-fun Tm_arrow_3a69f4f4d3f8760efe94de3a0478b61c () Term)
(declare-fun Vale.X64.State.eval_flag@tok () Term)

; </end encoding Vale.X64.State.eval_flag>


; <Start encoding Vale.X64.State.eval_mem>

(declare-fun Vale.X64.State.eval_mem (Term Term) Term)
(declare-fun Tm_ghost_arrow_596afd55c9edb7e222e1da79223768bf () Term)
(declare-fun Vale.X64.State.eval_mem@tok () Term)

; </end encoding Vale.X64.State.eval_mem>


; <Start encoding Vale.X64.State.eval_mem128>

(declare-fun Vale.X64.State.eval_mem128 (Term Term) Term)
(declare-fun Tm_ghost_arrow_f7b494be76c7469c058e1595b71d606b () Term)
(declare-fun Vale.X64.State.eval_mem128@tok () Term)

; </end encoding Vale.X64.State.eval_mem128>


; <Start encoding Vale.X64.State.eval_stack>

(declare-fun Vale.X64.State.eval_stack (Term Term) Term)

(declare-fun Vale.X64.State.eval_stack@tok () Term)

; </end encoding Vale.X64.State.eval_stack>


; <Start encoding Vale.X64.State.eval_stack128>

(declare-fun Vale.X64.State.eval_stack128 (Term Term) Term)

(declare-fun Vale.X64.State.eval_stack128@tok () Term)

; </end encoding Vale.X64.State.eval_stack128>


; <Start encoding Vale.X64.State.eval_reg_64>

(declare-fun Vale.X64.State.eval_reg_64 (Term Term) Term)
(declare-fun Tm_arrow_5435242f245c25599f7304c156116e6f () Term)
(declare-fun Vale.X64.State.eval_reg_64@tok () Term)

; </end encoding Vale.X64.State.eval_reg_64>


; <Start encoding Vale.X64.State.eval_reg_xmm>

(declare-fun Vale.X64.State.eval_reg_xmm (Term Term) Term)
(declare-fun Tm_arrow_61acb169203764e9792907ebbfa1b243 () Term)
(declare-fun Vale.X64.State.eval_reg_xmm@tok () Term)

; </end encoding Vale.X64.State.eval_reg_xmm>


; <Start encoding Vale.X64.State.eval_maddr>

(declare-fun Vale.X64.State.eval_maddr (Term Term) Term)
(declare-fun Tm_arrow_0c443335c45656766edbc3a287f73e7e () Term)
(declare-fun Vale.X64.State.eval_maddr@tok () Term)

; </end encoding Vale.X64.State.eval_maddr>


; <Start encoding Vale.X64.State.eval_operand>

(declare-fun Vale.X64.State.eval_operand (Term Term) Term)
(declare-fun Tm_ghost_arrow_dd3c0da1b9c3905de4266c97171ef174 () Term)
(declare-fun Vale.X64.State.eval_operand@tok () Term)

; </end encoding Vale.X64.State.eval_operand>


; <Start encoding Vale.X64.State.eval_operand128>

(declare-fun Vale.X64.State.eval_operand128 (Term Term) Term)
(declare-fun Tm_ghost_arrow_9b05a9c0e1d35eb3a4c2a0477941a87b () Term)
(declare-fun Vale.X64.State.eval_operand128@tok () Term)

; </end encoding Vale.X64.State.eval_operand128>


; <Start encoding Vale.X64.State.update_reg>

(declare-fun Vale.X64.State.update_reg (Term Term Term) Term)
(declare-fun Tm_arrow_093de4ae4152b7c7cab9d2c8e05176b7 () Term)
(declare-fun Vale.X64.State.update_reg@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.State.update_reg; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(70,4-70,14); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(70,4-70,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Vale.X64.Machine_s.reg)
(HasType @x1
(Vale.X64.Machine_s.t_reg @x0))
(HasType @x2
Vale.X64.State.vale_state))
(HasType (Vale.X64.State.update_reg @x0
@x1
@x2)
Vale.X64.State.vale_state))
 

:pattern ((Vale.X64.State.update_reg @x0
@x1
@x2))
:qid typing_Vale.X64.State.update_reg))

:named typing_Vale.X64.State.update_reg))
;;;;;;;;;;;;;;;;Equation for Vale.X64.State.update_reg
;;; Fact-ids: Name Vale.X64.State.update_reg; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(70,4-70,14); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(70,4-70,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.State.update_reg @x0
@x1
@x2)
(Vale.X64.State.Mkvale_state (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x2)
(Vale.X64.Regs.upd @x0
@x1
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x2)
(Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x2)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x2)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x2)))
 

:pattern ((Vale.X64.State.update_reg @x0
@x1
@x2))
:qid equation_Vale.X64.State.update_reg))

:named equation_Vale.X64.State.update_reg))

; </end encoding Vale.X64.State.update_reg>


; <Start encoding Vale.X64.State.update_reg_64>

(declare-fun Vale.X64.State.update_reg_64 (Term Term Term) Term)
(declare-fun Tm_arrow_dc6640eddd09e65185dd6c6db1411210 () Term)
(declare-fun Vale.X64.State.update_reg_64@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.State.update_reg_64
;;; Fact-ids: Name Vale.X64.State.update_reg_64; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(74,4-74,17); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(74,4-74,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.State.update_reg_64 @x0
@x1
@x2)
(Vale.X64.State.update_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
@x0)
@x1
@x2))
 

:pattern ((Vale.X64.State.update_reg_64 @x0
@x1
@x2))
:qid equation_Vale.X64.State.update_reg_64))

:named equation_Vale.X64.State.update_reg_64))

; </end encoding Vale.X64.State.update_reg_64>


; <Start encoding Vale.X64.State.update_flag>

(declare-fun Vale.X64.State.update_flag (Term Term Term) Term)
(declare-fun Tm_arrow_f1e53675b1d6011a7ddf8aaf164d3070 () Term)
(declare-fun Vale.X64.State.update_flag@tok () Term)

; </end encoding Vale.X64.State.update_flag>


; <Start encoding Vale.X64.State.update_reg_xmm>

(declare-fun Vale.X64.State.update_reg_xmm (Term Term Term) Term)
(declare-fun Tm_arrow_1866d7e7db840b4920e99185265516b3 () Term)
(declare-fun Vale.X64.State.update_reg_xmm@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.State.update_reg_xmm
;;; Fact-ids: Name Vale.X64.State.update_reg_xmm; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(82,4-82,18); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(82,4-82,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.State.update_reg_xmm @x0
@x1
@x2)
(Vale.X64.State.update_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
@x0)
@x1
@x2))
 

:pattern ((Vale.X64.State.update_reg_xmm @x0
@x1
@x2))
:qid equation_Vale.X64.State.update_reg_xmm))

:named equation_Vale.X64.State.update_reg_xmm))

; </end encoding Vale.X64.State.update_reg_xmm>


; <Start encoding Vale.X64.State.update_stack64>

(declare-fun Vale.X64.State.update_stack64 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5cd728b71ea97e28354e04e3308b0ef9 () Term)
(declare-fun Vale.X64.State.update_stack64@tok () Term)

; </end encoding Vale.X64.State.update_stack64>


; <Start encoding Vale.X64.State.valid_maddr>

(declare-fun Vale.X64.State.valid_maddr (Term Term) Term)
(declare-fun Tm_arrow_4065ff7a8c389c31db0db7d02cdd08b3 () Term)
(declare-fun Vale.X64.State.valid_maddr@tok () Term)

; </end encoding Vale.X64.State.valid_maddr>


; <Start encoding Vale.X64.State.valid_maddr128>

(declare-fun Vale.X64.State.valid_maddr128 (Term Term) Term)

(declare-fun Vale.X64.State.valid_maddr128@tok () Term)

; </end encoding Vale.X64.State.valid_maddr128>


; <Start encoding Vale.X64.State.valid_src_operand>

(declare-fun Vale.X64.State.valid_src_operand (Term Term) Term)
(declare-fun Tm_arrow_ac89bdbad0c108f760b008c15be4a1bb () Term)
(declare-fun Vale.X64.State.valid_src_operand@tok () Term)

; </end encoding Vale.X64.State.valid_src_operand>


; <Start encoding Vale.X64.State.valid_src_operand128>

(declare-fun Vale.X64.State.valid_src_operand128 (Term Term) Term)
(declare-fun Tm_arrow_67deda548fe932bcaa14eb0890892209 () Term)
(declare-fun Vale.X64.State.valid_src_operand128@tok () Term)

; </end encoding Vale.X64.State.valid_src_operand128>


; <Start encoding Vale.X64.State.state_eta>

(declare-fun Vale.X64.State.state_eta (Term) Term)
(declare-fun Tm_arrow_70932aee78d69fb5f0c7e9685d2e14d2 () Term)
(declare-fun Vale.X64.State.state_eta@tok () Term)

; </end encoding Vale.X64.State.state_eta>


; <Start encoding Vale.X64.State.state_eq>

(declare-fun Vale.X64.State.state_eq (Term Term) Term)
(declare-fun Tm_arrow_dab69baede3380c0095af1593e1742e6 () Term)
(declare-fun Vale.X64.State.state_eq@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.State.state_eq
;;; Fact-ids: Name Vale.X64.State.state_eq; Namespace Vale.X64.State
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(133,4-133,12); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(133,4-133,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Vale.X64.State.state_eq @x0
@x1))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(134,2-139,38); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(134,2-139,38)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(134,2-134,22); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(134,2-134,22)
(= (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x0)
(Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x1))


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(135,2-135,34); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(135,2-135,34)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(135,2-135,34); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(135,2-135,34)
(Vale.X64.Regs.equal (Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x1))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(136,2-136,37); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(136,2-136,37)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(136,2-136,37); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(136,2-136,37)
(Vale.X64.Flags.equal (Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x0)
(Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x1))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(137,2-137,44); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(137,2-137,44)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(137,2-137,44); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(137,2-137,44)
(Vale.X64.Memory.vale_full_heap_equal (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0)
(Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x1))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(138,2-138,28); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(138,2-138,28)
(= (Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x0)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x1))


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(139,2-139,38); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.State.fsti(139,2-139,38)
(= (Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x0)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x1))
)
)
 

:pattern ((Vale.X64.State.state_eq @x0
@x1))
:qid equation_Vale.X64.State.state_eq))

:named equation_Vale.X64.State.state_eq))

; </end encoding Vale.X64.State.state_eq>


; End Externals for interface Vale.X64.State


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.State (203 decls; total size 33970)

;;; Start interface Vale.X64.Decls

; Externals for interface Vale.X64.Decls


; <Start encoding Vale.X64.Decls.vale_heap>

(declare-fun Vale.X64.Decls.vale_heap () Term)

; </end encoding Vale.X64.Decls.vale_heap>


; <Start encoding Vale.X64.Decls.vale_full_heap>

(declare-fun Vale.X64.Decls.vale_full_heap () Term)

; </end encoding Vale.X64.Decls.vale_full_heap>


; <Start encoding Vale.X64.Decls.heaplet_id>

(declare-fun Vale.X64.Decls.heaplet_id () Term)

; </end encoding Vale.X64.Decls.heaplet_id>


; <Start encoding Vale.X64.Decls.quad32>

(declare-fun Vale.X64.Decls.quad32 (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.quad32>


; <Start encoding Vale.X64.Decls.cf>

(declare-fun Vale.X64.Decls.cf (Term) Term)
(declare-fun Tm_arrow_199c073943466e0d1d1a3a96a9b41bbf () Term)
(declare-fun Vale.X64.Decls.cf@tok () Term)

; </end encoding Vale.X64.Decls.cf>


; <Start encoding Vale.X64.Decls.overflow>

(declare-fun Vale.X64.Decls.overflow (Term) Term)

(declare-fun Vale.X64.Decls.overflow@tok () Term)

; </end encoding Vale.X64.Decls.overflow>


; <Start encoding Vale.X64.Decls.valid_cf>

(declare-fun Vale.X64.Decls.valid_cf (Term) Term)

(declare-fun Vale.X64.Decls.valid_cf@tok () Term)

; </end encoding Vale.X64.Decls.valid_cf>


; <Start encoding Vale.X64.Decls.valid_of>

(declare-fun Vale.X64.Decls.valid_of (Term) Term)

(declare-fun Vale.X64.Decls.valid_of@tok () Term)

; </end encoding Vale.X64.Decls.valid_of>


; <Start encoding Vale.X64.Decls.updated_cf>

(declare-fun Vale.X64.Decls.updated_cf (Term Term) Term)
(declare-fun Tm_refine_f5b7985bc3c2bc5a5dee962352a41f5d (Term Term) Term)
(declare-fun Tm_arrow_cf3b93b8cc17ff29b6e9bb80f195a59e () Term)
(declare-fun Vale.X64.Decls.updated_cf@tok () Term)


; </end encoding Vale.X64.Decls.updated_cf>


; <Start encoding Vale.X64.Decls.updated_of>

(declare-fun Vale.X64.Decls.updated_of (Term Term) Term)
(declare-fun Tm_refine_1d611ab70e7b74556741b4d59722e097 (Term Term) Term)
(declare-fun Tm_arrow_7a648421dc6919d68a69de14ca099dee () Term)
(declare-fun Vale.X64.Decls.updated_of@tok () Term)


; </end encoding Vale.X64.Decls.updated_of>


; <Start encoding Vale.X64.Decls.maintained_cf>

(declare-fun Vale.X64.Decls.maintained_cf (Term Term) Term)
(declare-fun Tm_refine_91b21bda257faf7d7870e0299e500a49 (Term Term) Term)
(declare-fun Tm_arrow_368f22d41220e873608af3e9c16b7c88 () Term)
(declare-fun Vale.X64.Decls.maintained_cf@tok () Term)


; </end encoding Vale.X64.Decls.maintained_cf>


; <Start encoding Vale.X64.Decls.maintained_of>

(declare-fun Vale.X64.Decls.maintained_of (Term Term) Term)
(declare-fun Tm_refine_449c6217aeda38f4b46138844d86130d (Term Term) Term)
(declare-fun Tm_arrow_f031d1eb07cd4fcd6a25188a2d50afba () Term)
(declare-fun Vale.X64.Decls.maintained_of@tok () Term)


; </end encoding Vale.X64.Decls.maintained_of>


; <Start encoding Vale.X64.Decls.va_subscript>

(declare-fun Vale.X64.Decls.va_subscript (Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_subscript@tok () Term)

; </end encoding Vale.X64.Decls.va_subscript>


; <Start encoding Vale.X64.Decls.va_update>

(declare-fun Vale.X64.Decls.va_update (Term Term) Term)
(declare-fun Tm_arrow_e76ad7ea1b49a51ebc304bcd6e344d98 (Term Term) Term)
(declare-fun Tm_arrow_ecbe25e460c8c11eb9fd7d4047b093d0 () Term)
(declare-fun Vale.X64.Decls.va_update@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.Decls.va_update; Namespace Vale.X64.Decls
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Map.upd@tok))
:named @kick_partial_app_8a7f7b4aae27e82e9b0c2aa043fb2952))

; </end encoding Vale.X64.Decls.va_update>


; <Start encoding Vale.X64.Decls.va_hd>

(declare-fun Vale.X64.Decls.va_hd (Term) Term)

(declare-fun Tm_arrow_217deb899d714167bdbcd2699ffe02f3 (Term) Term)
(declare-fun Tm_arrow_fff83db00d0bcb7884cf05c841fa8ac4 () Term)
(declare-fun Vale.X64.Decls.va_hd@tok () Term)


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.Decls.va_hd; Namespace Vale.X64.Decls
(assert (! (Valid (ApplyTT __uu__PartialApp
Prims.__proj__Cons__item__hd@tok))
:named @kick_partial_app_ca47fe5ed01d63708aad51b09089ec72))

; </end encoding Vale.X64.Decls.va_hd>


; <Start encoding Vale.X64.Decls.va_reveal_eq>

(declare-fun Vale.X64.Decls.va_reveal_eq (Term Term Term Term) Term)
(declare-fun Tm_arrow_571aacb237822a116e229a74fa2f9333 () Term)
(declare-fun Vale.X64.Decls.va_reveal_eq@tok () Term)

; </end encoding Vale.X64.Decls.va_reveal_eq>


; <Start encoding Vale.X64.Decls.va_reveal_opaque>

(declare-fun Vale.X64.Decls.va_reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_ee46d1099a5294ed41ecad05ed3aed34 (Term Term Term) Term)
(declare-fun Tm_arrow_b4a1afa8caf382a1c2ca7a86f16773cb (Term Term) Term)
(declare-fun Tm_arrow_86fd8898d4fdd20931f61c60d4e76607 () Term)
(declare-fun Vale.X64.Decls.va_reveal_opaque@tok () Term)




; </end encoding Vale.X64.Decls.va_reveal_opaque>


; <Start encoding Vale.X64.Decls.va_if>

(declare-fun Tm_refine_8f68c7e17319ca709541d18c76db2671 (Term) Term)
(declare-fun Tm_ghost_arrow_30853e489012f08e714eeb8d6ec738ed (Term Term) Term)
(declare-fun Tm_refine_de09779676242898794a0b057d5f5bb4 (Term) Term)
(declare-fun Tm_ghost_arrow_f5ddc73608a3b8e7289a113e43b8c18b (Term Term) Term)
(declare-fun Vale.X64.Decls.va_if (Term Term Term Term) Term)




(declare-fun Tm_ghost_arrow_399195b475b0338880af3233e85530eb () Term)
(declare-fun Vale.X64.Decls.va_if@tok () Term)





; </end encoding Vale.X64.Decls.va_if>


; <Start encoding Vale.X64.Decls.total_if>

(declare-fun Vale.X64.Decls.total_if (Term Term Term Term) Term)
(declare-fun Tm_arrow_aee4379832b184ca8a393159ae21faa1 () Term)
(declare-fun Vale.X64.Decls.total_if@tok () Term)

; </end encoding Vale.X64.Decls.total_if>


; <Start encoding Vale.X64.Decls.total_thunk_if>


(declare-fun Tm_arrow_ec695607a6036cd3b431273cf0b0cbcb (Term Term) Term)

(declare-fun Tm_arrow_ddf0c1124a0439c4b3a754c9dd42bbe8 (Term Term) Term)
(declare-fun Vale.X64.Decls.total_thunk_if (Term Term Term Term) Term)




(declare-fun Tm_arrow_b6b3a1c77e192d683352f50c7afebd53 () Term)
(declare-fun Vale.X64.Decls.total_thunk_if@tok () Term)





; </end encoding Vale.X64.Decls.total_thunk_if>


; <Start encoding Vale.X64.Decls.va_int_at_least>

(declare-fun Vale.X64.Decls.va_int_at_least (Term) Term)

(declare-fun Vale.X64.Decls.va_int_at_least@tok () Term)
(declare-fun Tm_refine_4f1d92a9a3f071e1fa3026ba94fce31c (Term) Term)

; </end encoding Vale.X64.Decls.va_int_at_least>


; <Start encoding Vale.X64.Decls.va_int_at_most>

(declare-fun Vale.X64.Decls.va_int_at_most (Term) Term)

(declare-fun Vale.X64.Decls.va_int_at_most@tok () Term)
(declare-fun Tm_refine_6cb7465bee17aa189ee0937ce1b9dd08 (Term) Term)

; </end encoding Vale.X64.Decls.va_int_at_most>


; <Start encoding Vale.X64.Decls.va_int_range>

(declare-fun Vale.X64.Decls.va_int_range (Term Term) Term)
(declare-fun Tm_arrow_4ac6f7d06c7c49777e40abfcba22b5d0 () Term)
(declare-fun Vale.X64.Decls.va_int_range@tok () Term)
(declare-fun Tm_refine_4d38686bf695f79f110ce5aef057279f (Term Term) Term)

; </end encoding Vale.X64.Decls.va_int_range>


; <Start encoding Vale.X64.Decls.ins>

(declare-fun Vale.X64.Decls.ins () Term)

; </end encoding Vale.X64.Decls.ins>


; <Start encoding Vale.X64.Decls.ocmp>

(declare-fun Vale.X64.Decls.ocmp (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.ocmp>


; <Start encoding Vale.X64.Decls.va_code>

(declare-fun Vale.X64.Decls.va_code () Term)

; </end encoding Vale.X64.Decls.va_code>


; <Start encoding Vale.X64.Decls.va_codes>

(declare-fun Vale.X64.Decls.va_codes () Term)

; </end encoding Vale.X64.Decls.va_codes>


; <Start encoding Vale.X64.Decls.va_tl>

(declare-fun Vale.X64.Decls.va_tl (Term) Term)
(declare-fun Tm_refine_256473b737e882213b7e16799d4bf152 (Term) Term)
(declare-fun Tm_ghost_arrow_4d6942cfaff5c504675c08ba23fd4abf () Term)
(declare-fun Vale.X64.Decls.va_tl@tok () Term)


; </end encoding Vale.X64.Decls.va_tl>


; <Start encoding Vale.X64.Decls.va_state>

(declare-fun Vale.X64.Decls.va_state () Term)

; </end encoding Vale.X64.Decls.va_state>


; <Start encoding Vale.X64.Decls.va_fuel>

(declare-fun Vale.X64.Decls.va_fuel () Term)

; </end encoding Vale.X64.Decls.va_fuel>


; <Start encoding Vale.X64.Decls.va_operand_opr64>

(declare-fun Vale.X64.Decls.va_operand_opr64 (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.va_operand_opr64>


; <Start encoding Vale.X64.Decls.reg_operand>

(declare-fun Vale.X64.Decls.reg_operand () Term)
(declare-fun Tm_refine_c55af5cefb01844d307de87b2d347802 () Term)

; </end encoding Vale.X64.Decls.reg_operand>


; <Start encoding Vale.X64.Decls.va_operand_reg_opr64>

(declare-fun Vale.X64.Decls.va_operand_reg_opr64 () Term)


; </end encoding Vale.X64.Decls.va_operand_reg_opr64>


; <Start encoding Vale.X64.Decls.va_operand_dst_opr64>

(declare-fun Vale.X64.Decls.va_operand_dst_opr64 (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.va_operand_dst_opr64>


; <Start encoding Vale.X64.Decls.va_operand_shift_amt64>

(declare-fun Vale.X64.Decls.va_operand_shift_amt64 (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.va_operand_shift_amt64>


; <Start encoding Vale.X64.Decls.cmp_operand>

(declare-fun Vale.X64.Decls.cmp_operand () Term)
(declare-fun Tm_refine_1e194d85e0a1630d86e9d3f36262db9c () Term)

; </end encoding Vale.X64.Decls.cmp_operand>


; <Start encoding Vale.X64.Decls.va_operand_xmm>

(declare-fun Vale.X64.Decls.va_operand_xmm () Term)

; </end encoding Vale.X64.Decls.va_operand_xmm>


; <Start encoding Vale.X64.Decls.va_operand_opr128>

(declare-fun Vale.X64.Decls.va_operand_opr128 (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.va_operand_opr128>


; <Start encoding Vale.X64.Decls.va_operand_heaplet>

(declare-fun Vale.X64.Decls.va_operand_heaplet () Term)

; </end encoding Vale.X64.Decls.va_operand_heaplet>


; <Start encoding Vale.X64.Decls.va_pbool>

(declare-fun Vale.X64.Decls.va_pbool () Term)

; </end encoding Vale.X64.Decls.va_pbool>


; <Start encoding Vale.X64.Decls.va_ttrue>

(declare-fun Vale.X64.Decls.va_ttrue (Term) Term)
(declare-fun Tm_arrow_81f75a38fbe2e2aaeed06b2484065383 () Term)
(declare-fun Vale.X64.Decls.va_ttrue@tok () Term)

; </end encoding Vale.X64.Decls.va_ttrue>


; <Start encoding Vale.X64.Decls.va_ffalse>

(declare-fun Vale.X64.Decls.va_ffalse (Term) Term)
(declare-fun Tm_arrow_8c8ae8e5cebf397540c977042e39e8cd () Term)
(declare-fun Vale.X64.Decls.va_ffalse@tok () Term)

; </end encoding Vale.X64.Decls.va_ffalse>


; <Start encoding Vale.X64.Decls.va_pbool_and>

(declare-fun Vale.X64.Decls.va_pbool_and (Term Term) Term)
(declare-fun Tm_arrow_54f0b7d9d082c78eda3f91ee51f5fac9 () Term)
(declare-fun Vale.X64.Decls.va_pbool_and@tok () Term)

; </end encoding Vale.X64.Decls.va_pbool_and>


; <Start encoding Vale.X64.Decls.get_reason>

(declare-fun Vale.X64.Decls.get_reason (Term) Term)
(declare-fun Tm_arrow_1bf28ad1b4ad524ecf55d7c6b1cb7bcc () Term)
(declare-fun Vale.X64.Decls.get_reason@tok () Term)

; </end encoding Vale.X64.Decls.get_reason>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Decls.va_transformation_result () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.Decls.Mkva_transformation_result (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Decls.Mkva_transformation_result_success (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.Decls.Mkva_transformation_result_result (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkva_transformation_result
(declare-fun Vale.X64.Decls.Mkva_transformation_result@tok () Term)
(declare-fun Tm_arrow_c47a002b8003a7843acdd4c37a6abe7f () Term)

; <Start encoding Vale.X64.Decls.va_transformation_result>


; <start constructor Vale.X64.Decls.va_transformation_result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Decls.va_transformation_result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
217)
(= __@x0
Vale.X64.Decls.va_transformation_result)))

; </end constructor Vale.X64.Decls.va_transformation_result>


; </end encoding Vale.X64.Decls.va_transformation_result>


; <Start encoding Vale.X64.Decls.Mkva_transformation_result>


; <start constructor Vale.X64.Decls.Mkva_transformation_result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.Decls.Mkva_transformation_result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
223)
(= __@x0
(Vale.X64.Decls.Mkva_transformation_result (Vale.X64.Decls.Mkva_transformation_result_success __@x0)
(Vale.X64.Decls.Mkva_transformation_result_result __@x0)))))

; </end constructor Vale.X64.Decls.Mkva_transformation_result>


; </end encoding Vale.X64.Decls.Mkva_transformation_result>


; </end encoding >


; <Start encoding Vale.X64.Decls.__proj__Mkva_transformation_result__item__success>

(declare-fun Vale.X64.Decls.__proj__Mkva_transformation_result__item__success (Term) Term)
(declare-fun Tm_arrow_62f7bfdd86fe60bb4a5033a792cfe7c7 () Term)
(declare-fun Vale.X64.Decls.__proj__Mkva_transformation_result__item__success@tok () Term)

; </end encoding Vale.X64.Decls.__proj__Mkva_transformation_result__item__success>


; <Skipped Vale.X64.Decls.__proj__Mkva_transformation_result__item__success/>


; <Start encoding Vale.X64.Decls.__proj__Mkva_transformation_result__item__result>

(declare-fun Vale.X64.Decls.__proj__Mkva_transformation_result__item__result (Term) Term)
(declare-fun Tm_arrow_ef50595ec53e21a5e6fbca4d69d73b7d () Term)
(declare-fun Vale.X64.Decls.__proj__Mkva_transformation_result__item__result@tok () Term)

; </end encoding Vale.X64.Decls.__proj__Mkva_transformation_result__item__result>


; <Skipped Vale.X64.Decls.__proj__Mkva_transformation_result__item__result/>


; <Start encoding Vale.X64.Decls.va_get_success>

(declare-fun Vale.X64.Decls.va_get_success (Term) Term)

(declare-fun Vale.X64.Decls.va_get_success@tok () Term)

; </end encoding Vale.X64.Decls.va_get_success>


; <Start encoding Vale.X64.Decls.va_get_result>

(declare-fun Vale.X64.Decls.va_get_result (Term) Term)

(declare-fun Vale.X64.Decls.va_get_result@tok () Term)

; </end encoding Vale.X64.Decls.va_get_result>


; <Start encoding Vale.X64.Decls.mul_nat_helper>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.mul_nat_helper (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.mul_nat_helper@tok () Term)

; </end encoding Vale.X64.Decls.mul_nat_helper>


; <Start encoding Vale.X64.Decls.va_mul_nat>

(declare-fun Vale.X64.Decls.va_mul_nat (Term Term) Term)
(declare-fun Tm_arrow_2bb228db8432d0cdc106cb64c22e55ba () Term)
(declare-fun Vale.X64.Decls.va_mul_nat@tok () Term)

; </end encoding Vale.X64.Decls.va_mul_nat>


; <Start encoding Vale.X64.Decls.va_expand_state>

(declare-fun Vale.X64.Decls.va_expand_state (Term) Term)

(declare-fun Vale.X64.Decls.va_expand_state@tok () Term)

; </end encoding Vale.X64.Decls.va_expand_state>


; <Start encoding Vale.X64.Decls.get_reg>

(declare-fun Vale.X64.Decls.get_reg (Term) Term)
(declare-fun Tm_arrow_bcc8c6003622c0d994c4880b8c0da9be () Term)
(declare-fun Vale.X64.Decls.get_reg@tok () Term)

; </end encoding Vale.X64.Decls.get_reg>


; <Start encoding Vale.X64.Decls.buffer_readable>

(declare-fun Vale.X64.Decls.buffer_readable (Term Term Term) Term)

(declare-fun Vale.X64.Decls.buffer_readable@tok () Term)

; </end encoding Vale.X64.Decls.buffer_readable>


; <Start encoding Vale.X64.Decls.buffer_writeable>

(declare-fun Vale.X64.Decls.buffer_writeable (Term Term) Term)

(declare-fun Vale.X64.Decls.buffer_writeable@tok () Term)

; </end encoding Vale.X64.Decls.buffer_writeable>


; <Start encoding Vale.X64.Decls.buffer_length>

(declare-fun Vale.X64.Decls.buffer_length (Term Term) Term)

(declare-fun Vale.X64.Decls.buffer_length@tok () Term)

; </end encoding Vale.X64.Decls.buffer_length>


; <Start encoding Vale.X64.Decls.buffer8_as_seq>

(declare-fun Vale.X64.Decls.buffer8_as_seq (Term Term) Term)
(declare-fun Tm_ghost_arrow_85ba17f2c99374cf3fb92e4c9b699931 () Term)
(declare-fun Vale.X64.Decls.buffer8_as_seq@tok () Term)

; </end encoding Vale.X64.Decls.buffer8_as_seq>


; <Start encoding Vale.X64.Decls.buffer64_as_seq>

(declare-fun Vale.X64.Decls.buffer64_as_seq (Term Term) Term)
(declare-fun Tm_ghost_arrow_e66cae769b46f3e4b51a48fb3d73c3f7 () Term)
(declare-fun Vale.X64.Decls.buffer64_as_seq@tok () Term)

; </end encoding Vale.X64.Decls.buffer64_as_seq>


; <Start encoding Vale.X64.Decls.s64>

(declare-fun Vale.X64.Decls.s64 (Term Term) Term)

(declare-fun Vale.X64.Decls.s64@tok () Term)

; </end encoding Vale.X64.Decls.s64>


; <Start encoding Vale.X64.Decls.buffer128_as_seq>

(declare-fun Vale.X64.Decls.buffer128_as_seq (Term Term) Term)
(declare-fun Tm_ghost_arrow_5e13c1ac6dddc7e18ca1e9e23bc5668e () Term)
(declare-fun Vale.X64.Decls.buffer128_as_seq@tok () Term)

; </end encoding Vale.X64.Decls.buffer128_as_seq>


; <Start encoding Vale.X64.Decls.s128>

(declare-fun Vale.X64.Decls.s128 (Term Term) Term)

(declare-fun Vale.X64.Decls.s128@tok () Term)

; </end encoding Vale.X64.Decls.s128>


; <Start encoding Vale.X64.Decls.valid_src_addr>

(declare-fun Vale.X64.Decls.valid_src_addr (Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.valid_src_addr@tok () Term)

; </end encoding Vale.X64.Decls.valid_src_addr>


; <Start encoding Vale.X64.Decls.valid_dst_addr>

(declare-fun Vale.X64.Decls.valid_dst_addr (Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.valid_dst_addr@tok () Term)

; </end encoding Vale.X64.Decls.valid_dst_addr>


; <Start encoding Vale.X64.Decls.buffer64_read>

(declare-fun Vale.X64.Decls.buffer64_read (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_894ef7e262ce25a546e5503531b12c30 () Term)
(declare-fun Vale.X64.Decls.buffer64_read@tok () Term)

; </end encoding Vale.X64.Decls.buffer64_read>


; <Start encoding Vale.X64.Decls.buffer128_read>

(declare-fun Vale.X64.Decls.buffer128_read (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_72113cb5aa8417aaacfde61fb0b752b8 () Term)
(declare-fun Vale.X64.Decls.buffer128_read@tok () Term)

; </end encoding Vale.X64.Decls.buffer128_read>


; <Start encoding Vale.X64.Decls.modifies_mem>

(declare-fun Vale.X64.Decls.modifies_mem (Term Term Term) Term)

(declare-fun Vale.X64.Decls.modifies_mem@tok () Term)

; </end encoding Vale.X64.Decls.modifies_mem>


; <Start encoding Vale.X64.Decls.loc_buffer>

(declare-fun Vale.X64.Decls.loc_buffer (Term Term) Term)

(declare-fun Vale.X64.Decls.loc_buffer@tok () Term)

; </end encoding Vale.X64.Decls.loc_buffer>


; <Start encoding Vale.X64.Decls.locs_disjoint>

(declare-fun Vale.X64.Decls.locs_disjoint (Term) Term)

(declare-fun Vale.X64.Decls.locs_disjoint@tok () Term)







; </end encoding Vale.X64.Decls.locs_disjoint>


; <Start encoding Vale.X64.Decls.loc_union>

(declare-fun Vale.X64.Decls.loc_union (Term Term) Term)

(declare-fun Vale.X64.Decls.loc_union@tok () Term)

; </end encoding Vale.X64.Decls.loc_union>


; <Start encoding Vale.X64.Decls.valid_buf_maddr64>

(declare-fun Vale.X64.Decls.valid_buf_maddr64 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_98f1ff5f87932a23480b6dc872ac0eb3 () Term)
(declare-fun Vale.X64.Decls.valid_buf_maddr64@tok () Term)

; </end encoding Vale.X64.Decls.valid_buf_maddr64>


; <Start encoding Vale.X64.Decls.valid_buf_maddr128>

(declare-fun Vale.X64.Decls.valid_buf_maddr128 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_dbf8b7192fddfb18a40fab68e2303028 () Term)
(declare-fun Vale.X64.Decls.valid_buf_maddr128@tok () Term)

; </end encoding Vale.X64.Decls.valid_buf_maddr128>


; <Start encoding Vale.X64.Decls.valid_mem_operand64>

(declare-fun Vale.X64.Decls.valid_mem_operand64 (Term Term Term Term) Term)
(declare-fun Tm_arrow_e017c3eaf8de6b9c36eb7b6973888e08 () Term)
(declare-fun Vale.X64.Decls.valid_mem_operand64@tok () Term)

(declare-fun Tm_abs_dea44c46a4ad345f289efc93d1d50262 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3150ca9327e5e5b82121da6f2003e5a9 () Term)
(declare-fun Tm_abs_a48d9fb98d48735782a62f30fe47c7d9 (Term Term Term Term) Term)

; </end encoding Vale.X64.Decls.valid_mem_operand64>


; <Start encoding Vale.X64.Decls.valid_mem_operand128>

(declare-fun Vale.X64.Decls.valid_mem_operand128 (Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.valid_mem_operand128@tok () Term)

(declare-fun Tm_abs_4c21f2d00e927747a0c9c991ddf95f5e (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9435dc0babf600b9d2c320980380f720 () Term)
(declare-fun Tm_abs_0cc0919fc1cb6f6a28b30c4e0d5a6903 (Term Term Term Term) Term)

; </end encoding Vale.X64.Decls.valid_mem_operand128>


; <Start encoding Vale.X64.Decls.valid_operand>

(declare-fun Vale.X64.Decls.valid_operand (Term Term) Term)

(declare-fun Vale.X64.Decls.valid_operand@tok () Term)

; </end encoding Vale.X64.Decls.valid_operand>


; <Start encoding Vale.X64.Decls.valid_operand128>

(declare-fun Vale.X64.Decls.valid_operand128 (Term Term) Term)

(declare-fun Vale.X64.Decls.valid_operand128@tok () Term)

; </end encoding Vale.X64.Decls.valid_operand128>


; <Start encoding Vale.X64.Decls.va_fuel_default>

(declare-fun Vale.X64.Decls.va_fuel_default (Term) Term)
(declare-fun Tm_arrow_c0ffacd85ad53f46f8cb89e7e6869564 () Term)
(declare-fun Vale.X64.Decls.va_fuel_default@tok () Term)

; </end encoding Vale.X64.Decls.va_fuel_default>


; <Start encoding Vale.X64.Decls.va_op_xmm_xmm>

(declare-fun Vale.X64.Decls.va_op_xmm_xmm (Term) Term)
(declare-fun Tm_arrow_041cd27a58d3f637e1cd0a596684159c () Term)
(declare-fun Vale.X64.Decls.va_op_xmm_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_op_xmm_xmm>


; <Start encoding Vale.X64.Decls.va_op_opr64_reg64>

(declare-fun Vale.X64.Decls.va_op_opr64_reg64 (Term) Term)
(declare-fun Tm_arrow_cd0886e06390fcd6721195fa149b736e () Term)
(declare-fun Vale.X64.Decls.va_op_opr64_reg64@tok () Term)

; </end encoding Vale.X64.Decls.va_op_opr64_reg64>


; <Start encoding Vale.X64.Decls.va_op_reg64_reg64>

(declare-fun Vale.X64.Decls.va_op_reg64_reg64 (Term) Term)

(declare-fun Vale.X64.Decls.va_op_reg64_reg64@tok () Term)

; </end encoding Vale.X64.Decls.va_op_reg64_reg64>


; <Start encoding Vale.X64.Decls.va_op_opr128_xmm>

(declare-fun Vale.X64.Decls.va_op_opr128_xmm (Term) Term)
(declare-fun Tm_arrow_f55670c9c12d5cdd71cd4966ff3e7165 () Term)
(declare-fun Vale.X64.Decls.va_op_opr128_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_op_opr128_xmm>


; <Start encoding Vale.X64.Decls.va_const_opr64>

(declare-fun Vale.X64.Decls.va_const_opr64 (Term) Term)
(declare-fun Tm_arrow_72e98523cc0b15b9933146172b2bc584 () Term)
(declare-fun Vale.X64.Decls.va_const_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_const_opr64>


; <Start encoding Vale.X64.Decls.va_const_shift_amt64>

(declare-fun Vale.X64.Decls.va_const_shift_amt64 (Term) Term)

(declare-fun Vale.X64.Decls.va_const_shift_amt64@tok () Term)

; </end encoding Vale.X64.Decls.va_const_shift_amt64>


; <Start encoding Vale.X64.Decls.va_op_shift_amt64_reg64>

(declare-fun Vale.X64.Decls.va_op_shift_amt64_reg64 (Term) Term)

(declare-fun Vale.X64.Decls.va_op_shift_amt64_reg64@tok () Term)

; </end encoding Vale.X64.Decls.va_op_shift_amt64_reg64>


; <Start encoding Vale.X64.Decls.va_op_cmp_reg64>

(declare-fun Vale.X64.Decls.va_op_cmp_reg64 (Term) Term)

(declare-fun Tm_arrow_a0bf952647f1428f2651ef2beb72fb7b () Term)
(declare-fun Vale.X64.Decls.va_op_cmp_reg64@tok () Term)


; </end encoding Vale.X64.Decls.va_op_cmp_reg64>


; <Start encoding Vale.X64.Decls.va_const_cmp>

(declare-fun Vale.X64.Decls.va_const_cmp (Term) Term)

(declare-fun Tm_arrow_594acd8799a5f54c53374f4afef2a3bd () Term)
(declare-fun Vale.X64.Decls.va_const_cmp@tok () Term)


; </end encoding Vale.X64.Decls.va_const_cmp>


; <Start encoding Vale.X64.Decls.va_coerce_reg64_opr64_to_cmp>

(declare-fun Vale.X64.Decls.va_coerce_reg64_opr64_to_cmp (Term) Term)

(declare-fun Tm_arrow_fa99c89a6b809285eab3dfbd5c92a335 () Term)
(declare-fun Vale.X64.Decls.va_coerce_reg64_opr64_to_cmp@tok () Term)


; </end encoding Vale.X64.Decls.va_coerce_reg64_opr64_to_cmp>


; <Start encoding Vale.X64.Decls.va_coerce_reg_opr64_to_dst_opr64>

(declare-fun Vale.X64.Decls.va_coerce_reg_opr64_to_dst_opr64 (Term) Term)
(declare-fun Tm_arrow_e39f521d325002a71ce13660581055f4 () Term)
(declare-fun Vale.X64.Decls.va_coerce_reg_opr64_to_dst_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_coerce_reg_opr64_to_dst_opr64>


; <Start encoding Vale.X64.Decls.va_coerce_reg_opr64_to_opr64>

(declare-fun Vale.X64.Decls.va_coerce_reg_opr64_to_opr64 (Term) Term)

(declare-fun Vale.X64.Decls.va_coerce_reg_opr64_to_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_coerce_reg_opr64_to_opr64>


; <Start encoding Vale.X64.Decls.va_coerce_opr64_to_cmp>


(declare-fun Vale.X64.Decls.va_coerce_opr64_to_cmp (Term) Term)


(declare-fun Tm_arrow_385503350f722d233454e3ad9a799e5a () Term)
(declare-fun Vale.X64.Decls.va_coerce_opr64_to_cmp@tok () Term)



; </end encoding Vale.X64.Decls.va_coerce_opr64_to_cmp>


; <Start encoding Vale.X64.Decls.va_op_reg_opr64_reg64>

(declare-fun Vale.X64.Decls.va_op_reg_opr64_reg64 (Term) Term)
(declare-fun Tm_arrow_c63a8a45eff37e99a659eb744560fec2 () Term)
(declare-fun Vale.X64.Decls.va_op_reg_opr64_reg64@tok () Term)

; </end encoding Vale.X64.Decls.va_op_reg_opr64_reg64>


; <Start encoding Vale.X64.Decls.va_op_dst_opr64_reg64>

(declare-fun Vale.X64.Decls.va_op_dst_opr64_reg64 (Term) Term)

(declare-fun Vale.X64.Decls.va_op_dst_opr64_reg64@tok () Term)

; </end encoding Vale.X64.Decls.va_op_dst_opr64_reg64>


; <Start encoding Vale.X64.Decls.va_coerce_dst_opr64_to_opr64>

(declare-fun Vale.X64.Decls.va_coerce_dst_opr64_to_opr64 (Term) Term)
(declare-fun Tm_arrow_f39b531c997c681727eb745254070f34 () Term)
(declare-fun Vale.X64.Decls.va_coerce_dst_opr64_to_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_coerce_dst_opr64_to_opr64>


; <Start encoding Vale.X64.Decls.va_coerce_xmm_to_opr128>

(declare-fun Vale.X64.Decls.va_coerce_xmm_to_opr128 (Term) Term)

(declare-fun Vale.X64.Decls.va_coerce_xmm_to_opr128@tok () Term)

; </end encoding Vale.X64.Decls.va_coerce_xmm_to_opr128>


; <Start encoding Vale.X64.Decls.va_op_heaplet_mem_heaplet>

(declare-fun Vale.X64.Decls.va_op_heaplet_mem_heaplet (Term) Term)
(declare-fun Tm_arrow_7c36642bcd609ac8708a566d649966c0 () Term)
(declare-fun Vale.X64.Decls.va_op_heaplet_mem_heaplet@tok () Term)

; </end encoding Vale.X64.Decls.va_op_heaplet_mem_heaplet>


; <Start encoding Vale.X64.Decls.va_opr_code_Mem64>

(declare-fun Vale.X64.Decls.va_opr_code_Mem64 (Term Term Term Term) Term)
(declare-fun Tm_arrow_35147f510a5b1b42a6451529c2b8f9ae () Term)
(declare-fun Vale.X64.Decls.va_opr_code_Mem64@tok () Term)

; </end encoding Vale.X64.Decls.va_opr_code_Mem64>


; <Start encoding Vale.X64.Decls.va_opr_code_Stack>

(declare-fun Vale.X64.Decls.va_opr_code_Stack (Term Term Term) Term)
(declare-fun Tm_arrow_222ed0096dcab0e89c366cb12fbf2222 () Term)
(declare-fun Vale.X64.Decls.va_opr_code_Stack@tok () Term)

; </end encoding Vale.X64.Decls.va_opr_code_Stack>


; <Start encoding Vale.X64.Decls.va_opr_code_Mem128>

(declare-fun Vale.X64.Decls.va_opr_code_Mem128 (Term Term Term Term) Term)
(declare-fun Tm_arrow_ac0571968522d20f47e7a141070d3b2c () Term)
(declare-fun Vale.X64.Decls.va_opr_code_Mem128@tok () Term)

; </end encoding Vale.X64.Decls.va_opr_code_Mem128>


; <Start encoding Vale.X64.Decls.taint_at>

(declare-fun Vale.X64.Decls.taint_at (Term Term) Term)
(declare-fun Tm_arrow_ed8a5fdff280705a95cf8bb2a37be13e () Term)
(declare-fun Vale.X64.Decls.taint_at@tok () Term)

; </end encoding Vale.X64.Decls.taint_at>


; <Start encoding Vale.X64.Decls.va_get_ok>

(declare-fun Vale.X64.Decls.va_get_ok (Term) Term)

(declare-fun Vale.X64.Decls.va_get_ok@tok () Term)

; </end encoding Vale.X64.Decls.va_get_ok>


; <Start encoding Vale.X64.Decls.va_get_flags>

(declare-fun Vale.X64.Decls.va_get_flags (Term) Term)

(declare-fun Vale.X64.Decls.va_get_flags@tok () Term)

; </end encoding Vale.X64.Decls.va_get_flags>


; <Start encoding Vale.X64.Decls.va_get_reg64>

(declare-fun Vale.X64.Decls.va_get_reg64 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_get_reg64@tok () Term)

; </end encoding Vale.X64.Decls.va_get_reg64>


; <Start encoding Vale.X64.Decls.va_get_xmm>

(declare-fun Vale.X64.Decls.va_get_xmm (Term Term) Term)

(declare-fun Vale.X64.Decls.va_get_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_get_xmm>


; <Start encoding Vale.X64.Decls.va_get_mem>

(declare-fun Vale.X64.Decls.va_get_mem (Term) Term)

(declare-fun Vale.X64.Decls.va_get_mem@tok () Term)

; </end encoding Vale.X64.Decls.va_get_mem>


; <Start encoding Vale.X64.Decls.va_get_mem_layout>

(declare-fun Vale.X64.Decls.va_get_mem_layout (Term) Term)
(declare-fun Tm_arrow_1b8e9d231f61b5680e323777694e4099 () Term)
(declare-fun Vale.X64.Decls.va_get_mem_layout@tok () Term)

; </end encoding Vale.X64.Decls.va_get_mem_layout>


; <Start encoding Vale.X64.Decls.va_get_mem_heaplet>

(declare-fun Vale.X64.Decls.va_get_mem_heaplet (Term Term) Term)
(declare-fun Tm_arrow_bf4790a205907fd7f318a6374dbe7c76 () Term)
(declare-fun Vale.X64.Decls.va_get_mem_heaplet@tok () Term)

; </end encoding Vale.X64.Decls.va_get_mem_heaplet>


; <Start encoding Vale.X64.Decls.va_get_stack>

(declare-fun Vale.X64.Decls.va_get_stack (Term) Term)

(declare-fun Vale.X64.Decls.va_get_stack@tok () Term)

; </end encoding Vale.X64.Decls.va_get_stack>


; <Start encoding Vale.X64.Decls.va_get_stackTaint>

(declare-fun Vale.X64.Decls.va_get_stackTaint (Term) Term)

(declare-fun Vale.X64.Decls.va_get_stackTaint@tok () Term)

; </end encoding Vale.X64.Decls.va_get_stackTaint>


; <Start encoding Vale.X64.Decls.va_upd_ok>

(declare-fun Vale.X64.Decls.va_upd_ok (Term Term) Term)
(declare-fun Tm_arrow_2c40706b28dde21ce4da3b9ca0cfddd3 () Term)
(declare-fun Vale.X64.Decls.va_upd_ok@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.Decls.va_upd_ok; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(212,16-212,25); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(212,16-212,25)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.bool)
(HasType @x1
Vale.X64.State.vale_state))
(HasType (Vale.X64.Decls.va_upd_ok @x0
@x1)
Vale.X64.State.vale_state))
 

:pattern ((Vale.X64.Decls.va_upd_ok @x0
@x1))
:qid typing_Vale.X64.Decls.va_upd_ok))

:named typing_Vale.X64.Decls.va_upd_ok))
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_upd_ok
;;; Fact-ids: Name Vale.X64.Decls.va_upd_ok; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(212,16-212,25); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(212,16-212,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.Decls.va_upd_ok @x0
@x1)
(Vale.X64.State.Mkvale_state @x0
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x1)))
 

:pattern ((Vale.X64.Decls.va_upd_ok @x0
@x1))
:qid equation_Vale.X64.Decls.va_upd_ok))

:named equation_Vale.X64.Decls.va_upd_ok))

; </end encoding Vale.X64.Decls.va_upd_ok>


; <Start encoding Vale.X64.Decls.va_upd_flags>

(declare-fun Vale.X64.Decls.va_upd_flags (Term Term) Term)
(declare-fun Tm_arrow_f9d328b4c6141c6bb3bf5fb1394c012f () Term)
(declare-fun Vale.X64.Decls.va_upd_flags@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.Decls.va_upd_flags; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(213,16-213,28); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(213,16-213,28)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Vale.X64.Flags.t)
(HasType @x1
Vale.X64.State.vale_state))
(HasType (Vale.X64.Decls.va_upd_flags @x0
@x1)
Vale.X64.State.vale_state))
 

:pattern ((Vale.X64.Decls.va_upd_flags @x0
@x1))
:qid typing_Vale.X64.Decls.va_upd_flags))

:named typing_Vale.X64.Decls.va_upd_flags))
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_upd_flags
;;; Fact-ids: Name Vale.X64.Decls.va_upd_flags; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(213,16-213,28); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(213,16-213,28)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.Decls.va_upd_flags @x0
@x1)
(Vale.X64.State.Mkvale_state (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x1)
@x0
(Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x1)))
 

:pattern ((Vale.X64.Decls.va_upd_flags @x0
@x1))
:qid equation_Vale.X64.Decls.va_upd_flags))

:named equation_Vale.X64.Decls.va_upd_flags))

; </end encoding Vale.X64.Decls.va_upd_flags>


; <Start encoding Vale.X64.Decls.upd_register>

(declare-fun Vale.X64.Decls.upd_register (Term Term Term) Term)

(declare-fun Vale.X64.Decls.upd_register@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.upd_register
;;; Fact-ids: Name Vale.X64.Decls.upd_register; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(214,16-214,28); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(214,16-214,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.Decls.upd_register @x0
@x1
@x2)
(Vale.X64.State.update_reg @x0
@x1
@x2))
 

:pattern ((Vale.X64.Decls.upd_register @x0
@x1
@x2))
:qid equation_Vale.X64.Decls.upd_register))

:named equation_Vale.X64.Decls.upd_register))

; </end encoding Vale.X64.Decls.upd_register>


; <Start encoding Vale.X64.Decls.va_upd_reg64>

(declare-fun Vale.X64.Decls.va_upd_reg64 (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_upd_reg64@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.Decls.va_upd_reg64; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(215,16-215,28); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(215,16-215,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Vale.X64.Machine_s.reg_64)
(HasType @x1
Vale.Def.Words_s.nat64)
(HasType @x2
Vale.X64.State.vale_state))
(HasType (Vale.X64.Decls.va_upd_reg64 @x0
@x1
@x2)
Vale.X64.State.vale_state))
 

:pattern ((Vale.X64.Decls.va_upd_reg64 @x0
@x1
@x2))
:qid typing_Vale.X64.Decls.va_upd_reg64))

:named typing_Vale.X64.Decls.va_upd_reg64))
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_upd_reg64
;;; Fact-ids: Name Vale.X64.Decls.va_upd_reg64; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(215,16-215,28); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(215,16-215,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.Decls.va_upd_reg64 @x0
@x1
@x2)
(Vale.X64.State.update_reg_64 @x0
@x1
@x2))
 

:pattern ((Vale.X64.Decls.va_upd_reg64 @x0
@x1
@x2))
:qid equation_Vale.X64.Decls.va_upd_reg64))

:named equation_Vale.X64.Decls.va_upd_reg64))

; </end encoding Vale.X64.Decls.va_upd_reg64>


; <Start encoding Vale.X64.Decls.va_upd_xmm>

(declare-fun Vale.X64.Decls.va_upd_xmm (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_upd_xmm@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_upd_xmm
;;; Fact-ids: Name Vale.X64.Decls.va_upd_xmm; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(216,16-216,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(216,16-216,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.Decls.va_upd_xmm @x0
@x1
@x2)
(Vale.X64.State.update_reg_xmm @x0
@x1
@x2))
 

:pattern ((Vale.X64.Decls.va_upd_xmm @x0
@x1
@x2))
:qid equation_Vale.X64.Decls.va_upd_xmm))

:named equation_Vale.X64.Decls.va_upd_xmm))

; </end encoding Vale.X64.Decls.va_upd_xmm>


; <Start encoding Vale.X64.Decls.va_upd_mem>

(declare-fun Vale.X64.Decls.va_upd_mem (Term Term) Term)
(declare-fun Tm_arrow_1e28568ef10360d0ac041fb1ea4d47a4 () Term)
(declare-fun Vale.X64.Decls.va_upd_mem@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.Decls.va_upd_mem; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(217,16-217,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(217,16-217,26)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Vale.Arch.HeapImpl.vale_heap)
(HasType @x1
Vale.X64.State.vale_state))
(HasType (Vale.X64.Decls.va_upd_mem @x0
@x1)
Vale.X64.State.vale_state))
 

:pattern ((Vale.X64.Decls.va_upd_mem @x0
@x1))
:qid typing_Vale.X64.Decls.va_upd_mem))

:named typing_Vale.X64.Decls.va_upd_mem))
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_upd_mem
;;; Fact-ids: Name Vale.X64.Decls.va_upd_mem; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(217,16-217,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(217,16-217,26)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.Decls.va_upd_mem @x0
@x1)
(Vale.X64.State.Mkvale_state (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x1)
(Vale.X64.Memory.set_vale_heap (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x1)
@x0)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x1)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x1)))
 

:pattern ((Vale.X64.Decls.va_upd_mem @x0
@x1))
:qid equation_Vale.X64.Decls.va_upd_mem))

:named equation_Vale.X64.Decls.va_upd_mem))

; </end encoding Vale.X64.Decls.va_upd_mem>


; <Start encoding Vale.X64.Decls.va_upd_mem_layout>

(declare-fun Vale.X64.Decls.va_upd_mem_layout (Term Term) Term)
(declare-fun Tm_arrow_1939d3448c74e0aec781d2fb06aa25b2 () Term)
(declare-fun Vale.X64.Decls.va_upd_mem_layout@tok () Term)

; </end encoding Vale.X64.Decls.va_upd_mem_layout>


; <Start encoding Vale.X64.Decls.va_upd_mem_heaplet>

(declare-fun Vale.X64.Decls.va_upd_mem_heaplet (Term Term Term) Term)
(declare-fun Tm_arrow_4261750004d3c69142cb3aa9c9760723 () Term)
(declare-fun Vale.X64.Decls.va_upd_mem_heaplet@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.X64.Decls.va_upd_mem_heaplet; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(219,16-219,34); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(219,16-219,34)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Vale.Arch.HeapImpl.heaplet_id)
(HasType @x1
Vale.Arch.HeapImpl.vale_heap)
(HasType @x2
Vale.X64.State.vale_state))
(HasType (Vale.X64.Decls.va_upd_mem_heaplet @x0
@x1
@x2)
Vale.X64.State.vale_state))
 

:pattern ((Vale.X64.Decls.va_upd_mem_heaplet @x0
@x1
@x2))
:qid typing_Vale.X64.Decls.va_upd_mem_heaplet))

:named typing_Vale.X64.Decls.va_upd_mem_heaplet))
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_upd_mem_heaplet
;;; Fact-ids: Name Vale.X64.Decls.va_upd_mem_heaplet; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(219,16-219,34); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(219,16-219,34)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.Decls.va_upd_mem_heaplet @x0
@x1
@x2)
(Vale.X64.State.Mkvale_state (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x2)
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x2)
(Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x2)
(Vale.Arch.HeapImpl.Mkvale_full_heap (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x2))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x2))
(Vale.Lib.Map16.upd Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x2))
@x0
@x1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_stack @x2)
(Vale.X64.State.__proj__Mkvale_state__item__vs_stackTaint @x2)))
 

:pattern ((Vale.X64.Decls.va_upd_mem_heaplet @x0
@x1
@x2))
:qid equation_Vale.X64.Decls.va_upd_mem_heaplet))

:named equation_Vale.X64.Decls.va_upd_mem_heaplet))

; </end encoding Vale.X64.Decls.va_upd_mem_heaplet>


; <Start encoding Vale.X64.Decls.va_upd_stack>

(declare-fun Vale.X64.Decls.va_upd_stack (Term Term) Term)
(declare-fun Tm_arrow_9dab17d7e664dc98bd36f390019a15a3 () Term)
(declare-fun Vale.X64.Decls.va_upd_stack@tok () Term)

; </end encoding Vale.X64.Decls.va_upd_stack>


; <Start encoding Vale.X64.Decls.va_upd_stackTaint>

(declare-fun Vale.X64.Decls.va_upd_stackTaint (Term Term) Term)
(declare-fun Tm_arrow_90e9c3776c15bd847afcc0cced943ebd () Term)
(declare-fun Vale.X64.Decls.va_upd_stackTaint@tok () Term)

; </end encoding Vale.X64.Decls.va_upd_stackTaint>


; <Start encoding Vale.X64.Decls.va_eval_opr64>

(declare-fun Vale.X64.Decls.va_eval_opr64 (Term Term) Term)
(declare-fun Tm_ghost_arrow_d33c59121032d06740176653c67d2a8e () Term)
(declare-fun Vale.X64.Decls.va_eval_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_eval_opr64>


; <Start encoding Vale.X64.Decls.va_eval_dst_opr64>

(declare-fun Vale.X64.Decls.va_eval_dst_opr64 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_eval_dst_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_eval_dst_opr64>


; <Start encoding Vale.X64.Decls.va_eval_shift_amt64>

(declare-fun Vale.X64.Decls.va_eval_shift_amt64 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_eval_shift_amt64@tok () Term)

; </end encoding Vale.X64.Decls.va_eval_shift_amt64>


; <Start encoding Vale.X64.Decls.va_eval_cmp_uint64>


(declare-fun Vale.X64.Decls.va_eval_cmp_uint64 (Term Term) Term)

(declare-fun Tm_ghost_arrow_b7d0d01e51382a61ece7b40b286561ee () Term)
(declare-fun Vale.X64.Decls.va_eval_cmp_uint64@tok () Term)


; </end encoding Vale.X64.Decls.va_eval_cmp_uint64>


; <Start encoding Vale.X64.Decls.va_eval_reg_opr64>

(declare-fun Vale.X64.Decls.va_eval_reg_opr64 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_eval_reg_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_eval_reg_opr64>


; <Start encoding Vale.X64.Decls.va_eval_xmm>

(declare-fun Vale.X64.Decls.va_eval_xmm (Term Term) Term)
(declare-fun Tm_ghost_arrow_feee2d4251fe4099998c5bfc922d6223 () Term)
(declare-fun Vale.X64.Decls.va_eval_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_eval_xmm>


; <Start encoding Vale.X64.Decls.va_eval_opr128>

(declare-fun Vale.X64.Decls.va_eval_opr128 (Term Term) Term)
(declare-fun Tm_ghost_arrow_33c9f94b853f2a932f1ff61733d4ee60 () Term)
(declare-fun Vale.X64.Decls.va_eval_opr128@tok () Term)

; </end encoding Vale.X64.Decls.va_eval_opr128>


; <Start encoding Vale.X64.Decls.va_eval_heaplet>

(declare-fun Vale.X64.Decls.va_eval_heaplet (Term Term) Term)
(declare-fun Tm_arrow_a5958fac6e919083f601b15db967018d () Term)
(declare-fun Vale.X64.Decls.va_eval_heaplet@tok () Term)

; </end encoding Vale.X64.Decls.va_eval_heaplet>


; <Start encoding Vale.X64.Decls.va_is_src_opr64>

(declare-fun Vale.X64.Decls.va_is_src_opr64 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_is_src_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_is_src_opr64>


; <Start encoding Vale.X64.Decls.va_is_dst_opr64>

(declare-fun Vale.X64.Decls.va_is_dst_opr64 (Term Term) Term)
(declare-fun Tm_arrow_5166e3e6307cbb434ade20f5e8a0e953 () Term)
(declare-fun Vale.X64.Decls.va_is_dst_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_is_dst_opr64>


; <Start encoding Vale.X64.Decls.va_is_dst_dst_opr64>

(declare-fun Vale.X64.Decls.va_is_dst_dst_opr64 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_is_dst_dst_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_is_dst_dst_opr64>


; <Start encoding Vale.X64.Decls.va_is_src_shift_amt64>

(declare-fun Vale.X64.Decls.va_is_src_shift_amt64 (Term Term) Term)
(declare-fun Tm_arrow_739beb6f56160d755c90d5bead611d5b () Term)
(declare-fun Vale.X64.Decls.va_is_src_shift_amt64@tok () Term)

; </end encoding Vale.X64.Decls.va_is_src_shift_amt64>


; <Start encoding Vale.X64.Decls.va_is_src_reg_opr64>

(declare-fun Vale.X64.Decls.va_is_src_reg_opr64 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_is_src_reg_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_is_src_reg_opr64>


; <Start encoding Vale.X64.Decls.va_is_dst_reg_opr64>

(declare-fun Vale.X64.Decls.va_is_dst_reg_opr64 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_is_dst_reg_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_is_dst_reg_opr64>


; <Start encoding Vale.X64.Decls.va_is_src_xmm>

(declare-fun Vale.X64.Decls.va_is_src_xmm (Term Term) Term)
(declare-fun Tm_arrow_a4a8597b9a63b9cab9dbc5fc0e79e1ae () Term)
(declare-fun Vale.X64.Decls.va_is_src_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_is_src_xmm>


; <Start encoding Vale.X64.Decls.va_is_dst_xmm>

(declare-fun Vale.X64.Decls.va_is_dst_xmm (Term Term) Term)

(declare-fun Vale.X64.Decls.va_is_dst_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_is_dst_xmm>


; <Start encoding Vale.X64.Decls.va_is_src_opr128>

(declare-fun Vale.X64.Decls.va_is_src_opr128 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_is_src_opr128@tok () Term)

; </end encoding Vale.X64.Decls.va_is_src_opr128>


; <Start encoding Vale.X64.Decls.va_is_dst_opr128>

(declare-fun Vale.X64.Decls.va_is_dst_opr128 (Term Term) Term)

(declare-fun Vale.X64.Decls.va_is_dst_opr128@tok () Term)

; </end encoding Vale.X64.Decls.va_is_dst_opr128>


; <Start encoding Vale.X64.Decls.va_is_src_heaplet>

(declare-fun Vale.X64.Decls.va_is_src_heaplet (Term Term) Term)
(declare-fun Tm_arrow_67d956673a88550d21510b09d490b41b () Term)
(declare-fun Vale.X64.Decls.va_is_src_heaplet@tok () Term)

; </end encoding Vale.X64.Decls.va_is_src_heaplet>


; <Start encoding Vale.X64.Decls.va_is_dst_heaplet>

(declare-fun Vale.X64.Decls.va_is_dst_heaplet (Term Term) Term)

(declare-fun Vale.X64.Decls.va_is_dst_heaplet@tok () Term)

; </end encoding Vale.X64.Decls.va_is_dst_heaplet>


; <Start encoding Vale.X64.Decls.va_update_ok>

(declare-fun Vale.X64.Decls.va_update_ok (Term Term) Term)
(declare-fun Tm_arrow_80a5bb7e82dbeff2002be53a693b1f9c () Term)
(declare-fun Vale.X64.Decls.va_update_ok@tok () Term)

; </end encoding Vale.X64.Decls.va_update_ok>


; <Start encoding Vale.X64.Decls.va_update_flags>

(declare-fun Vale.X64.Decls.va_update_flags (Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_flags@tok () Term)

; </end encoding Vale.X64.Decls.va_update_flags>


; <Start encoding Vale.X64.Decls.update_register>

(declare-fun Vale.X64.Decls.update_register (Term Term Term) Term)
(declare-fun Tm_arrow_59be9ddbd04dcad2300366ac5d4fa193 () Term)
(declare-fun Vale.X64.Decls.update_register@tok () Term)

; </end encoding Vale.X64.Decls.update_register>


; <Start encoding Vale.X64.Decls.va_update_reg64>

(declare-fun Vale.X64.Decls.va_update_reg64 (Term Term Term) Term)
(declare-fun Tm_arrow_c39ac3af7a5f499be4dc9447c4225b2a () Term)
(declare-fun Vale.X64.Decls.va_update_reg64@tok () Term)

; </end encoding Vale.X64.Decls.va_update_reg64>


; <Start encoding Vale.X64.Decls.va_update_xmm>

(declare-fun Vale.X64.Decls.va_update_xmm (Term Term Term) Term)
(declare-fun Tm_arrow_ac54ebed8e902baa1e19f1ff2f02a013 () Term)
(declare-fun Vale.X64.Decls.va_update_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_update_xmm>


; <Start encoding Vale.X64.Decls.va_update_mem>

(declare-fun Vale.X64.Decls.va_update_mem (Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_mem@tok () Term)

; </end encoding Vale.X64.Decls.va_update_mem>


; <Start encoding Vale.X64.Decls.va_update_mem_layout>

(declare-fun Vale.X64.Decls.va_update_mem_layout (Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_mem_layout@tok () Term)

; </end encoding Vale.X64.Decls.va_update_mem_layout>


; <Start encoding Vale.X64.Decls.va_update_mem_heaplet>

(declare-fun Vale.X64.Decls.va_update_mem_heaplet (Term Term Term) Term)
(declare-fun Tm_arrow_d1ffaca0a0958cc3f6ec4c44cd92e9a0 () Term)
(declare-fun Vale.X64.Decls.va_update_mem_heaplet@tok () Term)

; </end encoding Vale.X64.Decls.va_update_mem_heaplet>


; <Start encoding Vale.X64.Decls.va_update_stack>

(declare-fun Vale.X64.Decls.va_update_stack (Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_stack@tok () Term)

; </end encoding Vale.X64.Decls.va_update_stack>


; <Start encoding Vale.X64.Decls.va_update_stackTaint>

(declare-fun Vale.X64.Decls.va_update_stackTaint (Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_stackTaint@tok () Term)

; </end encoding Vale.X64.Decls.va_update_stackTaint>


; <Start encoding Vale.X64.Decls.update_operand>

(declare-fun Vale.X64.Decls.update_operand (Term Term Term) Term)
(declare-fun Tm_arrow_94848f3e69e0da67ab28c7f7cc287e09 () Term)
(declare-fun Vale.X64.Decls.update_operand@tok () Term)

; </end encoding Vale.X64.Decls.update_operand>


; <Start encoding Vale.X64.Decls.update_dst_operand>

(declare-fun Vale.X64.Decls.update_dst_operand (Term Term Term) Term)

(declare-fun Vale.X64.Decls.update_dst_operand@tok () Term)

; </end encoding Vale.X64.Decls.update_dst_operand>


; <Start encoding Vale.X64.Decls.va_update_operand_dst_opr64>

(declare-fun Vale.X64.Decls.va_update_operand_dst_opr64 (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_operand_dst_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_update_operand_dst_opr64>


; <Start encoding Vale.X64.Decls.va_update_operand_opr64>

(declare-fun Vale.X64.Decls.va_update_operand_opr64 (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_operand_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_update_operand_opr64>


; <Start encoding Vale.X64.Decls.va_update_operand_reg_opr64>

(declare-fun Vale.X64.Decls.va_update_operand_reg_opr64 (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_operand_reg_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_update_operand_reg_opr64>


; <Start encoding Vale.X64.Decls.va_update_operand_xmm>

(declare-fun Vale.X64.Decls.va_update_operand_xmm (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_operand_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_update_operand_xmm>


; <Start encoding Vale.X64.Decls.va_update_operand_heaplet>

(declare-fun Vale.X64.Decls.va_update_operand_heaplet (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_update_operand_heaplet@tok () Term)

; </end encoding Vale.X64.Decls.va_update_operand_heaplet>


; <Start encoding Vale.X64.Decls.va_value_opr64>

(declare-fun Vale.X64.Decls.va_value_opr64 () Term)

; </end encoding Vale.X64.Decls.va_value_opr64>


; <Start encoding Vale.X64.Decls.va_value_dst_opr64>

(declare-fun Vale.X64.Decls.va_value_dst_opr64 () Term)

; </end encoding Vale.X64.Decls.va_value_dst_opr64>


; <Start encoding Vale.X64.Decls.va_value_reg_opr64>

(declare-fun Vale.X64.Decls.va_value_reg_opr64 () Term)

; </end encoding Vale.X64.Decls.va_value_reg_opr64>


; <Start encoding Vale.X64.Decls.va_value_xmm>

(declare-fun Vale.X64.Decls.va_value_xmm (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.va_value_xmm>


; <Start encoding Vale.X64.Decls.va_value_heaplet>

(declare-fun Vale.X64.Decls.va_value_heaplet () Term)

; </end encoding Vale.X64.Decls.va_value_heaplet>


; <Start encoding Vale.X64.Decls.va_upd_operand_xmm>

(declare-fun Vale.X64.Decls.va_upd_operand_xmm (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_upd_operand_xmm@tok () Term)

; </end encoding Vale.X64.Decls.va_upd_operand_xmm>


; <Start encoding Vale.X64.Decls.va_upd_operand_dst_opr64>

(declare-fun Vale.X64.Decls.va_upd_operand_dst_opr64 (Term Term Term) Term)
(declare-fun Tm_arrow_8843b8162984a9d063a33b93d9f1a39e () Term)
(declare-fun Vale.X64.Decls.va_upd_operand_dst_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_upd_operand_dst_opr64>


; <Start encoding Vale.X64.Decls.va_upd_operand_reg_opr64>

(declare-fun Vale.X64.Decls.va_upd_operand_reg_opr64 (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_upd_operand_reg_opr64@tok () Term)

; </end encoding Vale.X64.Decls.va_upd_operand_reg_opr64>


; <Start encoding Vale.X64.Decls.va_upd_operand_heaplet>

(declare-fun Vale.X64.Decls.va_upd_operand_heaplet (Term Term Term) Term)

(declare-fun Vale.X64.Decls.va_upd_operand_heaplet@tok () Term)

; </end encoding Vale.X64.Decls.va_upd_operand_heaplet>


; <Start encoding Vale.X64.Decls.va_lemma_upd_update>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.va_lemma_upd_update (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.va_lemma_upd_update@tok () Term)

; </end encoding Vale.X64.Decls.va_lemma_upd_update>


; <Start encoding Vale.X64.Decls.va_CNil>

(declare-fun Vale.X64.Decls.va_CNil (Term) Term)
(declare-fun Tm_arrow_19623de3c12b388403cc6d015b756111 () Term)
(declare-fun Vale.X64.Decls.va_CNil@tok () Term)

; </end encoding Vale.X64.Decls.va_CNil>


; <Start encoding Vale.X64.Decls.va_CCons>

(declare-fun Vale.X64.Decls.va_CCons (Term Term) Term)
(declare-fun Tm_arrow_1db481a80cbcef8078d288c1b6c71d60 () Term)
(declare-fun Vale.X64.Decls.va_CCons@tok () Term)

; </end encoding Vale.X64.Decls.va_CCons>


; <Start encoding Vale.X64.Decls.va_Block>

(declare-fun Vale.X64.Decls.va_Block (Term) Term)
(declare-fun Tm_arrow_135a92012ee34558b80faed8617fb468 () Term)
(declare-fun Vale.X64.Decls.va_Block@tok () Term)

; </end encoding Vale.X64.Decls.va_Block>


; <Start encoding Vale.X64.Decls.va_IfElse>

(declare-fun Vale.X64.Decls.va_IfElse (Term Term Term) Term)
(declare-fun Tm_arrow_964bad17321514e272f1eae9ff25e0cc () Term)
(declare-fun Vale.X64.Decls.va_IfElse@tok () Term)

; </end encoding Vale.X64.Decls.va_IfElse>


; <Start encoding Vale.X64.Decls.va_While>

(declare-fun Vale.X64.Decls.va_While (Term Term) Term)
(declare-fun Tm_arrow_f44f7ba4ef87e84cea5da8c5e34d8620 () Term)
(declare-fun Vale.X64.Decls.va_While@tok () Term)

; </end encoding Vale.X64.Decls.va_While>


; <Start encoding Vale.X64.Decls.va_cmp_eq>

(declare-fun Tm_refine_ba365082b22759c5ffc3f70184bff703 () Term)

(declare-fun Vale.X64.Decls.va_cmp_eq (Term Term) Term)


(declare-fun Tm_arrow_a3af9cd8b981eb2f89c457f13c79240f () Term)
(declare-fun Vale.X64.Decls.va_cmp_eq@tok () Term)

; </end encoding Vale.X64.Decls.va_cmp_eq>


; <Start encoding Vale.X64.Decls.va_cmp_ne>



(declare-fun Vale.X64.Decls.va_cmp_ne (Term Term) Term)



(declare-fun Vale.X64.Decls.va_cmp_ne@tok () Term)

; </end encoding Vale.X64.Decls.va_cmp_ne>


; <Start encoding Vale.X64.Decls.va_cmp_le>



(declare-fun Vale.X64.Decls.va_cmp_le (Term Term) Term)



(declare-fun Vale.X64.Decls.va_cmp_le@tok () Term)

; </end encoding Vale.X64.Decls.va_cmp_le>


; <Start encoding Vale.X64.Decls.va_cmp_ge>



(declare-fun Vale.X64.Decls.va_cmp_ge (Term Term) Term)



(declare-fun Vale.X64.Decls.va_cmp_ge@tok () Term)

; </end encoding Vale.X64.Decls.va_cmp_ge>


; <Start encoding Vale.X64.Decls.va_cmp_lt>



(declare-fun Vale.X64.Decls.va_cmp_lt (Term Term) Term)



(declare-fun Vale.X64.Decls.va_cmp_lt@tok () Term)

; </end encoding Vale.X64.Decls.va_cmp_lt>


; <Start encoding Vale.X64.Decls.va_cmp_gt>



(declare-fun Vale.X64.Decls.va_cmp_gt (Term Term) Term)



(declare-fun Vale.X64.Decls.va_cmp_gt@tok () Term)

; </end encoding Vale.X64.Decls.va_cmp_gt>


; <Start encoding Vale.X64.Decls.va_get_block>

(declare-fun Tm_refine_4d0211dfd0a5972d3094f60cc2e9c1c8 () Term)
(declare-fun Vale.X64.Decls.va_get_block (Term) Term)

(declare-fun Tm_arrow_9119f7a77424c726123cdec553b59e32 () Term)
(declare-fun Vale.X64.Decls.va_get_block@tok () Term)


; </end encoding Vale.X64.Decls.va_get_block>


; <Start encoding Vale.X64.Decls.va_get_ifCond>

(declare-fun Tm_refine_5c72f8edcb7e2245063292b4d4771dbc () Term)
(declare-fun Vale.X64.Decls.va_get_ifCond (Term) Term)

(declare-fun Tm_arrow_21981399c67e0acb0d522592a08aee78 () Term)
(declare-fun Vale.X64.Decls.va_get_ifCond@tok () Term)


; </end encoding Vale.X64.Decls.va_get_ifCond>


; <Start encoding Vale.X64.Decls.va_get_ifTrue>


(declare-fun Vale.X64.Decls.va_get_ifTrue (Term) Term)

(declare-fun Tm_arrow_db884e267db4e9ccdc073778f51b6153 () Term)
(declare-fun Vale.X64.Decls.va_get_ifTrue@tok () Term)


; </end encoding Vale.X64.Decls.va_get_ifTrue>


; <Start encoding Vale.X64.Decls.va_get_ifFalse>


(declare-fun Vale.X64.Decls.va_get_ifFalse (Term) Term)


(declare-fun Vale.X64.Decls.va_get_ifFalse@tok () Term)


; </end encoding Vale.X64.Decls.va_get_ifFalse>


; <Start encoding Vale.X64.Decls.va_get_whileCond>

(declare-fun Tm_refine_b3353287e4c776a046c200495fca6ef3 () Term)
(declare-fun Vale.X64.Decls.va_get_whileCond (Term) Term)

(declare-fun Tm_arrow_9b9afd20b6d0104382e70b192c12e0a2 () Term)
(declare-fun Vale.X64.Decls.va_get_whileCond@tok () Term)


; </end encoding Vale.X64.Decls.va_get_whileCond>


; <Start encoding Vale.X64.Decls.va_get_whileBody>


(declare-fun Vale.X64.Decls.va_get_whileBody (Term) Term)

(declare-fun Tm_arrow_e6216ebb067740ce0fda8cfb28ea20ae () Term)
(declare-fun Vale.X64.Decls.va_get_whileBody@tok () Term)


; </end encoding Vale.X64.Decls.va_get_whileBody>


; <Start encoding Vale.X64.Decls.buffers_readable>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.Decls.buffers_readable.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.Decls.buffers_readable.fuel_instrumented_token () Term)
(declare-fun Vale.X64.Decls.buffers_readable (Term Term) Term)
(declare-fun Vale.X64.Decls.buffers_readable@tok () Term)
(declare-fun Tm_arrow_4566aa3388227991d7aa58be979507b4 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.Decls.buffers_readable; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(385,8-385,24); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(385,8-385,24)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.Decls.buffers_readable.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.X64.Decls.buffers_readable.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.X64.Decls.buffers_readable.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.X64.Decls.buffers_readable.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.Decls.buffers_readable.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.Decls.buffers_readable; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(385,8-385,24); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(385,8-385,24)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.Decls.buffers_readable @x0
@x1)
(Vale.X64.Decls.buffers_readable.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.X64.Decls.buffers_readable @x0
@x1))
:qid @fuel_correspondence_Vale.X64.Decls.buffers_readable.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.Decls.buffers_readable.fuel_instrumented))

; </end encoding Vale.X64.Decls.buffers_readable>


; <Start encoding Vale.X64.Decls.modifies_buffer>

(declare-fun Vale.X64.Decls.modifies_buffer (Term Term Term) Term)
(declare-fun Tm_arrow_23aa7b384c031da58989a49a8d384b0c () Term)
(declare-fun Vale.X64.Decls.modifies_buffer@tok () Term)

; </end encoding Vale.X64.Decls.modifies_buffer>


; <Start encoding Vale.X64.Decls.modifies_buffer_2>

(declare-fun Vale.X64.Decls.modifies_buffer_2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_e3a91728595fb3e298577db122fd4eaa () Term)
(declare-fun Vale.X64.Decls.modifies_buffer_2@tok () Term)

; </end encoding Vale.X64.Decls.modifies_buffer_2>


; <Start encoding Vale.X64.Decls.modifies_buffer_3>

(declare-fun Vale.X64.Decls.modifies_buffer_3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ef5c6383dd42d6ededd8f53ce902cc5a () Term)
(declare-fun Vale.X64.Decls.modifies_buffer_3@tok () Term)

; </end encoding Vale.X64.Decls.modifies_buffer_3>


; <Start encoding Vale.X64.Decls.modifies_buffer128>

(declare-fun Vale.X64.Decls.modifies_buffer128 (Term Term Term) Term)
(declare-fun Tm_arrow_60c2720d881076fcb1c9f64f2f8c9c4c () Term)
(declare-fun Vale.X64.Decls.modifies_buffer128@tok () Term)

; </end encoding Vale.X64.Decls.modifies_buffer128>


; <Start encoding Vale.X64.Decls.modifies_buffer128_2>

(declare-fun Vale.X64.Decls.modifies_buffer128_2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_c996111a6cc441b04d42b982b78fb6cd () Term)
(declare-fun Vale.X64.Decls.modifies_buffer128_2@tok () Term)

; </end encoding Vale.X64.Decls.modifies_buffer128_2>


; <Start encoding Vale.X64.Decls.modifies_buffer128_3>

(declare-fun Vale.X64.Decls.modifies_buffer128_3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ac4bdfae54713f2f313e0e60a346626c () Term)
(declare-fun Vale.X64.Decls.modifies_buffer128_3@tok () Term)

; </end encoding Vale.X64.Decls.modifies_buffer128_3>


; <Start encoding Vale.X64.Decls.validSrcAddrs>

(declare-fun Vale.X64.Decls.validSrcAddrs (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2ca70106f6d499a5043669073971f518 () Term)
(declare-fun Vale.X64.Decls.validSrcAddrs@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.validSrcAddrs
;;; Fact-ids: Name Vale.X64.Decls.validSrcAddrs; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(401,4-401,17); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(401,4-401,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Valid (Vale.X64.Decls.validSrcAddrs @x0
@x1
@x2
@x3
@x4
@x5
@x6))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(402,2-406,42); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(402,2-406,42)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(105,87-105,111); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(402,2-402,17)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(105,87-105,111); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(402,2-402,17)
(Vale.X64.Memory.buffer_readable @x0
@x1
@x3)
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(403,2-403,24); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(403,2-403,24)
(<= (BoxInt_proj_0 @x4)
(BoxInt_proj_0 (Vale.X64.Memory.buffer_length @x0
@x3)))


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(404,2-404,27); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(404,2-404,27)
(= (Vale.X64.Memory.buffer_addr @x0
@x3
@x1)
@x2)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(405,2-405,64); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(405,2-405,64)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(405,2-405,64); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(405,2-405,64)
(Vale.X64.Memory.valid_layout_buffer_id @x0
@x3
@x5
(Vale.X64.Memory.get_heaplet_id @x1)
(BoxBool false))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(406,2-406,42); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(406,2-406,42)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(406,2-406,42); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(406,2-406,42)
(Vale.X64.Memory.valid_taint_buf @x0
@x3
@x1
(Vale.Arch.HeapImpl.__proj__Mkvale_heap_layout__item__vl_taint @x5)
@x6)
)
)
)
 

:pattern ((Vale.X64.Decls.validSrcAddrs @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_Vale.X64.Decls.validSrcAddrs))

:named equation_Vale.X64.Decls.validSrcAddrs))

; </end encoding Vale.X64.Decls.validSrcAddrs>


; <Start encoding Vale.X64.Decls.validDstAddrs>

(declare-fun Vale.X64.Decls.validDstAddrs (Term Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.validDstAddrs@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.validDstAddrs
;;; Fact-ids: Name Vale.X64.Decls.validDstAddrs; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(408,4-408,17); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(408,4-408,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Valid (Vale.X64.Decls.validDstAddrs @x0
@x1
@x2
@x3
@x4
@x5
@x6))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(409,2-411,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(409,2-411,20)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(409,2-409,38); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(409,2-409,38)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(409,2-409,38); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(409,2-409,38)
(Vale.X64.Decls.validSrcAddrs @x0
@x1
@x2
@x3
@x4
@x5
@x6)
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(410,2-410,63); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(410,2-410,63)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(410,2-410,63); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(410,2-410,63)
(Vale.X64.Memory.valid_layout_buffer_id @x0
@x3
@x5
(Vale.X64.Memory.get_heaplet_id @x1)
(BoxBool true))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(106,74-106,97); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(411,2-411,18)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(106,74-106,97); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(411,2-411,18)
(Vale.X64.Memory.buffer_writeable @x0
@x3)
)
)
)
 

:pattern ((Vale.X64.Decls.validDstAddrs @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_Vale.X64.Decls.validDstAddrs))

:named equation_Vale.X64.Decls.validDstAddrs))

; </end encoding Vale.X64.Decls.validDstAddrs>


; <Start encoding Vale.X64.Decls.validSrcAddrs64>

(declare-fun Vale.X64.Decls.validSrcAddrs64 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_18c59088ddcd13184d481d2b7b4f74fb () Term)
(declare-fun Vale.X64.Decls.validSrcAddrs64@tok () Term)

; </end encoding Vale.X64.Decls.validSrcAddrs64>


; <Start encoding Vale.X64.Decls.validDstAddrs64>

(declare-fun Vale.X64.Decls.validDstAddrs64 (Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.validDstAddrs64@tok () Term)

; </end encoding Vale.X64.Decls.validDstAddrs64>


; <Start encoding Vale.X64.Decls.validSrcAddrs128>

(declare-fun Vale.X64.Decls.validSrcAddrs128 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7b52cc5be7ea08f87d41727a54af5795 () Term)
(declare-fun Vale.X64.Decls.validSrcAddrs128@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.validSrcAddrs128
;;; Fact-ids: Name Vale.X64.Decls.validSrcAddrs128; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(419,4-419,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(419,4-419,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (Vale.X64.Decls.validSrcAddrs128 @x0
@x1
@x2
@x3
@x4
@x5))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(420,2-420,38); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(420,2-420,38)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(420,2-420,38); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(420,2-420,38)
(Vale.X64.Decls.validSrcAddrs Vale.Arch.HeapTypes_s.TUInt128@tok
@x0
@x1
@x2
@x3
@x4
@x5)
)
)
 

:pattern ((Vale.X64.Decls.validSrcAddrs128 @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_Vale.X64.Decls.validSrcAddrs128))

:named equation_Vale.X64.Decls.validSrcAddrs128))

; </end encoding Vale.X64.Decls.validSrcAddrs128>


; <Start encoding Vale.X64.Decls.validDstAddrs128>

(declare-fun Vale.X64.Decls.validDstAddrs128 (Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.validDstAddrs128@tok () Term)

; </end encoding Vale.X64.Decls.validDstAddrs128>


; <Start encoding Vale.X64.Decls.validSrcAddrsOffset128>

(declare-fun Vale.X64.Decls.validSrcAddrsOffset128 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ad6fa364ebed87099dd60b8f4d40528b () Term)
(declare-fun Vale.X64.Decls.validSrcAddrsOffset128@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.validSrcAddrsOffset128
;;; Fact-ids: Name Vale.X64.Decls.validSrcAddrsOffset128; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(425,4-425,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(425,4-425,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Valid (Vale.X64.Decls.validSrcAddrsOffset128 @x0
@x1
@x2
@x3
@x4
@x5
@x6))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(426,2-426,65); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(426,2-426,65)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(426,2-426,65); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(426,2-426,65)
(Vale.X64.Decls.validSrcAddrs Vale.Arch.HeapTypes_s.TUInt128@tok
@x0
(BoxInt (- (BoxInt_proj_0 @x1)
(_mul 16
(BoxInt_proj_0 @x3))))
@x2
(BoxInt (+ (BoxInt_proj_0 @x4)
(BoxInt_proj_0 @x3)))
@x5
@x6)
)
)
 

:pattern ((Vale.X64.Decls.validSrcAddrsOffset128 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_Vale.X64.Decls.validSrcAddrsOffset128))

:named equation_Vale.X64.Decls.validSrcAddrsOffset128))

; </end encoding Vale.X64.Decls.validSrcAddrsOffset128>


; <Start encoding Vale.X64.Decls.validDstAddrsOffset128>

(declare-fun Vale.X64.Decls.validDstAddrsOffset128 (Term Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.validDstAddrsOffset128@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.validDstAddrsOffset128
;;; Fact-ids: Name Vale.X64.Decls.validDstAddrsOffset128; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(428,4-428,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(428,4-428,26)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Valid (Vale.X64.Decls.validDstAddrsOffset128 @x0
@x1
@x2
@x3
@x4
@x5
@x6))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(429,2-429,65); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(429,2-429,65)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(429,2-429,65); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(429,2-429,65)
(Vale.X64.Decls.validDstAddrs Vale.Arch.HeapTypes_s.TUInt128@tok
@x0
(BoxInt (- (BoxInt_proj_0 @x1)
(_mul 16
(BoxInt_proj_0 @x3))))
@x2
(BoxInt (+ (BoxInt_proj_0 @x4)
(BoxInt_proj_0 @x3)))
@x5
@x6)
)
)
 

:pattern ((Vale.X64.Decls.validDstAddrsOffset128 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_Vale.X64.Decls.validDstAddrsOffset128))

:named equation_Vale.X64.Decls.validDstAddrsOffset128))

; </end encoding Vale.X64.Decls.validDstAddrsOffset128>


; <Start encoding Vale.X64.Decls.modifies_buffer_specific128>

(declare-fun Vale.X64.Decls.modifies_buffer_specific128 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fde3be34cc574c63169228ffb1ded2d6 () Term)
(declare-fun Vale.X64.Decls.modifies_buffer_specific128@tok () Term)

(declare-fun Tm_abs_86e64bb8cc495fa2f374e9baba30cce1 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.Decls.modifies_buffer_specific128>


; <Start encoding Vale.X64.Decls.buffer_modifies_specific128>

(declare-fun Vale.X64.Decls.buffer_modifies_specific128 (Term Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.buffer_modifies_specific128@tok () Term)




; </end encoding Vale.X64.Decls.buffer_modifies_specific128>


; <Start encoding Vale.X64.Decls.modifies_buffer_specific>

(declare-fun Vale.X64.Decls.modifies_buffer_specific (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a5109c79b69dd25eace993f65cafbe51 () Term)
(declare-fun Vale.X64.Decls.modifies_buffer_specific@tok () Term)

(declare-fun Tm_abs_46bd696079d10fe497d96b507e147fb1 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.Decls.modifies_buffer_specific>


; <Start encoding Vale.X64.Decls.buffers_disjoint>

(declare-fun Vale.X64.Decls.buffers_disjoint (Term Term) Term)
(declare-fun Tm_arrow_20284ed099e06b302504f59660ea89ab () Term)
(declare-fun Vale.X64.Decls.buffers_disjoint@tok () Term)

; </end encoding Vale.X64.Decls.buffers_disjoint>


; <Start encoding Vale.X64.Decls.buffers_disjoint128>

(declare-fun Vale.X64.Decls.buffers_disjoint128 (Term Term) Term)
(declare-fun Tm_arrow_183bf609ff4337d1756808a203d48b75 () Term)
(declare-fun Vale.X64.Decls.buffers_disjoint128@tok () Term)

; </end encoding Vale.X64.Decls.buffers_disjoint128>


; <Start encoding Vale.X64.Decls.loc_locs_disjoint_rec128>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented_token () Term)
(declare-fun Vale.X64.Decls.loc_locs_disjoint_rec128 (Term Term) Term)
(declare-fun Vale.X64.Decls.loc_locs_disjoint_rec128@tok () Term)
(declare-fun Tm_arrow_7c0e014606acdf6d64cdb021e142111d () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.Decls.loc_locs_disjoint_rec128; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(463,8-463,32); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(463,8-463,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.Decls.loc_locs_disjoint_rec128; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(463,8-463,32); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(463,8-463,32)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.Decls.loc_locs_disjoint_rec128 @x0
@x1)
(Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.X64.Decls.loc_locs_disjoint_rec128 @x0
@x1))
:qid @fuel_correspondence_Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.Decls.loc_locs_disjoint_rec128.fuel_instrumented))

; </end encoding Vale.X64.Decls.loc_locs_disjoint_rec128>


; <Start encoding Vale.X64.Decls.buffer_disjoints128>

(declare-fun Vale.X64.Decls.buffer_disjoints128 (Term Term) Term)

(declare-fun Vale.X64.Decls.buffer_disjoints128@tok () Term)

; </end encoding Vale.X64.Decls.buffer_disjoints128>


; <Start encoding Vale.X64.Decls.buffers3_disjoint128>

(declare-fun Vale.X64.Decls.buffers3_disjoint128 (Term Term Term) Term)
(declare-fun Tm_arrow_ec7bf3636028e21de33dd34946ace72d () Term)
(declare-fun Vale.X64.Decls.buffers3_disjoint128@tok () Term)

; </end encoding Vale.X64.Decls.buffers3_disjoint128>


; <Start encoding Vale.X64.Decls.eval_code>

(declare-fun Vale.X64.Decls.eval_code (Term Term Term Term) Term)
(declare-fun Tm_arrow_79c4fdd8b3f6be4c74f88bbeacc320ac () Term)
(declare-fun Vale.X64.Decls.eval_code@tok () Term)

; </end encoding Vale.X64.Decls.eval_code>


; <Start encoding Vale.X64.Decls.eval_while_inv>

(declare-fun Vale.X64.Decls.eval_while_inv (Term Term Term Term) Term)

(declare-fun Vale.X64.Decls.eval_while_inv@tok () Term)

; </end encoding Vale.X64.Decls.eval_while_inv>


; <Start encoding Vale.X64.Decls.va_state_eq>

(declare-fun Vale.X64.Decls.va_state_eq (Term Term) Term)

(declare-fun Vale.X64.Decls.va_state_eq@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_state_eq
;;; Fact-ids: Name Vale.X64.Decls.va_state_eq; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(479,4-479,15); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(479,4-479,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.Decls.va_state_eq @x0
@x1)
(Vale.X64.State.state_eq @x0
@x1))
 

:pattern ((Vale.X64.Decls.va_state_eq @x0
@x1))
:qid equation_Vale.X64.Decls.va_state_eq))

:named equation_Vale.X64.Decls.va_state_eq))

; </end encoding Vale.X64.Decls.va_state_eq>


; <Start encoding Vale.X64.Decls.state_inv>

(declare-fun Vale.X64.Decls.state_inv (Term) Term)
(declare-fun Tm_arrow_21e7bd1254abd443ee77ce147bd5c73f () Term)
(declare-fun Vale.X64.Decls.state_inv@tok () Term)

; </end encoding Vale.X64.Decls.state_inv>


; <Start encoding Vale.X64.Decls.vale_state_with_inv>

(declare-fun Vale.X64.Decls.vale_state_with_inv () Term)
(declare-fun Tm_refine_4d82b0a921f761d5dd19407476f31082 () Term)

; </end encoding Vale.X64.Decls.vale_state_with_inv>


; <Start encoding Vale.X64.Decls.va_require_total>

(declare-fun Vale.X64.Decls.va_require_total (Term Term Term) Term)
(declare-fun Tm_arrow_b7471352895e97737afd4daa85c6c690 () Term)
(declare-fun Vale.X64.Decls.va_require_total@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_require_total
;;; Fact-ids: Name Vale.X64.Decls.va_require_total; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(485,4-485,20); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(485,4-485,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (Vale.X64.Decls.va_require_total @x0
@x1
@x2))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(486,2-486,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(486,2-486,26)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(486,2-486,10); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(486,2-486,10)
(= @x0
@x1)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(486,14-486,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(486,14-486,26)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(486,14-486,26); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(486,14-486,26)
(Vale.X64.Decls.state_inv @x2)
)
)
)
 

:pattern ((Vale.X64.Decls.va_require_total @x0
@x1
@x2))
:qid equation_Vale.X64.Decls.va_require_total))

:named equation_Vale.X64.Decls.va_require_total))

; </end encoding Vale.X64.Decls.va_require_total>


; <Start encoding Vale.X64.Decls.va_ensure_total>

(declare-fun Vale.X64.Decls.va_ensure_total (Term Term Term Term) Term)
(declare-fun Tm_arrow_56fc7d62407ad497f183e917a58299f0 () Term)
(declare-fun Vale.X64.Decls.va_ensure_total@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.Decls.va_ensure_total
;;; Fact-ids: Name Vale.X64.Decls.va_ensure_total; Namespace Vale.X64.Decls
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(488,4-488,19); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(488,4-488,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Vale.X64.Decls.va_ensure_total @x0
@x1
@x2
@x3))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,2-489,39); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,2-489,39)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,2-489,23); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,2-489,23)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,2-489,23); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,2-489,23)
(Vale.X64.Decls.eval_code @x0
@x1
@x3
@x2)
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,27-489,39); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,27-489,39)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,27-489,39); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(489,27-489,39)
(Vale.X64.Decls.state_inv @x2)
)
)
)
 

:pattern ((Vale.X64.Decls.va_ensure_total @x0
@x1
@x2
@x3))
:qid equation_Vale.X64.Decls.va_ensure_total))

:named equation_Vale.X64.Decls.va_ensure_total))

; </end encoding Vale.X64.Decls.va_ensure_total>


; <Start encoding Vale.X64.Decls.eval_ocmp>

(declare-fun Vale.X64.Decls.eval_ocmp (Term Term) Term)
(declare-fun Tm_ghost_arrow_226675808ded13690d4b0feb7ecde9e6 () Term)
(declare-fun Vale.X64.Decls.eval_ocmp@tok () Term)

; </end encoding Vale.X64.Decls.eval_ocmp>


; <Start encoding Vale.X64.Decls.va_evalCond>

(declare-fun Vale.X64.Decls.va_evalCond (Term Term) Term)
(declare-fun Tm_ghost_arrow_632d5ef40e2a9994c94528681cb7a3db () Term)
(declare-fun Vale.X64.Decls.va_evalCond@tok () Term)

; </end encoding Vale.X64.Decls.va_evalCond>


; <Start encoding Vale.X64.Decls.valid_ocmp>

(declare-fun Vale.X64.Decls.valid_ocmp (Term Term) Term)

(declare-fun Vale.X64.Decls.valid_ocmp@tok () Term)

; </end encoding Vale.X64.Decls.valid_ocmp>


; <Start encoding Vale.X64.Decls.havoc_flags>

(declare-fun Vale.X64.Decls.havoc_flags (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.havoc_flags>


; <Start encoding Vale.X64.Decls.lemma_cmp_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_eq (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_eq@tok () Term)



; </end encoding Vale.X64.Decls.lemma_cmp_eq>


; <Start encoding Vale.X64.Decls.lemma_cmp_ne>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_ne (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_ne@tok () Term)



; </end encoding Vale.X64.Decls.lemma_cmp_ne>


; <Start encoding Vale.X64.Decls.lemma_cmp_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_le@tok () Term)



; </end encoding Vale.X64.Decls.lemma_cmp_le>


; <Start encoding Vale.X64.Decls.lemma_cmp_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_ge@tok () Term)



; </end encoding Vale.X64.Decls.lemma_cmp_ge>


; <Start encoding Vale.X64.Decls.lemma_cmp_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_lt@tok () Term)



; </end encoding Vale.X64.Decls.lemma_cmp_lt>


; <Start encoding Vale.X64.Decls.lemma_cmp_gt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_gt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_cmp_gt@tok () Term)



; </end encoding Vale.X64.Decls.lemma_cmp_gt>


; <Start encoding Vale.X64.Decls.lemma_valid_cmp_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_eq (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_eq@tok () Term)



; </end encoding Vale.X64.Decls.lemma_valid_cmp_eq>


; <Start encoding Vale.X64.Decls.lemma_valid_cmp_ne>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_ne (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_ne@tok () Term)



; </end encoding Vale.X64.Decls.lemma_valid_cmp_ne>


; <Start encoding Vale.X64.Decls.lemma_valid_cmp_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_le@tok () Term)



; </end encoding Vale.X64.Decls.lemma_valid_cmp_le>


; <Start encoding Vale.X64.Decls.lemma_valid_cmp_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_ge@tok () Term)



; </end encoding Vale.X64.Decls.lemma_valid_cmp_ge>


; <Start encoding Vale.X64.Decls.lemma_valid_cmp_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_lt@tok () Term)



; </end encoding Vale.X64.Decls.lemma_valid_cmp_lt>


; <Start encoding Vale.X64.Decls.lemma_valid_cmp_gt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_gt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.lemma_valid_cmp_gt@tok () Term)



; </end encoding Vale.X64.Decls.lemma_valid_cmp_gt>


; <Start encoding Vale.X64.Decls.va_compute_merge_total>

(declare-fun Vale.X64.Decls.va_compute_merge_total (Term Term) Term)
(declare-fun Tm_arrow_ec9c44d0b14543d5577d43716e6afba9 () Term)
(declare-fun Vale.X64.Decls.va_compute_merge_total@tok () Term)

; </end encoding Vale.X64.Decls.va_compute_merge_total>


; <Start encoding Vale.X64.Decls.va_lemma_merge_total>

(declare-fun Vale.X64.Decls.va_lemma_merge_total (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_48b59ab7ed39fc07436c812f16d4ade4 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ac4a11acccd2113b19b836d8c97ef5ff () Term)
(declare-fun Vale.X64.Decls.va_lemma_merge_total@tok () Term)


; </end encoding Vale.X64.Decls.va_lemma_merge_total>


; <Start encoding Vale.X64.Decls.va_lemma_empty_total>

(declare-fun Vale.X64.Decls.va_lemma_empty_total (Term Term) Term)
(declare-fun Tm_refine_7df61bd0f1751faf5e9d9fc07a740540 (Term) Term)
(declare-fun Tm_ghost_arrow_07948f0423eea84d044e5ca02a379f36 () Term)
(declare-fun Vale.X64.Decls.va_lemma_empty_total@tok () Term)


; </end encoding Vale.X64.Decls.va_lemma_empty_total>


; <Start encoding Vale.X64.Decls.va_lemma_ifElse_total>

(declare-fun Vale.X64.Decls.va_lemma_ifElse_total (Term Term Term Term) Term)
(declare-fun Tm_refine_a15b1368159e8da97e17435f41eac6d9 (Term Term) Term)
(declare-fun Tm_ghost_arrow_1eb98626f7421970546d202d586cade4 () Term)
(declare-fun Vale.X64.Decls.va_lemma_ifElse_total@tok () Term)


; </end encoding Vale.X64.Decls.va_lemma_ifElse_total>


; <Start encoding Vale.X64.Decls.va_lemma_ifElseTrue_total>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.va_lemma_ifElseTrue_total (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.va_lemma_ifElseTrue_total@tok () Term)

; </end encoding Vale.X64.Decls.va_lemma_ifElseTrue_total>


; <Start encoding Vale.X64.Decls.va_lemma_ifElseFalse_total>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.va_lemma_ifElseFalse_total (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.va_lemma_ifElseFalse_total@tok () Term)

; </end encoding Vale.X64.Decls.va_lemma_ifElseFalse_total>


; <Start encoding Vale.X64.Decls.va_whileInv_total>

(declare-fun Vale.X64.Decls.va_whileInv_total (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_577809ed0d4381eb186507c93d5109dd () Term)
(declare-fun Vale.X64.Decls.va_whileInv_total@tok () Term)

; </end encoding Vale.X64.Decls.va_whileInv_total>


; <Start encoding Vale.X64.Decls.va_lemma_while_total>

(declare-fun Vale.X64.Decls.va_lemma_while_total (Term Term Term) Term)
(declare-fun Tm_refine_edd4875bb3d12acf74146ed42991bd16 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d352562252e930819be8471ceeed62a4 () Term)
(declare-fun Vale.X64.Decls.va_lemma_while_total@tok () Term)


; </end encoding Vale.X64.Decls.va_lemma_while_total>


; <Start encoding Vale.X64.Decls.va_lemma_whileTrue_total>

(declare-fun Vale.X64.Decls.va_lemma_whileTrue_total (Term Term Term Term Term) Term)
(declare-fun Tm_refine_08566d21cfa89453f2634d37986e1f1e (Term Term) Term)
(declare-fun Tm_ghost_arrow_257df722a62675b1689109854acd2da6 () Term)
(declare-fun Vale.X64.Decls.va_lemma_whileTrue_total@tok () Term)


; </end encoding Vale.X64.Decls.va_lemma_whileTrue_total>


; <Start encoding Vale.X64.Decls.va_lemma_whileFalse_total>

(declare-fun Vale.X64.Decls.va_lemma_whileFalse_total (Term Term Term Term Term) Term)
(declare-fun Tm_refine_70345e4fd1414b3369679bf4b602005e (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_db3cd49e8cae86e772713967f97904e2 () Term)
(declare-fun Vale.X64.Decls.va_lemma_whileFalse_total@tok () Term)


; </end encoding Vale.X64.Decls.va_lemma_whileFalse_total>


; <Start encoding Vale.X64.Decls.va_lemma_whileMerge_total>

(declare-fun Vale.X64.Decls.va_lemma_whileMerge_total (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_a235c808d9418bc39f9ba0b45e571f8d (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_9a50b662317a777eddfa7123688c509b () Term)
(declare-fun Vale.X64.Decls.va_lemma_whileMerge_total@tok () Term)


; </end encoding Vale.X64.Decls.va_lemma_whileMerge_total>


; <Start encoding Vale.X64.Decls.printer>

(declare-fun Vale.X64.Decls.printer () Term)

; </end encoding Vale.X64.Decls.printer>


; <Start encoding Vale.X64.Decls.print_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.print_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.print_string@tok () Term)

; </end encoding Vale.X64.Decls.print_string>


; <Start encoding Vale.X64.Decls.print_header>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.print_header (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.print_header@tok () Term)

; </end encoding Vale.X64.Decls.print_header>


; <Start encoding Vale.X64.Decls.print_proc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.print_proc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.print_proc@tok () Term)

; </end encoding Vale.X64.Decls.print_proc>


; <Start encoding Vale.X64.Decls.print_footer>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.Decls.print_footer (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.Decls.print_footer@tok () Term)

; </end encoding Vale.X64.Decls.print_footer>


; <Start encoding Vale.X64.Decls.masm>

(declare-fun Vale.X64.Decls.masm (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.masm>


; <Start encoding Vale.X64.Decls.gcc>

(declare-fun Vale.X64.Decls.gcc (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.gcc>


; <Start encoding Vale.X64.Decls.gcc_linux>

(declare-fun Vale.X64.Decls.gcc_linux (Dummy_sort) Term)

; </end encoding Vale.X64.Decls.gcc_linux>


; <Start encoding Vale.X64.Decls.memTaint_type>

(declare-fun Vale.X64.Decls.memTaint_type () Term)

; </end encoding Vale.X64.Decls.memTaint_type>


; <Start encoding Vale.X64.Decls.max_one_mem>

(declare-fun Vale.X64.Decls.max_one_mem (Term Term) Term)
(declare-fun Tm_arrow_03919ef5259385125375a6968ebdf2ab () Term)
(declare-fun Vale.X64.Decls.max_one_mem@tok () Term)

; </end encoding Vale.X64.Decls.max_one_mem>


; End Externals for interface Vale.X64.Decls


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.Decls (1371 decls; total size 99112)

;;; Start module Vale.X64.QuickCode

; Externals for module Vale.X64.QuickCode


; <Start encoding Vale.X64.QuickCode.qmodattr>

(declare-fun Vale.X64.QuickCode.qmodattr (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCode.qmodattr>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.mod_t () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_None () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_None
(declare-fun Vale.X64.QuickCode.Mod_None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_ok () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_ok
(declare-fun Vale.X64.QuickCode.Mod_ok@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_reg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.Mod_reg__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_reg
(declare-fun Vale.X64.QuickCode.Mod_reg@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_flags () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_flags
(declare-fun Vale.X64.QuickCode.Mod_flags@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_mem () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_mem
(declare-fun Vale.X64.QuickCode.Mod_mem@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_mem_layout () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_mem_layout
(declare-fun Vale.X64.QuickCode.Mod_mem_layout@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_mem_heaplet (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.Mod_mem_heaplet__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_mem_heaplet
(declare-fun Vale.X64.QuickCode.Mod_mem_heaplet@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_stack () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_stack
(declare-fun Vale.X64.QuickCode.Mod_stack@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.Mod_stackTaint () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mod_stackTaint
(declare-fun Vale.X64.QuickCode.Mod_stackTaint@tok () Term)
(declare-fun Tm_arrow_673e8c35b4248e9e11e79d9cfac5c43b () Term)
(declare-fun Tm_arrow_34dba1c04885321fcb36fd8599c911c0 () Term)

; <Start encoding Vale.X64.QuickCode.mod_t>


; <start constructor Vale.X64.QuickCode.mod_t>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.mod_t ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
Vale.X64.QuickCode.mod_t)))

; </end constructor Vale.X64.QuickCode.mod_t>


; </end encoding Vale.X64.QuickCode.mod_t>


; <Start encoding Vale.X64.QuickCode.Mod_None>


; <start constructor Vale.X64.QuickCode.Mod_None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
Vale.X64.QuickCode.Mod_None)))

; </end constructor Vale.X64.QuickCode.Mod_None>


; </end encoding Vale.X64.QuickCode.Mod_None>


; <Start encoding Vale.X64.QuickCode.Mod_ok>


; <start constructor Vale.X64.QuickCode.Mod_ok>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_ok ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
Vale.X64.QuickCode.Mod_ok)))

; </end constructor Vale.X64.QuickCode.Mod_ok>


; </end encoding Vale.X64.QuickCode.Mod_ok>


; <Start encoding Vale.X64.QuickCode.Mod_reg>


; <start constructor Vale.X64.QuickCode.Mod_reg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_reg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
(Vale.X64.QuickCode.Mod_reg (Vale.X64.QuickCode.Mod_reg__0 __@x0)))))

; </end constructor Vale.X64.QuickCode.Mod_reg>


; </end encoding Vale.X64.QuickCode.Mod_reg>


; <Start encoding Vale.X64.QuickCode.Mod_flags>


; <start constructor Vale.X64.QuickCode.Mod_flags>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_flags ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Vale.X64.QuickCode.Mod_flags)))

; </end constructor Vale.X64.QuickCode.Mod_flags>


; </end encoding Vale.X64.QuickCode.Mod_flags>


; <Start encoding Vale.X64.QuickCode.Mod_mem>


; <start constructor Vale.X64.QuickCode.Mod_mem>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_mem ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
118)
(= __@x0
Vale.X64.QuickCode.Mod_mem)))

; </end constructor Vale.X64.QuickCode.Mod_mem>


; </end encoding Vale.X64.QuickCode.Mod_mem>


; <Start encoding Vale.X64.QuickCode.Mod_mem_layout>


; <start constructor Vale.X64.QuickCode.Mod_mem_layout>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_mem_layout ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
Vale.X64.QuickCode.Mod_mem_layout)))

; </end constructor Vale.X64.QuickCode.Mod_mem_layout>


; </end encoding Vale.X64.QuickCode.Mod_mem_layout>


; <Start encoding Vale.X64.QuickCode.Mod_mem_heaplet>


; <start constructor Vale.X64.QuickCode.Mod_mem_heaplet>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_mem_heaplet ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
(Vale.X64.QuickCode.Mod_mem_heaplet (Vale.X64.QuickCode.Mod_mem_heaplet__0 __@x0)))))

; </end constructor Vale.X64.QuickCode.Mod_mem_heaplet>


; </end encoding Vale.X64.QuickCode.Mod_mem_heaplet>


; <Start encoding Vale.X64.QuickCode.Mod_stack>


; <start constructor Vale.X64.QuickCode.Mod_stack>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_stack ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
Vale.X64.QuickCode.Mod_stack)))

; </end constructor Vale.X64.QuickCode.Mod_stack>


; </end encoding Vale.X64.QuickCode.Mod_stack>


; <Start encoding Vale.X64.QuickCode.Mod_stackTaint>


; <start constructor Vale.X64.QuickCode.Mod_stackTaint>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.Mod_stackTaint ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
129)
(= __@x0
Vale.X64.QuickCode.Mod_stackTaint)))

; </end constructor Vale.X64.QuickCode.Mod_stackTaint>


; </end encoding Vale.X64.QuickCode.Mod_stackTaint>


; </end encoding >


; <Start encoding Vale.X64.QuickCode.mod_t__uu___haseq>


; </end encoding Vale.X64.QuickCode.mod_t__uu___haseq>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_None>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_None (Term) Term)
(declare-fun Tm_arrow_ccd7d2d6a776a14668261ad528e372c0 () Term)
(declare-fun Vale.X64.QuickCode.uu___is_Mod_None@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_None>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_None/>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_ok>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_ok (Term) Term)

(declare-fun Vale.X64.QuickCode.uu___is_Mod_ok@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_ok>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_ok/>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_reg>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_reg (Term) Term)

(declare-fun Vale.X64.QuickCode.uu___is_Mod_reg@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_reg>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_reg/>


; <Start encoding Vale.X64.QuickCode.__proj__Mod_reg__item___0>

(declare-fun Tm_refine_c6bd9cf894204793a059b43e4dcbf9cc () Term)
(declare-fun Vale.X64.QuickCode.__proj__Mod_reg__item___0 (Term) Term)

(declare-fun Tm_arrow_2c6ee7a56c5e2de2408ca65339014ee6 () Term)
(declare-fun Vale.X64.QuickCode.__proj__Mod_reg__item___0@tok () Term)

; </end encoding Vale.X64.QuickCode.__proj__Mod_reg__item___0>


; <Skipped Vale.X64.QuickCode.__proj__Mod_reg__item___0/>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_flags>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_flags (Term) Term)

(declare-fun Vale.X64.QuickCode.uu___is_Mod_flags@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_flags>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_flags/>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_mem>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_mem (Term) Term)

(declare-fun Vale.X64.QuickCode.uu___is_Mod_mem@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_mem>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_mem/>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_mem_layout>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_mem_layout (Term) Term)

(declare-fun Vale.X64.QuickCode.uu___is_Mod_mem_layout@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_mem_layout>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_mem_layout/>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_mem_heaplet>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_mem_heaplet (Term) Term)

(declare-fun Vale.X64.QuickCode.uu___is_Mod_mem_heaplet@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_mem_heaplet>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_mem_heaplet/>


; <Start encoding Vale.X64.QuickCode.__proj__Mod_mem_heaplet__item___0>

(declare-fun Tm_refine_dae911842b85add82dc5578c02955df1 () Term)
(declare-fun Vale.X64.QuickCode.__proj__Mod_mem_heaplet__item___0 (Term) Term)

(declare-fun Tm_arrow_fb464933d4f4a3853e722235e4d94ae7 () Term)
(declare-fun Vale.X64.QuickCode.__proj__Mod_mem_heaplet__item___0@tok () Term)

; </end encoding Vale.X64.QuickCode.__proj__Mod_mem_heaplet__item___0>


; <Skipped Vale.X64.QuickCode.__proj__Mod_mem_heaplet__item___0/>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_stack>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_stack (Term) Term)

(declare-fun Vale.X64.QuickCode.uu___is_Mod_stack@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_stack>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_stack/>


; <Start encoding Vale.X64.QuickCode.uu___is_Mod_stackTaint>

(declare-fun Vale.X64.QuickCode.uu___is_Mod_stackTaint (Term) Term)

(declare-fun Vale.X64.QuickCode.uu___is_Mod_stackTaint@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_Mod_stackTaint>


; <Skipped Vale.X64.QuickCode.uu___is_Mod_stackTaint/>


; <Start encoding Vale.X64.QuickCode.mods_t>

(declare-fun Vale.X64.QuickCode.mods_t () Term)

; </end encoding Vale.X64.QuickCode.mods_t>


; <Start encoding Vale.X64.QuickCode.va_mods_t>

(declare-fun Vale.X64.QuickCode.va_mods_t () Term)

; </end encoding Vale.X64.QuickCode.va_mods_t>


; <Start encoding Vale.X64.QuickCode.va_Mod_None>

(declare-fun Vale.X64.QuickCode.va_Mod_None (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCode.va_Mod_None>


; <Start encoding Vale.X64.QuickCode.va_Mod_ok>

(declare-fun Vale.X64.QuickCode.va_Mod_ok (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCode.va_Mod_ok>


; <Start encoding Vale.X64.QuickCode.va_Mod_reg64>

(declare-fun Vale.X64.QuickCode.va_Mod_reg64 (Term) Term)
(declare-fun Tm_arrow_69fa59bd7838b27772ffab4eaae1aeaa () Term)
(declare-fun Vale.X64.QuickCode.va_Mod_reg64@tok () Term)

; </end encoding Vale.X64.QuickCode.va_Mod_reg64>


; <Start encoding Vale.X64.QuickCode.va_Mod_xmm>

(declare-fun Vale.X64.QuickCode.va_Mod_xmm (Term) Term)
(declare-fun Tm_arrow_b7a4b3f1fe2e4cf6130e556bb3175b20 () Term)
(declare-fun Vale.X64.QuickCode.va_Mod_xmm@tok () Term)

; </end encoding Vale.X64.QuickCode.va_Mod_xmm>


; <Start encoding Vale.X64.QuickCode.va_Mod_flags>

(declare-fun Vale.X64.QuickCode.va_Mod_flags (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCode.va_Mod_flags>


; <Start encoding Vale.X64.QuickCode.va_Mod_mem>

(declare-fun Vale.X64.QuickCode.va_Mod_mem (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCode.va_Mod_mem>


; <Start encoding Vale.X64.QuickCode.va_Mod_mem_layout>

(declare-fun Vale.X64.QuickCode.va_Mod_mem_layout (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCode.va_Mod_mem_layout>


; <Start encoding Vale.X64.QuickCode.va_Mod_mem_heaplet>

(declare-fun Vale.X64.QuickCode.va_Mod_mem_heaplet (Term) Term)

(declare-fun Vale.X64.QuickCode.va_Mod_mem_heaplet@tok () Term)

; </end encoding Vale.X64.QuickCode.va_Mod_mem_heaplet>


; <Start encoding Vale.X64.QuickCode.va_Mod_stack>

(declare-fun Vale.X64.QuickCode.va_Mod_stack (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCode.va_Mod_stack>


; <Start encoding Vale.X64.QuickCode.va_Mod_stackTaint>

(declare-fun Vale.X64.QuickCode.va_Mod_stackTaint (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCode.va_Mod_stackTaint>


; <Start encoding Vale.X64.QuickCode.mod_eq>

(declare-fun Vale.X64.QuickCode.mod_eq (Term Term) Term)
(declare-fun Tm_refine_ddc5344e9fbdb840fb693550a88dc8ff (Term Term) Term)
(declare-fun Tm_arrow_d96da7c68d2a47c318fcbd52d8a0d2f4 () Term)
(declare-fun Vale.X64.QuickCode.mod_eq@tok () Term)


; </end encoding Vale.X64.QuickCode.mod_eq>


; <Start encoding Vale.X64.QuickCode.update_state_mod>

(declare-fun Vale.X64.QuickCode.update_state_mod (Term Term Term) Term)
(declare-fun Tm_arrow_f3c914764a3b173113343f4f2b0be94a () Term)
(declare-fun Vale.X64.QuickCode.update_state_mod@tok () Term)

; </end encoding Vale.X64.QuickCode.update_state_mod>


; <Start encoding Vale.X64.QuickCode.update_state_mods>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.QuickCode.update_state_mods.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.QuickCode.update_state_mods.fuel_instrumented_token () Term)
(declare-fun Vale.X64.QuickCode.update_state_mods (Term Term Term) Term)
(declare-fun Vale.X64.QuickCode.update_state_mods@tok () Term)
(declare-fun Tm_arrow_b2220141f29c428478a51af8360fbab7 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.QuickCode.update_state_mods; Namespace Vale.X64.QuickCode
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(62,8-62,25); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(62,8-62,25)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.X64.QuickCode.update_state_mods.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(Vale.X64.QuickCode.update_state_mods.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((Vale.X64.QuickCode.update_state_mods.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_Vale.X64.QuickCode.update_state_mods.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.QuickCode.update_state_mods.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.QuickCode.update_state_mods; Namespace Vale.X64.QuickCode
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(62,8-62,25); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(62,8-62,25)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.QuickCode.update_state_mods @x0
@x1
@x2)
(Vale.X64.QuickCode.update_state_mods.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((Vale.X64.QuickCode.update_state_mods @x0
@x1
@x2))
:qid @fuel_correspondence_Vale.X64.QuickCode.update_state_mods.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.QuickCode.update_state_mods.fuel_instrumented))

; </end encoding Vale.X64.QuickCode.update_state_mods>


; <Start encoding Vale.X64.QuickCode.update_state_mods_norm>

(declare-fun Vale.X64.QuickCode.update_state_mods_norm (Term Term Term) Term)

(declare-fun Vale.X64.QuickCode.update_state_mods_norm@tok () Term)

; </end encoding Vale.X64.QuickCode.update_state_mods_norm>


; <Start encoding Vale.X64.QuickCode.va_lemma_norm_mods>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.QuickCode.va_lemma_norm_mods (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.QuickCode.va_lemma_norm_mods@tok () Term)

; </end encoding Vale.X64.QuickCode.va_lemma_norm_mods>


; <Start encoding Vale.X64.QuickCode.va_mod_dst_opr64>

(declare-fun Vale.X64.QuickCode.va_mod_dst_opr64 (Term) Term)
(declare-fun Tm_arrow_d29a03d6cfa8a33ac21cba38d91e3e1a () Term)
(declare-fun Vale.X64.QuickCode.va_mod_dst_opr64@tok () Term)

; </end encoding Vale.X64.QuickCode.va_mod_dst_opr64>


; <Start encoding Vale.X64.QuickCode.va_mod_reg_opr64>

(declare-fun Vale.X64.QuickCode.va_mod_reg_opr64 (Term) Term)
(declare-fun Tm_arrow_9eb890d17a9357e677c755b65b5b767d () Term)
(declare-fun Vale.X64.QuickCode.va_mod_reg_opr64@tok () Term)

; </end encoding Vale.X64.QuickCode.va_mod_reg_opr64>


; <Start encoding Vale.X64.QuickCode.va_mod_xmm>

(declare-fun Vale.X64.QuickCode.va_mod_xmm (Term) Term)

(declare-fun Vale.X64.QuickCode.va_mod_xmm@tok () Term)

; </end encoding Vale.X64.QuickCode.va_mod_xmm>


; <Start encoding Vale.X64.QuickCode.va_mod_heaplet>

(declare-fun Vale.X64.QuickCode.va_mod_heaplet (Term) Term)

(declare-fun Vale.X64.QuickCode.va_mod_heaplet@tok () Term)

; </end encoding Vale.X64.QuickCode.va_mod_heaplet>


; <Start encoding Vale.X64.QuickCode.quickProc_wp>

(declare-fun Vale.X64.QuickCode.quickProc_wp (Term) Term)

(declare-fun Vale.X64.QuickCode.quickProc_wp@tok () Term)
(declare-fun Tm_arrow_0d128dfda008d2ae08295ef66bd11d0c (Term) Term)
(declare-fun Tm_arrow_c2f76e0cd7308aedd729de98e17f3e1d (Term) Term)

; </end encoding Vale.X64.QuickCode.quickProc_wp>


; <Start encoding Vale.X64.QuickCode.k_true>

(declare-fun Vale.X64.QuickCode.k_true (Term Term Term) Term)
(declare-fun Tm_arrow_2aea5d5e3e0be5e23c5f1b4b3717de7f () Term)
(declare-fun Vale.X64.QuickCode.k_true@tok () Term)

; </end encoding Vale.X64.QuickCode.k_true>


; <Start encoding Vale.X64.QuickCode.t_monotone>

(declare-fun Vale.X64.QuickCode.t_monotone (Term Term Term) Term)
(declare-fun Tm_arrow_0a111ddf38f0d39e6c7f5db5784a4a7d () Term)
(declare-fun Vale.X64.QuickCode.t_monotone@tok () Term)


(declare-fun Tm_refine_241dd35ea08aa0d467071f9bcf3e1301 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a11086a7d24cc998f66ad2360fef2520 (Term Term) Term)

; </end encoding Vale.X64.QuickCode.t_monotone>


; <Start encoding Vale.X64.QuickCode.t_compute>

(declare-fun Vale.X64.QuickCode.t_compute (Term Term Term) Term)

(declare-fun Vale.X64.QuickCode.t_compute@tok () Term)
(declare-fun Tm_refine_28ac00b704dae412183d6ca8efe43411 (Term) Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.QuickCode.t_compute; Namespace Vale.X64.QuickCode
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.QuickCode.k_true@tok))
:named @kick_partial_app_f508d5f66f001960a7fb9265b2996f8e))
(declare-fun Tm_ghost_arrow_10ec6460ce445e760aea818dc73aa01d (Term Term) Term)

; </end encoding Vale.X64.QuickCode.t_compute>


; <Start encoding Vale.X64.QuickCode.t_require>

(declare-fun Vale.X64.QuickCode.t_require (Term) Term)

(declare-fun Vale.X64.QuickCode.t_require@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.X64.QuickCode.t_require
;;; Fact-ids: Name Vale.X64.QuickCode.t_require; Namespace Vale.X64.QuickCode
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(105,4-105,13); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(105,4-105,13)
(forall ((@x0 Term))
 (! (= (Vale.X64.QuickCode.t_require @x0)
(Vale.X64.Decls.state_inv @x0))
 

:pattern ((Vale.X64.QuickCode.t_require @x0))
:qid equation_Vale.X64.QuickCode.t_require))

:named equation_Vale.X64.QuickCode.t_require))

; </end encoding Vale.X64.QuickCode.t_require>


; <Start encoding Vale.X64.QuickCode.va_t_require>

(declare-fun Vale.X64.QuickCode.va_t_require (Term) Term)

(declare-fun Vale.X64.QuickCode.va_t_require@tok () Term)

; </end encoding Vale.X64.QuickCode.va_t_require>


; <Start encoding Vale.X64.QuickCode.va_t_ensure>


(declare-fun Vale.X64.QuickCode.va_t_ensure (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_48649ad3ebb1fbd48bd3b7452d57407c () Term)
(declare-fun Vale.X64.QuickCode.va_t_ensure@tok () Term)

;;;;;;;;;;;;;;;;Equation for Vale.X64.QuickCode.va_t_ensure
;;; Fact-ids: Name Vale.X64.QuickCode.va_t_ensure; Namespace Vale.X64.QuickCode
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(108,4-108,15); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(108,4-108,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Valid (Vale.X64.QuickCode.va_t_ensure @x0
@x1
@x2
@x3
@x4
@x5))
(let ((@lb6 @x5))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,21-109,105); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,21-109,105)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,21-109,41); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,21-109,41)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,21-109,41); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,21-109,41)
(Vale.X64.Decls.eval_code @x1
@x3
(FStar.Pervasives.Native.Mktuple3__2 @lb6)
(FStar.Pervasives.Native.Mktuple3__1 @lb6))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,45-109,79); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,45-109,79)
(= (Vale.X64.QuickCode.update_state_mods @x2
(FStar.Pervasives.Native.Mktuple3__1 @lb6)
@x3)
(FStar.Pervasives.Native.Mktuple3__1 @lb6))


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,83-109,95); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,83-109,95)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,83-109,95); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,83-109,95)
(Vale.X64.Decls.state_inv (FStar.Pervasives.Native.Mktuple3__1 @lb6))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,99-109,105); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,99-109,105)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,99-109,105); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(109,99-109,105)
(ApplyTT (ApplyTT @x4
(FStar.Pervasives.Native.Mktuple3__1 @lb6))
(FStar.Pervasives.Native.Mktuple3__3 @lb6))
)
)
))
 

:pattern ((Vale.X64.QuickCode.va_t_ensure @x0
@x1
@x2
@x3
@x4
@x5))
:qid equation_Vale.X64.QuickCode.va_t_ensure))

:named equation_Vale.X64.QuickCode.va_t_ensure))

; </end encoding Vale.X64.QuickCode.va_t_ensure>


; <Start encoding Vale.X64.QuickCode.t_proof>

(declare-fun Vale.X64.QuickCode.t_proof (Term Term Term Term) Term)
(declare-fun Tm_arrow_41408895acc5ffd330473df7638015c2 () Term)
(declare-fun Vale.X64.QuickCode.t_proof@tok () Term)

(declare-fun Tm_refine_03f14c6ef287022b528a014663d293c2 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_9e90087661a7f880c0206cb8a8015c3a (Term Term Term Term) Term)

; </end encoding Vale.X64.QuickCode.t_proof>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.quickCode (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.quickCode@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.quickCode@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Vale.X64.QuickCode.quickCode@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCode.QProc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.QProc_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.QProc_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.QProc_mods (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.QProc_wp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCode.QProc_proof (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QProc
(declare-fun Vale.X64.QuickCode.QProc@tok () Term)
(declare-fun Tm_arrow_1f61937f020321884593264826f02017 () Term)

; <Start encoding Vale.X64.QuickCode.quickCode>


; <start constructor Vale.X64.QuickCode.quickCode>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.quickCode ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
222)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Vale.X64.QuickCode.quickCode @x0
@x1))
 
;;no pats
:qid is-Vale.X64.QuickCode.quickCode))))

; </end constructor Vale.X64.QuickCode.quickCode>


; </end encoding Vale.X64.QuickCode.quickCode>


; <Start encoding Vale.X64.QuickCode.QProc>


; <start constructor Vale.X64.QuickCode.QProc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCode.QProc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
229)
(= __@x0
(Vale.X64.QuickCode.QProc (Vale.X64.QuickCode.QProc_a __@x0)
(Vale.X64.QuickCode.QProc_c __@x0)
(Vale.X64.QuickCode.QProc_mods __@x0)
(Vale.X64.QuickCode.QProc_wp __@x0)
(Vale.X64.QuickCode.QProc_proof __@x0)))))

; </end constructor Vale.X64.QuickCode.QProc>


; </end encoding Vale.X64.QuickCode.QProc>


; </end encoding >


; <Start encoding Vale.X64.QuickCode.uu___is_QProc>

(declare-fun Vale.X64.QuickCode.uu___is_QProc (Term Term Term) Term)
(declare-fun Tm_arrow_8078629c8dcbb173958f8d55007acff8 () Term)
(declare-fun Vale.X64.QuickCode.uu___is_QProc@tok () Term)

; </end encoding Vale.X64.QuickCode.uu___is_QProc>


; <Skipped Vale.X64.QuickCode.uu___is_QProc/>


; <Start encoding Vale.X64.QuickCode.__proj__QProc__item__c>

(declare-fun Vale.X64.QuickCode.__proj__QProc__item__c (Term Term Term) Term)
(declare-fun Tm_arrow_ad54070ec69f27ea760388123554084f () Term)
(declare-fun Vale.X64.QuickCode.__proj__QProc__item__c@tok () Term)

; </end encoding Vale.X64.QuickCode.__proj__QProc__item__c>


; <Skipped Vale.X64.QuickCode.__proj__QProc__item__c/>


; <Start encoding Vale.X64.QuickCode.__proj__QProc__item__mods>

(declare-fun Vale.X64.QuickCode.__proj__QProc__item__mods (Term Term Term) Term)
(declare-fun Tm_arrow_1b9513bd803bcda63241917898c83b79 () Term)
(declare-fun Vale.X64.QuickCode.__proj__QProc__item__mods@tok () Term)

; </end encoding Vale.X64.QuickCode.__proj__QProc__item__mods>


; <Skipped Vale.X64.QuickCode.__proj__QProc__item__mods/>


; <Start encoding Vale.X64.QuickCode.__proj__QProc__item__wp>

(declare-fun Vale.X64.QuickCode.__proj__QProc__item__wp (Term Term Term) Term)
(declare-fun Tm_arrow_3f979a5f42f03bbb2f49a6f0d2a2d081 () Term)
(declare-fun Vale.X64.QuickCode.__proj__QProc__item__wp@tok () Term)

; </end encoding Vale.X64.QuickCode.__proj__QProc__item__wp>


; <Skipped Vale.X64.QuickCode.__proj__QProc__item__wp/>


; <Start encoding Vale.X64.QuickCode.__proj__QProc__item__proof>

(declare-fun Vale.X64.QuickCode.__proj__QProc__item__proof (Term Term Term) Term)
(declare-fun Tm_arrow_49199ffdcea16346fc1d88f1fcbad1fa () Term)
(declare-fun Vale.X64.QuickCode.__proj__QProc__item__proof@tok () Term)

; </end encoding Vale.X64.QuickCode.__proj__QProc__item__proof>


; <Skipped Vale.X64.QuickCode.__proj__QProc__item__proof/>


; <Start encoding Vale.X64.QuickCode.va_quickCode>

(declare-fun Vale.X64.QuickCode.va_quickCode (Term Term) Term)
(declare-fun Tm_arrow_0a3204aac3f2c4cf98419b12a17d7ac4 () Term)
(declare-fun Vale.X64.QuickCode.va_quickCode@tok () Term)

; </end encoding Vale.X64.QuickCode.va_quickCode>


; <Start encoding Vale.X64.QuickCode.va_QProc>

(declare-fun Vale.X64.QuickCode.va_QProc (Term) Term)
(declare-fun Tm_arrow_550ec35c0c0713b2052a07a75748a1f5 (Term) Term)
(declare-fun Tm_arrow_dbabef9adb8c5d78e9f85e61ddf578f8 () Term)
(declare-fun Vale.X64.QuickCode.va_QProc@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.QuickCode.va_QProc; Namespace Vale.X64.QuickCode
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.QuickCode.QProc@tok))
:named @kick_partial_app_a2f1cf887dd8a3c81f17c1813bac5783))

; </end encoding Vale.X64.QuickCode.va_QProc>


; End Externals for module Vale.X64.QuickCode


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.X64.QuickCode (369 decls; total size 33153)

;;; Start interface Vale.X64.QuickCodes

; Externals for interface Vale.X64.QuickCodes


; <Start encoding Vale.X64.QuickCodes.code>

(declare-fun Vale.X64.QuickCodes.code () Term)

; </end encoding Vale.X64.QuickCodes.code>


; <Start encoding Vale.X64.QuickCodes.codes>

(declare-fun Vale.X64.QuickCodes.codes () Term)

; </end encoding Vale.X64.QuickCodes.codes>


; <Start encoding Vale.X64.QuickCodes.fuel>

(declare-fun Vale.X64.QuickCodes.fuel () Term)

; </end encoding Vale.X64.QuickCodes.fuel>


; <Start encoding Vale.X64.QuickCodes.eval>

(declare-fun Vale.X64.QuickCodes.eval (Term Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.eval@tok () Term)

; </end encoding Vale.X64.QuickCodes.eval>


; <Start encoding Vale.X64.QuickCodes.labeled_wrap>

(declare-fun Vale.X64.QuickCodes.labeled_wrap (Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.labeled_wrap@tok () Term)

; </end encoding Vale.X64.QuickCodes.labeled_wrap>


; <Start encoding Vale.X64.QuickCodes.label>

(declare-fun Vale.X64.QuickCodes.label (Term Term Term) Term)
(declare-fun Tm_refine_2a09f2450e26fe8d9312d402cf7d7936 (Term) Term)
(declare-fun Tm_arrow_b7c63ab49f833416a9ea580e10f5fbcd () Term)
(declare-fun Vale.X64.QuickCodes.label@tok () Term)


; </end encoding Vale.X64.QuickCodes.label>


; <Start encoding Vale.X64.QuickCodes.lemma_label_bool>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.QuickCodes.lemma_label_bool (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.QuickCodes.lemma_label_bool@tok () Term)

; </end encoding Vale.X64.QuickCodes.lemma_label_bool>


; <Start encoding Vale.X64.QuickCodes.precedes_wrap>

(declare-fun Vale.X64.QuickCodes.precedes_wrap (Term Term Term) Term)
(declare-fun Tm_arrow_9ba38d8f0ad4f131e999cf8398f89edc () Term)
(declare-fun Vale.X64.QuickCodes.precedes_wrap@tok () Term)

; </end encoding Vale.X64.QuickCodes.precedes_wrap>


; <Start encoding Vale.X64.QuickCodes.mods_contains1>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.QuickCodes.mods_contains1.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.QuickCodes.mods_contains1.fuel_instrumented_token () Term)
(declare-fun Vale.X64.QuickCodes.mods_contains1 (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.mods_contains1@tok () Term)
(declare-fun Tm_arrow_2d55fa7fd76ee1830f168cd277c56e74 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.QuickCodes.mods_contains1; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(38,8-38,22); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(38,8-38,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.QuickCodes.mods_contains1.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.X64.QuickCodes.mods_contains1.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.X64.QuickCodes.mods_contains1.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.X64.QuickCodes.mods_contains1.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.QuickCodes.mods_contains1.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.QuickCodes.mods_contains1; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(38,8-38,22); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(38,8-38,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.QuickCodes.mods_contains1 @x0
@x1)
(Vale.X64.QuickCodes.mods_contains1.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.X64.QuickCodes.mods_contains1 @x0
@x1))
:qid @fuel_correspondence_Vale.X64.QuickCodes.mods_contains1.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.QuickCodes.mods_contains1.fuel_instrumented))

; </end encoding Vale.X64.QuickCodes.mods_contains1>


; <Start encoding Vale.X64.QuickCodes.mods_contains>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.QuickCodes.mods_contains.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.QuickCodes.mods_contains.fuel_instrumented_token () Term)
(declare-fun Vale.X64.QuickCodes.mods_contains (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.mods_contains@tok () Term)
(declare-fun Tm_arrow_20c3231bf5897f585a5c91c0e25c346e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.QuickCodes.mods_contains; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(44,8-44,21); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(44,8-44,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.QuickCodes.mods_contains.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.X64.QuickCodes.mods_contains.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.X64.QuickCodes.mods_contains.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.X64.QuickCodes.mods_contains.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.QuickCodes.mods_contains.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.QuickCodes.mods_contains; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(44,8-44,21); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(44,8-44,21)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.X64.QuickCodes.mods_contains @x0
@x1)
(Vale.X64.QuickCodes.mods_contains.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.X64.QuickCodes.mods_contains @x0
@x1))
:qid @fuel_correspondence_Vale.X64.QuickCodes.mods_contains.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.QuickCodes.mods_contains.fuel_instrumented))

; </end encoding Vale.X64.QuickCodes.mods_contains>


; <Start encoding Vale.X64.QuickCodes.if_code>

(declare-fun Vale.X64.QuickCodes.if_code (Term Term Term) Term)
(declare-fun Tm_arrow_b0a2125039582faf8b3b2d2231217780 () Term)
(declare-fun Vale.X64.QuickCodes.if_code@tok () Term)

; </end encoding Vale.X64.QuickCodes.if_code>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.quickCodes (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.quickCodes@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.quickCodes@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Vale.X64.QuickCodes.quickCodes@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.QEmpty (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QEmpty_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QEmpty__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QEmpty
(declare-fun Vale.X64.QuickCodes.QEmpty@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.QSeq (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QSeq_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QSeq_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QSeq_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QSeq_cs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QSeq_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QSeq_msg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QSeq__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QSeq__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QSeq
(declare-fun Vale.X64.QuickCodes.QSeq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.QBind (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QBind_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QBind_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QBind_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QBind_cs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QBind_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QBind_msg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QBind__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QBind__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QBind
(declare-fun Vale.X64.QuickCodes.QBind@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.QGetState (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGetState_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGetState_cs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGetState__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QGetState
(declare-fun Vale.X64.QuickCodes.QGetState@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.QPURE (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QPURE_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QPURE_cs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QPURE_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QPURE_msg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QPURE_pre (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QPURE__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QPURE__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QPURE
(declare-fun Vale.X64.QuickCodes.QPURE@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.QLemma (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QLemma_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QLemma_cs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QLemma_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QLemma_msg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QLemma_pre (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QLemma_post (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QLemma__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QLemma__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QLemma
(declare-fun Vale.X64.QuickCodes.QLemma@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.QGhost (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost_cs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost_msg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost_pre (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost_post (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QGhost__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QGhost
(declare-fun Vale.X64.QuickCodes.QGhost@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.QAssertBy (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QAssertBy_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QAssertBy_cs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QAssertBy_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QAssertBy_msg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QAssertBy_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QAssertBy__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.QAssertBy__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: QAssertBy
(declare-fun Vale.X64.QuickCodes.QAssertBy@tok () Term)
(declare-fun Tm_arrow_5e4926f06fcd80c6fec496be957516ba () Term)
(declare-fun Tm_arrow_9c015b6104b24f632cd416259f6e151c () Term)
(declare-fun Tm_ghost_arrow_c9d83f46d3b671bcc165a108f0309cba (Term Term Term) Term)

(declare-fun Tm_arrow_3a5359fd1a9a083618ba4a7d0f6a2f69 () Term)
(declare-fun Tm_ghost_arrow_142a3549245516c77465336c96e54b67 (Term Term) Term)

(declare-fun Tm_arrow_9f9ba0573b1ac0564bd64ce68ed28d43 () Term)
(declare-fun Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe () Term)
(declare-fun Tm_arrow_2a3381d384e2722434518a0bfbf9e1c6 () Term)
(declare-fun Tm_refine_c80e4213ca8a6822bfe77f09569c8af5 () Term)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)

(declare-fun Tm_arrow_3b69f71421c5687fd98671b03c995f9a () Term)
(declare-fun Tm_abs_89447cd1aa9afa7f1f584aea7ee0d61a (Term) Term)
(declare-fun Tm_refine_67612f8951d32961f6b077feaf1630d4 (Term) Term)



(declare-fun Tm_abs_6d8f1da5bf4e21daabadfa90c8e4740f () Term)
(declare-fun Tm_arrow_582bbc689b5fa61706dbd693625a682b (Term) Term)













(declare-fun Tm_arrow_57772c7abd812609e746a2984c7ed205 () Term)

(declare-fun Tm_refine_62a47f017a2c161105c4a8bd3c62ebbc (Term Term) Term)
(declare-fun Tm_arrow_e08ab58cffe81ba7f8044b8a53fe81fe (Term Term) Term)



(declare-fun Tm_arrow_b620db3b12dcc0c17d73c75770ffd78d () Term)


(declare-fun Tm_ghost_arrow_f102d3877375f4c982e3f68c37e9da43 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_cf95f73d1f19d6f74eb6f323af37f1dd (Term Term Term) Term)




(declare-fun Tm_arrow_fbc369c2579e774726185cb66813439e () Term)
(declare-fun Tm_arrow_dd7ac524791a5885ef3fe8c7dd86ef2e () Term)

; <Start encoding Vale.X64.QuickCodes.quickCodes>


; <start constructor Vale.X64.QuickCodes.quickCodes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.quickCodes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
119)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Vale.X64.QuickCodes.quickCodes @x0
@x1))
 
;;no pats
:qid is-Vale.X64.QuickCodes.quickCodes))))

; </end constructor Vale.X64.QuickCodes.quickCodes>


; </end encoding Vale.X64.QuickCodes.quickCodes>


; <Start encoding Vale.X64.QuickCodes.QEmpty>


; <start constructor Vale.X64.QuickCodes.QEmpty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.QEmpty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
126)
(= __@x0
(Vale.X64.QuickCodes.QEmpty (Vale.X64.QuickCodes.QEmpty_a __@x0)
(Vale.X64.QuickCodes.QEmpty__0 __@x0)))))

; </end constructor Vale.X64.QuickCodes.QEmpty>


; </end encoding Vale.X64.QuickCodes.QEmpty>


; <Start encoding Vale.X64.QuickCodes.QSeq>


; <start constructor Vale.X64.QuickCodes.QSeq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.QSeq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(Vale.X64.QuickCodes.QSeq (Vale.X64.QuickCodes.QSeq_a __@x0)
(Vale.X64.QuickCodes.QSeq_b __@x0)
(Vale.X64.QuickCodes.QSeq_c __@x0)
(Vale.X64.QuickCodes.QSeq_cs __@x0)
(Vale.X64.QuickCodes.QSeq_r __@x0)
(Vale.X64.QuickCodes.QSeq_msg __@x0)
(Vale.X64.QuickCodes.QSeq__5 __@x0)
(Vale.X64.QuickCodes.QSeq__6 __@x0)))))

; </end constructor Vale.X64.QuickCodes.QSeq>


; </end encoding Vale.X64.QuickCodes.QSeq>


; <Start encoding Vale.X64.QuickCodes.QBind>


; <start constructor Vale.X64.QuickCodes.QBind>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.QBind ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
140)
(= __@x0
(Vale.X64.QuickCodes.QBind (Vale.X64.QuickCodes.QBind_a __@x0)
(Vale.X64.QuickCodes.QBind_b __@x0)
(Vale.X64.QuickCodes.QBind_c __@x0)
(Vale.X64.QuickCodes.QBind_cs __@x0)
(Vale.X64.QuickCodes.QBind_r __@x0)
(Vale.X64.QuickCodes.QBind_msg __@x0)
(Vale.X64.QuickCodes.QBind__5 __@x0)
(Vale.X64.QuickCodes.QBind__6 __@x0)))))

; </end constructor Vale.X64.QuickCodes.QBind>


; </end encoding Vale.X64.QuickCodes.QBind>


; <Start encoding Vale.X64.QuickCodes.QGetState>


; <start constructor Vale.X64.QuickCodes.QGetState>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.QGetState ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(= __@x0
(Vale.X64.QuickCodes.QGetState (Vale.X64.QuickCodes.QGetState_a __@x0)
(Vale.X64.QuickCodes.QGetState_cs __@x0)
(Vale.X64.QuickCodes.QGetState__1 __@x0)))))

; </end constructor Vale.X64.QuickCodes.QGetState>


; </end encoding Vale.X64.QuickCodes.QGetState>


; <Start encoding Vale.X64.QuickCodes.QPURE>


; <start constructor Vale.X64.QuickCodes.QPURE>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.QPURE ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
174)
(= __@x0
(Vale.X64.QuickCodes.QPURE (Vale.X64.QuickCodes.QPURE_a __@x0)
(Vale.X64.QuickCodes.QPURE_cs __@x0)
(Vale.X64.QuickCodes.QPURE_r __@x0)
(Vale.X64.QuickCodes.QPURE_msg __@x0)
(Vale.X64.QuickCodes.QPURE_pre __@x0)
(Vale.X64.QuickCodes.QPURE__4 __@x0)
(Vale.X64.QuickCodes.QPURE__5 __@x0)))))

; </end constructor Vale.X64.QuickCodes.QPURE>


; </end encoding Vale.X64.QuickCodes.QPURE>


; <Start encoding Vale.X64.QuickCodes.QLemma>


; <start constructor Vale.X64.QuickCodes.QLemma>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.QLemma ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
201)
(= __@x0
(Vale.X64.QuickCodes.QLemma (Vale.X64.QuickCodes.QLemma_a __@x0)
(Vale.X64.QuickCodes.QLemma_cs __@x0)
(Vale.X64.QuickCodes.QLemma_r __@x0)
(Vale.X64.QuickCodes.QLemma_msg __@x0)
(Vale.X64.QuickCodes.QLemma_pre __@x0)
(Vale.X64.QuickCodes.QLemma_post __@x0)
(Vale.X64.QuickCodes.QLemma__5 __@x0)
(Vale.X64.QuickCodes.QLemma__6 __@x0)))))

; </end constructor Vale.X64.QuickCodes.QLemma>


; </end encoding Vale.X64.QuickCodes.QLemma>


; <Start encoding Vale.X64.QuickCodes.QGhost>


; <start constructor Vale.X64.QuickCodes.QGhost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.QGhost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
219)
(= __@x0
(Vale.X64.QuickCodes.QGhost (Vale.X64.QuickCodes.QGhost_a __@x0)
(Vale.X64.QuickCodes.QGhost_cs __@x0)
(Vale.X64.QuickCodes.QGhost_b __@x0)
(Vale.X64.QuickCodes.QGhost_r __@x0)
(Vale.X64.QuickCodes.QGhost_msg __@x0)
(Vale.X64.QuickCodes.QGhost_pre __@x0)
(Vale.X64.QuickCodes.QGhost_post __@x0)
(Vale.X64.QuickCodes.QGhost__6 __@x0)
(Vale.X64.QuickCodes.QGhost__7 __@x0)))))

; </end constructor Vale.X64.QuickCodes.QGhost>


; </end encoding Vale.X64.QuickCodes.QGhost>


; <Start encoding Vale.X64.QuickCodes.QAssertBy>


; <start constructor Vale.X64.QuickCodes.QAssertBy>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.QAssertBy ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
232)
(= __@x0
(Vale.X64.QuickCodes.QAssertBy (Vale.X64.QuickCodes.QAssertBy_a __@x0)
(Vale.X64.QuickCodes.QAssertBy_cs __@x0)
(Vale.X64.QuickCodes.QAssertBy_r __@x0)
(Vale.X64.QuickCodes.QAssertBy_msg __@x0)
(Vale.X64.QuickCodes.QAssertBy_p __@x0)
(Vale.X64.QuickCodes.QAssertBy__4 __@x0)
(Vale.X64.QuickCodes.QAssertBy__5 __@x0)))))

; </end constructor Vale.X64.QuickCodes.QAssertBy>


; </end encoding Vale.X64.QuickCodes.QAssertBy>


; </end encoding >


; <Start encoding Vale.X64.QuickCodes.uu___is_QEmpty>

(declare-fun Vale.X64.QuickCodes.uu___is_QEmpty (Term Term Term) Term)
(declare-fun Tm_arrow_010e1ccaf2a2b3ff3d0d296559c80206 () Term)
(declare-fun Vale.X64.QuickCodes.uu___is_QEmpty@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_QEmpty>


; <Skipped Vale.X64.QuickCodes.uu___is_QEmpty/>


; <Start encoding Vale.X64.QuickCodes.__proj__QEmpty__item___0>

(declare-fun Tm_refine_3bf1e58005ba552fb333da9a044d3e87 (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.__proj__QEmpty__item___0 (Term Term Term) Term)

(declare-fun Tm_arrow_7f108ff04da604248f7e0a5dbe556310 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QEmpty__item___0@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QEmpty__item___0>


; <Skipped Vale.X64.QuickCodes.__proj__QEmpty__item___0/>


; <Start encoding Vale.X64.QuickCodes.uu___is_QSeq>

(declare-fun Vale.X64.QuickCodes.uu___is_QSeq (Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_QSeq@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_QSeq>


; <Skipped Vale.X64.QuickCodes.uu___is_QSeq/>


; <Start encoding Vale.X64.QuickCodes.__proj__QSeq__item__b>

(declare-fun Tm_refine_a91a7f4d40ff1cab01209a19b453f3b9 (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__b (Term Term Term) Term)

(declare-fun Tm_arrow_02ff6ef2e3fd2c7eda6706901c059c86 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__b@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QSeq__item__b>


; <Skipped Vale.X64.QuickCodes.__proj__QSeq__item__b/>


; <Start encoding Vale.X64.QuickCodes.__proj__QSeq__item__c>


(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__c (Term Term Term) Term)

(declare-fun Tm_arrow_5f392e96b41d62759f7e36a7c6e74875 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__c@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QSeq__item__c>


; <Skipped Vale.X64.QuickCodes.__proj__QSeq__item__c/>


; <Start encoding Vale.X64.QuickCodes.__proj__QSeq__item__cs>


(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__cs (Term Term Term) Term)

(declare-fun Tm_arrow_bce71d1dd0f10d08b2fdf4bc1ff6b8af () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__cs@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QSeq__item__cs>


; <Skipped Vale.X64.QuickCodes.__proj__QSeq__item__cs/>


; <Start encoding Vale.X64.QuickCodes.__proj__QSeq__item__r>


(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__r (Term Term Term) Term)

(declare-fun Tm_arrow_06e361f00d8cf44136814455ab0274cd () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__r@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QSeq__item__r>


; <Skipped Vale.X64.QuickCodes.__proj__QSeq__item__r/>


; <Start encoding Vale.X64.QuickCodes.__proj__QSeq__item__msg>


(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__msg (Term Term Term) Term)

(declare-fun Tm_arrow_9d3fb1de981369df580c15a2c6dc5641 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item__msg@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QSeq__item__msg>


; <Skipped Vale.X64.QuickCodes.__proj__QSeq__item__msg/>


; <Start encoding Vale.X64.QuickCodes.__proj__QSeq__item___5>


(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item___5 (Term Term Term) Term)

(declare-fun Tm_arrow_18e914619a7ea507bbdd661d9b244406 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item___5@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QSeq__item___5>


; <Skipped Vale.X64.QuickCodes.__proj__QSeq__item___5/>


; <Start encoding Vale.X64.QuickCodes.__proj__QSeq__item___6>


(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item___6 (Term Term Term) Term)

(declare-fun Tm_arrow_a075ee7ade6051e62ed463e3da241202 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QSeq__item___6@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QSeq__item___6>


; <Skipped Vale.X64.QuickCodes.__proj__QSeq__item___6/>


; <Start encoding Vale.X64.QuickCodes.uu___is_QBind>

(declare-fun Vale.X64.QuickCodes.uu___is_QBind (Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_QBind@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_QBind>


; <Skipped Vale.X64.QuickCodes.uu___is_QBind/>


; <Start encoding Vale.X64.QuickCodes.__proj__QBind__item__b>

(declare-fun Tm_refine_7d5c31cc88b5ced2af2f0af6163ab025 (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__b (Term Term Term) Term)

(declare-fun Tm_arrow_c8bdea90b0801ac6c58fdbdacbd2d8df () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__b@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QBind__item__b>


; <Skipped Vale.X64.QuickCodes.__proj__QBind__item__b/>


; <Start encoding Vale.X64.QuickCodes.__proj__QBind__item__c>


(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__c (Term Term Term) Term)

(declare-fun Tm_arrow_b9cbda34b6cda8ee71c78150f91f8e67 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__c@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QBind__item__c>


; <Skipped Vale.X64.QuickCodes.__proj__QBind__item__c/>


; <Start encoding Vale.X64.QuickCodes.__proj__QBind__item__cs>


(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__cs (Term Term Term) Term)

(declare-fun Tm_arrow_999cb2f7f51b406b6833378ee588b025 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__cs@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QBind__item__cs>


; <Skipped Vale.X64.QuickCodes.__proj__QBind__item__cs/>


; <Start encoding Vale.X64.QuickCodes.__proj__QBind__item__r>


(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__r (Term Term Term) Term)

(declare-fun Tm_arrow_030600a8fe11c36a14f3d27110f5fce9 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__r@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QBind__item__r>


; <Skipped Vale.X64.QuickCodes.__proj__QBind__item__r/>


; <Start encoding Vale.X64.QuickCodes.__proj__QBind__item__msg>


(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__msg (Term Term Term) Term)

(declare-fun Tm_arrow_f804ed293bb5b3abd98e41ea47a37baa () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QBind__item__msg@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QBind__item__msg>


; <Skipped Vale.X64.QuickCodes.__proj__QBind__item__msg/>


; <Start encoding Vale.X64.QuickCodes.__proj__QBind__item___5>


(declare-fun Vale.X64.QuickCodes.__proj__QBind__item___5 (Term Term Term) Term)

(declare-fun Tm_arrow_a206c45b884f3a83e3d63f788cc4939b () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QBind__item___5@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QBind__item___5>


; <Skipped Vale.X64.QuickCodes.__proj__QBind__item___5/>


; <Start encoding Vale.X64.QuickCodes.__proj__QBind__item___6>


(declare-fun Vale.X64.QuickCodes.__proj__QBind__item___6 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_021dea92d919f662a8764860a84115d4 (Term Term Term) Term)
(declare-fun Tm_arrow_54ed69974387fb1bf9996384b8f32932 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QBind__item___6@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__QBind__item___6>


; <Skipped Vale.X64.QuickCodes.__proj__QBind__item___6/>


; <Start encoding Vale.X64.QuickCodes.uu___is_QGetState>

(declare-fun Vale.X64.QuickCodes.uu___is_QGetState (Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_QGetState@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_QGetState>


; <Skipped Vale.X64.QuickCodes.uu___is_QGetState/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGetState__item__cs>

(declare-fun Tm_refine_4031209a8486d66d031d8a593c8e7fff (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGetState__item__cs (Term Term Term) Term)

(declare-fun Tm_arrow_0295aaf5e4573434d55ea4f3bbe29c90 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGetState__item__cs@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QGetState__item__cs>


; <Skipped Vale.X64.QuickCodes.__proj__QGetState__item__cs/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGetState__item___1>


(declare-fun Vale.X64.QuickCodes.__proj__QGetState__item___1 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_01792cc580ace5ef319e40020798c62c (Term Term Term) Term)
(declare-fun Tm_arrow_f0ca73b66d814134efa16d25dc33f797 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGetState__item___1@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__QGetState__item___1>


; <Skipped Vale.X64.QuickCodes.__proj__QGetState__item___1/>


; <Start encoding Vale.X64.QuickCodes.uu___is_QPURE>

(declare-fun Vale.X64.QuickCodes.uu___is_QPURE (Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_QPURE@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_QPURE>


; <Skipped Vale.X64.QuickCodes.uu___is_QPURE/>


; <Start encoding Vale.X64.QuickCodes.__proj__QPURE__item__cs>

(declare-fun Tm_refine_66a4a737a20620fc555cee70170fd74e (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item__cs (Term Term Term) Term)

(declare-fun Tm_arrow_6e4ec6cd2af1e8d021ec9e4679ad7d84 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item__cs@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QPURE__item__cs>


; <Skipped Vale.X64.QuickCodes.__proj__QPURE__item__cs/>


; <Start encoding Vale.X64.QuickCodes.__proj__QPURE__item__r>


(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item__r (Term Term Term) Term)

(declare-fun Tm_arrow_2348651d0829f8819bd9f9267a3e0303 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item__r@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QPURE__item__r>


; <Skipped Vale.X64.QuickCodes.__proj__QPURE__item__r/>


; <Start encoding Vale.X64.QuickCodes.__proj__QPURE__item__msg>


(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item__msg (Term Term Term) Term)

(declare-fun Tm_arrow_c0b075972be320b5fc50bc04ccb91418 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item__msg@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QPURE__item__msg>


; <Skipped Vale.X64.QuickCodes.__proj__QPURE__item__msg/>


; <Start encoding Vale.X64.QuickCodes.__proj__QPURE__item__pre>


(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item__pre (Term Term Term) Term)




(declare-fun Tm_arrow_ffdd057f899007cecd91b09d50baada1 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item__pre@tok () Term)




; </end encoding Vale.X64.QuickCodes.__proj__QPURE__item__pre>


; <Skipped Vale.X64.QuickCodes.__proj__QPURE__item__pre/>


; <Start encoding Vale.X64.QuickCodes.__proj__QPURE__item___4>


(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item___4 (Term Term Term) Term)





;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.QuickCodes.__proj__QPURE__item___4; Namespace Vale.X64.QuickCodes
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.QuickCodes.__proj__QPURE__item__pre@tok))
:named @kick_partial_app_4c9ab7dae10d3a40b9e9bb5827577b05))
(declare-fun Tm_refine_7960eb7a76f03c932323753fe5d45b66 (Term Term Term) Term)





(declare-fun Tm_arrow_51cbb78698d73f0c7faec25cd8e99bc0 (Term Term Term) Term)
(declare-fun Tm_arrow_84999347b1e5d3ac43371464035ee526 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item___4@tok () Term)













; </end encoding Vale.X64.QuickCodes.__proj__QPURE__item___4>


; <Skipped Vale.X64.QuickCodes.__proj__QPURE__item___4/>


; <Start encoding Vale.X64.QuickCodes.__proj__QPURE__item___5>


(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item___5 (Term Term Term) Term)

(declare-fun Tm_arrow_0535725f08f32814dd6da4ca3cbed8ff () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QPURE__item___5@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QPURE__item___5>


; <Skipped Vale.X64.QuickCodes.__proj__QPURE__item___5/>


; <Start encoding Vale.X64.QuickCodes.uu___is_QLemma>

(declare-fun Vale.X64.QuickCodes.uu___is_QLemma (Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_QLemma@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_QLemma>


; <Skipped Vale.X64.QuickCodes.uu___is_QLemma/>


; <Start encoding Vale.X64.QuickCodes.__proj__QLemma__item__cs>

(declare-fun Tm_refine_5742cde477deec60e39fd91f3654dc27 (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__cs (Term Term Term) Term)

(declare-fun Tm_arrow_5feaae942cc32408a3280008bf060385 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__cs@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QLemma__item__cs>


; <Skipped Vale.X64.QuickCodes.__proj__QLemma__item__cs/>


; <Start encoding Vale.X64.QuickCodes.__proj__QLemma__item__r>


(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__r (Term Term Term) Term)

(declare-fun Tm_arrow_bbae08371bc1a9b1ebf3f525b231f72c () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__r@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QLemma__item__r>


; <Skipped Vale.X64.QuickCodes.__proj__QLemma__item__r/>


; <Start encoding Vale.X64.QuickCodes.__proj__QLemma__item__msg>


(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__msg (Term Term Term) Term)

(declare-fun Tm_arrow_d3687c3b2b55186eab19d0409cf5c578 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__msg@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QLemma__item__msg>


; <Skipped Vale.X64.QuickCodes.__proj__QLemma__item__msg/>


; <Start encoding Vale.X64.QuickCodes.__proj__QLemma__item__pre>


(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__pre (Term Term Term) Term)

(declare-fun Tm_arrow_bfc5aa98a8d3d3164270691b7422a32e () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__pre@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QLemma__item__pre>


; <Skipped Vale.X64.QuickCodes.__proj__QLemma__item__pre/>


; <Start encoding Vale.X64.QuickCodes.__proj__QLemma__item__post>


(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__post (Term Term Term) Term)

(declare-fun Tm_arrow_ea55eda7332465d3e49df4afc279aa23 (Term Term Term) Term)
(declare-fun Tm_arrow_c31ebc3fb27eb13ae4918738d4df94de () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item__post@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__QLemma__item__post>


; <Skipped Vale.X64.QuickCodes.__proj__QLemma__item__post/>


; <Start encoding Vale.X64.QuickCodes.__proj__QLemma__item___5>


(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item___5 (Term Term Term) Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.QuickCodes.__proj__QLemma__item___5; Namespace Vale.X64.QuickCodes
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.QuickCodes.__proj__QLemma__item__post@tok))
:named @kick_partial_app_fd39aeee6e3f89d7fdff23ae4690d6d5))
(declare-fun Tm_refine_2314839288487422b95c18d9cc7f9054 (Term Term Term) Term)
(declare-fun Tm_arrow_718de0bda3d135522c2ca3e0ac705647 (Term Term Term) Term)
(declare-fun Tm_arrow_1fcc8bf9136c1a697c78dd19b54305ab () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item___5@tok () Term)




; </end encoding Vale.X64.QuickCodes.__proj__QLemma__item___5>


; <Skipped Vale.X64.QuickCodes.__proj__QLemma__item___5/>


; <Start encoding Vale.X64.QuickCodes.__proj__QLemma__item___6>


(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item___6 (Term Term Term) Term)

(declare-fun Tm_arrow_9bb2b4a0d8bb3c0ed3a78fc0e91571fc () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QLemma__item___6@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QLemma__item___6>


; <Skipped Vale.X64.QuickCodes.__proj__QLemma__item___6/>


; <Start encoding Vale.X64.QuickCodes.uu___is_QGhost>

(declare-fun Vale.X64.QuickCodes.uu___is_QGhost (Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_QGhost@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_QGhost>


; <Skipped Vale.X64.QuickCodes.uu___is_QGhost/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGhost__item__cs>

(declare-fun Tm_refine_e472aaae78391477fd73f5609049bdfb (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__cs (Term Term Term) Term)

(declare-fun Tm_arrow_6a2b76fcd4ff9f388fdf725a036919d4 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__cs@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QGhost__item__cs>


; <Skipped Vale.X64.QuickCodes.__proj__QGhost__item__cs/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGhost__item__b>


(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__b (Term Term Term) Term)

(declare-fun Tm_arrow_2bdd202d8a292b98f45e72f0d05caeb9 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__b@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QGhost__item__b>


; <Skipped Vale.X64.QuickCodes.__proj__QGhost__item__b/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGhost__item__r>


(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__r (Term Term Term) Term)

(declare-fun Tm_arrow_667a4b51a75b23c739ae8850588d1185 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__r@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QGhost__item__r>


; <Skipped Vale.X64.QuickCodes.__proj__QGhost__item__r/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGhost__item__msg>


(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__msg (Term Term Term) Term)

(declare-fun Tm_arrow_47b4cb76dce59a3f44f773b5e44e8926 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__msg@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QGhost__item__msg>


; <Skipped Vale.X64.QuickCodes.__proj__QGhost__item__msg/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGhost__item__pre>


(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__pre (Term Term Term) Term)


(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__pre@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QGhost__item__pre>


; <Skipped Vale.X64.QuickCodes.__proj__QGhost__item__pre/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGhost__item__post>


(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__post (Term Term Term) Term)

(declare-fun Tm_arrow_13c61499b943bcec6945a4618651e88c (Term Term Term) Term)
(declare-fun Tm_arrow_1f51358f4e977f7d7fd170a953012cf9 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item__post@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__QGhost__item__post>


; <Skipped Vale.X64.QuickCodes.__proj__QGhost__item__post/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGhost__item___6>


(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item___6 (Term Term Term) Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.QuickCodes.__proj__QGhost__item___6; Namespace Vale.X64.QuickCodes
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.QuickCodes.__proj__QGhost__item__post@tok))
:named @kick_partial_app_1bf4d024825e516615de05b06e623ee9))
(declare-fun Tm_refine_e007511d3bfa673d72641c0e432d624b (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_384a776143467125722f7953e5026bec (Term Term Term) Term)
(declare-fun Tm_arrow_1b8ded5db38c70442bd1aa7fe45ad094 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item___6@tok () Term)




; </end encoding Vale.X64.QuickCodes.__proj__QGhost__item___6>


; <Skipped Vale.X64.QuickCodes.__proj__QGhost__item___6/>


; <Start encoding Vale.X64.QuickCodes.__proj__QGhost__item___7>


(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item___7 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_ecc08710ce7151abb6afc92836540e61 (Term Term Term) Term)
(declare-fun Tm_arrow_173ecf051abff19a7be70ec3e8ecc06f () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QGhost__item___7@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__QGhost__item___7>


; <Skipped Vale.X64.QuickCodes.__proj__QGhost__item___7/>


; <Start encoding Vale.X64.QuickCodes.uu___is_QAssertBy>

(declare-fun Vale.X64.QuickCodes.uu___is_QAssertBy (Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_QAssertBy@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_QAssertBy>


; <Skipped Vale.X64.QuickCodes.uu___is_QAssertBy/>


; <Start encoding Vale.X64.QuickCodes.__proj__QAssertBy__item__cs>

(declare-fun Tm_refine_b73f35781bfc1860f57b6f8b87012ba4 (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item__cs (Term Term Term) Term)

(declare-fun Tm_arrow_8285439a8a5bfd35586f424f924a9a80 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item__cs@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QAssertBy__item__cs>


; <Skipped Vale.X64.QuickCodes.__proj__QAssertBy__item__cs/>


; <Start encoding Vale.X64.QuickCodes.__proj__QAssertBy__item__r>


(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item__r (Term Term Term) Term)

(declare-fun Tm_arrow_da5cea868b8ae50447e091ed3fc7e67d () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item__r@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QAssertBy__item__r>


; <Skipped Vale.X64.QuickCodes.__proj__QAssertBy__item__r/>


; <Start encoding Vale.X64.QuickCodes.__proj__QAssertBy__item__msg>


(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item__msg (Term Term Term) Term)

(declare-fun Tm_arrow_3a9d94759ff2aab8fed7c260c7f05888 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item__msg@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QAssertBy__item__msg>


; <Skipped Vale.X64.QuickCodes.__proj__QAssertBy__item__msg/>


; <Start encoding Vale.X64.QuickCodes.__proj__QAssertBy__item__p>


(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item__p (Term Term Term) Term)

(declare-fun Tm_arrow_a057156e4461b6b387282ad72e8337ca () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item__p@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QAssertBy__item__p>


; <Skipped Vale.X64.QuickCodes.__proj__QAssertBy__item__p/>


; <Start encoding Vale.X64.QuickCodes.__proj__QAssertBy__item___4>


(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item___4 (Term Term Term) Term)

(declare-fun Tm_arrow_f6efcec77ebb9baef462fa4736d7425e () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item___4@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QAssertBy__item___4>


; <Skipped Vale.X64.QuickCodes.__proj__QAssertBy__item___4/>


; <Start encoding Vale.X64.QuickCodes.__proj__QAssertBy__item___5>


(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item___5 (Term Term Term) Term)

(declare-fun Tm_arrow_5a9f1c3373d4753d5fce4d82ad035126 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__QAssertBy__item___5@tok () Term)

; </end encoding Vale.X64.QuickCodes.__proj__QAssertBy__item___5>


; <Skipped Vale.X64.QuickCodes.__proj__QAssertBy__item___5/>


; <Start encoding Vale.X64.QuickCodes.va_QBind>


(declare-fun Vale.X64.QuickCodes.va_QBind (Term Term Term Term Term Term Term Term) Term)


(declare-fun Vale.X64.QuickCodes.va_QBind@tok () Term)


; </end encoding Vale.X64.QuickCodes.va_QBind>


; <Start encoding Vale.X64.QuickCodes.va_QEmpty>

(declare-fun Vale.X64.QuickCodes.va_QEmpty (Term Term) Term)

(declare-fun Vale.X64.QuickCodes.va_QEmpty@tok () Term)

; </end encoding Vale.X64.QuickCodes.va_QEmpty>


; <Start encoding Vale.X64.QuickCodes.va_QLemma>




(declare-fun Vale.X64.QuickCodes.va_QLemma (Term Term Term Term Term Term Term Term) Term)




(declare-fun Vale.X64.QuickCodes.va_QLemma@tok () Term)




; </end encoding Vale.X64.QuickCodes.va_QLemma>


; <Start encoding Vale.X64.QuickCodes.va_QSeq>

(declare-fun Vale.X64.QuickCodes.va_QSeq (Term Term Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.va_QSeq@tok () Term)

; </end encoding Vale.X64.QuickCodes.va_QSeq>


; <Start encoding Vale.X64.QuickCodes.va_qPURE>














(declare-fun Vale.X64.QuickCodes.va_qPURE (Term Term Term Term Term Term Term) Term)













(declare-fun Tm_arrow_639d46b70817d0aa784d766eece8dcae () Term)
(declare-fun Vale.X64.QuickCodes.va_qPURE@tok () Term)














; </end encoding Vale.X64.QuickCodes.va_qPURE>


; <Start encoding Vale.X64.QuickCodes.wp_proc>


(declare-fun Vale.X64.QuickCodes.wp_proc (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_44d1443a830ee8290aaf4153e87fc3f0 () Term)
(declare-fun Vale.X64.QuickCodes.wp_proc@tok () Term)


; </end encoding Vale.X64.QuickCodes.wp_proc>


; <Start encoding Vale.X64.QuickCodes.wp_Seq_t>

(declare-fun Vale.X64.QuickCodes.wp_Seq_t (Term) Term)

(declare-fun Vale.X64.QuickCodes.wp_Seq_t@tok () Term)


; </end encoding Vale.X64.QuickCodes.wp_Seq_t>


; <Start encoding Vale.X64.QuickCodes.wp_Bind_t>

(declare-fun Vale.X64.QuickCodes.wp_Bind_t (Term) Term)

(declare-fun Vale.X64.QuickCodes.wp_Bind_t@tok () Term)


; </end encoding Vale.X64.QuickCodes.wp_Bind_t>


; <Start encoding Vale.X64.QuickCodes.k_AssertBy>

(declare-fun Vale.X64.QuickCodes.k_AssertBy (Term Term Term) Term)
(declare-fun Tm_arrow_0c7ddca491f21885278a4c967044720d () Term)
(declare-fun Vale.X64.QuickCodes.k_AssertBy@tok () Term)

; </end encoding Vale.X64.QuickCodes.k_AssertBy>


; <Start encoding Vale.X64.QuickCodes.va_range1>

(declare-fun Vale.X64.QuickCodes.va_range1 (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCodes.va_range1>


; <Start encoding Vale.X64.QuickCodes.empty_list_is_small>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.QuickCodes.empty_list_is_small (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.QuickCodes.empty_list_is_small@tok () Term)

; </end encoding Vale.X64.QuickCodes.empty_list_is_small>


; <Start encoding >

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.QuickCodes.wp_Bind.fuel_instrumented (Fuel Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.QuickCodes.wp_Bind.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.QuickCodes.wp_Seq.fuel_instrumented (Fuel Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.QuickCodes.wp_Seq.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.QuickCodes.wp.fuel_instrumented (Fuel Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.QuickCodes.wp.fuel_instrumented_token () Term)
(declare-fun Vale.X64.QuickCodes.wp (Term Term Term Term Term Term) Term)
(declare-fun Vale.X64.QuickCodes.wp@tok () Term)
(declare-fun Vale.X64.QuickCodes.wp_Seq (Term Term Term Term Term Term) Term)
(declare-fun Vale.X64.QuickCodes.wp_Seq@tok () Term)
(declare-fun Vale.X64.QuickCodes.wp_Bind (Term Term Term Term Term Term) Term)
(declare-fun Vale.X64.QuickCodes.wp_Bind@tok () Term)



(declare-fun Tm_abs_c8c3955c6d20d50ca51d19c6d5f0e657 (Fuel Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_08a6541ad6304070741ccc665d1e5a99 (Term Term Term) Term)

(declare-fun Tm_arrow_9518b230c4b413f5032bf8fa45cf32bf (Term Term Term Term) Term)
(declare-fun Tm_abs_3fa1a1f3854c13efa87ddfb97b2532f4 (Fuel Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_94122eb4bc79a64bbb8b701b84c84179 (Term) Term)
(declare-fun Tm_abs_db763a3f176d6a948dd36efc35c59f8e (Fuel Term Term Term Term Term Term) Term)



(declare-fun Tm_abs_2bd4893bbe93962e6ae87f7a5b0d8b64 (Fuel Term Term Term Term Term Term Term) Term)


(declare-fun Tm_abs_56027ae1109bf99b20f3e7291b90d9eb (Fuel Term Term Term Term Term Term) Term)



(declare-fun Tm_arrow_bb2fd5660a28913b4402f5da3a597ea1 () Term)


(declare-fun Tm_arrow_a148b0331fb2f30305244a461e099b89 () Term)




(declare-fun Tm_arrow_392b8e14b985331a22de06356578e1ad () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.QuickCodes.wp; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Seq; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Bind; Namespace Vale.X64.QuickCodes
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.QuickCodes.k_AssertBy@tok))
:named @kick_partial_app_21ac59637f3dafec35ddf7d867c56e47))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.QuickCodes.wp; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Seq; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Bind; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(110,8-110,10); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(110,8-110,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Vale.X64.QuickCodes.wp.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6)
(Vale.X64.QuickCodes.wp.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((Vale.X64.QuickCodes.wp.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6))
:qid @fuel_irrelevance_Vale.X64.QuickCodes.wp.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.QuickCodes.wp.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.QuickCodes.wp; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Seq; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Bind; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(110,8-110,10); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(110,8-110,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.QuickCodes.wp @x0
@x1
@x2
@x3
@x4
@x5)
(Vale.X64.QuickCodes.wp.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((Vale.X64.QuickCodes.wp @x0
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_correspondence_Vale.X64.QuickCodes.wp.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.QuickCodes.wp.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.QuickCodes.wp; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Seq; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Bind; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(150,4-150,10); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(150,4-150,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Vale.X64.QuickCodes.wp_Seq.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6)
(Vale.X64.QuickCodes.wp_Seq.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((Vale.X64.QuickCodes.wp_Seq.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6))
:qid @fuel_irrelevance_Vale.X64.QuickCodes.wp_Seq.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.QuickCodes.wp_Seq.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.QuickCodes.wp; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Seq; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Bind; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(150,4-150,10); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(150,4-150,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.QuickCodes.wp_Seq @x0
@x1
@x2
@x3
@x4
@x5)
(Vale.X64.QuickCodes.wp_Seq.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((Vale.X64.QuickCodes.wp_Seq @x0
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_correspondence_Vale.X64.QuickCodes.wp_Seq.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.QuickCodes.wp_Seq.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.QuickCodes.wp; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Seq; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Bind; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(154,4-154,11); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(154,4-154,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Vale.X64.QuickCodes.wp_Bind.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6)
(Vale.X64.QuickCodes.wp_Bind.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((Vale.X64.QuickCodes.wp_Bind.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6))
:qid @fuel_irrelevance_Vale.X64.QuickCodes.wp_Bind.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.QuickCodes.wp_Bind.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.QuickCodes.wp; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Seq; Namespace Vale.X64.QuickCodes; Name Vale.X64.QuickCodes.wp_Bind; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(154,4-154,11); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(154,4-154,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.X64.QuickCodes.wp_Bind @x0
@x1
@x2
@x3
@x4
@x5)
(Vale.X64.QuickCodes.wp_Bind.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((Vale.X64.QuickCodes.wp_Bind @x0
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_correspondence_Vale.X64.QuickCodes.wp_Bind.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.QuickCodes.wp_Bind.fuel_instrumented))

; </end encoding >


; <Start encoding Vale.X64.QuickCodes.wp_sound>


(declare-fun Vale.X64.QuickCodes.wp_sound (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_05ca21427e25edd1dd735112bfa25c02 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_e0a33bda451a97473c53346386a3c962 () Term)
(declare-fun Vale.X64.QuickCodes.wp_sound@tok () Term)


; </end encoding Vale.X64.QuickCodes.wp_sound>


; <Start encoding Vale.X64.QuickCodes.block>

(declare-fun Vale.X64.QuickCodes.block (Term) Term)

(declare-fun Vale.X64.QuickCodes.block@tok () Term)

; </end encoding Vale.X64.QuickCodes.block>


; <Start encoding Vale.X64.QuickCodes.wp_block>



(declare-fun Vale.X64.QuickCodes.wp_block (Term Term Term Term Term Term) Term)


(declare-fun Tm_arrow_5db412c6dfc6c93b3c2c89cfb9b488e9 () Term)
(declare-fun Vale.X64.QuickCodes.wp_block@tok () Term)



; </end encoding Vale.X64.QuickCodes.wp_block>


; <Start encoding Vale.X64.QuickCodes.qblock_proof>



(declare-fun Vale.X64.QuickCodes.qblock_proof (Term Term Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_8eb5f4001bed900acf64504e6592adba () Term)
(declare-fun Vale.X64.QuickCodes.qblock_proof@tok () Term)


; </end encoding Vale.X64.QuickCodes.qblock_proof>


; <Start encoding Vale.X64.QuickCodes.qblock>


(declare-fun Vale.X64.QuickCodes.qblock (Term Term Term Term) Term)

(declare-fun Tm_arrow_903a0bcdb263cdb051fbaef9f2654f47 () Term)
(declare-fun Vale.X64.QuickCodes.qblock@tok () Term)

; </end encoding Vale.X64.QuickCodes.qblock>


; <Start encoding Vale.X64.QuickCodes.wp_InlineIf>


(declare-fun Vale.X64.QuickCodes.wp_InlineIf (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_aaca921f3453016a9f2ce60908eb843c () Term)
(declare-fun Vale.X64.QuickCodes.wp_InlineIf@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.QuickCodes.wp_InlineIf; Namespace Vale.X64.QuickCodes
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.QuickCode.__proj__QProc__item__wp@tok))
:named @kick_partial_app_7345558eccad650fbf277e01a3a714d9))




; </end encoding Vale.X64.QuickCodes.wp_InlineIf>


; <Start encoding Vale.X64.QuickCodes.qInlineIf_proof>


(declare-fun Vale.X64.QuickCodes.qInlineIf_proof (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_dfc6acd17b3e0cc0a9975e47ed48f279 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_e74c564f121a9fc6ea93f1ec5f5e2c78 () Term)
(declare-fun Vale.X64.QuickCodes.qInlineIf_proof@tok () Term)


; </end encoding Vale.X64.QuickCodes.qInlineIf_proof>


; <Start encoding Vale.X64.QuickCodes.va_qInlineIf>

(declare-fun Vale.X64.QuickCodes.va_qInlineIf (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_222f982eb48d6c86a6f0f93298f9b44e () Term)
(declare-fun Vale.X64.QuickCodes.va_qInlineIf@tok () Term)

; </end encoding Vale.X64.QuickCodes.va_qInlineIf>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.cmp () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.Cmp_eq (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_eq_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_eq_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cmp_eq
(declare-fun Vale.X64.QuickCodes.Cmp_eq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.Cmp_ne (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_ne_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_ne_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cmp_ne
(declare-fun Vale.X64.QuickCodes.Cmp_ne@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.Cmp_le (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_le_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_le_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cmp_le
(declare-fun Vale.X64.QuickCodes.Cmp_le@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.Cmp_ge (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_ge_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_ge_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cmp_ge
(declare-fun Vale.X64.QuickCodes.Cmp_ge@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.Cmp_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_lt_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_lt_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cmp_lt
(declare-fun Vale.X64.QuickCodes.Cmp_lt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.X64.QuickCodes.Cmp_gt (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_gt_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.X64.QuickCodes.Cmp_gt_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cmp_gt
(declare-fun Vale.X64.QuickCodes.Cmp_gt@tok () Term)




(declare-fun Tm_arrow_7c10bfab8d7fe4e0c0caf970e8713b71 () Term)


























; <Start encoding Vale.X64.QuickCodes.cmp>


; <start constructor Vale.X64.QuickCodes.cmp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.cmp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
701)
(= __@x0
Vale.X64.QuickCodes.cmp)))

; </end constructor Vale.X64.QuickCodes.cmp>


; </end encoding Vale.X64.QuickCodes.cmp>


; <Start encoding Vale.X64.QuickCodes.Cmp_eq>


; <start constructor Vale.X64.QuickCodes.Cmp_eq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.Cmp_eq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
709)
(= __@x0
(Vale.X64.QuickCodes.Cmp_eq (Vale.X64.QuickCodes.Cmp_eq_o1 __@x0)
(Vale.X64.QuickCodes.Cmp_eq_o2 __@x0)))))

; </end constructor Vale.X64.QuickCodes.Cmp_eq>


; </end encoding Vale.X64.QuickCodes.Cmp_eq>


; <Start encoding Vale.X64.QuickCodes.Cmp_ne>


; <start constructor Vale.X64.QuickCodes.Cmp_ne>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.Cmp_ne ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
718)
(= __@x0
(Vale.X64.QuickCodes.Cmp_ne (Vale.X64.QuickCodes.Cmp_ne_o1 __@x0)
(Vale.X64.QuickCodes.Cmp_ne_o2 __@x0)))))

; </end constructor Vale.X64.QuickCodes.Cmp_ne>


; </end encoding Vale.X64.QuickCodes.Cmp_ne>


; <Start encoding Vale.X64.QuickCodes.Cmp_le>


; <start constructor Vale.X64.QuickCodes.Cmp_le>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.Cmp_le ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
727)
(= __@x0
(Vale.X64.QuickCodes.Cmp_le (Vale.X64.QuickCodes.Cmp_le_o1 __@x0)
(Vale.X64.QuickCodes.Cmp_le_o2 __@x0)))))

; </end constructor Vale.X64.QuickCodes.Cmp_le>


; </end encoding Vale.X64.QuickCodes.Cmp_le>


; <Start encoding Vale.X64.QuickCodes.Cmp_ge>


; <start constructor Vale.X64.QuickCodes.Cmp_ge>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.Cmp_ge ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
736)
(= __@x0
(Vale.X64.QuickCodes.Cmp_ge (Vale.X64.QuickCodes.Cmp_ge_o1 __@x0)
(Vale.X64.QuickCodes.Cmp_ge_o2 __@x0)))))

; </end constructor Vale.X64.QuickCodes.Cmp_ge>


; </end encoding Vale.X64.QuickCodes.Cmp_ge>


; <Start encoding Vale.X64.QuickCodes.Cmp_lt>


; <start constructor Vale.X64.QuickCodes.Cmp_lt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.Cmp_lt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
745)
(= __@x0
(Vale.X64.QuickCodes.Cmp_lt (Vale.X64.QuickCodes.Cmp_lt_o1 __@x0)
(Vale.X64.QuickCodes.Cmp_lt_o2 __@x0)))))

; </end constructor Vale.X64.QuickCodes.Cmp_lt>


; </end encoding Vale.X64.QuickCodes.Cmp_lt>


; <Start encoding Vale.X64.QuickCodes.Cmp_gt>


; <start constructor Vale.X64.QuickCodes.Cmp_gt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.X64.QuickCodes.Cmp_gt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
754)
(= __@x0
(Vale.X64.QuickCodes.Cmp_gt (Vale.X64.QuickCodes.Cmp_gt_o1 __@x0)
(Vale.X64.QuickCodes.Cmp_gt_o2 __@x0)))))

; </end constructor Vale.X64.QuickCodes.Cmp_gt>


; </end encoding Vale.X64.QuickCodes.Cmp_gt>


; </end encoding >


; <Start encoding Vale.X64.QuickCodes.uu___is_Cmp_eq>

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_eq (Term) Term)
(declare-fun Tm_arrow_55c5ccc6a4d33df49c05df0bfa63cd88 () Term)
(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_eq@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_Cmp_eq>


; <Skipped Vale.X64.QuickCodes.uu___is_Cmp_eq/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_eq__item__o1>

(declare-fun Tm_refine_79e3a6e70e67630cf427a80ed0a4e1d3 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_eq__item__o1 (Term) Term)


(declare-fun Tm_arrow_21f952013a183475db944e38dac4ef6b () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_eq__item__o1@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_eq__item__o1>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_eq__item__o1/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_eq__item__o2>


(declare-fun Vale.X64.QuickCodes.__proj__Cmp_eq__item__o2 (Term) Term)



(declare-fun Vale.X64.QuickCodes.__proj__Cmp_eq__item__o2@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_eq__item__o2>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_eq__item__o2/>


; <Start encoding Vale.X64.QuickCodes.uu___is_Cmp_ne>

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_ne (Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_ne@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_Cmp_ne>


; <Skipped Vale.X64.QuickCodes.uu___is_Cmp_ne/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_ne__item__o1>

(declare-fun Tm_refine_cf3a5e84197e0dc095e3f4b6944c03ad () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_ne__item__o1 (Term) Term)


(declare-fun Tm_arrow_a1f9513520a137d2d05ae0e97597cf74 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_ne__item__o1@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_ne__item__o1>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_ne__item__o1/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_ne__item__o2>


(declare-fun Vale.X64.QuickCodes.__proj__Cmp_ne__item__o2 (Term) Term)



(declare-fun Vale.X64.QuickCodes.__proj__Cmp_ne__item__o2@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_ne__item__o2>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_ne__item__o2/>


; <Start encoding Vale.X64.QuickCodes.uu___is_Cmp_le>

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_le (Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_le@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_Cmp_le>


; <Skipped Vale.X64.QuickCodes.uu___is_Cmp_le/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_le__item__o1>

(declare-fun Tm_refine_e81e0a8f29a0b7a0a0192b5e4daa0ea7 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_le__item__o1 (Term) Term)


(declare-fun Tm_arrow_f78a9611e63c2a4081e80e1d48c614f2 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_le__item__o1@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_le__item__o1>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_le__item__o1/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_le__item__o2>


(declare-fun Vale.X64.QuickCodes.__proj__Cmp_le__item__o2 (Term) Term)



(declare-fun Vale.X64.QuickCodes.__proj__Cmp_le__item__o2@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_le__item__o2>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_le__item__o2/>


; <Start encoding Vale.X64.QuickCodes.uu___is_Cmp_ge>

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_ge (Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_ge@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_Cmp_ge>


; <Skipped Vale.X64.QuickCodes.uu___is_Cmp_ge/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_ge__item__o1>

(declare-fun Tm_refine_963c01ae6ff8fce053e3fb4c65517cf0 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_ge__item__o1 (Term) Term)


(declare-fun Tm_arrow_c07fb6e55c8f7b499ee579bc09ce4133 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_ge__item__o1@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_ge__item__o1>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_ge__item__o1/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_ge__item__o2>


(declare-fun Vale.X64.QuickCodes.__proj__Cmp_ge__item__o2 (Term) Term)



(declare-fun Vale.X64.QuickCodes.__proj__Cmp_ge__item__o2@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_ge__item__o2>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_ge__item__o2/>


; <Start encoding Vale.X64.QuickCodes.uu___is_Cmp_lt>

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_lt (Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_lt@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_Cmp_lt>


; <Skipped Vale.X64.QuickCodes.uu___is_Cmp_lt/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_lt__item__o1>

(declare-fun Tm_refine_7a0baeddd930b9285f08819aa1aae3d9 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_lt__item__o1 (Term) Term)


(declare-fun Tm_arrow_1cc2f20a8c497131fa9d26a054573da2 () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_lt__item__o1@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_lt__item__o1>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_lt__item__o1/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_lt__item__o2>


(declare-fun Vale.X64.QuickCodes.__proj__Cmp_lt__item__o2 (Term) Term)



(declare-fun Vale.X64.QuickCodes.__proj__Cmp_lt__item__o2@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_lt__item__o2>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_lt__item__o2/>


; <Start encoding Vale.X64.QuickCodes.uu___is_Cmp_gt>

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_gt (Term) Term)

(declare-fun Vale.X64.QuickCodes.uu___is_Cmp_gt@tok () Term)

; </end encoding Vale.X64.QuickCodes.uu___is_Cmp_gt>


; <Skipped Vale.X64.QuickCodes.uu___is_Cmp_gt/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_gt__item__o1>

(declare-fun Tm_refine_d215a1997b8658bff7ac4ee881057f3a () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_gt__item__o1 (Term) Term)


(declare-fun Tm_arrow_03f9ae46eb3bbf93be3d69bae3267bde () Term)
(declare-fun Vale.X64.QuickCodes.__proj__Cmp_gt__item__o1@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_gt__item__o1>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_gt__item__o1/>


; <Start encoding Vale.X64.QuickCodes.__proj__Cmp_gt__item__o2>


(declare-fun Vale.X64.QuickCodes.__proj__Cmp_gt__item__o2 (Term) Term)



(declare-fun Vale.X64.QuickCodes.__proj__Cmp_gt__item__o2@tok () Term)


; </end encoding Vale.X64.QuickCodes.__proj__Cmp_gt__item__o2>


; <Skipped Vale.X64.QuickCodes.__proj__Cmp_gt__item__o2/>


; <Start encoding Vale.X64.QuickCodes.cmp_to_ocmp>

(declare-fun Vale.X64.QuickCodes.cmp_to_ocmp (Term) Term)
(declare-fun Tm_arrow_1b99ae9c4f1471a2b6fdf9503bc77554 () Term)
(declare-fun Vale.X64.QuickCodes.cmp_to_ocmp@tok () Term)

; </end encoding Vale.X64.QuickCodes.cmp_to_ocmp>


; <Start encoding Vale.X64.QuickCodes.valid_cmp>

(declare-fun Vale.X64.QuickCodes.valid_cmp (Term Term) Term)
(declare-fun Tm_arrow_b0d68476e6018603bc3fb6a36d4d2bf2 () Term)
(declare-fun Vale.X64.QuickCodes.valid_cmp@tok () Term)

; </end encoding Vale.X64.QuickCodes.valid_cmp>


; <Start encoding Vale.X64.QuickCodes.eval_cmp>

(declare-fun Vale.X64.QuickCodes.eval_cmp (Term Term) Term)
(declare-fun Tm_ghost_arrow_93a297c346819919f97b1054220b70a5 () Term)
(declare-fun Vale.X64.QuickCodes.eval_cmp@tok () Term)

; </end encoding Vale.X64.QuickCodes.eval_cmp>


; <Start encoding Vale.X64.QuickCodes.wp_If>


(declare-fun Vale.X64.QuickCodes.wp_If (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_a2d354edc97b5a0fe641f49c703054e4 () Term)
(declare-fun Vale.X64.QuickCodes.wp_If@tok () Term)






; </end encoding Vale.X64.QuickCodes.wp_If>


; <Start encoding Vale.X64.QuickCodes.qIf_proof>


(declare-fun Vale.X64.QuickCodes.qIf_proof (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_a45f52249892cb62db6492f903bd8833 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_f5a52aff9c46077d516bdf4fc1521bd8 () Term)
(declare-fun Vale.X64.QuickCodes.qIf_proof@tok () Term)


; </end encoding Vale.X64.QuickCodes.qIf_proof>


; <Start encoding Vale.X64.QuickCodes.va_qIf>

(declare-fun Vale.X64.QuickCodes.va_qIf (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b2b5c0ff490ea6c860bd1bf3c31bbe08 () Term)
(declare-fun Vale.X64.QuickCodes.va_qIf@tok () Term)

; </end encoding Vale.X64.QuickCodes.va_qIf>


; <Start encoding Vale.X64.QuickCodes.wp_While_inv>

(declare-fun Tm_arrow_f1d8ee028b2c36862a0e3cb4f6895637 (Term Term) Term)

(declare-fun Tm_arrow_54728cc2192ba747c057f988ad8a4e9f (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.wp_While_inv (Term Term Term Term Term Term Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6bc4bc903b38ff536926833ca3c2ad8e () Term)
(declare-fun Vale.X64.QuickCodes.wp_While_inv@tok () Term)




; </end encoding Vale.X64.QuickCodes.wp_While_inv>


; <Start encoding Vale.X64.QuickCodes.wp_While_body>





(declare-fun Vale.X64.QuickCodes.wp_While_body (Term Term Term Term Term Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3f7df82455be3eb40596bdc02c13074e () Term)
(declare-fun Vale.X64.QuickCodes.wp_While_body@tok () Term)




;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.X64.QuickCodes.wp_While_body; Namespace Vale.X64.QuickCodes
(assert (! (Valid (ApplyTT __uu__PartialApp
Vale.X64.QuickCodes.wp_While_inv@tok))
:named @kick_partial_app_755250d5763bbf5f067299d151b114fe))




; </end encoding Vale.X64.QuickCodes.wp_While_body>


; <Start encoding Vale.X64.QuickCodes.wp_While>





(declare-fun Vale.X64.QuickCodes.wp_While (Term Term Term Term Term Term Term Term Term Term Term) Term)





(declare-fun Vale.X64.QuickCodes.wp_While@tok () Term)





(declare-fun Tm_abs_b04915a1704c1774435ce196ad0a37da (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e5a1aff086eb7260055762306fb759c5 () Term)
(declare-fun Tm_abs_5f512f546df56259bdc66d550596fcba (Term Term Term Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.QuickCodes.wp_While>


; <Start encoding Vale.X64.QuickCodes.qWhile_proof>





(declare-fun Vale.X64.QuickCodes.qWhile_proof (Term Term Term Term Term Term Term Term Term Term Term) Term)




(declare-fun Tm_refine_707894930b0e1a9c01ff94ffcfcbfe41 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a24007d52c5a67fbc9924f3132caef78 () Term)
(declare-fun Vale.X64.QuickCodes.qWhile_proof@tok () Term)


; </end encoding Vale.X64.QuickCodes.qWhile_proof>


; <Start encoding Vale.X64.QuickCodes.va_qWhile>




(declare-fun Vale.X64.QuickCodes.va_qWhile (Term Term Term Term Term Term Term Term Term) Term)



(declare-fun Tm_arrow_f5ddf0f128d673afc2c55381300d9cf5 () Term)
(declare-fun Vale.X64.QuickCodes.va_qWhile@tok () Term)

; </end encoding Vale.X64.QuickCodes.va_qWhile>


; <Start encoding Vale.X64.QuickCodes.tAssertLemma>

(declare-fun Vale.X64.QuickCodes.tAssertLemma (Term) Term)

(declare-fun Vale.X64.QuickCodes.tAssertLemma@tok () Term)
(declare-fun Tm_refine_d69894ea6472ada7e77bf7100d6a6cd6 (Term) Term)
(declare-fun Tm_arrow_ad057650b4b6d8249965cf273e5322d7 (Term) Term)

; </end encoding Vale.X64.QuickCodes.tAssertLemma>


; <Start encoding Vale.X64.QuickCodes.qAssertLemma>

(declare-fun Vale.X64.QuickCodes.qAssertLemma (Term) Term)
(declare-fun Tm_arrow_e1b6c2790b84b3db8cf2d2a033570d7c () Term)
(declare-fun Vale.X64.QuickCodes.qAssertLemma@tok () Term)

; </end encoding Vale.X64.QuickCodes.qAssertLemma>


; <Start encoding Vale.X64.QuickCodes.va_qAssert>

(declare-fun Vale.X64.QuickCodes.va_qAssert (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a62259903c8be3ff8c7030bed3f8ecb2 () Term)
(declare-fun Vale.X64.QuickCodes.va_qAssert@tok () Term)

(declare-fun Tm_abs_35ed683f0802d07545d350afad574e09 (Term) Term)

; </end encoding Vale.X64.QuickCodes.va_qAssert>


; <Start encoding Vale.X64.QuickCodes.tAssumeLemma>

(declare-fun Vale.X64.QuickCodes.tAssumeLemma (Term) Term)

(declare-fun Vale.X64.QuickCodes.tAssumeLemma@tok () Term)
(declare-fun Tm_refine_3b1bc98ed7702245ad88d7f144de6d8b (Term) Term)
(declare-fun Tm_arrow_54546915e529fb11d40982e2684d14d0 (Term) Term)

; </end encoding Vale.X64.QuickCodes.tAssumeLemma>


; <Start encoding Vale.X64.QuickCodes.qAssumeLemma>

(declare-fun Vale.X64.QuickCodes.qAssumeLemma (Term) Term)
(declare-fun Tm_arrow_9d25e39d74e6bf436f4b5fa7f832efa3 () Term)
(declare-fun Vale.X64.QuickCodes.qAssumeLemma@tok () Term)

; </end encoding Vale.X64.QuickCodes.qAssumeLemma>


; <Start encoding Vale.X64.QuickCodes.va_qAssume>

(declare-fun Vale.X64.QuickCodes.va_qAssume (Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.va_qAssume@tok () Term)



; </end encoding Vale.X64.QuickCodes.va_qAssume>


; <Start encoding Vale.X64.QuickCodes.tAssertSquashLemma>

(declare-fun Vale.X64.QuickCodes.tAssertSquashLemma (Term) Term)

(declare-fun Vale.X64.QuickCodes.tAssertSquashLemma@tok () Term)
(declare-fun Tm_refine_2921dedf780703cbdc9c31799b7b30b3 (Term) Term)
(declare-fun Tm_arrow_27bd0643d0ecd43c6f94fe924b459043 (Term) Term)

; </end encoding Vale.X64.QuickCodes.tAssertSquashLemma>


; <Start encoding Vale.X64.QuickCodes.qAssertSquashLemma>

(declare-fun Vale.X64.QuickCodes.qAssertSquashLemma (Term) Term)
(declare-fun Tm_arrow_f1c8edc134e6b460fd8a4de3712dc384 () Term)
(declare-fun Vale.X64.QuickCodes.qAssertSquashLemma@tok () Term)

; </end encoding Vale.X64.QuickCodes.qAssertSquashLemma>


; <Start encoding Vale.X64.QuickCodes.va_qAssertSquash>

(declare-fun Tm_ghost_arrow_dd445caab51baa6c4c776c689e626e0e (Term Term Term) Term)
(declare-fun Vale.X64.QuickCodes.va_qAssertSquash (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_4a232d1c8e9a760e0fe0619cd2c74c69 () Term)
(declare-fun Vale.X64.QuickCodes.va_qAssertSquash@tok () Term)




; </end encoding Vale.X64.QuickCodes.va_qAssertSquash>


; <Start encoding Vale.X64.QuickCodes.va_qAssertBy>

(declare-fun Vale.X64.QuickCodes.va_qAssertBy (Term Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.QuickCodes.va_qAssertBy@tok () Term)

; </end encoding Vale.X64.QuickCodes.va_qAssertBy>


; <Start encoding Vale.X64.QuickCodes.wp_sound_code>



(declare-fun Vale.X64.QuickCodes.wp_sound_code (Term Term Term Term Term) Term)

(declare-fun Tm_refine_54dbe203d0b04b87dec71887c2f35b26 (Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_f315cf949f3479e1fb4deb57b0d883c0 () Term)
(declare-fun Vale.X64.QuickCodes.wp_sound_code@tok () Term)


; </end encoding Vale.X64.QuickCodes.wp_sound_code>


; <Start encoding Vale.X64.QuickCodes.regs_match_file>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.QuickCodes.regs_match_file.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.QuickCodes.regs_match_file.fuel_instrumented_token () Term)
(declare-fun Vale.X64.QuickCodes.regs_match_file (Term Term Term Term) Term)
(declare-fun Vale.X64.QuickCodes.regs_match_file@tok () Term)
(declare-fun Tm_refine_4cd2cd249de1c01a346e065af2ec7c1e (Term) Term)


(declare-fun Tm_arrow_a7397660447722149e8c9dab1693c328 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.QuickCodes.regs_match_file; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(351,8-351,23); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(351,8-351,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Vale.X64.QuickCodes.regs_match_file.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(Vale.X64.QuickCodes.regs_match_file.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((Vale.X64.QuickCodes.regs_match_file.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_Vale.X64.QuickCodes.regs_match_file.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.QuickCodes.regs_match_file.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.QuickCodes.regs_match_file; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(351,8-351,23); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(351,8-351,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.X64.QuickCodes.regs_match_file @x0
@x1
@x2
@x3)
(Vale.X64.QuickCodes.regs_match_file.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((Vale.X64.QuickCodes.regs_match_file @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_Vale.X64.QuickCodes.regs_match_file.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.QuickCodes.regs_match_file.fuel_instrumented))

; </end encoding Vale.X64.QuickCodes.regs_match_file>


; <Start encoding Vale.X64.QuickCodes.regs_match>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.X64.QuickCodes.regs_match.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.X64.QuickCodes.regs_match.fuel_instrumented_token () Term)
(declare-fun Vale.X64.QuickCodes.regs_match (Term Term Term) Term)
(declare-fun Vale.X64.QuickCodes.regs_match@tok () Term)
(declare-fun Tm_refine_0d7abd59d64d4ac197ae128854a17b2f () Term)


(declare-fun Tm_arrow_f0ff33676f3c4fcff87ba1cea3ee4847 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.X64.QuickCodes.regs_match; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(358,8-358,18); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(358,8-358,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.X64.QuickCodes.regs_match.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(Vale.X64.QuickCodes.regs_match.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((Vale.X64.QuickCodes.regs_match.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_Vale.X64.QuickCodes.regs_match.fuel_instrumented))

:named @fuel_irrelevance_Vale.X64.QuickCodes.regs_match.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.X64.QuickCodes.regs_match; Namespace Vale.X64.QuickCodes
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(358,8-358,18); use=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCodes.fsti(358,8-358,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.X64.QuickCodes.regs_match @x0
@x1
@x2)
(Vale.X64.QuickCodes.regs_match.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((Vale.X64.QuickCodes.regs_match @x0
@x1
@x2))
:qid @fuel_correspondence_Vale.X64.QuickCodes.regs_match.fuel_instrumented))

:named @fuel_correspondence_Vale.X64.QuickCodes.regs_match.fuel_instrumented))

; </end encoding Vale.X64.QuickCodes.regs_match>


; <Start encoding Vale.X64.QuickCodes.all_regs_match>

(declare-fun Vale.X64.QuickCodes.all_regs_match (Term Term) Term)
(declare-fun Tm_arrow_b2889554c00549f142f33e4990956efb () Term)
(declare-fun Vale.X64.QuickCodes.all_regs_match@tok () Term)

; </end encoding Vale.X64.QuickCodes.all_regs_match>


; <Start encoding Vale.X64.QuickCodes.state_match>

(declare-fun Vale.X64.QuickCodes.state_match (Term Term) Term)
(declare-fun Tm_arrow_83dd09eb86dbc0be49946bbe04710153 () Term)
(declare-fun Vale.X64.QuickCodes.state_match@tok () Term)

; </end encoding Vale.X64.QuickCodes.state_match>


; <Start encoding Vale.X64.QuickCodes.lemma_state_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.X64.QuickCodes.lemma_state_match (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.X64.QuickCodes.lemma_state_match@tok () Term)

; </end encoding Vale.X64.QuickCodes.lemma_state_match>


; <Start encoding Vale.X64.QuickCodes.va_state_match>

(declare-fun Vale.X64.QuickCodes.va_state_match (Term Term) Term)
(declare-fun Tm_refine_0df8c3600ae3e1112fa3e9583a014043 (Term Term) Term)
(declare-fun Tm_arrow_65622c288eb1a75b268250b36621df2b () Term)
(declare-fun Vale.X64.QuickCodes.va_state_match@tok () Term)


; </end encoding Vale.X64.QuickCodes.va_state_match>


; <Start encoding Vale.X64.QuickCodes.wp_sound_code_pre>

(declare-fun Tm_refine_211facd8812fd94e95b65d3b8891b14a (Term) Term)
(declare-fun Tm_arrow_e7b34d7a90603afe5920ed0ca0a539d5 (Term Term) Term)
(declare-fun Vale.X64.QuickCodes.wp_sound_code_pre (Term Term Term Term Term) Term)


(declare-fun Tm_arrow_396af01732debd8382b29a5c151afe34 () Term)
(declare-fun Vale.X64.QuickCodes.wp_sound_code_pre@tok () Term)



(declare-fun Tm_arrow_f5a6a2a71be13f9ea0d2bd22afd1aee2 () Term)
(declare-fun Tm_abs_cc25d375b68a2269977b443118fae537 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_87a5661151e4a10a349c3c61302f5b23 () Term)
(declare-fun Tm_abs_b42f7f06396089470eb7e422538b878b (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_da3ef595489662f9b967d840e2cf834f () Term)
(declare-fun Tm_abs_f7a6b26bd8bfdd783952e5661efdd6e6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_16d444a89448b0764fff54aadfc59992 () Term)
(declare-fun Tm_abs_98b1f668e7cd854c32d1e220ab00478e (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_14e72144896a226b01b577cb93f63b1c () Term)
(declare-fun Tm_abs_cd1c727d930907a9b63b86f38aa4c28c (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_71b6489875930b569d370cd9e4b3559d () Term)
(declare-fun Tm_abs_db02879d6d1005b567d31a0e8299fe1a (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_560beeaf86e409319df9c12c9bc8a668 () Term)
(declare-fun Tm_abs_859680fd10c1da54d7676a2dcca51378 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_500279c757ae94c6b581e1748c9c53d5 () Term)
(declare-fun Tm_abs_e0eedb941ad3ed349f54ee96eebe9b34 (Term Term Term Term Term) Term)



; </end encoding Vale.X64.QuickCodes.wp_sound_code_pre>


; <Start encoding Vale.X64.QuickCodes.wp_sound_code_post>



(declare-fun Vale.X64.QuickCodes.wp_sound_code_post (Term Term Term Term Term Term) Term)


(declare-fun Tm_arrow_7a046c3babd95a2d17bc657968344cb4 () Term)
(declare-fun Vale.X64.QuickCodes.wp_sound_code_post@tok () Term)



; </end encoding Vale.X64.QuickCodes.wp_sound_code_post>


; <Start encoding Vale.X64.QuickCodes.normal_steps>

(declare-fun Vale.X64.QuickCodes.normal_steps (Dummy_sort) Term)

; </end encoding Vale.X64.QuickCodes.normal_steps>


; <Start encoding Vale.X64.QuickCodes.normal>

(declare-fun Vale.X64.QuickCodes.normal (Term) Term)

(declare-fun Vale.X64.QuickCodes.normal@tok () Term)

; </end encoding Vale.X64.QuickCodes.normal>


; <Start encoding Vale.X64.QuickCodes.va_wp_sound_code_norm>



(declare-fun Vale.X64.QuickCodes.va_wp_sound_code_norm (Term Term Term Term Term) Term)


(declare-fun Tm_refine_0deb752ee07e538bc3062780df79561a (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4ac70bbc7ae66db3694068d0752a324f () Term)
(declare-fun Vale.X64.QuickCodes.va_wp_sound_code_norm@tok () Term)


; </end encoding Vale.X64.QuickCodes.va_wp_sound_code_norm>


; End Externals for interface Vale.X64.QuickCodes


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.QuickCodes (1465 decls; total size 90254)

;;; Start interface Vale.X64.InsAes

; Externals for interface Vale.X64.InsAes


; <Start encoding Vale.X64.InsAes.va_code_Pclmulqdq>

(declare-fun Vale.X64.InsAes.va_code_Pclmulqdq (Term Term Term Term) Term)
(declare-fun Tm_arrow_ad372cbab0c5d65299ecccc6c3d3e556 () Term)
(declare-fun Vale.X64.InsAes.va_code_Pclmulqdq@tok () Term)

; </end encoding Vale.X64.InsAes.va_code_Pclmulqdq>


; <Start encoding Vale.X64.InsAes.va_codegen_success_Pclmulqdq>

(declare-fun Vale.X64.InsAes.va_codegen_success_Pclmulqdq (Term Term Term Term) Term)
(declare-fun Tm_arrow_34fea200b3d4d0292103537cd1e434e2 () Term)
(declare-fun Vale.X64.InsAes.va_codegen_success_Pclmulqdq@tok () Term)

; </end encoding Vale.X64.InsAes.va_codegen_success_Pclmulqdq>


; <Start encoding Vale.X64.InsAes.va_lemma_Pclmulqdq>

(declare-fun Vale.X64.InsAes.va_lemma_Pclmulqdq (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_8a824532d7a15cf7a132e6f14dca7302 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d64792d9def5aac081c9aff666c22ece () Term)
(declare-fun Vale.X64.InsAes.va_lemma_Pclmulqdq@tok () Term)


; </end encoding Vale.X64.InsAes.va_lemma_Pclmulqdq>


; <Start encoding Vale.X64.InsAes.va_wp_Pclmulqdq>

(declare-fun Tm_arrow_1ddfb550a6ed586925842b6ff7ea0c09 () Term)
(declare-fun Vale.X64.InsAes.va_wp_Pclmulqdq (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_8d20fdfd3801f426ef405a31f2d2e08c () Term)
(declare-fun Vale.X64.InsAes.va_wp_Pclmulqdq@tok () Term)



(declare-fun Tm_ghost_arrow_1425ea4bbb387531460a6bea6807e8ae (Term) Term)
(declare-fun Tm_abs_9c486cf5a211320d36ff7b240d03b67f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_a2aea47d8ace2a3636a8534fca2825a9 (Term) Term)
(declare-fun Tm_abs_0cca64a22b1f3bf8ab48b065fb4888e2 (Term Term Term) Term)









(declare-fun Tm_abs_98942b95863c5bb995932c6f76259ee5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f52b442a9958b17dde0270b4b285a1bc () Term)
(declare-fun Tm_abs_8bdd84113fc59d153aa4a3df3784b91d (Term Term Term Term Term Term) Term)

































; </end encoding Vale.X64.InsAes.va_wp_Pclmulqdq>


; <Start encoding Vale.X64.InsAes.va_wpProof_Pclmulqdq>


(declare-fun Vale.X64.InsAes.va_wpProof_Pclmulqdq (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_231332c8916d4f6ddfdace9c6218f123 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8926c6e4dc7301a8fc4a31344fa50340 () Term)
(declare-fun Vale.X64.InsAes.va_wpProof_Pclmulqdq@tok () Term)


; </end encoding Vale.X64.InsAes.va_wpProof_Pclmulqdq>


; <Start encoding Vale.X64.InsAes.va_quick_Pclmulqdq>

(declare-fun Vale.X64.InsAes.va_quick_Pclmulqdq (Term Term Term Term) Term)
(declare-fun Tm_arrow_c586483c24c6b781c0cd2918c7d01c7a () Term)
(declare-fun Vale.X64.InsAes.va_quick_Pclmulqdq@tok () Term)

; </end encoding Vale.X64.InsAes.va_quick_Pclmulqdq>


; <Start encoding Vale.X64.InsAes.va_code_VPclmulqdq>

(declare-fun Vale.X64.InsAes.va_code_VPclmulqdq (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_26522178a49a2596ec1c0ab50a0dcf31 () Term)
(declare-fun Vale.X64.InsAes.va_code_VPclmulqdq@tok () Term)

; </end encoding Vale.X64.InsAes.va_code_VPclmulqdq>


; <Start encoding Vale.X64.InsAes.va_codegen_success_VPclmulqdq>

(declare-fun Vale.X64.InsAes.va_codegen_success_VPclmulqdq (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d564c9140107e072fa1fe2fdc4e33e8f () Term)
(declare-fun Vale.X64.InsAes.va_codegen_success_VPclmulqdq@tok () Term)

; </end encoding Vale.X64.InsAes.va_codegen_success_VPclmulqdq>


; <Start encoding Vale.X64.InsAes.va_lemma_VPclmulqdq>

(declare-fun Vale.X64.InsAes.va_lemma_VPclmulqdq (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_101051e63a6e0766bb69d2490e371f0b (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_f99d57962fa36a808666d85d524e42bb () Term)
(declare-fun Vale.X64.InsAes.va_lemma_VPclmulqdq@tok () Term)


; </end encoding Vale.X64.InsAes.va_lemma_VPclmulqdq>


; <Start encoding Vale.X64.InsAes.va_wp_VPclmulqdq>


(declare-fun Vale.X64.InsAes.va_wp_VPclmulqdq (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_273569f02807c87e81d48d35243245ff () Term)
(declare-fun Vale.X64.InsAes.va_wp_VPclmulqdq@tok () Term)


















(declare-fun Tm_abs_04f7fab432ca0eda7706c27db9873b0a (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e0e5420273420f2fa9c0982786817e76 (Term Term Term Term Term Term Term) Term)

































; </end encoding Vale.X64.InsAes.va_wp_VPclmulqdq>


; <Start encoding Vale.X64.InsAes.va_wpProof_VPclmulqdq>


(declare-fun Vale.X64.InsAes.va_wpProof_VPclmulqdq (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_de96421ca26cf81fccdb7189d0a01639 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_099317770d964dbd0d9017ed063b1a01 () Term)
(declare-fun Vale.X64.InsAes.va_wpProof_VPclmulqdq@tok () Term)


; </end encoding Vale.X64.InsAes.va_wpProof_VPclmulqdq>


; <Start encoding Vale.X64.InsAes.va_quick_VPclmulqdq>

(declare-fun Vale.X64.InsAes.va_quick_VPclmulqdq (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_edfcaa91dd7bf3dcd14df947662bc0fb () Term)
(declare-fun Vale.X64.InsAes.va_quick_VPclmulqdq@tok () Term)

; </end encoding Vale.X64.InsAes.va_quick_VPclmulqdq>


; <Start encoding Vale.X64.InsAes.va_code_AESNI_enc>

(declare-fun Vale.X64.InsAes.va_code_AESNI_enc (Term Term) Term)
(declare-fun Tm_arrow_58c6a7921f71a9f5fbb08da9a8985902 () Term)
(declare-fun Vale.X64.InsAes.va_code_AESNI_enc@tok () Term)

; </end encoding Vale.X64.InsAes.va_code_AESNI_enc>


; <Start encoding Vale.X64.InsAes.va_codegen_success_AESNI_enc>

(declare-fun Vale.X64.InsAes.va_codegen_success_AESNI_enc (Term Term) Term)
(declare-fun Tm_arrow_0bd9339c25f56a3c83a305501b637126 () Term)
(declare-fun Vale.X64.InsAes.va_codegen_success_AESNI_enc@tok () Term)

; </end encoding Vale.X64.InsAes.va_codegen_success_AESNI_enc>


; <Start encoding Vale.X64.InsAes.va_lemma_AESNI_enc>

(declare-fun Vale.X64.InsAes.va_lemma_AESNI_enc (Term Term Term Term) Term)
(declare-fun Tm_refine_9227745205c68aa1a8027f035e0c0ce4 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_0cfca618b4e6726107f071fd3ccd3184 () Term)
(declare-fun Vale.X64.InsAes.va_lemma_AESNI_enc@tok () Term)


; </end encoding Vale.X64.InsAes.va_lemma_AESNI_enc>


; <Start encoding Vale.X64.InsAes.va_wp_AESNI_enc>


(declare-fun Vale.X64.InsAes.va_wp_AESNI_enc (Term Term Term Term) Term)

(declare-fun Tm_arrow_e49ebda7065dd37e31211f5881b5ab4d () Term)
(declare-fun Vale.X64.InsAes.va_wp_AESNI_enc@tok () Term)


(declare-fun Tm_abs_cd6bc7a6bf972e1a52bf9c7fc9c974e5 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_bbb90a783a3313bf03f3c4a311f9f956 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsAes.va_wp_AESNI_enc>


; <Start encoding Vale.X64.InsAes.va_wpProof_AESNI_enc>


(declare-fun Vale.X64.InsAes.va_wpProof_AESNI_enc (Term Term Term Term) Term)

(declare-fun Tm_refine_bed21a8de113dc1529d5c92abea00f83 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_08bbaa50a1cbc7d192a8b103f9492445 () Term)
(declare-fun Vale.X64.InsAes.va_wpProof_AESNI_enc@tok () Term)


; </end encoding Vale.X64.InsAes.va_wpProof_AESNI_enc>


; <Start encoding Vale.X64.InsAes.va_quick_AESNI_enc>

(declare-fun Vale.X64.InsAes.va_quick_AESNI_enc (Term Term) Term)
(declare-fun Tm_arrow_aea2886836b0fd2ff3b1d419377181d3 () Term)
(declare-fun Vale.X64.InsAes.va_quick_AESNI_enc@tok () Term)

; </end encoding Vale.X64.InsAes.va_quick_AESNI_enc>


; <Start encoding Vale.X64.InsAes.va_code_VAESNI_enc>

(declare-fun Vale.X64.InsAes.va_code_VAESNI_enc (Term Term Term) Term)
(declare-fun Tm_arrow_92050b2074413fa2a4224465731f8918 () Term)
(declare-fun Vale.X64.InsAes.va_code_VAESNI_enc@tok () Term)

; </end encoding Vale.X64.InsAes.va_code_VAESNI_enc>


; <Start encoding Vale.X64.InsAes.va_codegen_success_VAESNI_enc>

(declare-fun Vale.X64.InsAes.va_codegen_success_VAESNI_enc (Term Term Term) Term)
(declare-fun Tm_arrow_a6beea3a3a6514e3e138f08a21f27bc6 () Term)
(declare-fun Vale.X64.InsAes.va_codegen_success_VAESNI_enc@tok () Term)

; </end encoding Vale.X64.InsAes.va_codegen_success_VAESNI_enc>


; <Start encoding Vale.X64.InsAes.va_lemma_VAESNI_enc>

(declare-fun Vale.X64.InsAes.va_lemma_VAESNI_enc (Term Term Term Term Term) Term)
(declare-fun Tm_refine_c9b97ff2594baaa6902b4784bcf41025 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4580a3461167dec0b4ee01298e74be42 () Term)
(declare-fun Vale.X64.InsAes.va_lemma_VAESNI_enc@tok () Term)


; </end encoding Vale.X64.InsAes.va_lemma_VAESNI_enc>


; <Start encoding Vale.X64.InsAes.va_wp_VAESNI_enc>


(declare-fun Vale.X64.InsAes.va_wp_VAESNI_enc (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_b24b0403c252d6e66c89eaa2e01d8b90 () Term)
(declare-fun Vale.X64.InsAes.va_wp_VAESNI_enc@tok () Term)


(declare-fun Tm_abs_91116481f4e7260075cad2dab585a72e (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4daeaeed9cd89d359a4c64b10f4034b7 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsAes.va_wp_VAESNI_enc>


; <Start encoding Vale.X64.InsAes.va_wpProof_VAESNI_enc>


(declare-fun Vale.X64.InsAes.va_wpProof_VAESNI_enc (Term Term Term Term Term) Term)

(declare-fun Tm_refine_2a15ce01c549f060b9c875d6360a7b4f (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7df971eb813d6eca92306ad58bf5babc () Term)
(declare-fun Vale.X64.InsAes.va_wpProof_VAESNI_enc@tok () Term)


; </end encoding Vale.X64.InsAes.va_wpProof_VAESNI_enc>


; <Start encoding Vale.X64.InsAes.va_quick_VAESNI_enc>

(declare-fun Vale.X64.InsAes.va_quick_VAESNI_enc (Term Term Term) Term)
(declare-fun Tm_arrow_191de8c3476b98476dc10dee510fdee0 () Term)
(declare-fun Vale.X64.InsAes.va_quick_VAESNI_enc@tok () Term)

; </end encoding Vale.X64.InsAes.va_quick_VAESNI_enc>


; <Start encoding Vale.X64.InsAes.va_code_AESNI_enc_last>

(declare-fun Vale.X64.InsAes.va_code_AESNI_enc_last (Term Term) Term)

(declare-fun Vale.X64.InsAes.va_code_AESNI_enc_last@tok () Term)

; </end encoding Vale.X64.InsAes.va_code_AESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_codegen_success_AESNI_enc_last>

(declare-fun Vale.X64.InsAes.va_codegen_success_AESNI_enc_last (Term Term) Term)

(declare-fun Vale.X64.InsAes.va_codegen_success_AESNI_enc_last@tok () Term)

; </end encoding Vale.X64.InsAes.va_codegen_success_AESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_lemma_AESNI_enc_last>

(declare-fun Vale.X64.InsAes.va_lemma_AESNI_enc_last (Term Term Term Term) Term)
(declare-fun Tm_refine_c4c93a3b08bd65afd3045ffb54c7178e (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_1cb6661d9d7129c732da2f117f69c515 () Term)
(declare-fun Vale.X64.InsAes.va_lemma_AESNI_enc_last@tok () Term)


; </end encoding Vale.X64.InsAes.va_lemma_AESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_wp_AESNI_enc_last>


(declare-fun Vale.X64.InsAes.va_wp_AESNI_enc_last (Term Term Term Term) Term)


(declare-fun Vale.X64.InsAes.va_wp_AESNI_enc_last@tok () Term)


(declare-fun Tm_abs_aedac22d69653257fa4b50032d5f59d1 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_ed3331c9b2aff1d9768fed68c5141782 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsAes.va_wp_AESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_wpProof_AESNI_enc_last>


(declare-fun Vale.X64.InsAes.va_wpProof_AESNI_enc_last (Term Term Term Term) Term)

(declare-fun Tm_refine_bf95a1a61421f3d1e6b12db1689d3a95 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_276b4e9f589d86ab1beaccc6fe40b43c () Term)
(declare-fun Vale.X64.InsAes.va_wpProof_AESNI_enc_last@tok () Term)


; </end encoding Vale.X64.InsAes.va_wpProof_AESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_quick_AESNI_enc_last>

(declare-fun Vale.X64.InsAes.va_quick_AESNI_enc_last (Term Term) Term)
(declare-fun Tm_arrow_c9ace54d271aa2f0e1f1f61c93b20d6f () Term)
(declare-fun Vale.X64.InsAes.va_quick_AESNI_enc_last@tok () Term)

; </end encoding Vale.X64.InsAes.va_quick_AESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_code_VAESNI_enc_last>

(declare-fun Vale.X64.InsAes.va_code_VAESNI_enc_last (Term Term Term) Term)

(declare-fun Vale.X64.InsAes.va_code_VAESNI_enc_last@tok () Term)

; </end encoding Vale.X64.InsAes.va_code_VAESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_codegen_success_VAESNI_enc_last>

(declare-fun Vale.X64.InsAes.va_codegen_success_VAESNI_enc_last (Term Term Term) Term)

(declare-fun Vale.X64.InsAes.va_codegen_success_VAESNI_enc_last@tok () Term)

; </end encoding Vale.X64.InsAes.va_codegen_success_VAESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_lemma_VAESNI_enc_last>

(declare-fun Vale.X64.InsAes.va_lemma_VAESNI_enc_last (Term Term Term Term Term) Term)
(declare-fun Tm_refine_481b04d2fe5c15a628df3837fd723d01 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_6d528c21b31001b8f294988d3faafa1b () Term)
(declare-fun Vale.X64.InsAes.va_lemma_VAESNI_enc_last@tok () Term)


; </end encoding Vale.X64.InsAes.va_lemma_VAESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_wp_VAESNI_enc_last>


(declare-fun Vale.X64.InsAes.va_wp_VAESNI_enc_last (Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsAes.va_wp_VAESNI_enc_last@tok () Term)


(declare-fun Tm_abs_917b3c2a266d5d6e5c2d6cb5dcd54f17 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f79bdffe04330541368a03c4a85f1534 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsAes.va_wp_VAESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_wpProof_VAESNI_enc_last>


(declare-fun Vale.X64.InsAes.va_wpProof_VAESNI_enc_last (Term Term Term Term Term) Term)

(declare-fun Tm_refine_23df6ef25a40621caab435e9e8bce5a9 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ac905138e9a0e6865e2f6b36a4bd6d40 () Term)
(declare-fun Vale.X64.InsAes.va_wpProof_VAESNI_enc_last@tok () Term)


; </end encoding Vale.X64.InsAes.va_wpProof_VAESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_quick_VAESNI_enc_last>

(declare-fun Vale.X64.InsAes.va_quick_VAESNI_enc_last (Term Term Term) Term)
(declare-fun Tm_arrow_b77ffaf38ceea44ae7572a78012562c0 () Term)
(declare-fun Vale.X64.InsAes.va_quick_VAESNI_enc_last@tok () Term)

; </end encoding Vale.X64.InsAes.va_quick_VAESNI_enc_last>


; <Start encoding Vale.X64.InsAes.va_code_AESNI_keygen_assist>

(declare-fun Vale.X64.InsAes.va_code_AESNI_keygen_assist (Term Term Term) Term)
(declare-fun Tm_arrow_8f67477c3fd60bfe14f3d92abb13b07a () Term)
(declare-fun Vale.X64.InsAes.va_code_AESNI_keygen_assist@tok () Term)

; </end encoding Vale.X64.InsAes.va_code_AESNI_keygen_assist>


; <Start encoding Vale.X64.InsAes.va_codegen_success_AESNI_keygen_assist>

(declare-fun Vale.X64.InsAes.va_codegen_success_AESNI_keygen_assist (Term Term Term) Term)
(declare-fun Tm_arrow_3c8fb40f23e90f27971a32af99c949a4 () Term)
(declare-fun Vale.X64.InsAes.va_codegen_success_AESNI_keygen_assist@tok () Term)

; </end encoding Vale.X64.InsAes.va_codegen_success_AESNI_keygen_assist>


; <Start encoding Vale.X64.InsAes.va_lemma_AESNI_keygen_assist>

(declare-fun Vale.X64.InsAes.va_lemma_AESNI_keygen_assist (Term Term Term Term Term) Term)
(declare-fun Tm_refine_9598c88b3b576c38b3608357ac2c0b3f (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_dfb1c5ec91c6c20318a9142538bdd70d () Term)
(declare-fun Vale.X64.InsAes.va_lemma_AESNI_keygen_assist@tok () Term)


; </end encoding Vale.X64.InsAes.va_lemma_AESNI_keygen_assist>


; <Start encoding Vale.X64.InsAes.va_wp_AESNI_keygen_assist>


(declare-fun Vale.X64.InsAes.va_wp_AESNI_keygen_assist (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_fedd66baf654d1bae2fb7af5013dc4ad () Term)
(declare-fun Vale.X64.InsAes.va_wp_AESNI_keygen_assist@tok () Term)


(declare-fun Tm_abs_0fda272eac1dd210a8f70b0c5e39a3fb (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_62e2435339d90a9cad748f8099f54d38 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsAes.va_wp_AESNI_keygen_assist>


; <Start encoding Vale.X64.InsAes.va_wpProof_AESNI_keygen_assist>


(declare-fun Vale.X64.InsAes.va_wpProof_AESNI_keygen_assist (Term Term Term Term Term) Term)

(declare-fun Tm_refine_65c73a0e28874554931cb97f64e91ef7 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00aa1ea63efa5e290113ed24140d246f () Term)
(declare-fun Vale.X64.InsAes.va_wpProof_AESNI_keygen_assist@tok () Term)


; </end encoding Vale.X64.InsAes.va_wpProof_AESNI_keygen_assist>


; <Start encoding Vale.X64.InsAes.va_quick_AESNI_keygen_assist>

(declare-fun Vale.X64.InsAes.va_quick_AESNI_keygen_assist (Term Term Term) Term)
(declare-fun Tm_arrow_627affe8f4ce323598acadca302c1ba1 () Term)
(declare-fun Vale.X64.InsAes.va_quick_AESNI_keygen_assist@tok () Term)

; </end encoding Vale.X64.InsAes.va_quick_AESNI_keygen_assist>


; End Externals for interface Vale.X64.InsAes


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.InsAes (400 decls; total size 21917)

;;; Start interface Vale.X64.InsBasic

; Externals for interface Vale.X64.InsBasic


; <Start encoding Vale.X64.InsBasic.vale_heap>

(declare-fun Vale.X64.InsBasic.vale_heap () Term)

; </end encoding Vale.X64.InsBasic.vale_heap>


; <Start encoding Vale.X64.InsBasic.vale_stack>

(declare-fun Vale.X64.InsBasic.vale_stack () Term)

; </end encoding Vale.X64.InsBasic.vale_stack>


; <Start encoding Vale.X64.InsBasic.va_code_Mov64>

(declare-fun Vale.X64.InsBasic.va_code_Mov64 (Term Term) Term)
(declare-fun Tm_arrow_c4c61b043f548525e52856bae5704735 () Term)
(declare-fun Vale.X64.InsBasic.va_code_Mov64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Mov64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Mov64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Mov64 (Term Term) Term)
(declare-fun Tm_arrow_e0fcdf2efecc0c2e19cda790c9b79c3e () Term)
(declare-fun Vale.X64.InsBasic.va_codegen_success_Mov64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Mov64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Mov64>

(declare-fun Vale.X64.InsBasic.va_lemma_Mov64 (Term Term Term Term) Term)
(declare-fun Tm_refine_f403e490b6a89476f2aecc8f6e2b4f88 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8a909ba591c64b1533dae2934ac3b6c6 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Mov64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Mov64>


; <Start encoding Vale.X64.InsBasic.va_wp_Mov64>


(declare-fun Vale.X64.InsBasic.va_wp_Mov64 (Term Term Term Term) Term)

(declare-fun Tm_arrow_776b108f7ea40d110f61b36182c8efdc () Term)
(declare-fun Vale.X64.InsBasic.va_wp_Mov64@tok () Term)

(declare-fun Tm_arrow_a42e7bd7299f29a917899225ea6416a8 () Term)
(declare-fun Tm_abs_eaf324dc178ed1f54883eadfdbae6bb2 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Mov64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Mov64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Mov64 (Term Term Term Term) Term)

(declare-fun Tm_refine_f2935b46b0ae0644c9dd3b63bfcc10b7 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7a34cbcaee1883ff5b12e828cc55ca0f () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Mov64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Mov64>


; <Start encoding Vale.X64.InsBasic.va_quick_Mov64>

(declare-fun Vale.X64.InsBasic.va_quick_Mov64 (Term Term) Term)
(declare-fun Tm_arrow_eac35ce089561e51264c3251c34eb2d6 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Mov64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Mov64>


; <Start encoding Vale.X64.InsBasic.va_code_Cmovc64>

(declare-fun Vale.X64.InsBasic.va_code_Cmovc64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cmovc64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cmovc64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cmovc64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cmovc64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cmovc64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cmovc64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cmovc64>

(declare-fun Vale.X64.InsBasic.va_lemma_Cmovc64 (Term Term Term Term) Term)
(declare-fun Tm_refine_3cfa9c2c0923a17243052f76599cd1ca (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ab699baf8440cdf9016c2dbf4e53538e () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cmovc64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cmovc64>


; <Start encoding Vale.X64.InsBasic.va_wp_Cmovc64>


(declare-fun Vale.X64.InsBasic.va_wp_Cmovc64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cmovc64@tok () Term)

(declare-fun Tm_refine_431495fdc3351cf9a829b59f143fbac7 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_66f292e092e1fc14fd8b250b1a13b167 (Term Term Term) Term)
(declare-fun Tm_abs_5b7d4f9c1224281935f5c2b715f71447 (Term Term Term Term) Term)
(declare-fun Tm_refine_dce119771740c533b396177fe8ca2194 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_2b30022fd9ccb7c1f723ae5e659eca54 (Term Term Term) Term)
(declare-fun Tm_abs_2e46163407c4c4fa0f684b3ad9742ee3 (Term Term Term) Term)

(declare-fun Tm_abs_782a4ad7a258a17269309b6f0e3de135 (Term Term Term Term) Term)

















; </end encoding Vale.X64.InsBasic.va_wp_Cmovc64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cmovc64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cmovc64 (Term Term Term Term) Term)

(declare-fun Tm_refine_2cb2de716f6c42bd9cfe52d3f3c8e5f2 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_78bedbd0ccaf0f1234667bd3aa66bdef () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cmovc64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cmovc64>


; <Start encoding Vale.X64.InsBasic.va_quick_Cmovc64>

(declare-fun Vale.X64.InsBasic.va_quick_Cmovc64 (Term Term) Term)
(declare-fun Tm_arrow_586681f1fb39ec91448bff0aa767a759 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cmovc64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cmovc64>


; <Start encoding Vale.X64.InsBasic.va_code_Add64>

(declare-fun Vale.X64.InsBasic.va_code_Add64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Add64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Add64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Add64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Add64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Add64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Add64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Add64>

(declare-fun Vale.X64.InsBasic.va_lemma_Add64 (Term Term Term Term) Term)
(declare-fun Tm_refine_e5840d8f47b136a6b8405300859f757f (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_e7e898773eef88fe0c2e7a159e21d18a () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Add64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Add64>


; <Start encoding Vale.X64.InsBasic.va_wp_Add64>


(declare-fun Vale.X64.InsBasic.va_wp_Add64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Add64@tok () Term)


(declare-fun Tm_abs_fafbbd0b028ef9b51a5c892c592995ce (Term Term Term Term Term) Term)

(declare-fun Tm_abs_1633eb0fdae30225c9add00851498b3b (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Add64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Add64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Add64 (Term Term Term Term) Term)

(declare-fun Tm_refine_bb878c3aaa7d7af8bc1f0fb654078b0a (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_311932ae7ac37bbfa7d7b44f0534db48 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Add64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Add64>


; <Start encoding Vale.X64.InsBasic.va_quick_Add64>

(declare-fun Vale.X64.InsBasic.va_quick_Add64 (Term Term) Term)
(declare-fun Tm_arrow_8a245af5666ab5baf465220804691394 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Add64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Add64>


; <Start encoding Vale.X64.InsBasic.va_code_Add64Wrap>

(declare-fun Vale.X64.InsBasic.va_code_Add64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Add64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Add64Wrap>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Add64Wrap>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Add64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Add64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Add64Wrap>


; <Start encoding Vale.X64.InsBasic.va_lemma_Add64Wrap>

(declare-fun Vale.X64.InsBasic.va_lemma_Add64Wrap (Term Term Term Term) Term)
(declare-fun Tm_refine_06864a9af44b8d107be3db10d373bcde (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_1436941bc67a15f8ab292498dd0bb857 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Add64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Add64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wp_Add64Wrap>


(declare-fun Vale.X64.InsBasic.va_wp_Add64Wrap (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Add64Wrap@tok () Term)


(declare-fun Tm_abs_7a8338519505869a8b22859e5e1e25d5 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_096220eceb87c4961225cf407ff62c90 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Add64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Add64Wrap>


(declare-fun Vale.X64.InsBasic.va_wpProof_Add64Wrap (Term Term Term Term) Term)

(declare-fun Tm_refine_d510162a30fdfdac459720fed647271c (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_bf74fa795aad7568491c4fa1009b01e8 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Add64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Add64Wrap>


; <Start encoding Vale.X64.InsBasic.va_quick_Add64Wrap>

(declare-fun Vale.X64.InsBasic.va_quick_Add64Wrap (Term Term) Term)
(declare-fun Tm_arrow_32c977e6b2283469bc753de067031f30 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Add64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Add64Wrap>


; <Start encoding Vale.X64.InsBasic.va_code_AddLea64>

(declare-fun Vale.X64.InsBasic.va_code_AddLea64 (Term Term Term) Term)
(declare-fun Tm_arrow_42000c11f755f31f624f49f2cfc0532c () Term)
(declare-fun Vale.X64.InsBasic.va_code_AddLea64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_AddLea64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_AddLea64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_AddLea64 (Term Term Term) Term)
(declare-fun Tm_arrow_6a15ccc80540fa5666ec631a05cfa5ea () Term)
(declare-fun Vale.X64.InsBasic.va_codegen_success_AddLea64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_AddLea64>


; <Start encoding Vale.X64.InsBasic.va_lemma_AddLea64>

(declare-fun Vale.X64.InsBasic.va_lemma_AddLea64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_19f1b24d1928c0695b315cebe7dd361e (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_bec48e928da28fd9010a9e609b0bab0a () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_AddLea64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_AddLea64>


; <Start encoding Vale.X64.InsBasic.va_wp_AddLea64>


(declare-fun Vale.X64.InsBasic.va_wp_AddLea64 (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_b3c5491068ed63a6104fe94d2ccd6bb4 () Term)
(declare-fun Vale.X64.InsBasic.va_wp_AddLea64@tok () Term)


(declare-fun Tm_abs_b989451d5daaa24a0c217a94d0899809 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_AddLea64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_AddLea64>


(declare-fun Vale.X64.InsBasic.va_wpProof_AddLea64 (Term Term Term Term Term) Term)

(declare-fun Tm_refine_d47f00dfe4bf41eae4c748c521befed7 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_0c2b548df6821e213e99ee0bb5ca4cf1 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_AddLea64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_AddLea64>


; <Start encoding Vale.X64.InsBasic.va_quick_AddLea64>

(declare-fun Vale.X64.InsBasic.va_quick_AddLea64 (Term Term Term) Term)
(declare-fun Tm_arrow_5cb3d73f8e7516fcbf1cd597af29a162 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_AddLea64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_AddLea64>


; <Start encoding Vale.X64.InsBasic.va_code_Adc64>

(declare-fun Vale.X64.InsBasic.va_code_Adc64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Adc64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Adc64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Adc64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Adc64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Adc64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Adc64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Adc64>

(declare-fun Vale.X64.InsBasic.va_lemma_Adc64 (Term Term Term Term) Term)
(declare-fun Tm_refine_f9e3d77f9361b57ba970cfc8ed5425b1 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_f58aafb93681f14a9ec0dce843305de0 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Adc64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Adc64>


; <Start encoding Vale.X64.InsBasic.va_wp_Adc64>


(declare-fun Vale.X64.InsBasic.va_wp_Adc64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Adc64@tok () Term)

(declare-fun Tm_refine_fbbaf5fd445122a91782ad51f4533121 (Term) Term)

(declare-fun Tm_ghost_arrow_8016646797806a338174de0ae84017ee (Term) Term)
(declare-fun Tm_abs_1125c467b0c0b7360cf160a90f8a1b38 (Term) Term)
(declare-fun Tm_refine_530d38274c81952064fc4a2340f5ab5f (Term) Term)

(declare-fun Tm_ghost_arrow_1d14aa2868e4232117b40423716c0669 (Term) Term)
(declare-fun Tm_abs_48425db314e91376b77df96308926367 (Term) Term)









(declare-fun Tm_abs_81a066cb5f2b614e35204d8212b5338a (Term Term Term Term Term) Term)

(declare-fun Tm_abs_81b1bb0cb64f2c16a94bcd57a03eff31 (Term Term Term Term) Term)

































; </end encoding Vale.X64.InsBasic.va_wp_Adc64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Adc64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Adc64 (Term Term Term Term) Term)

(declare-fun Tm_refine_a0b4cc6241f71d37cd7d22241e523743 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_fd509c6fa206a1ae046cc5f678d2b430 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Adc64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Adc64>


; <Start encoding Vale.X64.InsBasic.va_quick_Adc64>

(declare-fun Vale.X64.InsBasic.va_quick_Adc64 (Term Term) Term)
(declare-fun Tm_arrow_7882b112b8608bf1e23fa7798cee6941 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Adc64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Adc64>


; <Start encoding Vale.X64.InsBasic.va_code_Adc64Wrap>

(declare-fun Vale.X64.InsBasic.va_code_Adc64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Adc64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Adc64Wrap>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Adc64Wrap>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Adc64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Adc64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Adc64Wrap>


; <Start encoding Vale.X64.InsBasic.va_lemma_Adc64Wrap>

(declare-fun Vale.X64.InsBasic.va_lemma_Adc64Wrap (Term Term Term Term) Term)
(declare-fun Tm_refine_9bee17df9eeec8ed3035b44119ba7f63 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_1b6d9ec2e7096e7d7f03c31e262a5ebf () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Adc64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Adc64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wp_Adc64Wrap>


(declare-fun Vale.X64.InsBasic.va_wp_Adc64Wrap (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Adc64Wrap@tok () Term)


















(declare-fun Tm_abs_c5a9ed0e381f9df9fb1d15c57e9a91b7 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_727397a833db720a2a5d55d510bace8e (Term Term Term Term) Term)

































; </end encoding Vale.X64.InsBasic.va_wp_Adc64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Adc64Wrap>


(declare-fun Vale.X64.InsBasic.va_wpProof_Adc64Wrap (Term Term Term Term) Term)

(declare-fun Tm_refine_72043f79f6256d1249f5a0777b37a149 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_75213d61ed06037aa4c2f66102c59629 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Adc64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Adc64Wrap>


; <Start encoding Vale.X64.InsBasic.va_quick_Adc64Wrap>

(declare-fun Vale.X64.InsBasic.va_quick_Adc64Wrap (Term Term) Term)
(declare-fun Tm_arrow_1a16fffb97edc7979e8aceeb3178a70d () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Adc64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Adc64Wrap>


; <Start encoding Vale.X64.InsBasic.va_code_Adcx64Wrap>

(declare-fun Vale.X64.InsBasic.va_code_Adcx64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Adcx64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Adcx64Wrap>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Adcx64Wrap>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Adcx64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Adcx64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Adcx64Wrap>


; <Start encoding Vale.X64.InsBasic.va_lemma_Adcx64Wrap>

(declare-fun Vale.X64.InsBasic.va_lemma_Adcx64Wrap (Term Term Term Term) Term)
(declare-fun Tm_refine_eaa1d43ada965c573e773a4a28b89c6b (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c05fec110950891bc27c10b89618b2a8 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Adcx64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Adcx64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wp_Adcx64Wrap>


(declare-fun Vale.X64.InsBasic.va_wp_Adcx64Wrap (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Adcx64Wrap@tok () Term)


















(declare-fun Tm_abs_af99e61399c7b599f03fc08d2b9d98ab (Term Term Term Term Term) Term)

(declare-fun Tm_abs_f5c0cf915698375eb3e7c12e43c6e356 (Term Term Term Term) Term)

































; </end encoding Vale.X64.InsBasic.va_wp_Adcx64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Adcx64Wrap>


(declare-fun Vale.X64.InsBasic.va_wpProof_Adcx64Wrap (Term Term Term Term) Term)

(declare-fun Tm_refine_b8979844f2f3e199f10c742f66ffa954 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8ec92eb57af14f7b9936f24297c458da () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Adcx64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Adcx64Wrap>


; <Start encoding Vale.X64.InsBasic.va_quick_Adcx64Wrap>

(declare-fun Vale.X64.InsBasic.va_quick_Adcx64Wrap (Term Term) Term)
(declare-fun Tm_arrow_908e83582b579874b5f243c5df516f72 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Adcx64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Adcx64Wrap>


; <Start encoding Vale.X64.InsBasic.va_code_Adox64Wrap>

(declare-fun Vale.X64.InsBasic.va_code_Adox64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Adox64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Adox64Wrap>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Adox64Wrap>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Adox64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Adox64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Adox64Wrap>


; <Start encoding Vale.X64.InsBasic.va_lemma_Adox64Wrap>

(declare-fun Vale.X64.InsBasic.va_lemma_Adox64Wrap (Term Term Term Term) Term)
(declare-fun Tm_refine_413ceae983c298e6aedb566bf2c5c1ed (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a80622dd777c1d7fb429de570de000cd () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Adox64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Adox64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wp_Adox64Wrap>


(declare-fun Vale.X64.InsBasic.va_wp_Adox64Wrap (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Adox64Wrap@tok () Term)

(declare-fun Tm_refine_66782f75e1e473f8800a62a463a430f4 (Term) Term)

(declare-fun Tm_ghost_arrow_454d37deeb9048772f0b7b7d476d7cdd (Term) Term)
(declare-fun Tm_abs_421473e85d2442b2fa0e8ddd14e4bf0d (Term) Term)
(declare-fun Tm_refine_8a913059fd484377ce7acf816a4657f2 (Term) Term)

(declare-fun Tm_ghost_arrow_5761af612675c346d9c98b4c35d09567 (Term) Term)
(declare-fun Tm_abs_4448f3347d56dbbc9fe65b597c190727 (Term) Term)









(declare-fun Tm_abs_60e327338c4a773bb5ebf7cc115f0d56 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_8e457630eb312f3fa3a68fc5f32a02dd (Term Term Term Term) Term)

































; </end encoding Vale.X64.InsBasic.va_wp_Adox64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Adox64Wrap>


(declare-fun Vale.X64.InsBasic.va_wpProof_Adox64Wrap (Term Term Term Term) Term)

(declare-fun Tm_refine_1c401d459dc72462cbd3454f0c98d5cf (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_05f415f0fadf7dfed91c964f768983bc () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Adox64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Adox64Wrap>


; <Start encoding Vale.X64.InsBasic.va_quick_Adox64Wrap>

(declare-fun Vale.X64.InsBasic.va_quick_Adox64Wrap (Term Term) Term)
(declare-fun Tm_arrow_9f837c5f40e6cb7629defce1f5db6c17 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Adox64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Adox64Wrap>


; <Start encoding Vale.X64.InsBasic.va_code_Sub64>

(declare-fun Vale.X64.InsBasic.va_code_Sub64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Sub64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Sub64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Sub64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Sub64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Sub64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Sub64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Sub64>

(declare-fun Vale.X64.InsBasic.va_lemma_Sub64 (Term Term Term Term) Term)
(declare-fun Tm_refine_59e7a9cb07082ddc28f1e19150dba531 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_615c8a875c0e04640a906e9013f2fb0e () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Sub64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Sub64>


; <Start encoding Vale.X64.InsBasic.va_wp_Sub64>


(declare-fun Vale.X64.InsBasic.va_wp_Sub64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Sub64@tok () Term)


(declare-fun Tm_abs_8a82161c2d79d65fb3260ec3089b8e0c (Term Term Term Term Term) Term)

(declare-fun Tm_abs_8986d2f6f5654d0b7d207e85fba03a9e (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Sub64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Sub64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Sub64 (Term Term Term Term) Term)

(declare-fun Tm_refine_4a6ac999116bf0dc9eae6d8333419f49 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d8b4f628060d384cb57b7821d0dd5f13 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Sub64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Sub64>


; <Start encoding Vale.X64.InsBasic.va_quick_Sub64>

(declare-fun Vale.X64.InsBasic.va_quick_Sub64 (Term Term) Term)
(declare-fun Tm_arrow_bc9de51858101693dcd3f6575683f113 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Sub64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Sub64>


; <Start encoding Vale.X64.InsBasic.va_code_Sub64Wrap>

(declare-fun Vale.X64.InsBasic.va_code_Sub64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Sub64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Sub64Wrap>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Sub64Wrap>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Sub64Wrap (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Sub64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Sub64Wrap>


; <Start encoding Vale.X64.InsBasic.va_lemma_Sub64Wrap>

(declare-fun Vale.X64.InsBasic.va_lemma_Sub64Wrap (Term Term Term Term) Term)
(declare-fun Tm_refine_53beb31f38bfaab1b022f61a71fcca5a (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8cf9c115e63c439496fe38cd7b3537c6 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Sub64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Sub64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wp_Sub64Wrap>


(declare-fun Vale.X64.InsBasic.va_wp_Sub64Wrap (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Sub64Wrap@tok () Term)


(declare-fun Tm_abs_4047f36094906f9999829d9dbc11566f (Term Term Term Term Term) Term)

(declare-fun Tm_abs_b4eaae1adff4b67a1f5381d946dab195 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Sub64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Sub64Wrap>


(declare-fun Vale.X64.InsBasic.va_wpProof_Sub64Wrap (Term Term Term Term) Term)

(declare-fun Tm_refine_53901662bc04c6e7828c157dbea77fb4 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4e62f70cf0d1dc7f4513d6ea1172168a () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Sub64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Sub64Wrap>


; <Start encoding Vale.X64.InsBasic.va_quick_Sub64Wrap>

(declare-fun Vale.X64.InsBasic.va_quick_Sub64Wrap (Term Term) Term)
(declare-fun Tm_arrow_a044ac7fd3718318555cdcede8c49033 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Sub64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Sub64Wrap>


; <Start encoding Vale.X64.InsBasic.va_code_Sbb64>

(declare-fun Vale.X64.InsBasic.va_code_Sbb64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Sbb64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Sbb64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Sbb64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Sbb64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Sbb64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Sbb64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Sbb64>

(declare-fun Vale.X64.InsBasic.va_lemma_Sbb64 (Term Term Term Term) Term)
(declare-fun Tm_refine_439cdfb4437b236caf0243f542dd12cc (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_fbc21c4b6dfa5a980889bfef4b5a0e14 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Sbb64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Sbb64>


; <Start encoding Vale.X64.InsBasic.va_wp_Sbb64>


(declare-fun Vale.X64.InsBasic.va_wp_Sbb64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Sbb64@tok () Term)


















(declare-fun Tm_abs_5a87b90db77ef5b9ee9ee06247139e00 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_fa6f29303a68e17241504ccfa4fbda30 (Term Term Term Term) Term)

































; </end encoding Vale.X64.InsBasic.va_wp_Sbb64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Sbb64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Sbb64 (Term Term Term Term) Term)

(declare-fun Tm_refine_bfbec08c662217a94793d4269ad47f99 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_497172e05011a96f470d6b7a7aedf534 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Sbb64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Sbb64>


; <Start encoding Vale.X64.InsBasic.va_quick_Sbb64>

(declare-fun Vale.X64.InsBasic.va_quick_Sbb64 (Term Term) Term)
(declare-fun Tm_arrow_8c8bad01d8f6b21881b22b3dbe70b924 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Sbb64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Sbb64>


; <Start encoding Vale.X64.InsBasic.va_code_Mul64Wrap>

(declare-fun Vale.X64.InsBasic.va_code_Mul64Wrap (Term) Term)
(declare-fun Tm_arrow_08b6a61131f2c278528fb124b25cc4fc () Term)
(declare-fun Vale.X64.InsBasic.va_code_Mul64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Mul64Wrap>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Mul64Wrap>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Mul64Wrap (Term) Term)
(declare-fun Tm_arrow_a22ea9a6993a1e2d2ad7e0501f435985 () Term)
(declare-fun Vale.X64.InsBasic.va_codegen_success_Mul64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Mul64Wrap>


; <Start encoding Vale.X64.InsBasic.va_lemma_Mul64Wrap>

(declare-fun Vale.X64.InsBasic.va_lemma_Mul64Wrap (Term Term Term) Term)
(declare-fun Tm_refine_5a455108dd73ae4695206dd85f0f3720 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_87da4c60efa3950fdae45c89466d4f38 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Mul64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Mul64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wp_Mul64Wrap>


(declare-fun Vale.X64.InsBasic.va_wp_Mul64Wrap (Term Term Term) Term)

(declare-fun Tm_arrow_095f1b0b56842f30a4951e3f11287dda () Term)
(declare-fun Vale.X64.InsBasic.va_wp_Mul64Wrap@tok () Term)


(declare-fun Tm_abs_c713be8a1b912907f05d6f1778849317 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_175a5abbc0070c0fcab133a6de07597e (Term Term Term Term) Term)

(declare-fun Tm_abs_499c22b38ffb5ac172cfc8718b840a8f (Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Mul64Wrap>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Mul64Wrap>


(declare-fun Vale.X64.InsBasic.va_wpProof_Mul64Wrap (Term Term Term) Term)

(declare-fun Tm_refine_a50dc702edd28014c82671c2924de93b (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8ba7a148d2475107e92626311d1f1483 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Mul64Wrap@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Mul64Wrap>


; <Start encoding Vale.X64.InsBasic.va_quick_Mul64Wrap>

(declare-fun Vale.X64.InsBasic.va_quick_Mul64Wrap (Term) Term)
(declare-fun Tm_arrow_72e2561e74fb70f44be99f888606b918 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Mul64Wrap@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Mul64Wrap>


; <Start encoding Vale.X64.InsBasic.va_code_Mulx64>

(declare-fun Vale.X64.InsBasic.va_code_Mulx64 (Term Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Mulx64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Mulx64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Mulx64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Mulx64 (Term Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Mulx64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Mulx64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Mulx64>

(declare-fun Vale.X64.InsBasic.va_lemma_Mulx64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_534d9918ae621d8d4e0f099d8801195e (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5a31c1319683b8ad3d8d3b96be9c19d3 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Mulx64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Mulx64>


; <Start encoding Vale.X64.InsBasic.va_wp_Mulx64>


(declare-fun Vale.X64.InsBasic.va_wp_Mulx64 (Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Mulx64@tok () Term)


(declare-fun Tm_abs_64f0871fa3d032d1433848f1428266a0 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8a0dd57af43d1bf4427cce873e589d8d (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Mulx64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Mulx64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Mulx64 (Term Term Term Term Term) Term)

(declare-fun Tm_refine_88991f02eaabdd116f6e123b38d4d65d (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_62bede11e08cb5b1ad989fa52cc4ad8f () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Mulx64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Mulx64>


; <Start encoding Vale.X64.InsBasic.va_quick_Mulx64>

(declare-fun Vale.X64.InsBasic.va_quick_Mulx64 (Term Term Term) Term)
(declare-fun Tm_arrow_2c1f57a6b608209ccd9c94ff18525155 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Mulx64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Mulx64>


; <Start encoding Vale.X64.InsBasic.va_code_IMul64>

(declare-fun Vale.X64.InsBasic.va_code_IMul64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_IMul64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_IMul64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_IMul64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_IMul64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_IMul64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_IMul64>


; <Start encoding Vale.X64.InsBasic.va_lemma_IMul64>

(declare-fun Vale.X64.InsBasic.va_lemma_IMul64 (Term Term Term Term) Term)
(declare-fun Tm_refine_f400b3fb2bdd346061ca42af6bf768c1 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_f1de0c4d629de56ec1a3574c625d4ca8 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_IMul64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_IMul64>


; <Start encoding Vale.X64.InsBasic.va_wp_IMul64>


(declare-fun Vale.X64.InsBasic.va_wp_IMul64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_IMul64@tok () Term)


(declare-fun Tm_abs_d80244a6d51e8450c96de6d01e65bc95 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_245c4ddb5ad4f9e989e0874dcc241fbb (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_IMul64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_IMul64>


(declare-fun Vale.X64.InsBasic.va_wpProof_IMul64 (Term Term Term Term) Term)

(declare-fun Tm_refine_b9963fc5436df7b9ed4d5dd7fcac977e (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_f7f2b2401229f6ce29581b9f023bfcce () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_IMul64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_IMul64>


; <Start encoding Vale.X64.InsBasic.va_quick_IMul64>

(declare-fun Vale.X64.InsBasic.va_quick_IMul64 (Term Term) Term)
(declare-fun Tm_arrow_e5b138be9ffbb0b434debc015b226584 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_IMul64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_IMul64>


; <Start encoding Vale.X64.InsBasic.va_code_Xor64>

(declare-fun Vale.X64.InsBasic.va_code_Xor64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Xor64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Xor64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Xor64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Xor64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Xor64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Xor64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Xor64>

(declare-fun Vale.X64.InsBasic.va_lemma_Xor64 (Term Term Term Term) Term)
(declare-fun Tm_refine_826daca6d68f030aa96a71cc3668fd43 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_9efe29e3712c15c871bf8707f8496b42 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Xor64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Xor64>


; <Start encoding Vale.X64.InsBasic.va_wp_Xor64>


(declare-fun Vale.X64.InsBasic.va_wp_Xor64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Xor64@tok () Term)


(declare-fun Tm_abs_cbb4f53a8e00760f34df99d896aeed25 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_22941256830fb319b28e9f7205543200 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Xor64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Xor64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Xor64 (Term Term Term Term) Term)

(declare-fun Tm_refine_27ec9bb4b1a3254b1a97ad1a7f35fbbc (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_28bae832c39b5723d891f6b03a232aa8 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Xor64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Xor64>


; <Start encoding Vale.X64.InsBasic.va_quick_Xor64>

(declare-fun Vale.X64.InsBasic.va_quick_Xor64 (Term Term) Term)
(declare-fun Tm_arrow_a4b35f99a915786508780e7cab54f51f () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Xor64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Xor64>


; <Start encoding Vale.X64.InsBasic.va_code_And64>

(declare-fun Vale.X64.InsBasic.va_code_And64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_And64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_And64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_And64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_And64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_And64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_And64>


; <Start encoding Vale.X64.InsBasic.va_lemma_And64>

(declare-fun Vale.X64.InsBasic.va_lemma_And64 (Term Term Term Term) Term)
(declare-fun Tm_refine_6564d3af5782cb7880712a018f644d76 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_9627c0a74b933d7686371a9995baf806 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_And64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_And64>


; <Start encoding Vale.X64.InsBasic.va_wp_And64>


(declare-fun Vale.X64.InsBasic.va_wp_And64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_And64@tok () Term)


(declare-fun Tm_abs_67dae90f255e5b72cea94ebe0e2dfc5d (Term Term Term Term Term) Term)

(declare-fun Tm_abs_41223746334b367a0c60527918b3af6e (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_And64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_And64>


(declare-fun Vale.X64.InsBasic.va_wpProof_And64 (Term Term Term Term) Term)

(declare-fun Tm_refine_42ea7be1d0b5ad3908adcc1db917085e (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_e0d8163437e435fe264e7a4d0da24b47 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_And64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_And64>


; <Start encoding Vale.X64.InsBasic.va_quick_And64>

(declare-fun Vale.X64.InsBasic.va_quick_And64 (Term Term) Term)
(declare-fun Tm_arrow_fc6ffd2f970169c47fa874565a2db353 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_And64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_And64>


; <Start encoding Vale.X64.InsBasic.va_code_Shl64>

(declare-fun Vale.X64.InsBasic.va_code_Shl64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Shl64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Shl64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Shl64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Shl64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Shl64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Shl64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Shl64>

(declare-fun Vale.X64.InsBasic.va_lemma_Shl64 (Term Term Term Term) Term)
(declare-fun Tm_refine_afa7e814a48674644237b51536a023bb (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_e64e7fa789a0a7f858b7a24e97afccb9 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Shl64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Shl64>


; <Start encoding Vale.X64.InsBasic.va_wp_Shl64>


(declare-fun Vale.X64.InsBasic.va_wp_Shl64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Shl64@tok () Term)


(declare-fun Tm_abs_62113761e7b358d4e28310bbc55188e9 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_aabe258e3cd184c38c8858c29294cf31 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Shl64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Shl64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Shl64 (Term Term Term Term) Term)

(declare-fun Tm_refine_cbbe1dc10fa9d06d5f8dd12e90691b0c (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7d573139bdf03db67478f8898d608d32 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Shl64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Shl64>


; <Start encoding Vale.X64.InsBasic.va_quick_Shl64>

(declare-fun Vale.X64.InsBasic.va_quick_Shl64 (Term Term) Term)
(declare-fun Tm_arrow_c8397a4e066c44b0f536a4a2937ba8ac () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Shl64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Shl64>


; <Start encoding Vale.X64.InsBasic.va_code_Shr64>

(declare-fun Vale.X64.InsBasic.va_code_Shr64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Shr64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Shr64>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Shr64>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Shr64 (Term Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Shr64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Shr64>


; <Start encoding Vale.X64.InsBasic.va_lemma_Shr64>

(declare-fun Vale.X64.InsBasic.va_lemma_Shr64 (Term Term Term Term) Term)
(declare-fun Tm_refine_424134e51a2abc38478fa2f89ce2a444 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_32f91e1c4b992e10f50e423e68c0c71a () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Shr64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Shr64>


; <Start encoding Vale.X64.InsBasic.va_wp_Shr64>


(declare-fun Vale.X64.InsBasic.va_wp_Shr64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Shr64@tok () Term)


(declare-fun Tm_abs_dee1a2e8ddbc293829a67e733b67eddb (Term Term Term Term Term) Term)

(declare-fun Tm_abs_c8744810947b6fa8367ae1dd48c13441 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Shr64>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Shr64>


(declare-fun Vale.X64.InsBasic.va_wpProof_Shr64 (Term Term Term Term) Term)

(declare-fun Tm_refine_a637ea853ac628098ba66e104ea13aa9 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7d5acef78a6f8db8af7bc8774c2c21e9 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Shr64@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Shr64>


; <Start encoding Vale.X64.InsBasic.va_quick_Shr64>

(declare-fun Vale.X64.InsBasic.va_quick_Shr64 (Term Term) Term)
(declare-fun Tm_arrow_e761e15bac546d49dfbf8eeb717f9ec1 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Shr64@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Shr64>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_AES>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_AES (Term) Term)
(declare-fun Tm_arrow_58bd36dc6a575f286a5b53fcd727671b () Term)
(declare-fun Vale.X64.InsBasic.va_code_Cpuid_AES@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_AES>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_AES>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_AES (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_AES@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_AES>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_AES>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_AES (Term Term) Term)
(declare-fun Tm_refine_0a4d7273132cf4f3f45e6d1ca19b014f (Term Term) Term)
(declare-fun Tm_ghost_arrow_5e2c2e0889cdc6f9df86954999fe422d () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_AES@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_AES>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_AES>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_AES (Term Term) Term)

(declare-fun Tm_arrow_30a426546ff6914a3c9895a0b84b035c () Term)
(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_AES@tok () Term)


(declare-fun Tm_abs_a40399ee50d660af60450c3effb59d11 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_39072604599ef002a897f38287a4a1dc (Term Term Term Term) Term)

(declare-fun Tm_abs_c3c346260b76c6060e9b763fb1e454fd (Term Term Term) Term)

(declare-fun Tm_abs_ff8c1d82730a8579abf2edf70d4ed89b (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_AES>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_AES>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_AES (Term Term) Term)

(declare-fun Tm_refine_d9ff3d2c1b01578416364f85423e6828 (Term Term) Term)
(declare-fun Tm_ghost_arrow_3daed50fff2b8f511f54fbc5001304d7 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_AES@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_AES>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_AES>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_AES (Term) Term)
(declare-fun Tm_arrow_e11eae70196257fbaac808a13bd2e8d3 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_AES@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_AES>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Sha>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Sha (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Sha@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Sha>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Sha>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Sha (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Sha@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Sha>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Sha>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Sha (Term Term) Term)
(declare-fun Tm_refine_55dcd6158d031aafd64c77e7249ad793 (Term Term) Term)
(declare-fun Tm_ghost_arrow_34dea3a3d8ca4924dd8cd6148d203e89 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Sha@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Sha>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Sha>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Sha (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Sha@tok () Term)


(declare-fun Tm_abs_338c9cddf02914f0d9c549d5fb44dcb0 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_e9ec6bac9600c6665679a226679a7200 (Term Term Term Term) Term)

(declare-fun Tm_abs_0ab53a633305c2138ce10f1db451b02e (Term Term Term) Term)

(declare-fun Tm_abs_480230cb32d51515a3da87ab88929f4b (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Sha>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Sha>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Sha (Term Term) Term)

(declare-fun Tm_refine_aa25f1a8b016999459a32f3cdaa8e04e (Term Term) Term)
(declare-fun Tm_ghost_arrow_89b1bfca6181883d6fea041908f5f588 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Sha@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Sha>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Sha>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Sha (Term) Term)
(declare-fun Tm_arrow_257ec3688512c5c0ef62f185db72816c () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Sha@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Sha>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Adx_Bmi2>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Adx_Bmi2 (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Adx_Bmi2@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Adx_Bmi2>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Adx_Bmi2>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Adx_Bmi2 (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Adx_Bmi2@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Adx_Bmi2>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Adx_Bmi2>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Adx_Bmi2 (Term Term) Term)
(declare-fun Tm_refine_63c438a4eeb83e36d04e3547decf93c3 (Term Term) Term)
(declare-fun Tm_ghost_arrow_a827ca5021d51df2275c8bad0bb8d3e7 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Adx_Bmi2@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Adx_Bmi2>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Adx_Bmi2>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Adx_Bmi2 (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Adx_Bmi2@tok () Term)


(declare-fun Tm_abs_716394b23450c2aa141c9c092d42ac74 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_65165b4155634758fd0098973136aaed (Term Term Term Term) Term)

(declare-fun Tm_abs_d6dd1c24c7a541df4dca5f322eef16d2 (Term Term Term) Term)

(declare-fun Tm_abs_d2f20b576081f2be7a37942a1802322d (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Adx_Bmi2>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Adx_Bmi2>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Adx_Bmi2 (Term Term) Term)

(declare-fun Tm_refine_f17cf7f6bde442fc80767cfca0eda3a5 (Term Term) Term)
(declare-fun Tm_ghost_arrow_fcbddf736b34642859738ad0828871fe () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Adx_Bmi2@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Adx_Bmi2>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Adx_Bmi2>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Adx_Bmi2 (Term) Term)
(declare-fun Tm_arrow_a99999b5ae935cccffee0dc2676a237c () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Adx_Bmi2@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Adx_Bmi2>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Avx>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Avx (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Avx@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Avx>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Avx>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Avx (Term Term) Term)
(declare-fun Tm_refine_afcdca6798976e26ec04616c16dcae64 (Term Term) Term)
(declare-fun Tm_ghost_arrow_1ba82e87cd623137f5943afa7a283aad () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Avx@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Avx>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Avx>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Avx (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Avx@tok () Term)


(declare-fun Tm_abs_804958bae32c82692e787de42e5b30ea (Term Term Term Term Term) Term)

(declare-fun Tm_abs_013c15bda9b003add57ae1f5a7ea0d99 (Term Term Term Term) Term)

(declare-fun Tm_abs_2a3b8b5844a5c7c4cb181f2a9b30d44d (Term Term Term) Term)

(declare-fun Tm_abs_a4bd8b280e2242ddffeb80fbe587b3a6 (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Avx>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Avx>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Avx (Term Term) Term)

(declare-fun Tm_refine_10f3388d311f7b43881a04b331efab59 (Term Term) Term)
(declare-fun Tm_ghost_arrow_5d3cc2380e808300311f27ce29f15641 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Avx@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Avx>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Avx>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Avx (Term) Term)
(declare-fun Tm_arrow_fed74bb288313f66f3ea511acb95f1e9 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Avx@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Avx>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Avx2>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Avx2 (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Avx2@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Avx2>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx2>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx2 (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx2@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx2>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Avx2>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Avx2 (Term Term) Term)
(declare-fun Tm_refine_241a87d3558c5cbfcfc8e974be3efa7d (Term Term) Term)
(declare-fun Tm_ghost_arrow_c81e81a9d7b6c0428d008649f4bfc62c () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Avx2@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Avx2>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Avx2>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Avx2 (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Avx2@tok () Term)


(declare-fun Tm_abs_e535e8fa4f8fe8eafd57e38697b34225 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_e175175be47dbd8103d8261d68f6358c (Term Term Term Term) Term)

(declare-fun Tm_abs_def3bf8fb7967b9772865ca110d87bd0 (Term Term Term) Term)

(declare-fun Tm_abs_f284669feb99643dbbd3309dd5ae06cc (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Avx2>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Avx2>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Avx2 (Term Term) Term)

(declare-fun Tm_refine_153a6a67148a9f21e0911d85ebc9253a (Term Term) Term)
(declare-fun Tm_ghost_arrow_dbd4c3453e72e07fa3ddf423a22104b8 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Avx2@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Avx2>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Avx2>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Avx2 (Term) Term)
(declare-fun Tm_arrow_20167eb3addc9ede9d80e6550a6fc254 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Avx2@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Avx2>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Sse>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Sse (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Sse@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Sse>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Sse>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Sse (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Sse@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Sse>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Sse>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Sse (Term Term) Term)
(declare-fun Tm_refine_517267fb69751d8d127f43db23679499 (Term Term) Term)
(declare-fun Tm_ghost_arrow_b4636dbe648e8c100c79be6bc92a7977 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Sse@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Sse>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Sse>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Sse (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Sse@tok () Term)


(declare-fun Tm_abs_1e7b923298a1b8fc12486c159f61c74a (Term Term Term Term Term) Term)

(declare-fun Tm_abs_0ea5064f874bfeecb929e2a9cd2d71ac (Term Term Term Term) Term)

(declare-fun Tm_abs_a39e724bbd8b56c200665f7402cb0872 (Term Term Term) Term)

(declare-fun Tm_abs_000dc2f6f309777661d6797a325357a6 (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Sse>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Sse>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Sse (Term Term) Term)

(declare-fun Tm_refine_c03ca8ecf3d1aeb3f4089539d592b8fc (Term Term) Term)
(declare-fun Tm_ghost_arrow_e18dabba0032080ad036c0376c96c1ee () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Sse@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Sse>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Sse>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Sse (Term) Term)
(declare-fun Tm_arrow_887e21daeb0da8695574e6da2fd09b6c () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Sse@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Sse>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Movbe>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Movbe (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Movbe@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Movbe>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Movbe>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Movbe (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Movbe@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Movbe>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Movbe>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Movbe (Term Term) Term)
(declare-fun Tm_refine_f61e127f58b1c9da60f66c2ad7289f0c (Term Term) Term)
(declare-fun Tm_ghost_arrow_5e8f7cd18268ee4adf4cae4087e5eff3 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Movbe@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Movbe>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Movbe>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Movbe (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Movbe@tok () Term)


(declare-fun Tm_abs_593a33a27442d2e34b69baea7587df06 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_e462f1ee1e18bafe51987d25579bce5f (Term Term Term Term) Term)

(declare-fun Tm_abs_a02d6868c16e0bb2ef983064f176b102 (Term Term Term) Term)

(declare-fun Tm_abs_df9165e4d7807e352055af75921aaf74 (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Movbe>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Movbe>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Movbe (Term Term) Term)

(declare-fun Tm_refine_513fc811a82be218f2294c3bf13b58d9 (Term Term) Term)
(declare-fun Tm_ghost_arrow_957ec551f451cd749fb7ec679979d0a1 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Movbe@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Movbe>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Movbe>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Movbe (Term) Term)
(declare-fun Tm_arrow_f329c5b341d4b86a49eb84184fce6327 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Movbe@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Movbe>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Rdrand>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Rdrand (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Rdrand@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Rdrand>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Rdrand>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Rdrand (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Rdrand@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Rdrand>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Rdrand>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Rdrand (Term Term) Term)
(declare-fun Tm_refine_bea08ec3b47a8bc25cee9ceb02ed4652 (Term Term) Term)
(declare-fun Tm_ghost_arrow_c55a8cfb2b752722b5be41ec82f8a638 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Rdrand@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Rdrand>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Rdrand>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Rdrand (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Rdrand@tok () Term)


(declare-fun Tm_abs_2e0628f74f50ec78d030149587d09f47 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_01741a641c6692a0c5eaaa7de72b236c (Term Term Term Term) Term)

(declare-fun Tm_abs_c5944f079c520de4ddd9247e61a6c075 (Term Term Term) Term)

(declare-fun Tm_abs_3b822b4bf2bf2b884700d613fc8e456c (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Rdrand>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Rdrand>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Rdrand (Term Term) Term)

(declare-fun Tm_refine_27a09c2879606c0a950d555bc77b9971 (Term Term) Term)
(declare-fun Tm_ghost_arrow_f0c5fdd79b73344222898e52c20ef5d1 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Rdrand@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Rdrand>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Rdrand>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Rdrand (Term) Term)
(declare-fun Tm_arrow_5ec832e5af64f8f064943546ae1faa4a () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Rdrand@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Rdrand>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Avx512>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Avx512 (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Avx512@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Avx512>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx512>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx512 (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx512@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Avx512>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Avx512>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Avx512 (Term Term) Term)
(declare-fun Tm_refine_f417e57de1a6cc4c678776ae9a723654 (Term Term) Term)
(declare-fun Tm_ghost_arrow_d1d759da520529f28587b9b748defffa () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Avx512@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Avx512>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Avx512>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Avx512 (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Avx512@tok () Term)


(declare-fun Tm_abs_217439cfa4d5c5fd6448f29c3e2af43c (Term Term Term Term Term) Term)

(declare-fun Tm_abs_cb521d9e795bef92861c7e02fc3fe61d (Term Term Term Term) Term)

(declare-fun Tm_abs_6675c0fa9e02407367226ad34022c1ba (Term Term Term) Term)

(declare-fun Tm_abs_fbe5fd6fc0a6dd6158f21d93aa2d2913 (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Avx512>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Avx512>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Avx512 (Term Term) Term)

(declare-fun Tm_refine_1a08d4675c9cb7945f21aeb639695d5e (Term Term) Term)
(declare-fun Tm_ghost_arrow_65e279c2bf241f474478f3855e52fb75 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Avx512@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Avx512>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Avx512>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Avx512 (Term) Term)
(declare-fun Tm_arrow_192876fc2285ed13326a8a67e312aa52 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Avx512@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Avx512>


; <Start encoding Vale.X64.InsBasic.va_code_Cpuid_Osxsave>

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Osxsave (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Cpuid_Osxsave@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Cpuid_Osxsave>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Osxsave>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Osxsave (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Cpuid_Osxsave@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Cpuid_Osxsave>


; <Start encoding Vale.X64.InsBasic.va_lemma_Cpuid_Osxsave>

(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Osxsave (Term Term) Term)
(declare-fun Tm_refine_049c84a54226584b44b489ba125e1eab (Term Term) Term)
(declare-fun Tm_ghost_arrow_b61c248225f9134c514b5c2c1c2e4d5b () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Cpuid_Osxsave@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Cpuid_Osxsave>


; <Start encoding Vale.X64.InsBasic.va_wp_Cpuid_Osxsave>


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Osxsave (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Cpuid_Osxsave@tok () Term)


(declare-fun Tm_abs_db808a2e3c7f26ad49b47d4602336d7f (Term Term Term Term Term) Term)

(declare-fun Tm_abs_2d5d6e11a324e8aef3ab91f66e8e56be (Term Term Term Term) Term)

(declare-fun Tm_abs_543a79800dc01ad3e9ddf48c19800890 (Term Term Term) Term)

(declare-fun Tm_abs_642f5d58f160042d5d1167f8e983fbae (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Cpuid_Osxsave>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Osxsave>


(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Osxsave (Term Term) Term)

(declare-fun Tm_refine_0861690f099f39032ef4787a541411c4 (Term Term) Term)
(declare-fun Tm_ghost_arrow_fb0587bdd7e9c7f0a17abcd36babc02e () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Cpuid_Osxsave@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Cpuid_Osxsave>


; <Start encoding Vale.X64.InsBasic.va_quick_Cpuid_Osxsave>

(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Osxsave (Term) Term)
(declare-fun Tm_arrow_f2793972f153e116db20cf33809a4016 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Cpuid_Osxsave@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Cpuid_Osxsave>


; <Start encoding Vale.X64.InsBasic.va_code_Xgetbv_Avx>

(declare-fun Vale.X64.InsBasic.va_code_Xgetbv_Avx (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Xgetbv_Avx@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Xgetbv_Avx>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Xgetbv_Avx>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Xgetbv_Avx (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Xgetbv_Avx@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Xgetbv_Avx>


; <Start encoding Vale.X64.InsBasic.va_lemma_Xgetbv_Avx>

(declare-fun Vale.X64.InsBasic.va_lemma_Xgetbv_Avx (Term Term) Term)
(declare-fun Tm_refine_c41fa6b5f3527999db90ec5f4cfc8dd7 (Term Term) Term)
(declare-fun Tm_ghost_arrow_298a167f7fc3dceb6205a9b4561a2bfb () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Xgetbv_Avx@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Xgetbv_Avx>


; <Start encoding Vale.X64.InsBasic.va_wp_Xgetbv_Avx>


(declare-fun Vale.X64.InsBasic.va_wp_Xgetbv_Avx (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Xgetbv_Avx@tok () Term)


(declare-fun Tm_abs_ead89058a512793c3b0d714da56b88c8 (Term Term Term) Term)

(declare-fun Tm_abs_71dfab423593e7e0434a3ab404608333 (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Xgetbv_Avx>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Xgetbv_Avx>


(declare-fun Vale.X64.InsBasic.va_wpProof_Xgetbv_Avx (Term Term) Term)

(declare-fun Tm_refine_41309193e2152312c82701e78d55ee71 (Term Term) Term)
(declare-fun Tm_ghost_arrow_7d87593ec66eda7bb6762b6388aa816f () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Xgetbv_Avx@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Xgetbv_Avx>


; <Start encoding Vale.X64.InsBasic.va_quick_Xgetbv_Avx>

(declare-fun Vale.X64.InsBasic.va_quick_Xgetbv_Avx (Term) Term)
(declare-fun Tm_arrow_422b49168bb271bc8f73f9ab5e292448 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Xgetbv_Avx@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Xgetbv_Avx>


; <Start encoding Vale.X64.InsBasic.va_code_Xgetbv_Avx512>

(declare-fun Vale.X64.InsBasic.va_code_Xgetbv_Avx512 (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Xgetbv_Avx512@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Xgetbv_Avx512>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Xgetbv_Avx512>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Xgetbv_Avx512 (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Xgetbv_Avx512@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Xgetbv_Avx512>


; <Start encoding Vale.X64.InsBasic.va_lemma_Xgetbv_Avx512>

(declare-fun Vale.X64.InsBasic.va_lemma_Xgetbv_Avx512 (Term Term) Term)
(declare-fun Tm_refine_10c0267ab936fbe6fda337fb2e826cb7 (Term Term) Term)
(declare-fun Tm_ghost_arrow_4afca15cb675934b89eda5ae2caa40fa () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Xgetbv_Avx512@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Xgetbv_Avx512>


; <Start encoding Vale.X64.InsBasic.va_wp_Xgetbv_Avx512>


(declare-fun Vale.X64.InsBasic.va_wp_Xgetbv_Avx512 (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Xgetbv_Avx512@tok () Term)


(declare-fun Tm_abs_955bba57fd59689aef7691087d74ee97 (Term Term Term) Term)

(declare-fun Tm_abs_60291ee27776274f34d31982a25883f1 (Term Term) Term)

; </end encoding Vale.X64.InsBasic.va_wp_Xgetbv_Avx512>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Xgetbv_Avx512>


(declare-fun Vale.X64.InsBasic.va_wpProof_Xgetbv_Avx512 (Term Term) Term)

(declare-fun Tm_refine_c922665037f7b0a13e8053634a00a568 (Term Term) Term)
(declare-fun Tm_ghost_arrow_f412fa57d37bd6e9abe302d6c0762fa2 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Xgetbv_Avx512@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Xgetbv_Avx512>


; <Start encoding Vale.X64.InsBasic.va_quick_Xgetbv_Avx512>

(declare-fun Vale.X64.InsBasic.va_quick_Xgetbv_Avx512 (Term) Term)
(declare-fun Tm_arrow_c5e36dc36972d89241c2b59afe40bb53 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Xgetbv_Avx512@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Xgetbv_Avx512>


; <Start encoding Vale.X64.InsBasic.va_code_Nat64Equal>

(declare-fun Vale.X64.InsBasic.va_code_Nat64Equal (Term Term) Term)
(declare-fun Tm_arrow_f7bb4106a3279351898fc8e76687fa49 () Term)
(declare-fun Vale.X64.InsBasic.va_code_Nat64Equal@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Nat64Equal>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Nat64Equal>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Nat64Equal (Term Term) Term)
(declare-fun Tm_arrow_6a785df65d85c862add31a312a5a7531 () Term)
(declare-fun Vale.X64.InsBasic.va_codegen_success_Nat64Equal@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Nat64Equal>


; <Start encoding Vale.X64.InsBasic.va_lemma_Nat64Equal>

(declare-fun Vale.X64.InsBasic.va_lemma_Nat64Equal (Term Term Term Term) Term)
(declare-fun Tm_refine_5dc2505a113b28b9150538d24d9d7697 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_66a9935447028cbb1a018d9b850c3bf9 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Nat64Equal@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Nat64Equal>


; <Start encoding Vale.X64.InsBasic.va_wp_Nat64Equal>


(declare-fun Vale.X64.InsBasic.va_wp_Nat64Equal (Term Term Term Term) Term)

(declare-fun Tm_arrow_64d78ac01010a2b18bcfc5f75f88ab81 () Term)
(declare-fun Vale.X64.InsBasic.va_wp_Nat64Equal@tok () Term)

(declare-fun Tm_refine_73789f380cf69df9592e350080d1cca5 (Term Term) Term)

(declare-fun Tm_ghost_arrow_396c0fe0af6b29c1468ad643b7d2f994 (Term Term) Term)
(declare-fun Tm_abs_6e52c1e0219c4fa06898325e44b9ec31 (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_fef9729d1e1d074f764a83a14b91dbe7 (Term Term) Term)

(declare-fun Tm_ghost_arrow_e4abe73594d4315f0d51b3b3e10fa286 (Term Term) Term)
(declare-fun Tm_abs_50e1578208770f5f8f990a20b76af109 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_da3321366eed3667d7f1c68bd289d0ae (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_18c980c86f067b177dbc6bd3878259d1 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_8599d310bf309243052005e031acdf5c (Term Term Term Term) Term)

















; </end encoding Vale.X64.InsBasic.va_wp_Nat64Equal>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Nat64Equal>


(declare-fun Vale.X64.InsBasic.va_wpProof_Nat64Equal (Term Term Term Term) Term)

(declare-fun Tm_refine_cb84b4e752c17355c5947afa6e2b4ab7 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_15ead6d3d40375569e244cbb8b65ad9b () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Nat64Equal@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Nat64Equal>


; <Start encoding Vale.X64.InsBasic.va_quick_Nat64Equal>

(declare-fun Vale.X64.InsBasic.va_quick_Nat64Equal (Term Term) Term)
(declare-fun Tm_arrow_37028d0062e41174c66c02d1a7c243b3 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Nat64Equal@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Nat64Equal>


; <Start encoding Vale.X64.InsBasic.va_code_Comment>

(declare-fun Vale.X64.InsBasic.va_code_Comment (Term) Term)
(declare-fun Tm_arrow_fb81cc4aa11c9b89b05a7f96bcfa4d01 () Term)
(declare-fun Vale.X64.InsBasic.va_code_Comment@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Comment>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Comment>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Comment (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Comment@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Comment>


; <Start encoding Vale.X64.InsBasic.va_lemma_Comment>

(declare-fun Vale.X64.InsBasic.va_lemma_Comment (Term Term Term) Term)
(declare-fun Tm_refine_073453e79f7fafbbceba763ccee15bbe (Term Term) Term)
(declare-fun Tm_ghost_arrow_69da6b483140b0146266fb7c99715001 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Comment@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Comment>


; <Start encoding Vale.X64.InsBasic.va_wp_Comment>


(declare-fun Vale.X64.InsBasic.va_wp_Comment (Term Term Term) Term)

(declare-fun Tm_arrow_406ad0e0ed96fef8fd190eecca449305 () Term)
(declare-fun Vale.X64.InsBasic.va_wp_Comment@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wp_Comment>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Comment>


(declare-fun Vale.X64.InsBasic.va_wpProof_Comment (Term Term Term) Term)

(declare-fun Tm_refine_3e0681df21166d1d2cb43448fc802333 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_542c9e05a823e5910020c4df44ed9125 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Comment@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Comment>


; <Start encoding Vale.X64.InsBasic.va_quick_Comment>

(declare-fun Vale.X64.InsBasic.va_quick_Comment (Term) Term)
(declare-fun Tm_arrow_003be134ed41d2ac36e654339efc35af () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Comment@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Comment>


; <Start encoding Vale.X64.InsBasic.va_code_LargeComment>

(declare-fun Vale.X64.InsBasic.va_code_LargeComment (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_LargeComment@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_LargeComment>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_LargeComment>

(declare-fun Vale.X64.InsBasic.va_codegen_success_LargeComment (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_LargeComment@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_LargeComment>


; <Start encoding Vale.X64.InsBasic.va_lemma_LargeComment>

(declare-fun Vale.X64.InsBasic.va_lemma_LargeComment (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_45135f0772abe300c4c02f2d9b0e2911 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_LargeComment@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_LargeComment>


; <Start encoding Vale.X64.InsBasic.va_wp_LargeComment>


(declare-fun Vale.X64.InsBasic.va_wp_LargeComment (Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_LargeComment@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wp_LargeComment>


; <Start encoding Vale.X64.InsBasic.va_wpProof_LargeComment>


(declare-fun Vale.X64.InsBasic.va_wpProof_LargeComment (Term Term Term) Term)

(declare-fun Tm_refine_98c94c043933879f0c8be08fa59cbc09 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7c978fc825bdb348ef9c8df234b10661 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_LargeComment@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_LargeComment>


; <Start encoding Vale.X64.InsBasic.va_quick_LargeComment>

(declare-fun Vale.X64.InsBasic.va_quick_LargeComment (Term) Term)
(declare-fun Tm_arrow_4b64b0f79889039335c77518f5e5d79e () Term)
(declare-fun Vale.X64.InsBasic.va_quick_LargeComment@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_LargeComment>


; <Start encoding Vale.X64.InsBasic.va_code_NoNewline>

(declare-fun Vale.X64.InsBasic.va_code_NoNewline (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_NoNewline@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_NoNewline>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_NoNewline>

(declare-fun Vale.X64.InsBasic.va_codegen_success_NoNewline (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_NoNewline@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_NoNewline>


; <Start encoding Vale.X64.InsBasic.va_lemma_NoNewline>

(declare-fun Vale.X64.InsBasic.va_lemma_NoNewline (Term Term) Term)

(declare-fun Tm_ghost_arrow_72e7a092ceb6e766b66f76af6e26756e () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_NoNewline@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_NoNewline>


; <Start encoding Vale.X64.InsBasic.va_wp_NoNewline>


(declare-fun Vale.X64.InsBasic.va_wp_NoNewline (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_NoNewline@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wp_NoNewline>


; <Start encoding Vale.X64.InsBasic.va_wpProof_NoNewline>


(declare-fun Vale.X64.InsBasic.va_wpProof_NoNewline (Term Term) Term)

(declare-fun Tm_refine_0d95dbae3044d426137cdecf94a31208 (Term Term) Term)
(declare-fun Tm_ghost_arrow_3225f6c5dd28175afe25f52515ba5d74 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_NoNewline@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_NoNewline>


; <Start encoding Vale.X64.InsBasic.va_quick_NoNewline>

(declare-fun Vale.X64.InsBasic.va_quick_NoNewline (Term) Term)
(declare-fun Tm_arrow_eef8fd4310fcadc348d6423f17e803fb () Term)
(declare-fun Vale.X64.InsBasic.va_quick_NoNewline@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_NoNewline>


; <Start encoding Vale.X64.InsBasic.va_code_Newline>

(declare-fun Vale.X64.InsBasic.va_code_Newline (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Newline@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Newline>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Newline>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Newline (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Newline@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Newline>


; <Start encoding Vale.X64.InsBasic.va_lemma_Newline>

(declare-fun Vale.X64.InsBasic.va_lemma_Newline (Term Term) Term)

(declare-fun Tm_ghost_arrow_a8308480b46e6b6822366b384d234cac () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Newline@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Newline>


; <Start encoding Vale.X64.InsBasic.va_wp_Newline>


(declare-fun Vale.X64.InsBasic.va_wp_Newline (Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Newline@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wp_Newline>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Newline>


(declare-fun Vale.X64.InsBasic.va_wpProof_Newline (Term Term) Term)

(declare-fun Tm_refine_327d6d2cdc3ae1dddd03c8c017a9b884 (Term Term) Term)
(declare-fun Tm_ghost_arrow_aaf158edd4ed2f21617c16f68a755534 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Newline@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Newline>


; <Start encoding Vale.X64.InsBasic.va_quick_Newline>

(declare-fun Vale.X64.InsBasic.va_quick_Newline (Term) Term)
(declare-fun Tm_arrow_ba74cb74488eddcb91b94612d2c4c865 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Newline@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Newline>


; <Start encoding Vale.X64.InsBasic.va_code_Space>

(declare-fun Vale.X64.InsBasic.va_code_Space (Term) Term)
(declare-fun Tm_arrow_b1840ee360feb86cc68b74562b306f9b () Term)
(declare-fun Vale.X64.InsBasic.va_code_Space@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Space>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Space>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Space (Term) Term)
(declare-fun Tm_arrow_bbee08465fa7b559d2142f391b55fd30 () Term)
(declare-fun Vale.X64.InsBasic.va_codegen_success_Space@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Space>


; <Start encoding Vale.X64.InsBasic.va_lemma_Space>

(declare-fun Vale.X64.InsBasic.va_lemma_Space (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_bcdaa3eb5264e6f8ef34bb7a3f45206e () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Space@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Space>


; <Start encoding Vale.X64.InsBasic.va_wp_Space>


(declare-fun Vale.X64.InsBasic.va_wp_Space (Term Term Term) Term)

(declare-fun Tm_arrow_f50122370a8d408b48d0c868b3c20a39 () Term)
(declare-fun Vale.X64.InsBasic.va_wp_Space@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wp_Space>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Space>


(declare-fun Vale.X64.InsBasic.va_wpProof_Space (Term Term Term) Term)

(declare-fun Tm_refine_3f5a08f79a7847fa8680b5b188335d39 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ca789f55953b46abf2968730b7bb0d5e () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Space@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Space>


; <Start encoding Vale.X64.InsBasic.va_quick_Space>

(declare-fun Vale.X64.InsBasic.va_quick_Space (Term) Term)
(declare-fun Tm_arrow_8e16d606be31c0f2ff322ecba0e365b4 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Space@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Space>


; <Start encoding Vale.X64.InsBasic.va_code_Prefetchnta>

(declare-fun Vale.X64.InsBasic.va_code_Prefetchnta (Term) Term)

(declare-fun Vale.X64.InsBasic.va_code_Prefetchnta@tok () Term)

; </end encoding Vale.X64.InsBasic.va_code_Prefetchnta>


; <Start encoding Vale.X64.InsBasic.va_codegen_success_Prefetchnta>

(declare-fun Vale.X64.InsBasic.va_codegen_success_Prefetchnta (Term) Term)

(declare-fun Vale.X64.InsBasic.va_codegen_success_Prefetchnta@tok () Term)

; </end encoding Vale.X64.InsBasic.va_codegen_success_Prefetchnta>


; <Start encoding Vale.X64.InsBasic.va_lemma_Prefetchnta>

(declare-fun Vale.X64.InsBasic.va_lemma_Prefetchnta (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c0203bbcca127398f9ec6f08e12b17c9 () Term)
(declare-fun Vale.X64.InsBasic.va_lemma_Prefetchnta@tok () Term)


; </end encoding Vale.X64.InsBasic.va_lemma_Prefetchnta>


; <Start encoding Vale.X64.InsBasic.va_wp_Prefetchnta>


(declare-fun Vale.X64.InsBasic.va_wp_Prefetchnta (Term Term Term) Term)


(declare-fun Vale.X64.InsBasic.va_wp_Prefetchnta@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wp_Prefetchnta>


; <Start encoding Vale.X64.InsBasic.va_wpProof_Prefetchnta>


(declare-fun Vale.X64.InsBasic.va_wpProof_Prefetchnta (Term Term Term) Term)

(declare-fun Tm_refine_cdef7544695498685f8acbf3ff12d054 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_e900aa42e0cbce096a674f2b5cb9f8b4 () Term)
(declare-fun Vale.X64.InsBasic.va_wpProof_Prefetchnta@tok () Term)


; </end encoding Vale.X64.InsBasic.va_wpProof_Prefetchnta>


; <Start encoding Vale.X64.InsBasic.va_quick_Prefetchnta>

(declare-fun Vale.X64.InsBasic.va_quick_Prefetchnta (Term) Term)
(declare-fun Tm_arrow_a3d2ad88cab9483def298ee806a08f68 () Term)
(declare-fun Vale.X64.InsBasic.va_quick_Prefetchnta@tok () Term)

; </end encoding Vale.X64.InsBasic.va_quick_Prefetchnta>


; End Externals for interface Vale.X64.InsBasic


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.InsBasic (1945 decls; total size 86645)

;;; Start interface Vale.X64.InsMem

; Externals for interface Vale.X64.InsMem


; <Start encoding Vale.X64.InsMem.va_code_Mem64_lemma>

(declare-fun Vale.X64.InsMem.va_code_Mem64_lemma (Term) Term)

(declare-fun Vale.X64.InsMem.va_code_Mem64_lemma@tok () Term)

; </end encoding Vale.X64.InsMem.va_code_Mem64_lemma>


; <Start encoding Vale.X64.InsMem.va_codegen_success_Mem64_lemma>

(declare-fun Vale.X64.InsMem.va_codegen_success_Mem64_lemma (Term) Term)

(declare-fun Vale.X64.InsMem.va_codegen_success_Mem64_lemma@tok () Term)

; </end encoding Vale.X64.InsMem.va_codegen_success_Mem64_lemma>


; <Start encoding Vale.X64.InsMem.va_lemma_Mem64_lemma>

(declare-fun Vale.X64.InsMem.va_lemma_Mem64_lemma (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_e99617e5193e5ce1437591cc86f327a5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_bd616818f6c06f722d6c8a967ec298e6 () Term)
(declare-fun Vale.X64.InsMem.va_lemma_Mem64_lemma@tok () Term)


; </end encoding Vale.X64.InsMem.va_lemma_Mem64_lemma>


; <Start encoding Vale.X64.InsMem.va_wp_Mem64_lemma>


(declare-fun Vale.X64.InsMem.va_wp_Mem64_lemma (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_cd7e6f3ab20b367aca6189ad3b30ac1e () Term)
(declare-fun Vale.X64.InsMem.va_wp_Mem64_lemma@tok () Term)

(declare-fun Tm_refine_b9c0c79224e5050c3f72797cdd91a0f1 () Term)

; </end encoding Vale.X64.InsMem.va_wp_Mem64_lemma>


; <Start encoding Vale.X64.InsMem.va_wpProof_Mem64_lemma>


(declare-fun Vale.X64.InsMem.va_wpProof_Mem64_lemma (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_6976dba589acea2e07701682a8719442 (Term Term) Term)
(declare-fun Tm_ghost_arrow_0a2c5dec33274cc4fb42a7707610a4a2 () Term)
(declare-fun Vale.X64.InsMem.va_wpProof_Mem64_lemma@tok () Term)


; </end encoding Vale.X64.InsMem.va_wpProof_Mem64_lemma>


; <Start encoding Vale.X64.InsMem.va_quick_Mem64_lemma>

(declare-fun Vale.X64.InsMem.va_quick_Mem64_lemma (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5d285560b2bc3778798d6efcf70aa59c () Term)
(declare-fun Vale.X64.InsMem.va_quick_Mem64_lemma@tok () Term)

; </end encoding Vale.X64.InsMem.va_quick_Mem64_lemma>


; <Start encoding Vale.X64.InsMem.buffer64_write>

(declare-fun Vale.X64.InsMem.buffer64_write (Term Term Term Term) Term)
(declare-fun Tm_refine_e8685191bd389eb247fe567487bfcc95 () Term)
(declare-fun Tm_ghost_arrow_3b0a5ce0df57310a65aa73661bfd5f4e () Term)
(declare-fun Vale.X64.InsMem.buffer64_write@tok () Term)


; </end encoding Vale.X64.InsMem.buffer64_write>


; <Start encoding Vale.X64.InsMem.heaplet_id_is_none>

(declare-fun Vale.X64.InsMem.heaplet_id_is_none (Term) Term)
(declare-fun Tm_arrow_eb0b91cd5b311f511b2c1645fca55928 () Term)
(declare-fun Vale.X64.InsMem.heaplet_id_is_none@tok () Term)

; </end encoding Vale.X64.InsMem.heaplet_id_is_none>


; <Start encoding Vale.X64.InsMem.heaplet_id_is_some>

(declare-fun Vale.X64.InsMem.heaplet_id_is_some (Term Term) Term)
(declare-fun Tm_arrow_842680218f633fac5393f40cb35c73d6 () Term)
(declare-fun Vale.X64.InsMem.heaplet_id_is_some@tok () Term)

; </end encoding Vale.X64.InsMem.heaplet_id_is_some>


; <Start encoding Vale.X64.InsMem.norm_list>

(declare-fun Vale.X64.InsMem.norm_list (Term) Term)
(declare-fun Tm_arrow_3b3013dcddf547a7e548952439e4de68 () Term)
(declare-fun Vale.X64.InsMem.norm_list@tok () Term)

; </end encoding Vale.X64.InsMem.norm_list>


; <Start encoding Vale.X64.InsMem.norm_loc_attr>

(declare-fun Vale.X64.InsMem.norm_loc_attr (Dummy_sort) Term)

; </end encoding Vale.X64.InsMem.norm_loc_attr>


; <Start encoding Vale.X64.InsMem.norm_loc>

(declare-fun Vale.X64.InsMem.norm_loc (Term) Term)
(declare-fun Tm_arrow_9b4f8d16f5468d8257dce14b9133ff4d () Term)
(declare-fun Vale.X64.InsMem.norm_loc@tok () Term)

; </end encoding Vale.X64.InsMem.norm_loc>


; <Start encoding Vale.X64.InsMem.trigger_create_heaplet>

(declare-fun Vale.X64.InsMem.trigger_create_heaplet (Term) Term)
(declare-fun Tm_arrow_5488385dc8990856e932bf0624a1cb76 () Term)
(declare-fun Vale.X64.InsMem.trigger_create_heaplet@tok () Term)

; </end encoding Vale.X64.InsMem.trigger_create_heaplet>


; <Start encoding Vale.X64.InsMem.declare_buffer64>

(declare-fun Vale.X64.InsMem.declare_buffer64 (Term Term Term Term) Term)
(declare-fun Tm_arrow_ff5dedd0180c05e5ab0db3170824386f () Term)
(declare-fun Vale.X64.InsMem.declare_buffer64@tok () Term)

; </end encoding Vale.X64.InsMem.declare_buffer64>


; <Start encoding Vale.X64.InsMem.declare_buffer128>

(declare-fun Vale.X64.InsMem.declare_buffer128 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f856257b2007d5495c5328b46ec73227 () Term)
(declare-fun Vale.X64.InsMem.declare_buffer128@tok () Term)

; </end encoding Vale.X64.InsMem.declare_buffer128>


; <Start encoding Vale.X64.InsMem.create_post>

(declare-fun Vale.X64.InsMem.create_post (Term Term) Term)
(declare-fun Tm_arrow_99429637fd606e3a742b5e03ae68f2f1 () Term)
(declare-fun Vale.X64.InsMem.create_post@tok () Term)

(declare-fun Tm_abs_0795d6473dfe3809eb4fa59e0844cd22 (Term Term) Term)

; </end encoding Vale.X64.InsMem.create_post>


; <Start encoding Vale.X64.InsMem.va_code_CreateHeaplets>

(declare-fun Vale.X64.InsMem.va_code_CreateHeaplets (Term) Term)

(declare-fun Vale.X64.InsMem.va_code_CreateHeaplets@tok () Term)

; </end encoding Vale.X64.InsMem.va_code_CreateHeaplets>


; <Start encoding Vale.X64.InsMem.va_codegen_success_CreateHeaplets>

(declare-fun Vale.X64.InsMem.va_codegen_success_CreateHeaplets (Term) Term)

(declare-fun Vale.X64.InsMem.va_codegen_success_CreateHeaplets@tok () Term)

; </end encoding Vale.X64.InsMem.va_codegen_success_CreateHeaplets>


; <Start encoding Vale.X64.InsMem.va_lemma_CreateHeaplets>

(declare-fun Vale.X64.InsMem.va_lemma_CreateHeaplets (Term Term Term) Term)
(declare-fun Tm_refine_ae2a057a720eb27c142b82b325599664 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5046e59d8919e2d0174a0cce606a7703 () Term)
(declare-fun Vale.X64.InsMem.va_lemma_CreateHeaplets@tok () Term)


; </end encoding Vale.X64.InsMem.va_lemma_CreateHeaplets>


; <Start encoding Vale.X64.InsMem.va_wp_CreateHeaplets>


(declare-fun Vale.X64.InsMem.va_wp_CreateHeaplets (Term Term Term) Term)

(declare-fun Tm_arrow_8b0766de6a12e71d25ceb1ba18181005 () Term)
(declare-fun Vale.X64.InsMem.va_wp_CreateHeaplets@tok () Term)

(declare-fun Tm_arrow_d3e1f5da97bff028b981f21c7ce49c97 () Term)
(declare-fun Tm_abs_60913964df3f1463ea723c96e88f4618 (Term Term Term) Term)

(declare-fun Tm_abs_0fbd0bd7eff5207cf8591a44bb82797d (Term) Term)

(declare-fun Tm_abs_b8a38a01ebc0a08b74fe8340be8b1ff1 (Term Term Term) Term)

; </end encoding Vale.X64.InsMem.va_wp_CreateHeaplets>


; <Start encoding Vale.X64.InsMem.va_wpProof_CreateHeaplets>


(declare-fun Vale.X64.InsMem.va_wpProof_CreateHeaplets (Term Term Term) Term)

(declare-fun Tm_refine_38f54e82e9bd26a5f6a4526e17971522 (Term Term) Term)
(declare-fun Tm_ghost_arrow_28f2e27f1e45031507f91ff85629d4fe () Term)
(declare-fun Vale.X64.InsMem.va_wpProof_CreateHeaplets@tok () Term)


; </end encoding Vale.X64.InsMem.va_wpProof_CreateHeaplets>


; <Start encoding Vale.X64.InsMem.va_quick_CreateHeaplets>

(declare-fun Vale.X64.InsMem.va_quick_CreateHeaplets (Term) Term)
(declare-fun Tm_arrow_6fdb93c9242a13ebeca54a45854c1ef0 () Term)
(declare-fun Vale.X64.InsMem.va_quick_CreateHeaplets@tok () Term)

; </end encoding Vale.X64.InsMem.va_quick_CreateHeaplets>


; <Start encoding Vale.X64.InsMem.va_code_DestroyHeaplets>

(declare-fun Vale.X64.InsMem.va_code_DestroyHeaplets (Term) Term)

(declare-fun Vale.X64.InsMem.va_code_DestroyHeaplets@tok () Term)

; </end encoding Vale.X64.InsMem.va_code_DestroyHeaplets>


; <Start encoding Vale.X64.InsMem.va_codegen_success_DestroyHeaplets>

(declare-fun Vale.X64.InsMem.va_codegen_success_DestroyHeaplets (Term) Term)

(declare-fun Vale.X64.InsMem.va_codegen_success_DestroyHeaplets@tok () Term)

; </end encoding Vale.X64.InsMem.va_codegen_success_DestroyHeaplets>


; <Start encoding Vale.X64.InsMem.va_lemma_DestroyHeaplets>

(declare-fun Vale.X64.InsMem.va_lemma_DestroyHeaplets (Term Term) Term)
(declare-fun Tm_refine_516160f36127794cc2d8d91f866ce1f6 (Term Term) Term)
(declare-fun Tm_ghost_arrow_92d0b3be6e1c93acf28cd049e1fd87fc () Term)
(declare-fun Vale.X64.InsMem.va_lemma_DestroyHeaplets@tok () Term)


; </end encoding Vale.X64.InsMem.va_lemma_DestroyHeaplets>


; <Start encoding Vale.X64.InsMem.va_wp_DestroyHeaplets>


(declare-fun Vale.X64.InsMem.va_wp_DestroyHeaplets (Term Term) Term)


(declare-fun Vale.X64.InsMem.va_wp_DestroyHeaplets@tok () Term)


(declare-fun Tm_abs_60037e96fa9e486ce71d9b9187423610 (Term Term) Term)

(declare-fun Tm_abs_0fbf5f1a396cefa846f3c524c04eb13a (Term Term) Term)

; </end encoding Vale.X64.InsMem.va_wp_DestroyHeaplets>


; <Start encoding Vale.X64.InsMem.va_wpProof_DestroyHeaplets>


(declare-fun Vale.X64.InsMem.va_wpProof_DestroyHeaplets (Term Term) Term)

(declare-fun Tm_refine_20f8a7b4b34301de62d33a38d36cdc16 (Term Term) Term)
(declare-fun Tm_ghost_arrow_fd5cad5b996997f45bf0495dba5f9e4d () Term)
(declare-fun Vale.X64.InsMem.va_wpProof_DestroyHeaplets@tok () Term)


; </end encoding Vale.X64.InsMem.va_wpProof_DestroyHeaplets>


; <Start encoding Vale.X64.InsMem.va_quick_DestroyHeaplets>

(declare-fun Vale.X64.InsMem.va_quick_DestroyHeaplets (Term) Term)
(declare-fun Tm_arrow_e2e2bd980ce13a1974e80c45e14c247a () Term)
(declare-fun Vale.X64.InsMem.va_quick_DestroyHeaplets@tok () Term)

; </end encoding Vale.X64.InsMem.va_quick_DestroyHeaplets>


; <Start encoding Vale.X64.InsMem.va_code_Load64_buffer>

(declare-fun Vale.X64.InsMem.va_code_Load64_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dddc5dc0a6fc43a91fabbbe2b0a610d () Term)
(declare-fun Vale.X64.InsMem.va_code_Load64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_code_Load64_buffer>


; <Start encoding Vale.X64.InsMem.va_codegen_success_Load64_buffer>

(declare-fun Vale.X64.InsMem.va_codegen_success_Load64_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c1e2e65b5bf06967bda7dbb6a0a11e16 () Term)
(declare-fun Vale.X64.InsMem.va_codegen_success_Load64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_codegen_success_Load64_buffer>


; <Start encoding Vale.X64.InsMem.va_lemma_Load64_buffer>

(declare-fun Vale.X64.InsMem.va_lemma_Load64_buffer (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_42d5420311dd9f7a6587f0d9cd6313c6 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ca797bf260705549cafdcb3e7d8e7793 () Term)
(declare-fun Vale.X64.InsMem.va_lemma_Load64_buffer@tok () Term)


; </end encoding Vale.X64.InsMem.va_lemma_Load64_buffer>


; <Start encoding Vale.X64.InsMem.va_wp_Load64_buffer>


(declare-fun Vale.X64.InsMem.va_wp_Load64_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_bb333e70a0aba58138d89eef20384811 () Term)
(declare-fun Vale.X64.InsMem.va_wp_Load64_buffer@tok () Term)


(declare-fun Tm_abs_d7d5512eafb9d12665b06b201bc4396c (Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsMem.va_wp_Load64_buffer>


; <Start encoding Vale.X64.InsMem.va_wpProof_Load64_buffer>


(declare-fun Vale.X64.InsMem.va_wpProof_Load64_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_20c72b1e244c5a8de446cee67f9cd499 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5a98fcc2622d9f35efa6775035641471 () Term)
(declare-fun Vale.X64.InsMem.va_wpProof_Load64_buffer@tok () Term)


; </end encoding Vale.X64.InsMem.va_wpProof_Load64_buffer>


; <Start encoding Vale.X64.InsMem.va_quick_Load64_buffer>

(declare-fun Vale.X64.InsMem.va_quick_Load64_buffer (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec951fddd4cce670b8c89c135981f216 () Term)
(declare-fun Vale.X64.InsMem.va_quick_Load64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_quick_Load64_buffer>


; <Start encoding Vale.X64.InsMem.va_code_Store64_buffer>

(declare-fun Vale.X64.InsMem.va_code_Store64_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_58a9b894ae53a272b2ba0cd07fb8c43f () Term)
(declare-fun Vale.X64.InsMem.va_code_Store64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_code_Store64_buffer>


; <Start encoding Vale.X64.InsMem.va_codegen_success_Store64_buffer>

(declare-fun Vale.X64.InsMem.va_codegen_success_Store64_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_58c2800950de31a72a084667a25634fc () Term)
(declare-fun Vale.X64.InsMem.va_codegen_success_Store64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_codegen_success_Store64_buffer>


; <Start encoding Vale.X64.InsMem.va_lemma_Store64_buffer>

(declare-fun Vale.X64.InsMem.va_lemma_Store64_buffer (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_a8ae1018f6b16be626223d1ff275d7ef (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a03e01450cb4146604b496b1a2e3e716 () Term)
(declare-fun Vale.X64.InsMem.va_lemma_Store64_buffer@tok () Term)


; </end encoding Vale.X64.InsMem.va_lemma_Store64_buffer>


; <Start encoding Vale.X64.InsMem.va_wp_Store64_buffer>


(declare-fun Vale.X64.InsMem.va_wp_Store64_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_f7bdb6c09f69c7ecaab1ac11beed91dc () Term)
(declare-fun Vale.X64.InsMem.va_wp_Store64_buffer@tok () Term)


(declare-fun Tm_abs_47a12be7926f656e8f52c40fa43f337d (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_7ec0ce804d415c02efe9d55fb6ece5eb (Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsMem.va_wp_Store64_buffer>


; <Start encoding Vale.X64.InsMem.va_wpProof_Store64_buffer>


(declare-fun Vale.X64.InsMem.va_wpProof_Store64_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_603884ca2423b421f5b59a3e885649f2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_3a086f0c7115a9f054ecc0bd135339b6 () Term)
(declare-fun Vale.X64.InsMem.va_wpProof_Store64_buffer@tok () Term)


; </end encoding Vale.X64.InsMem.va_wpProof_Store64_buffer>


; <Start encoding Vale.X64.InsMem.va_quick_Store64_buffer>

(declare-fun Vale.X64.InsMem.va_quick_Store64_buffer (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d9be02f4debd7a5290a77580bc116da4 () Term)
(declare-fun Vale.X64.InsMem.va_quick_Store64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_quick_Store64_buffer>


; <Start encoding Vale.X64.InsMem.va_code_LoadBe64_buffer>

(declare-fun Vale.X64.InsMem.va_code_LoadBe64_buffer (Term Term Term Term Term) Term)

(declare-fun Vale.X64.InsMem.va_code_LoadBe64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_code_LoadBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_codegen_success_LoadBe64_buffer>

(declare-fun Vale.X64.InsMem.va_codegen_success_LoadBe64_buffer (Term Term Term Term Term) Term)

(declare-fun Vale.X64.InsMem.va_codegen_success_LoadBe64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_codegen_success_LoadBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_lemma_LoadBe64_buffer>

(declare-fun Vale.X64.InsMem.va_lemma_LoadBe64_buffer (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_8a2fff855e618e1868abdb3ab2928256 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_bb8d984d776db2b79544d80831c6782c () Term)
(declare-fun Vale.X64.InsMem.va_lemma_LoadBe64_buffer@tok () Term)


; </end encoding Vale.X64.InsMem.va_lemma_LoadBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_wp_LoadBe64_buffer>


(declare-fun Vale.X64.InsMem.va_wp_LoadBe64_buffer (Term Term Term Term Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsMem.va_wp_LoadBe64_buffer@tok () Term)


(declare-fun Tm_abs_cb75e6fdbd52ab4a799d23b2dfc00f68 (Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsMem.va_wp_LoadBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_wpProof_LoadBe64_buffer>


(declare-fun Vale.X64.InsMem.va_wpProof_LoadBe64_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_2ed7bfe1b62fac279d3d02f887ba19bc (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a0de9aecd69f6bd97c8440c3fc08053c () Term)
(declare-fun Vale.X64.InsMem.va_wpProof_LoadBe64_buffer@tok () Term)


; </end encoding Vale.X64.InsMem.va_wpProof_LoadBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_quick_LoadBe64_buffer>

(declare-fun Vale.X64.InsMem.va_quick_LoadBe64_buffer (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f98ce8d17f576dc0b1ce7a6881535f56 () Term)
(declare-fun Vale.X64.InsMem.va_quick_LoadBe64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_quick_LoadBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_code_StoreBe64_buffer>

(declare-fun Vale.X64.InsMem.va_code_StoreBe64_buffer (Term Term Term Term Term) Term)

(declare-fun Vale.X64.InsMem.va_code_StoreBe64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_code_StoreBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_codegen_success_StoreBe64_buffer>

(declare-fun Vale.X64.InsMem.va_codegen_success_StoreBe64_buffer (Term Term Term Term Term) Term)

(declare-fun Vale.X64.InsMem.va_codegen_success_StoreBe64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_codegen_success_StoreBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_lemma_StoreBe64_buffer>

(declare-fun Vale.X64.InsMem.va_lemma_StoreBe64_buffer (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_88299621411964fdecf33d128410387e (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_da0afa20045eafbd2d03c1cb0036e13e () Term)
(declare-fun Vale.X64.InsMem.va_lemma_StoreBe64_buffer@tok () Term)


; </end encoding Vale.X64.InsMem.va_lemma_StoreBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_wp_StoreBe64_buffer>


(declare-fun Vale.X64.InsMem.va_wp_StoreBe64_buffer (Term Term Term Term Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsMem.va_wp_StoreBe64_buffer@tok () Term)


(declare-fun Tm_abs_2a5f90a21b6d9ecf48d058207f63647a (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3ab07cce40ed3ee6784fe107cc6bdbc4 (Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsMem.va_wp_StoreBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_wpProof_StoreBe64_buffer>


(declare-fun Vale.X64.InsMem.va_wpProof_StoreBe64_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_df62bdbd8fe6a84916216348f63da9f5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c7b021da3925a1688b2cb7dc196b0fd4 () Term)
(declare-fun Vale.X64.InsMem.va_wpProof_StoreBe64_buffer@tok () Term)


; </end encoding Vale.X64.InsMem.va_wpProof_StoreBe64_buffer>


; <Start encoding Vale.X64.InsMem.va_quick_StoreBe64_buffer>

(declare-fun Vale.X64.InsMem.va_quick_StoreBe64_buffer (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9b93449b89708c944b407c300ca5e5ee () Term)
(declare-fun Vale.X64.InsMem.va_quick_StoreBe64_buffer@tok () Term)

; </end encoding Vale.X64.InsMem.va_quick_StoreBe64_buffer>


; End Externals for interface Vale.X64.InsMem


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.InsMem (351 decls; total size 24227)

;;; Start interface Vale.X64.InsVector

; Externals for interface Vale.X64.InsVector


; <Start encoding Vale.X64.InsVector.buffer128_write>

(declare-fun Vale.X64.InsVector.buffer128_write (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_2d86d62097b39a35e955ad85c36d027a () Term)
(declare-fun Vale.X64.InsVector.buffer128_write@tok () Term)


; </end encoding Vale.X64.InsVector.buffer128_write>


; <Start encoding Vale.X64.InsVector.va_code_Mem128_lemma>

(declare-fun Vale.X64.InsVector.va_code_Mem128_lemma (Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Mem128_lemma@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Mem128_lemma>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Mem128_lemma>

(declare-fun Vale.X64.InsVector.va_codegen_success_Mem128_lemma (Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Mem128_lemma@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Mem128_lemma>


; <Start encoding Vale.X64.InsVector.va_lemma_Mem128_lemma>

(declare-fun Vale.X64.InsVector.va_lemma_Mem128_lemma (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_3070833ad63c2d9af4addc8393937324 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_e965ecb1214f8ae90420831cd38fd818 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Mem128_lemma@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Mem128_lemma>


; <Start encoding Vale.X64.InsVector.va_wp_Mem128_lemma>


(declare-fun Vale.X64.InsVector.va_wp_Mem128_lemma (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_b49e40451487fe23fa90f92457e6f5f6 () Term)
(declare-fun Vale.X64.InsVector.va_wp_Mem128_lemma@tok () Term)


; </end encoding Vale.X64.InsVector.va_wp_Mem128_lemma>


; <Start encoding Vale.X64.InsVector.va_wpProof_Mem128_lemma>


(declare-fun Vale.X64.InsVector.va_wpProof_Mem128_lemma (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_1745863d8c5f22ab1f1ca08bddeac884 (Term Term) Term)
(declare-fun Tm_ghost_arrow_54718835cb4ee5f2808ee8736acaf255 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Mem128_lemma@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Mem128_lemma>


; <Start encoding Vale.X64.InsVector.va_quick_Mem128_lemma>

(declare-fun Vale.X64.InsVector.va_quick_Mem128_lemma (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_930b72579dd3cee2af0a4197e67a4cff () Term)
(declare-fun Vale.X64.InsVector.va_quick_Mem128_lemma@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Mem128_lemma>


; <Start encoding Vale.X64.InsVector.va_code_Paddd>

(declare-fun Vale.X64.InsVector.va_code_Paddd (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Paddd@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Paddd>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Paddd>

(declare-fun Vale.X64.InsVector.va_codegen_success_Paddd (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Paddd@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Paddd>


; <Start encoding Vale.X64.InsVector.va_lemma_Paddd>

(declare-fun Vale.X64.InsVector.va_lemma_Paddd (Term Term Term Term) Term)
(declare-fun Tm_refine_a8b35bc449d44c7c200903eaf085829c (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_bb1f061d347d515fc8c3544b04b6ea97 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Paddd@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Paddd>


; <Start encoding Vale.X64.InsVector.va_wp_Paddd>


(declare-fun Vale.X64.InsVector.va_wp_Paddd (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Paddd@tok () Term)


(declare-fun Tm_abs_5bb8949fccd55ad2c1a4b63fb5ce83a5 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_1b4dd0a6724c7ea716bb0fbe0e5d3027 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Paddd>


; <Start encoding Vale.X64.InsVector.va_wpProof_Paddd>


(declare-fun Vale.X64.InsVector.va_wpProof_Paddd (Term Term Term Term) Term)

(declare-fun Tm_refine_1550c77d49ef4bffa6588c98771aa272 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7f63c26bad2cfdb7553a24205fdc82c3 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Paddd@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Paddd>


; <Start encoding Vale.X64.InsVector.va_quick_Paddd>

(declare-fun Vale.X64.InsVector.va_quick_Paddd (Term Term) Term)
(declare-fun Tm_arrow_6aa2e80c57af2b3cc94e07afc125f1e6 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Paddd@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Paddd>


; <Start encoding Vale.X64.InsVector.va_code_VPaddd>

(declare-fun Vale.X64.InsVector.va_code_VPaddd (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_VPaddd@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_VPaddd>


; <Start encoding Vale.X64.InsVector.va_codegen_success_VPaddd>

(declare-fun Vale.X64.InsVector.va_codegen_success_VPaddd (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_VPaddd@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_VPaddd>


; <Start encoding Vale.X64.InsVector.va_lemma_VPaddd>

(declare-fun Vale.X64.InsVector.va_lemma_VPaddd (Term Term Term Term Term) Term)
(declare-fun Tm_refine_33d0ff04b72d8c2b3bfbacd399e2601b (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_955be4e207d100447b867154ce82ddca () Term)
(declare-fun Vale.X64.InsVector.va_lemma_VPaddd@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_VPaddd>


; <Start encoding Vale.X64.InsVector.va_wp_VPaddd>


(declare-fun Vale.X64.InsVector.va_wp_VPaddd (Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_VPaddd@tok () Term)


(declare-fun Tm_abs_870401bfd574271453d5df7ef4fbeda2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_6e2b215474859af3cef756d4a28cd5eb (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_VPaddd>


; <Start encoding Vale.X64.InsVector.va_wpProof_VPaddd>


(declare-fun Vale.X64.InsVector.va_wpProof_VPaddd (Term Term Term Term Term) Term)

(declare-fun Tm_refine_10cd8177b2bcfcf8ad924710eb322cfa (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_423e9171d1983dbd2b5b55c52901a149 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_VPaddd@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_VPaddd>


; <Start encoding Vale.X64.InsVector.va_quick_VPaddd>

(declare-fun Vale.X64.InsVector.va_quick_VPaddd (Term Term Term) Term)
(declare-fun Tm_arrow_76a8fc3eec91d7c5ec19f244abf56e16 () Term)
(declare-fun Vale.X64.InsVector.va_quick_VPaddd@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_VPaddd>


; <Start encoding Vale.X64.InsVector.va_code_Pxor>

(declare-fun Vale.X64.InsVector.va_code_Pxor (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Pxor@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pxor>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pxor>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pxor (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Pxor@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pxor>


; <Start encoding Vale.X64.InsVector.va_lemma_Pxor>

(declare-fun Vale.X64.InsVector.va_lemma_Pxor (Term Term Term Term) Term)
(declare-fun Tm_refine_893f00e0738819ccf1a3d9b37f023b79 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_3f8750ba4c0eaa7fe6e020ee9f5e97a6 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pxor@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pxor>


; <Start encoding Vale.X64.InsVector.va_wp_Pxor>


(declare-fun Vale.X64.InsVector.va_wp_Pxor (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Pxor@tok () Term)


(declare-fun Tm_abs_b608d6950b19f07de335c59e7a91544c (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Pxor>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pxor>


(declare-fun Vale.X64.InsVector.va_wpProof_Pxor (Term Term Term Term) Term)

(declare-fun Tm_refine_99fac0b4cbba4e41be2cc0bb7ec6a465 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8cd78d7334b16fd5be5d3cd7bfb1b3d4 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pxor@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pxor>


; <Start encoding Vale.X64.InsVector.va_quick_Pxor>

(declare-fun Vale.X64.InsVector.va_quick_Pxor (Term Term) Term)
(declare-fun Tm_arrow_4900e9720cbe5d12b94096323074c8dd () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pxor@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pxor>


; <Start encoding Vale.X64.InsVector.va_code_Pand>

(declare-fun Vale.X64.InsVector.va_code_Pand (Term Term) Term)
(declare-fun Tm_arrow_add9a5a0f101149244e6c8dff03ee3fd () Term)
(declare-fun Vale.X64.InsVector.va_code_Pand@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pand>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pand>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pand (Term Term) Term)
(declare-fun Tm_arrow_88ff494697430b2ee2cde1d5c3a88bd9 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_Pand@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pand>


; <Start encoding Vale.X64.InsVector.va_lemma_Pand>

(declare-fun Vale.X64.InsVector.va_lemma_Pand (Term Term Term Term) Term)
(declare-fun Tm_refine_3dac90185d99b1d3235d67aaae090332 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8802bb53433f65af5aef5d2e6dbc7e2a () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pand@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pand>


; <Start encoding Vale.X64.InsVector.va_wp_Pand>


(declare-fun Vale.X64.InsVector.va_wp_Pand (Term Term Term Term) Term)

(declare-fun Tm_arrow_3a86f6fe5da592b44030fafbe09b3e7b () Term)
(declare-fun Vale.X64.InsVector.va_wp_Pand@tok () Term)


(declare-fun Tm_abs_f3d20aa8a9ec7aa9bcba85cddb2f2279 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Pand>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pand>


(declare-fun Vale.X64.InsVector.va_wpProof_Pand (Term Term Term Term) Term)

(declare-fun Tm_refine_586ab59432020b9407995f392445fa33 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_2656de11b0d4f920acdcb9cb687ca5c9 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pand@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pand>


; <Start encoding Vale.X64.InsVector.va_quick_Pand>

(declare-fun Vale.X64.InsVector.va_quick_Pand (Term Term) Term)
(declare-fun Tm_arrow_b5a3a1a36b048025a8764bf3c754f298 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pand@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pand>


; <Start encoding Vale.X64.InsVector.va_code_VPxor>

(declare-fun Vale.X64.InsVector.va_code_VPxor (Term Term Term) Term)
(declare-fun Tm_arrow_f9e3e2aa3c22211ca24b4f683d22c74c () Term)
(declare-fun Vale.X64.InsVector.va_code_VPxor@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_VPxor>


; <Start encoding Vale.X64.InsVector.va_codegen_success_VPxor>

(declare-fun Vale.X64.InsVector.va_codegen_success_VPxor (Term Term Term) Term)
(declare-fun Tm_arrow_99608217779304b3be7f399ae578e046 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_VPxor@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_VPxor>


; <Start encoding Vale.X64.InsVector.va_lemma_VPxor>

(declare-fun Vale.X64.InsVector.va_lemma_VPxor (Term Term Term Term Term) Term)
(declare-fun Tm_refine_91484b7bb7d5cea523aeeb752fd9a1ac (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_451be233ddc411d684079470d823cb65 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_VPxor@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_VPxor>


; <Start encoding Vale.X64.InsVector.va_wp_VPxor>


(declare-fun Vale.X64.InsVector.va_wp_VPxor (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6fabdf301f8facfe457e83ca8efb7801 () Term)
(declare-fun Vale.X64.InsVector.va_wp_VPxor@tok () Term)


(declare-fun Tm_abs_40547b0359da78a7cc4fc8c425f281c6 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_VPxor>


; <Start encoding Vale.X64.InsVector.va_wpProof_VPxor>


(declare-fun Vale.X64.InsVector.va_wpProof_VPxor (Term Term Term Term Term) Term)

(declare-fun Tm_refine_2a3f8823cfe199af3cdb68a6fb2982e2 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8bc3cd2346b10528de65aabfdf657df2 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_VPxor@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_VPxor>


; <Start encoding Vale.X64.InsVector.va_quick_VPxor>

(declare-fun Vale.X64.InsVector.va_quick_VPxor (Term Term Term) Term)
(declare-fun Tm_arrow_7371fdd0c26463a3f5ec13e7d557cd14 () Term)
(declare-fun Vale.X64.InsVector.va_quick_VPxor@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_VPxor>


; <Start encoding Vale.X64.InsVector.va_code_Pslld>

(declare-fun Vale.X64.InsVector.va_code_Pslld (Term Term) Term)
(declare-fun Tm_arrow_be1baa8b591e41fe53eda5418ed13c01 () Term)
(declare-fun Vale.X64.InsVector.va_code_Pslld@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pslld>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pslld>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pslld (Term Term) Term)
(declare-fun Tm_arrow_2c6319efd988880bf748515e89b2e8fe () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_Pslld@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pslld>


; <Start encoding Vale.X64.InsVector.va_lemma_Pslld>

(declare-fun Vale.X64.InsVector.va_lemma_Pslld (Term Term Term Term) Term)
(declare-fun Tm_refine_74f7ff8c7b981b758a862abdd07bd5c5 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a415a9814be52efae6ef621eb71906aa () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pslld@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pslld>


; <Start encoding Vale.X64.InsVector.va_wp_Pslld>


(declare-fun Vale.X64.InsVector.va_wp_Pslld (Term Term Term Term) Term)

(declare-fun Tm_arrow_678942db16612a58fd63c9bfc79b41ba () Term)
(declare-fun Vale.X64.InsVector.va_wp_Pslld@tok () Term)


(declare-fun Tm_abs_695ac160aaafb947b75ce88522d0dff1 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Pslld>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pslld>


(declare-fun Vale.X64.InsVector.va_wpProof_Pslld (Term Term Term Term) Term)

(declare-fun Tm_refine_824e5fce68e0c31a4c0c0f81fe1ef7fd (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c372c52d612158ce7d2ac2ad3433068b () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pslld@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pslld>


; <Start encoding Vale.X64.InsVector.va_quick_Pslld>

(declare-fun Vale.X64.InsVector.va_quick_Pslld (Term Term) Term)
(declare-fun Tm_arrow_300c60fe37931c8b39a26b9ae0f3b638 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pslld@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pslld>


; <Start encoding Vale.X64.InsVector.va_code_Psrld>

(declare-fun Vale.X64.InsVector.va_code_Psrld (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Psrld@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Psrld>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Psrld>

(declare-fun Vale.X64.InsVector.va_codegen_success_Psrld (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Psrld@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Psrld>


; <Start encoding Vale.X64.InsVector.va_lemma_Psrld>

(declare-fun Vale.X64.InsVector.va_lemma_Psrld (Term Term Term Term) Term)
(declare-fun Tm_refine_42c12cfadf99866536b77f1949a5f89b (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4e42c13eff8cf53f3f6d03f3825c9231 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Psrld@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Psrld>


; <Start encoding Vale.X64.InsVector.va_wp_Psrld>


(declare-fun Vale.X64.InsVector.va_wp_Psrld (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Psrld@tok () Term)


(declare-fun Tm_abs_158a669de12041cd373ed167654c8a9d (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Psrld>


; <Start encoding Vale.X64.InsVector.va_wpProof_Psrld>


(declare-fun Vale.X64.InsVector.va_wpProof_Psrld (Term Term Term Term) Term)

(declare-fun Tm_refine_02aa362c0bf5036acae919d13975d0b0 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_22a0b89f1aecc4a46b5c1dcd9a413215 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Psrld@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Psrld>


; <Start encoding Vale.X64.InsVector.va_quick_Psrld>

(declare-fun Vale.X64.InsVector.va_quick_Psrld (Term Term) Term)
(declare-fun Tm_arrow_30cdb07dec05a9f70117b5b9322adb03 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Psrld@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Psrld>


; <Start encoding Vale.X64.InsVector.va_code_Palignr4>

(declare-fun Vale.X64.InsVector.va_code_Palignr4 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Palignr4@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Palignr4>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Palignr4>

(declare-fun Vale.X64.InsVector.va_codegen_success_Palignr4 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Palignr4@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Palignr4>


; <Start encoding Vale.X64.InsVector.va_lemma_Palignr4>

(declare-fun Vale.X64.InsVector.va_lemma_Palignr4 (Term Term Term Term) Term)
(declare-fun Tm_refine_aa7cf56ce19021d8475e3475e99699c5 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d8041b7aa61a6b92d60ee7dc7f2cb746 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Palignr4@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Palignr4>


; <Start encoding Vale.X64.InsVector.va_wp_Palignr4>


(declare-fun Vale.X64.InsVector.va_wp_Palignr4 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Palignr4@tok () Term)


(declare-fun Tm_abs_344b65ac27cc0f83b398c3a10b71e9dc (Term Term Term Term Term) Term)

(declare-fun Tm_abs_3803854a7c7f0cb239d88021a21e50a9 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Palignr4>


; <Start encoding Vale.X64.InsVector.va_wpProof_Palignr4>


(declare-fun Vale.X64.InsVector.va_wpProof_Palignr4 (Term Term Term Term) Term)

(declare-fun Tm_refine_93b3f586346e2a3a6669374dbd224450 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_73e2c3908e5f1c6a18c36cafbc29325e () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Palignr4@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Palignr4>


; <Start encoding Vale.X64.InsVector.va_quick_Palignr4>

(declare-fun Vale.X64.InsVector.va_quick_Palignr4 (Term Term) Term)
(declare-fun Tm_arrow_5f20ab747d1994a47caf3729a3d33e19 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Palignr4@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Palignr4>


; <Start encoding Vale.X64.InsVector.va_code_Palignr8>

(declare-fun Vale.X64.InsVector.va_code_Palignr8 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Palignr8@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Palignr8>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Palignr8>

(declare-fun Vale.X64.InsVector.va_codegen_success_Palignr8 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Palignr8@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Palignr8>


; <Start encoding Vale.X64.InsVector.va_lemma_Palignr8>

(declare-fun Vale.X64.InsVector.va_lemma_Palignr8 (Term Term Term Term) Term)
(declare-fun Tm_refine_93b5f4bf090ef706c26e8e1fbb518501 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7e9db81a5bd95034bc17b9977ff5bb56 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Palignr8@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Palignr8>


; <Start encoding Vale.X64.InsVector.va_wp_Palignr8>


(declare-fun Vale.X64.InsVector.va_wp_Palignr8 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Palignr8@tok () Term)


(declare-fun Tm_abs_195e28981b47f5826f245f0b351c5599 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_f1394887d5099f89b0ec7fb26b5b2362 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Palignr8>


; <Start encoding Vale.X64.InsVector.va_wpProof_Palignr8>


(declare-fun Vale.X64.InsVector.va_wpProof_Palignr8 (Term Term Term Term) Term)

(declare-fun Tm_refine_7c9a249a94302e6ff050b23f9c830929 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_b03268b1f78a0e516e6d097e4381894e () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Palignr8@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Palignr8>


; <Start encoding Vale.X64.InsVector.va_quick_Palignr8>

(declare-fun Vale.X64.InsVector.va_quick_Palignr8 (Term Term) Term)
(declare-fun Tm_arrow_05404af972718577905b8f6c40c99e0d () Term)
(declare-fun Vale.X64.InsVector.va_quick_Palignr8@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Palignr8>


; <Start encoding Vale.X64.InsVector.va_code_VPalignr8>

(declare-fun Vale.X64.InsVector.va_code_VPalignr8 (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_VPalignr8@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_VPalignr8>


; <Start encoding Vale.X64.InsVector.va_codegen_success_VPalignr8>

(declare-fun Vale.X64.InsVector.va_codegen_success_VPalignr8 (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_VPalignr8@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_VPalignr8>


; <Start encoding Vale.X64.InsVector.va_lemma_VPalignr8>

(declare-fun Vale.X64.InsVector.va_lemma_VPalignr8 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_a08d99b8f998c499a843048c7697b3b9 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_77c73eff7fa62c9e055277f6148e2ed1 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_VPalignr8@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_VPalignr8>


; <Start encoding Vale.X64.InsVector.va_wp_VPalignr8>


(declare-fun Vale.X64.InsVector.va_wp_VPalignr8 (Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_VPalignr8@tok () Term)


(declare-fun Tm_abs_3531006287a6f472f6fab6c1a1f4f9c1 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_87edd5b5bc840d4d59f10f73bb3af641 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_VPalignr8>


; <Start encoding Vale.X64.InsVector.va_wpProof_VPalignr8>


(declare-fun Vale.X64.InsVector.va_wpProof_VPalignr8 (Term Term Term Term Term) Term)

(declare-fun Tm_refine_49068d6433aa6a3331501ed4765fb54a (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7d98c3f54ef74d81b2de2fb886b5499b () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_VPalignr8@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_VPalignr8>


; <Start encoding Vale.X64.InsVector.va_quick_VPalignr8>

(declare-fun Vale.X64.InsVector.va_quick_VPalignr8 (Term Term Term) Term)
(declare-fun Tm_arrow_2aa6877eb15e15a3e69b91f90322fab5 () Term)
(declare-fun Vale.X64.InsVector.va_quick_VPalignr8@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_VPalignr8>


; <Start encoding Vale.X64.InsVector.va_code_Shufpd>

(declare-fun Vale.X64.InsVector.va_code_Shufpd (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Shufpd@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Shufpd>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Shufpd>

(declare-fun Vale.X64.InsVector.va_codegen_success_Shufpd (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Shufpd@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Shufpd>


; <Start encoding Vale.X64.InsVector.va_lemma_Shufpd>

(declare-fun Vale.X64.InsVector.va_lemma_Shufpd (Term Term Term Term Term) Term)
(declare-fun Tm_refine_97b76b379d98d281f33f7f3ae479bf80 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_6160ef1ad1d192fc90e9d464c61496df () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Shufpd@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Shufpd>


; <Start encoding Vale.X64.InsVector.va_wp_Shufpd>


(declare-fun Vale.X64.InsVector.va_wp_Shufpd (Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Shufpd@tok () Term)

(declare-fun Tm_refine_df4497a17ab163df9a45003453f1a10b (Term) Term)

(declare-fun Tm_ghost_arrow_1a7c9fec042136bc6868afc9f4964967 (Term) Term)
(declare-fun Tm_abs_8547df345ea9a1d19ba7d116b552280b (Term Term Term) Term)
(declare-fun Tm_refine_c5d4cd325c8a84fb4bfae90214ef60fd (Term) Term)

(declare-fun Tm_ghost_arrow_38462ae98d1e6fb6ee23e46a4e28c0d1 (Term) Term)
(declare-fun Tm_abs_ecbc14effaca91318d747b2939281179 (Term Term Term) Term)



(declare-fun Tm_abs_44a1d210dcf9499020c852291e57a6d9 (Term Term Term) Term)



(declare-fun Tm_abs_a51c0bc857a0d6ef1929d8d0fe6a5863 (Term Term Term) Term)
(declare-fun Tm_refine_f61fec5734d26c5ed5fbca25292147f6 (Term) Term)

(declare-fun Tm_ghost_arrow_9d3c0ee58a46e779ee5baced8d1cbc80 (Term) Term)
(declare-fun Tm_abs_accfad5b2f2526dab0c2beb9ffcfa86f (Term Term Term) Term)
(declare-fun Tm_refine_b04694df72070d4cf38f8af2cc2b36a3 (Term) Term)

(declare-fun Tm_ghost_arrow_c383e1dc3e4962dcbb186701b14fcfd7 (Term) Term)
(declare-fun Tm_abs_1aaf7a3ff67f76b6c6b8c91379d06c48 (Term Term Term) Term)



(declare-fun Tm_abs_f841e37574bb140b5a86cafde0fce84a (Term Term Term) Term)



(declare-fun Tm_abs_c3f1b4062266969befcb46ff1d0af2e6 (Term Term Term) Term)

(declare-fun Tm_abs_2a347db6afb2f2994de3c7a16496d8a6 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_34b044b53385063d95127d48c5c168ff (Term Term Term Term Term) Term)

































































; </end encoding Vale.X64.InsVector.va_wp_Shufpd>


; <Start encoding Vale.X64.InsVector.va_wpProof_Shufpd>


(declare-fun Vale.X64.InsVector.va_wpProof_Shufpd (Term Term Term Term Term) Term)

(declare-fun Tm_refine_1113264b98559d0856d72562545b7272 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8ac1cec64135c20e2974dba314c109d9 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Shufpd@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Shufpd>


; <Start encoding Vale.X64.InsVector.va_quick_Shufpd>

(declare-fun Vale.X64.InsVector.va_quick_Shufpd (Term Term Term) Term)
(declare-fun Tm_arrow_7d836c4e9171e127b79c08bbd67fdf05 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Shufpd@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Shufpd>


; <Start encoding Vale.X64.InsVector.va_code_VShufpd>

(declare-fun Vale.X64.InsVector.va_code_VShufpd (Term Term Term Term) Term)
(declare-fun Tm_arrow_477927e7aed30dbe8732c0f076f868de () Term)
(declare-fun Vale.X64.InsVector.va_code_VShufpd@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_VShufpd>


; <Start encoding Vale.X64.InsVector.va_codegen_success_VShufpd>

(declare-fun Vale.X64.InsVector.va_codegen_success_VShufpd (Term Term Term Term) Term)
(declare-fun Tm_arrow_981a218eecb5e322f84833961b34c315 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_VShufpd@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_VShufpd>


; <Start encoding Vale.X64.InsVector.va_lemma_VShufpd>

(declare-fun Vale.X64.InsVector.va_lemma_VShufpd (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_9a8d9e45a1152b432ce425bff90bebc8 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_1c3dd08ca104e58d6845c4413a07c7b5 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_VShufpd@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_VShufpd>


; <Start encoding Vale.X64.InsVector.va_wp_VShufpd>


(declare-fun Vale.X64.InsVector.va_wp_VShufpd (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_9f80bb417171461ca746159871199177 () Term)
(declare-fun Vale.X64.InsVector.va_wp_VShufpd@tok () Term)


































(declare-fun Tm_abs_2a25c0724e4de16c6335a0385e22366e (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_1f0d53c8054881491e01f47dbbb5f95d (Term Term Term Term Term Term) Term)

































































; </end encoding Vale.X64.InsVector.va_wp_VShufpd>


; <Start encoding Vale.X64.InsVector.va_wpProof_VShufpd>


(declare-fun Vale.X64.InsVector.va_wpProof_VShufpd (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_5d8c823bf872bd48934d8aec92c31a94 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_2aec69a0d0e7aa3446ab72ada5e5ebff () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_VShufpd@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_VShufpd>


; <Start encoding Vale.X64.InsVector.va_quick_VShufpd>

(declare-fun Vale.X64.InsVector.va_quick_VShufpd (Term Term Term Term) Term)
(declare-fun Tm_arrow_517e8db4abd09066c19d8a29e1e56487 () Term)
(declare-fun Vale.X64.InsVector.va_quick_VShufpd@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_VShufpd>


; <Start encoding Vale.X64.InsVector.va_code_Pshufb>

(declare-fun Vale.X64.InsVector.va_code_Pshufb (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Pshufb@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pshufb>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pshufb>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pshufb (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Pshufb@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pshufb>


; <Start encoding Vale.X64.InsVector.va_lemma_Pshufb>

(declare-fun Vale.X64.InsVector.va_lemma_Pshufb (Term Term Term Term) Term)
(declare-fun Tm_refine_4bd5edb11f2c1d2d4b26a3643c1b429c (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_769328a318767cbeb429b617153eb460 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pshufb@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pshufb>


; <Start encoding Vale.X64.InsVector.va_wp_Pshufb>


(declare-fun Vale.X64.InsVector.va_wp_Pshufb (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Pshufb@tok () Term)


(declare-fun Tm_abs_e59a1bd428de272a19d56e5f70c91559 (Term Term Term Term) Term)

(declare-fun Tm_abs_bec13f4d089c6486fd9a2f5f59821491 (Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Pshufb>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pshufb>


(declare-fun Vale.X64.InsVector.va_wpProof_Pshufb (Term Term Term Term) Term)

(declare-fun Tm_refine_c4fbd4ca21acabee73117ab729f4827d (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_384858bfed8627abb511cd3b52b796ea () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pshufb@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pshufb>


; <Start encoding Vale.X64.InsVector.va_quick_Pshufb>

(declare-fun Vale.X64.InsVector.va_quick_Pshufb (Term Term) Term)
(declare-fun Tm_arrow_cfdec54fdf02ae2191539a73fcb906ea () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pshufb@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pshufb>


; <Start encoding Vale.X64.InsVector.va_code_VPshufb>

(declare-fun Vale.X64.InsVector.va_code_VPshufb (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_VPshufb@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_VPshufb>


; <Start encoding Vale.X64.InsVector.va_codegen_success_VPshufb>

(declare-fun Vale.X64.InsVector.va_codegen_success_VPshufb (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_VPshufb@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_VPshufb>


; <Start encoding Vale.X64.InsVector.va_lemma_VPshufb>

(declare-fun Vale.X64.InsVector.va_lemma_VPshufb (Term Term Term Term Term) Term)
(declare-fun Tm_refine_e42b00d0d0bb2f8c5de48a7a4b6cc796 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5f1c3e26822ceda5a43019322195fa7b () Term)
(declare-fun Vale.X64.InsVector.va_lemma_VPshufb@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_VPshufb>


; <Start encoding Vale.X64.InsVector.va_wp_VPshufb>


(declare-fun Vale.X64.InsVector.va_wp_VPshufb (Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_VPshufb@tok () Term)


(declare-fun Tm_abs_38cfc8199eebc63778d488286476caa6 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_2fe4c932d3567bfd02f6eb53f9513383 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_VPshufb>


; <Start encoding Vale.X64.InsVector.va_wpProof_VPshufb>


(declare-fun Vale.X64.InsVector.va_wpProof_VPshufb (Term Term Term Term Term) Term)

(declare-fun Tm_refine_4b5626aa4782f3ec40432c86d1036291 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_fed771473719c25319d45c9b55a3bdc5 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_VPshufb@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_VPshufb>


; <Start encoding Vale.X64.InsVector.va_quick_VPshufb>

(declare-fun Vale.X64.InsVector.va_quick_VPshufb (Term Term Term) Term)
(declare-fun Tm_arrow_bd3740c58b14e43a315ebcc137a061bb () Term)
(declare-fun Vale.X64.InsVector.va_quick_VPshufb@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_VPshufb>


; <Start encoding Vale.X64.InsVector.va_code_PshufbStable>

(declare-fun Vale.X64.InsVector.va_code_PshufbStable (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_PshufbStable@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_PshufbStable>


; <Start encoding Vale.X64.InsVector.va_codegen_success_PshufbStable>

(declare-fun Vale.X64.InsVector.va_codegen_success_PshufbStable (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_PshufbStable@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_PshufbStable>


; <Start encoding Vale.X64.InsVector.va_lemma_PshufbStable>

(declare-fun Vale.X64.InsVector.va_lemma_PshufbStable (Term Term Term Term) Term)
(declare-fun Tm_refine_c15bf1d648e1a8a65f33f38232a9452e (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_0bde7f825ad6e2a2ca022a4112dac415 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_PshufbStable@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_PshufbStable>


; <Start encoding Vale.X64.InsVector.va_wp_PshufbStable>


(declare-fun Vale.X64.InsVector.va_wp_PshufbStable (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_PshufbStable@tok () Term)


(declare-fun Tm_abs_f1098147be8ed2de9463f14f33c8fb89 (Term Term Term Term) Term)

(declare-fun Tm_abs_26fee0ae044a2a99266b504707e177c7 (Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_PshufbStable>


; <Start encoding Vale.X64.InsVector.va_wpProof_PshufbStable>


(declare-fun Vale.X64.InsVector.va_wpProof_PshufbStable (Term Term Term Term) Term)

(declare-fun Tm_refine_c85f52626ced48c153a38689eed3997b (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_2aaee96289595b14c9d4ee7e84fadbb9 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_PshufbStable@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_PshufbStable>


; <Start encoding Vale.X64.InsVector.va_quick_PshufbStable>

(declare-fun Vale.X64.InsVector.va_quick_PshufbStable (Term Term) Term)
(declare-fun Tm_arrow_4245f4fe41b46a924315858f0ea4c21e () Term)
(declare-fun Vale.X64.InsVector.va_quick_PshufbStable@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_PshufbStable>


; <Start encoding Vale.X64.InsVector.va_code_PshufbDup>

(declare-fun Vale.X64.InsVector.va_code_PshufbDup (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_PshufbDup@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_PshufbDup>


; <Start encoding Vale.X64.InsVector.va_codegen_success_PshufbDup>

(declare-fun Vale.X64.InsVector.va_codegen_success_PshufbDup (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_PshufbDup@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_PshufbDup>


; <Start encoding Vale.X64.InsVector.va_lemma_PshufbDup>

(declare-fun Vale.X64.InsVector.va_lemma_PshufbDup (Term Term Term Term) Term)
(declare-fun Tm_refine_d7c9dbb7ba19d83f5a99ee3194f97739 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_98dde61382f908840deb7f70be19228e () Term)
(declare-fun Vale.X64.InsVector.va_lemma_PshufbDup@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_PshufbDup>


; <Start encoding Vale.X64.InsVector.va_wp_PshufbDup>


(declare-fun Vale.X64.InsVector.va_wp_PshufbDup (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_PshufbDup@tok () Term)


(declare-fun Tm_abs_08cc6bce44665869b4c2788417501334 (Term Term Term Term) Term)

(declare-fun Tm_abs_4959b14e442bde158bbea94dc3fb26f1 (Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_PshufbDup>


; <Start encoding Vale.X64.InsVector.va_wpProof_PshufbDup>


(declare-fun Vale.X64.InsVector.va_wpProof_PshufbDup (Term Term Term Term) Term)

(declare-fun Tm_refine_104e5ae0c99b5c4c61b54e3e928485e4 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_2fa3c381030b1effda733340778ad02f () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_PshufbDup@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_PshufbDup>


; <Start encoding Vale.X64.InsVector.va_quick_PshufbDup>

(declare-fun Vale.X64.InsVector.va_quick_PshufbDup (Term Term) Term)
(declare-fun Tm_arrow_08a411b9d71bcc5f56708b73cc57ffff () Term)
(declare-fun Vale.X64.InsVector.va_quick_PshufbDup@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_PshufbDup>


; <Start encoding Vale.X64.InsVector.va_code_Pshufb64>

(declare-fun Vale.X64.InsVector.va_code_Pshufb64 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Pshufb64@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pshufb64>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pshufb64>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pshufb64 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Pshufb64@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pshufb64>


; <Start encoding Vale.X64.InsVector.va_lemma_Pshufb64>

(declare-fun Vale.X64.InsVector.va_lemma_Pshufb64 (Term Term Term Term) Term)
(declare-fun Tm_refine_311505aa1a5ed9baf87baa6727e24db8 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a2367c040eff7e28a4eaa16ac71f0c26 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pshufb64@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pshufb64>


; <Start encoding Vale.X64.InsVector.va_wp_Pshufb64>


(declare-fun Vale.X64.InsVector.va_wp_Pshufb64 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Pshufb64@tok () Term)


(declare-fun Tm_abs_5e59af3f4f0c175feb36814422f9cbf8 (Term Term Term Term) Term)

(declare-fun Tm_abs_ce5c33dc8a356927025f8e4435de1ad2 (Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Pshufb64>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pshufb64>


(declare-fun Vale.X64.InsVector.va_wpProof_Pshufb64 (Term Term Term Term) Term)

(declare-fun Tm_refine_e67e8052b3f36a79a4c46788abfd6775 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_343858b070d556b08783a15d670eae7f () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pshufb64@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pshufb64>


; <Start encoding Vale.X64.InsVector.va_quick_Pshufb64>

(declare-fun Vale.X64.InsVector.va_quick_Pshufb64 (Term Term) Term)
(declare-fun Tm_arrow_42ceca0f7f6cc001477bd105df332895 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pshufb64@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pshufb64>


; <Start encoding Vale.X64.InsVector.va_code_Pshufd>

(declare-fun Vale.X64.InsVector.va_code_Pshufd (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Pshufd@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pshufd>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pshufd>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pshufd (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Pshufd@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pshufd>


; <Start encoding Vale.X64.InsVector.va_lemma_Pshufd>

(declare-fun Vale.X64.InsVector.va_lemma_Pshufd (Term Term Term Term Term) Term)
(declare-fun Tm_refine_3a01dc07d538896d3815e344d4ce55db (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_3bde23435ffa5f6d1a9cda35d599109a () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pshufd@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pshufd>


; <Start encoding Vale.X64.InsVector.va_wp_Pshufd>


(declare-fun Vale.X64.InsVector.va_wp_Pshufd (Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Pshufd@tok () Term)


(declare-fun Tm_abs_59c5bf288e4464a2507f26b175009e1f (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Pshufd>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pshufd>


(declare-fun Vale.X64.InsVector.va_wpProof_Pshufd (Term Term Term Term Term) Term)

(declare-fun Tm_refine_4495477500440c2a82ca0e595cbc6b79 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7c8a53d7e328aa6f895178126303d154 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pshufd@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pshufd>


; <Start encoding Vale.X64.InsVector.va_quick_Pshufd>

(declare-fun Vale.X64.InsVector.va_quick_Pshufd (Term Term Term) Term)
(declare-fun Tm_arrow_9dfb2d8ae3d3f98f16c3559952b64ce1 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pshufd@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pshufd>


; <Start encoding Vale.X64.InsVector.va_code_Pcmpeqd>

(declare-fun Vale.X64.InsVector.va_code_Pcmpeqd (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Pcmpeqd@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pcmpeqd>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pcmpeqd>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pcmpeqd (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Pcmpeqd@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pcmpeqd>


; <Start encoding Vale.X64.InsVector.va_lemma_Pcmpeqd>

(declare-fun Vale.X64.InsVector.va_lemma_Pcmpeqd (Term Term Term Term) Term)
(declare-fun Tm_refine_8e0e1bb1f543a10eac9887f1eceddb97 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_866646b89aa18dcd634b67a06a94afb2 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pcmpeqd@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pcmpeqd>


; <Start encoding Vale.X64.InsVector.va_wp_Pcmpeqd>


(declare-fun Vale.X64.InsVector.va_wp_Pcmpeqd (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Pcmpeqd@tok () Term)

(declare-fun Tm_refine_91f20499f92ee267180ec88c530c9463 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c54c0b45e8b278ad2e797f374ea9678e (Term Term Term) Term)
(declare-fun Tm_abs_2f6acf51d7aa232b5598822388ce5bc4 (Term Term Term) Term)
(declare-fun Tm_refine_555e210c996b71eeb15d49efd3ed3c32 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_620116801fc2d1240c9e79fa8de16e8b (Term Term Term) Term)
(declare-fun Tm_abs_74a09f6c4dec66416dabd66e39a59ccd (Term Term Term) Term)
(declare-fun Tm_refine_a310dbfd4b89c8d166d7b57049c28c38 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9706a8a8c38409f89c2c1076be78b17 (Term Term Term) Term)
(declare-fun Tm_abs_622687ae6d8eae13cda104371b7ab41b (Term Term Term) Term)
(declare-fun Tm_refine_191bb294ff5f44f4bbd2d5fc50c4d487 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_99821fdaf9a294803eea340daa9fb193 (Term Term Term) Term)
(declare-fun Tm_abs_d7459458ffbef2b7e2e0428d6325562a (Term Term Term) Term)
(declare-fun Tm_refine_e2e95d7e7255548c0772e8384393d77a (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_08d2b2640308100414371c6819389ea2 (Term Term Term) Term)
(declare-fun Tm_abs_262a5f17710225e0b3c94a9572fe18b9 (Term Term Term) Term)
(declare-fun Tm_refine_5e84d9870a4b2a0769f9bf6ca3602eb4 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d2db8096b7fdcda3fd47cf07b77e55d8 (Term Term Term) Term)
(declare-fun Tm_abs_c40a6b972a14befd4ffe542bbae86d4a (Term Term Term) Term)
(declare-fun Tm_refine_af0f014ec7619ca914714a113e569301 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_787f91365db6523f6d4c921ce2b4a319 (Term Term Term) Term)
(declare-fun Tm_abs_85480a653b709e89cb2b9a42aa163d1c (Term Term Term) Term)
(declare-fun Tm_refine_f3374214fcdaeff2927e24c31a89d3f1 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_39226f421c10c268a853d81180bcec40 (Term Term Term) Term)
(declare-fun Tm_abs_8d7c8ed27a8759d93726fcec20ed5c83 (Term Term Term) Term)

(declare-fun Tm_abs_dadeb8a48d2fa1e75780cfe68abc2e94 (Term Term Term Term) Term)

































































; </end encoding Vale.X64.InsVector.va_wp_Pcmpeqd>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pcmpeqd>


(declare-fun Vale.X64.InsVector.va_wpProof_Pcmpeqd (Term Term Term Term) Term)

(declare-fun Tm_refine_5f4aca552735a872b64ddce629e5d28c (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_e86bece58709e7a9adc242fa7f2fafb3 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pcmpeqd@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pcmpeqd>


; <Start encoding Vale.X64.InsVector.va_quick_Pcmpeqd>

(declare-fun Vale.X64.InsVector.va_quick_Pcmpeqd (Term Term) Term)
(declare-fun Tm_arrow_5db715aa830ec719cede2cfb4a6f1c74 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pcmpeqd@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pcmpeqd>


; <Start encoding Vale.X64.InsVector.va_code_Pextrq>

(declare-fun Vale.X64.InsVector.va_code_Pextrq (Term Term Term) Term)
(declare-fun Tm_arrow_f53b7f54ae72e01506b16d80f5778a38 () Term)
(declare-fun Vale.X64.InsVector.va_code_Pextrq@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pextrq>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pextrq>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pextrq (Term Term Term) Term)
(declare-fun Tm_arrow_155c32c32dc0439d6360c89ec6f9a7f4 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_Pextrq@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pextrq>


; <Start encoding Vale.X64.InsVector.va_lemma_Pextrq>

(declare-fun Vale.X64.InsVector.va_lemma_Pextrq (Term Term Term Term Term) Term)
(declare-fun Tm_refine_b76a36dbf38d7640a32d92a4a0362f94 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_1030750f38682a1ddb88fcaec474cad4 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pextrq@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pextrq>


; <Start encoding Vale.X64.InsVector.va_wp_Pextrq>


(declare-fun Vale.X64.InsVector.va_wp_Pextrq (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_914a65d61b42551af693c419a34f6ae7 () Term)
(declare-fun Vale.X64.InsVector.va_wp_Pextrq@tok () Term)

(declare-fun Tm_refine_0cc3b8bc4390a8152398abb544530a43 (Term) Term)

(declare-fun Tm_ghost_arrow_b18c89f0ec3b67b6807014eb22b0b8e7 (Term) Term)
(declare-fun Tm_abs_a98cf6f56cc3c621c4114aab567f0987 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_faaff899bc0282da22e68be19d632202 (Term) Term)

(declare-fun Tm_ghost_arrow_7abfcb58d5842cd5d76dd4388c8fdaa2 (Term) Term)
(declare-fun Tm_abs_cd11cae1fe747f17c9465fa022f3e846 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_db83c666d59e6b576f83dedab31285b8 (Term Term Term Term Term) Term)

















; </end encoding Vale.X64.InsVector.va_wp_Pextrq>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pextrq>


(declare-fun Vale.X64.InsVector.va_wpProof_Pextrq (Term Term Term Term Term) Term)

(declare-fun Tm_refine_64082107b8831446e86dec6a60ce11b8 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_9b5c46605a527656fe456c6a21c593a4 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pextrq@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pextrq>


; <Start encoding Vale.X64.InsVector.va_quick_Pextrq>

(declare-fun Vale.X64.InsVector.va_quick_Pextrq (Term Term Term) Term)
(declare-fun Tm_arrow_175a24b9c52a970ca49d03925604d2bc () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pextrq@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pextrq>


; <Start encoding Vale.X64.InsVector.va_code_Pinsrd>

(declare-fun Vale.X64.InsVector.va_code_Pinsrd (Term Term Term) Term)
(declare-fun Tm_arrow_fd62eae583fb35a26973d1ae5a29fb31 () Term)
(declare-fun Vale.X64.InsVector.va_code_Pinsrd@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pinsrd>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pinsrd>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pinsrd (Term Term Term) Term)
(declare-fun Tm_arrow_31667d20b573fe5a496900b610c83483 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_Pinsrd@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pinsrd>


; <Start encoding Vale.X64.InsVector.va_lemma_Pinsrd>

(declare-fun Vale.X64.InsVector.va_lemma_Pinsrd (Term Term Term Term Term) Term)
(declare-fun Tm_refine_52760565a8be4e36474f77879c8272db (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5d3e26e23dcd16526d06a7869689d432 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pinsrd@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pinsrd>


; <Start encoding Vale.X64.InsVector.va_wp_Pinsrd>


(declare-fun Vale.X64.InsVector.va_wp_Pinsrd (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_750e03b6294d3b8952309598789a2bd9 () Term)
(declare-fun Vale.X64.InsVector.va_wp_Pinsrd@tok () Term)


(declare-fun Tm_abs_f380a2b5660a87117d3ca63ac89a6ba3 (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Pinsrd>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pinsrd>


(declare-fun Vale.X64.InsVector.va_wpProof_Pinsrd (Term Term Term Term Term) Term)

(declare-fun Tm_refine_027385e982780be0df206be89df82f33 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a9f1bd098c23735db0f44bac44fbfbec () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pinsrd@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pinsrd>


; <Start encoding Vale.X64.InsVector.va_quick_Pinsrd>

(declare-fun Vale.X64.InsVector.va_quick_Pinsrd (Term Term Term) Term)
(declare-fun Tm_arrow_ac7ce9ae2e6753a0b30d47b5dd3d7310 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pinsrd@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pinsrd>


; <Start encoding Vale.X64.InsVector.va_code_PinsrdImm>

(declare-fun Vale.X64.InsVector.va_code_PinsrdImm (Term Term Term Term) Term)
(declare-fun Tm_arrow_c8fbd22f9dd522032afcdc340fb4a3c4 () Term)
(declare-fun Vale.X64.InsVector.va_code_PinsrdImm@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_PinsrdImm>


; <Start encoding Vale.X64.InsVector.va_codegen_success_PinsrdImm>

(declare-fun Vale.X64.InsVector.va_codegen_success_PinsrdImm (Term Term Term Term) Term)
(declare-fun Tm_arrow_ede1b9834da4dcc3c4da4f0c6c3772fa () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_PinsrdImm@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_PinsrdImm>


; <Start encoding Vale.X64.InsVector.va_lemma_PinsrdImm>

(declare-fun Vale.X64.InsVector.va_lemma_PinsrdImm (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_6775efc8f62f73b37c8b9e9a7c88d92b (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_0f11b1dadc6736c58d429a11b52d3763 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_PinsrdImm@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_PinsrdImm>


; <Start encoding Vale.X64.InsVector.va_wp_PinsrdImm>


(declare-fun Vale.X64.InsVector.va_wp_PinsrdImm (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_c264a13fea44da8f213d191c00c4fac1 () Term)
(declare-fun Vale.X64.InsVector.va_wp_PinsrdImm@tok () Term)

(declare-fun Tm_refine_d2092656aba7e8267c03cf46213a9bfc () Term)

(declare-fun Tm_abs_5a9551d1984816a7789eb3efa4211234 (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_127664bb3fe624e365cbfa5cf81b8bc0 (Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_PinsrdImm>


; <Start encoding Vale.X64.InsVector.va_wpProof_PinsrdImm>


(declare-fun Vale.X64.InsVector.va_wpProof_PinsrdImm (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_ed6c587454e552aded8daa3b1e2dc8ba (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_cbb527cd03fb1dd96792aea5793db83d () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_PinsrdImm@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_PinsrdImm>


; <Start encoding Vale.X64.InsVector.va_quick_PinsrdImm>

(declare-fun Vale.X64.InsVector.va_quick_PinsrdImm (Term Term Term Term) Term)
(declare-fun Tm_arrow_f48c71b5bf465bec9e71155151926b90 () Term)
(declare-fun Vale.X64.InsVector.va_quick_PinsrdImm@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_PinsrdImm>


; <Start encoding Vale.X64.InsVector.va_code_Pinsrq>

(declare-fun Vale.X64.InsVector.va_code_Pinsrq (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Pinsrq@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Pinsrq>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Pinsrq>

(declare-fun Vale.X64.InsVector.va_codegen_success_Pinsrq (Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Pinsrq@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Pinsrq>


; <Start encoding Vale.X64.InsVector.va_lemma_Pinsrq>

(declare-fun Vale.X64.InsVector.va_lemma_Pinsrq (Term Term Term Term Term) Term)
(declare-fun Tm_refine_5a6ed88062c58a3fff927aec638d5f46 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_494fd8af6c9be7afe5d06434f20053ba () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Pinsrq@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Pinsrq>


; <Start encoding Vale.X64.InsVector.va_wp_Pinsrq>


(declare-fun Vale.X64.InsVector.va_wp_Pinsrq (Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Pinsrq@tok () Term)


(declare-fun Tm_abs_8d2d16e8f701843945f213a68992176f (Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Pinsrq>


; <Start encoding Vale.X64.InsVector.va_wpProof_Pinsrq>


(declare-fun Vale.X64.InsVector.va_wpProof_Pinsrq (Term Term Term Term Term) Term)

(declare-fun Tm_refine_d025ee3bb957ebddcd095ecf689ac7c2 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4546d1297c9167232690b172c6d75073 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Pinsrq@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Pinsrq>


; <Start encoding Vale.X64.InsVector.va_quick_Pinsrq>

(declare-fun Vale.X64.InsVector.va_quick_Pinsrq (Term Term Term) Term)
(declare-fun Tm_arrow_b7358ae045eb30a8519ac2f9b395250d () Term)
(declare-fun Vale.X64.InsVector.va_quick_Pinsrq@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Pinsrq>


; <Start encoding Vale.X64.InsVector.va_code_PinsrqImm>

(declare-fun Vale.X64.InsVector.va_code_PinsrqImm (Term Term Term Term) Term)
(declare-fun Tm_arrow_de774fd87bcdb4a22523b7444686e6cc () Term)
(declare-fun Vale.X64.InsVector.va_code_PinsrqImm@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_PinsrqImm>


; <Start encoding Vale.X64.InsVector.va_codegen_success_PinsrqImm>

(declare-fun Vale.X64.InsVector.va_codegen_success_PinsrqImm (Term Term Term Term) Term)
(declare-fun Tm_arrow_6a337ae517d0ea026b9fffc6b1632ddf () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_PinsrqImm@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_PinsrqImm>


; <Start encoding Vale.X64.InsVector.va_lemma_PinsrqImm>

(declare-fun Vale.X64.InsVector.va_lemma_PinsrqImm (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_96d3da91128c3e13a7d4591f6fe0f901 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_0cf342dac428e4084c9333f5d51668c2 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_PinsrqImm@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_PinsrqImm>


; <Start encoding Vale.X64.InsVector.va_wp_PinsrqImm>


(declare-fun Vale.X64.InsVector.va_wp_PinsrqImm (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_32a10de811d20b5779af402d04365d9f () Term)
(declare-fun Vale.X64.InsVector.va_wp_PinsrqImm@tok () Term)


(declare-fun Tm_abs_025df1a6c1be202712e8892b0c60ef22 (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2f7fab5d942b20d6eebeca8b87b12fbc (Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_PinsrqImm>


; <Start encoding Vale.X64.InsVector.va_wpProof_PinsrqImm>


(declare-fun Vale.X64.InsVector.va_wpProof_PinsrqImm (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f753324d2a8d70418155f75ac8c3d92d (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4ee862a4827a2099e3af015b525d7fcc () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_PinsrqImm@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_PinsrqImm>


; <Start encoding Vale.X64.InsVector.va_quick_PinsrqImm>

(declare-fun Vale.X64.InsVector.va_quick_PinsrqImm (Term Term Term Term) Term)
(declare-fun Tm_arrow_3c81b62516cdb28589e3a615566dc87c () Term)
(declare-fun Vale.X64.InsVector.va_quick_PinsrqImm@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_PinsrqImm>


; <Start encoding Vale.X64.InsVector.va_code_VPslldq4>

(declare-fun Vale.X64.InsVector.va_code_VPslldq4 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_VPslldq4@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_VPslldq4>


; <Start encoding Vale.X64.InsVector.va_codegen_success_VPslldq4>

(declare-fun Vale.X64.InsVector.va_codegen_success_VPslldq4 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_VPslldq4@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_VPslldq4>


; <Start encoding Vale.X64.InsVector.va_lemma_VPslldq4>

(declare-fun Vale.X64.InsVector.va_lemma_VPslldq4 (Term Term Term Term) Term)
(declare-fun Tm_refine_e75b8f012a302a2c9231542811e02c10 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_b2301fef11c231acd4d21548c4b57aad () Term)
(declare-fun Vale.X64.InsVector.va_lemma_VPslldq4@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_VPslldq4>


; <Start encoding Vale.X64.InsVector.va_wp_VPslldq4>


(declare-fun Vale.X64.InsVector.va_wp_VPslldq4 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_VPslldq4@tok () Term)


(declare-fun Tm_abs_ba777b9fa63f276187ea665a9d5b8dd9 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_VPslldq4>


; <Start encoding Vale.X64.InsVector.va_wpProof_VPslldq4>


(declare-fun Vale.X64.InsVector.va_wpProof_VPslldq4 (Term Term Term Term) Term)

(declare-fun Tm_refine_6fde9902b28e86e8ed6975f127f27bf9 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_1379acd1f204f155c115d638e21e31ad () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_VPslldq4@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_VPslldq4>


; <Start encoding Vale.X64.InsVector.va_quick_VPslldq4>

(declare-fun Vale.X64.InsVector.va_quick_VPslldq4 (Term Term) Term)
(declare-fun Tm_arrow_91fe665a171c052f83c50b4627dabc28 () Term)
(declare-fun Vale.X64.InsVector.va_quick_VPslldq4@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_VPslldq4>


; <Start encoding Vale.X64.InsVector.va_code_Vpslldq8>

(declare-fun Vale.X64.InsVector.va_code_Vpslldq8 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Vpslldq8@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Vpslldq8>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Vpslldq8>

(declare-fun Vale.X64.InsVector.va_codegen_success_Vpslldq8 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Vpslldq8@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Vpslldq8>


; <Start encoding Vale.X64.InsVector.va_lemma_Vpslldq8>

(declare-fun Vale.X64.InsVector.va_lemma_Vpslldq8 (Term Term Term Term) Term)
(declare-fun Tm_refine_a8df31685be33ad9bcde6cf1ed1d6445 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_49125ce5f34acfad4cc2cafdf8c20afb () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Vpslldq8@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Vpslldq8>


; <Start encoding Vale.X64.InsVector.va_wp_Vpslldq8>


(declare-fun Vale.X64.InsVector.va_wp_Vpslldq8 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Vpslldq8@tok () Term)


(declare-fun Tm_abs_47a55133652c7367a1db49af71a608ae (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Vpslldq8>


; <Start encoding Vale.X64.InsVector.va_wpProof_Vpslldq8>


(declare-fun Vale.X64.InsVector.va_wpProof_Vpslldq8 (Term Term Term Term) Term)

(declare-fun Tm_refine_872209e37de5742fd00ad0225c11f0f7 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5602b11be27cacfd0f87dc7513a35944 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Vpslldq8@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Vpslldq8>


; <Start encoding Vale.X64.InsVector.va_quick_Vpslldq8>

(declare-fun Vale.X64.InsVector.va_quick_Vpslldq8 (Term Term) Term)
(declare-fun Tm_arrow_4bedf81e59b3e9380fbb2bcbb072b353 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Vpslldq8@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Vpslldq8>


; <Start encoding Vale.X64.InsVector.va_code_Vpsrldq8>

(declare-fun Vale.X64.InsVector.va_code_Vpsrldq8 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Vpsrldq8@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Vpsrldq8>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Vpsrldq8>

(declare-fun Vale.X64.InsVector.va_codegen_success_Vpsrldq8 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Vpsrldq8@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Vpsrldq8>


; <Start encoding Vale.X64.InsVector.va_lemma_Vpsrldq8>

(declare-fun Vale.X64.InsVector.va_lemma_Vpsrldq8 (Term Term Term Term) Term)
(declare-fun Tm_refine_36cf759585ee1188466a1981da4ebd90 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_6d15ac2bf96926e6cab918774c5bd9f1 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Vpsrldq8@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Vpsrldq8>


; <Start encoding Vale.X64.InsVector.va_wp_Vpsrldq8>


(declare-fun Vale.X64.InsVector.va_wp_Vpsrldq8 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Vpsrldq8@tok () Term)


(declare-fun Tm_abs_965386a429d0d05d3c5c0610640da1d0 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Vpsrldq8>


; <Start encoding Vale.X64.InsVector.va_wpProof_Vpsrldq8>


(declare-fun Vale.X64.InsVector.va_wpProof_Vpsrldq8 (Term Term Term Term) Term)

(declare-fun Tm_refine_fb98d4cebc55b1cf86d13e1da5585bcd (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_2592bcef56ed516af0851ec5b0996510 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Vpsrldq8@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Vpsrldq8>


; <Start encoding Vale.X64.InsVector.va_quick_Vpsrldq8>

(declare-fun Vale.X64.InsVector.va_quick_Vpsrldq8 (Term Term) Term)
(declare-fun Tm_arrow_34f4cafd6c42c42d9718fa85a0e36627 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Vpsrldq8@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Vpsrldq8>


; <Start encoding Vale.X64.InsVector.va_code_Mov128>

(declare-fun Vale.X64.InsVector.va_code_Mov128 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Mov128@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Mov128>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Mov128>

(declare-fun Vale.X64.InsVector.va_codegen_success_Mov128 (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Mov128@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Mov128>


; <Start encoding Vale.X64.InsVector.va_lemma_Mov128>

(declare-fun Vale.X64.InsVector.va_lemma_Mov128 (Term Term Term Term) Term)
(declare-fun Tm_refine_2f219f80ab918f3524f33a5e755522aa (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_bcdbabc3ce8a308a48a89fe705a762d0 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Mov128@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Mov128>


; <Start encoding Vale.X64.InsVector.va_wp_Mov128>


(declare-fun Vale.X64.InsVector.va_wp_Mov128 (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Mov128@tok () Term)


(declare-fun Tm_abs_4d62f5da11cb0d1f98f732eb6f7c46c2 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Mov128>


; <Start encoding Vale.X64.InsVector.va_wpProof_Mov128>


(declare-fun Vale.X64.InsVector.va_wpProof_Mov128 (Term Term Term Term) Term)

(declare-fun Tm_refine_177f2d865f852fc4ec946f8ef9f7b033 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_f4eb8d3d1747a89d5701d69299d0e5f9 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Mov128@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Mov128>


; <Start encoding Vale.X64.InsVector.va_quick_Mov128>

(declare-fun Vale.X64.InsVector.va_quick_Mov128 (Term Term) Term)
(declare-fun Tm_arrow_f30c59b246ab6f42d747be36941a7eeb () Term)
(declare-fun Vale.X64.InsVector.va_quick_Mov128@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Mov128>


; <Start encoding Vale.X64.InsVector.va_code_Load128_buffer>

(declare-fun Vale.X64.InsVector.va_code_Load128_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bc033c2a532c3fa5ff52486ca1392942 () Term)
(declare-fun Vale.X64.InsVector.va_code_Load128_buffer@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Load128_buffer>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Load128_buffer>

(declare-fun Vale.X64.InsVector.va_codegen_success_Load128_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_10f2edb7052878bbd3bd7463d07d89f7 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_Load128_buffer@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Load128_buffer>


; <Start encoding Vale.X64.InsVector.va_lemma_Load128_buffer>

(declare-fun Vale.X64.InsVector.va_lemma_Load128_buffer (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_a13a1c1af4486f9042bf36f91bc2b9e3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_39e9063ad85edd3e1f34e172fc98eb7f () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Load128_buffer@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Load128_buffer>


; <Start encoding Vale.X64.InsVector.va_wp_Load128_buffer>


(declare-fun Vale.X64.InsVector.va_wp_Load128_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_21b4dca65ce80ccecc66d2578cfe5b3e () Term)
(declare-fun Vale.X64.InsVector.va_wp_Load128_buffer@tok () Term)


(declare-fun Tm_abs_db5b751c340e6a48ab0c56419bb8fa37 (Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Load128_buffer>


; <Start encoding Vale.X64.InsVector.va_wpProof_Load128_buffer>


(declare-fun Vale.X64.InsVector.va_wpProof_Load128_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f7f32a031a0034db86a68229e84c6237 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_bb906b432e232fb4f703958573b1d914 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Load128_buffer@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Load128_buffer>


; <Start encoding Vale.X64.InsVector.va_quick_Load128_buffer>

(declare-fun Vale.X64.InsVector.va_quick_Load128_buffer (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d5ea209fdc97c7d853ddc12b9c784251 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Load128_buffer@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Load128_buffer>


; <Start encoding Vale.X64.InsVector.va_code_LoadBe64_buffer128>

(declare-fun Vale.X64.InsVector.va_code_LoadBe64_buffer128 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a4a71da46b422a0803e3ebb2dd824aa4 () Term)
(declare-fun Vale.X64.InsVector.va_code_LoadBe64_buffer128@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_LoadBe64_buffer128>


; <Start encoding Vale.X64.InsVector.va_codegen_success_LoadBe64_buffer128>

(declare-fun Vale.X64.InsVector.va_codegen_success_LoadBe64_buffer128 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5415d494c00b7cad5764a5e51366e513 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_LoadBe64_buffer128@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_LoadBe64_buffer128>


; <Start encoding Vale.X64.InsVector.va_lemma_LoadBe64_buffer128>

(declare-fun Vale.X64.InsVector.va_lemma_LoadBe64_buffer128 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_2fd501a1ec97dd3578c9759b191cde51 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5adbfc2dc6da52b49bcbbac1895e6bea () Term)
(declare-fun Vale.X64.InsVector.va_lemma_LoadBe64_buffer128@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_LoadBe64_buffer128>


; <Start encoding Vale.X64.InsVector.va_wp_LoadBe64_buffer128>


(declare-fun Vale.X64.InsVector.va_wp_LoadBe64_buffer128 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_e1c0971091c2e6f863bd000e25418ea2 () Term)
(declare-fun Vale.X64.InsVector.va_wp_LoadBe64_buffer128@tok () Term)



(declare-fun Tm_ghost_arrow_0a072988d10708eb2917bd7da2d2f0b3 (Term) Term)
(declare-fun Tm_abs_bf2acf0f071ce8d89e6af61112f928c5 (Term) Term)


(declare-fun Tm_ghost_arrow_207d6616d7834e581c131456cca1ea4c (Term) Term)
(declare-fun Tm_abs_54ccc32c2dffe4e7ae51f3f9cd75bf90 (Term) Term)


(declare-fun Tm_ghost_arrow_7a3972a2f2d51b32ed72f6afdec89904 (Term) Term)
(declare-fun Tm_abs_a1051212aede8828a3384e12dc04a009 (Term Term Term Term Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3fe6cc19bb017e80a4f980b718e65853 (Term) Term)
(declare-fun Tm_abs_b406a336a861606c29d81e2f183073bd (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a4f98311d424dc810710166cf92bc601 (Term Term Term Term Term Term Term) Term)

























; </end encoding Vale.X64.InsVector.va_wp_LoadBe64_buffer128>


; <Start encoding Vale.X64.InsVector.va_wpProof_LoadBe64_buffer128>


(declare-fun Vale.X64.InsVector.va_wpProof_LoadBe64_buffer128 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_a4d44d654e7d64d58e957aa56069b4ec (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c4a939e1ff816f86961524c4fc924d88 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_LoadBe64_buffer128@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_LoadBe64_buffer128>


; <Start encoding Vale.X64.InsVector.va_quick_LoadBe64_buffer128>

(declare-fun Vale.X64.InsVector.va_quick_LoadBe64_buffer128 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0855660c81a3baaac7efabcb58170e7a () Term)
(declare-fun Vale.X64.InsVector.va_quick_LoadBe64_buffer128@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_LoadBe64_buffer128>


; <Start encoding Vale.X64.InsVector.va_code_Store128_buffer>

(declare-fun Vale.X64.InsVector.va_code_Store128_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9b2e58fb9a7490abdff7625877e07e91 () Term)
(declare-fun Vale.X64.InsVector.va_code_Store128_buffer@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Store128_buffer>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Store128_buffer>

(declare-fun Vale.X64.InsVector.va_codegen_success_Store128_buffer (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82083730a6d2907070d33dc875b76154 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_Store128_buffer@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Store128_buffer>


; <Start encoding Vale.X64.InsVector.va_lemma_Store128_buffer>

(declare-fun Vale.X64.InsVector.va_lemma_Store128_buffer (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_a0cec8f1eaf3f09f1c378f5649f8cf13 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8ebc8cd020ef50cb092b5b2614e1475d () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Store128_buffer@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Store128_buffer>


; <Start encoding Vale.X64.InsVector.va_wp_Store128_buffer>


(declare-fun Vale.X64.InsVector.va_wp_Store128_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_27d5ee53971b9fc37a0bead8d9d3286e () Term)
(declare-fun Vale.X64.InsVector.va_wp_Store128_buffer@tok () Term)


(declare-fun Tm_abs_b28da9cdd3eca99fd44476b0ea7c9f22 (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b224c9c19c4c595c793a7aa7a03d7b55 (Term Term Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_Store128_buffer>


; <Start encoding Vale.X64.InsVector.va_wpProof_Store128_buffer>


(declare-fun Vale.X64.InsVector.va_wpProof_Store128_buffer (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_d96bf883c86615c5153849dc7ac85333 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_258ab95553e255c627738b46e7664b50 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Store128_buffer@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Store128_buffer>


; <Start encoding Vale.X64.InsVector.va_quick_Store128_buffer>

(declare-fun Vale.X64.InsVector.va_quick_Store128_buffer (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8890287085991dbb995fd05cb9a8cb78 () Term)
(declare-fun Vale.X64.InsVector.va_quick_Store128_buffer@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Store128_buffer>


; <Start encoding Vale.X64.InsVector.va_code_Store64_buffer128>

(declare-fun Vale.X64.InsVector.va_code_Store64_buffer128 (Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_Store64_buffer128@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_Store64_buffer128>


; <Start encoding Vale.X64.InsVector.va_codegen_success_Store64_buffer128>

(declare-fun Vale.X64.InsVector.va_codegen_success_Store64_buffer128 (Term Term Term Term Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_Store64_buffer128@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_Store64_buffer128>


; <Start encoding Vale.X64.InsVector.va_lemma_Store64_buffer128>

(declare-fun Vale.X64.InsVector.va_lemma_Store64_buffer128 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_9c1032998cabd95eef9a9cec3ec76a5a (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7ad45fb66de39ae77c3c0b377c0d4b56 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_Store64_buffer128@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_Store64_buffer128>


; <Start encoding Vale.X64.InsVector.va_wp_Store64_buffer128>


(declare-fun Vale.X64.InsVector.va_wp_Store64_buffer128 (Term Term Term Term Term Term Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_Store64_buffer128@tok () Term)












(declare-fun Tm_abs_caa93468dabb32def2e17e98dcd23528 (Term) Term)





(declare-fun Tm_abs_53656b244b1251f9e5991bb4a67393e1 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_7447a2111a75d011562c897a14f9c01d (Term Term Term Term Term Term Term) Term)

























; </end encoding Vale.X64.InsVector.va_wp_Store64_buffer128>


; <Start encoding Vale.X64.InsVector.va_wpProof_Store64_buffer128>


(declare-fun Vale.X64.InsVector.va_wpProof_Store64_buffer128 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_5ef5ee00ba126a3f89f19d96bff13644 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5bc49bac16f85be6a0ec853c2303e0b7 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_Store64_buffer128@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_Store64_buffer128>


; <Start encoding Vale.X64.InsVector.va_quick_Store64_buffer128>

(declare-fun Vale.X64.InsVector.va_quick_Store64_buffer128 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_99567e553689a4df2a217678c4b8473f () Term)
(declare-fun Vale.X64.InsVector.va_quick_Store64_buffer128@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_Store64_buffer128>


; <Start encoding Vale.X64.InsVector.va_code_ZeroXmm>

(declare-fun Vale.X64.InsVector.va_code_ZeroXmm (Term) Term)
(declare-fun Tm_arrow_4b01ec764c16542809fc613b1dc2e91d () Term)
(declare-fun Vale.X64.InsVector.va_code_ZeroXmm@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_ZeroXmm>


; <Start encoding Vale.X64.InsVector.va_codegen_success_ZeroXmm>

(declare-fun Vale.X64.InsVector.va_codegen_success_ZeroXmm (Term) Term)
(declare-fun Tm_arrow_801955789cdc2c066e3154ea71479dd2 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_ZeroXmm@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_ZeroXmm>


; <Start encoding Vale.X64.InsVector.va_lemma_ZeroXmm>

(declare-fun Vale.X64.InsVector.va_lemma_ZeroXmm (Term Term Term) Term)
(declare-fun Tm_refine_7dce3f825b4728fd2bf0598f8dd11b99 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_cb5b6596edbf7ad659b130e12ce3774b () Term)
(declare-fun Vale.X64.InsVector.va_lemma_ZeroXmm@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_ZeroXmm>


; <Start encoding Vale.X64.InsVector.va_wp_ZeroXmm>


(declare-fun Vale.X64.InsVector.va_wp_ZeroXmm (Term Term Term) Term)

(declare-fun Tm_arrow_b168c51a88c1cda92984827d5c4e4b86 () Term)
(declare-fun Vale.X64.InsVector.va_wp_ZeroXmm@tok () Term)


(declare-fun Tm_abs_9b2f5e9b8a15f8c2f788790cf0899fc8 (Term Term Term Term) Term)

(declare-fun Tm_abs_d6393fb6cfaeedb29a95f31af774514b (Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_ZeroXmm>


; <Start encoding Vale.X64.InsVector.va_wpProof_ZeroXmm>


(declare-fun Vale.X64.InsVector.va_wpProof_ZeroXmm (Term Term Term) Term)

(declare-fun Tm_refine_240e41e8c60818ba96b699e32959b5be (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d445c12a0dbd6216101694d45bc101fa () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_ZeroXmm@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_ZeroXmm>


; <Start encoding Vale.X64.InsVector.va_quick_ZeroXmm>

(declare-fun Vale.X64.InsVector.va_quick_ZeroXmm (Term) Term)
(declare-fun Tm_arrow_4f2bd920a9188c64543cb3b73b1dfc95 () Term)
(declare-fun Vale.X64.InsVector.va_quick_ZeroXmm@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_ZeroXmm>


; <Start encoding Vale.X64.InsVector.va_code_InitPshufbMask>

(declare-fun Vale.X64.InsVector.va_code_InitPshufbMask (Term Term) Term)
(declare-fun Tm_arrow_847abdfd5b9262dd7abfe1d26b830ef8 () Term)
(declare-fun Vale.X64.InsVector.va_code_InitPshufbMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_InitPshufbMask>


; <Start encoding Vale.X64.InsVector.va_codegen_success_InitPshufbMask>

(declare-fun Vale.X64.InsVector.va_codegen_success_InitPshufbMask (Term Term) Term)
(declare-fun Tm_arrow_f32eb8a12240a7ceb453e3594f24d1b2 () Term)
(declare-fun Vale.X64.InsVector.va_codegen_success_InitPshufbMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_InitPshufbMask>


; <Start encoding Vale.X64.InsVector.va_lemma_InitPshufbMask>

(declare-fun Vale.X64.InsVector.va_lemma_InitPshufbMask (Term Term Term Term) Term)
(declare-fun Tm_refine_404000f041706f9dacde05d013c59b45 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d3c07595b8742fbc7aa3c14bd1fae29b () Term)
(declare-fun Vale.X64.InsVector.va_lemma_InitPshufbMask@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_InitPshufbMask>


; <Start encoding Vale.X64.InsVector.va_wp_InitPshufbMask>


(declare-fun Vale.X64.InsVector.va_wp_InitPshufbMask (Term Term Term Term) Term)

(declare-fun Tm_arrow_3bf3b1e6488f4472bd9282ce6230a36b () Term)
(declare-fun Vale.X64.InsVector.va_wp_InitPshufbMask@tok () Term)


(declare-fun Tm_abs_904160d0564d850109a3069dd81883ed (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_74e9152cef8ae8d1769408439d610cd9 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_2331f00151563360332c362980d34d9c (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_InitPshufbMask>


; <Start encoding Vale.X64.InsVector.va_wpProof_InitPshufbMask>


(declare-fun Vale.X64.InsVector.va_wpProof_InitPshufbMask (Term Term Term Term) Term)

(declare-fun Tm_refine_d686b96380e24aa572fee502bb1bf398 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8a74680da4311a88bac4ed2a1e649fc7 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_InitPshufbMask@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_InitPshufbMask>


; <Start encoding Vale.X64.InsVector.va_quick_InitPshufbMask>

(declare-fun Vale.X64.InsVector.va_quick_InitPshufbMask (Term Term) Term)
(declare-fun Tm_arrow_f41c393862340713f590f7e1d21e0815 () Term)
(declare-fun Vale.X64.InsVector.va_quick_InitPshufbMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_InitPshufbMask>


; <Start encoding Vale.X64.InsVector.va_code_InitPshufbStableMask>

(declare-fun Vale.X64.InsVector.va_code_InitPshufbStableMask (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_InitPshufbStableMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_InitPshufbStableMask>


; <Start encoding Vale.X64.InsVector.va_codegen_success_InitPshufbStableMask>

(declare-fun Vale.X64.InsVector.va_codegen_success_InitPshufbStableMask (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_InitPshufbStableMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_InitPshufbStableMask>


; <Start encoding Vale.X64.InsVector.va_lemma_InitPshufbStableMask>

(declare-fun Vale.X64.InsVector.va_lemma_InitPshufbStableMask (Term Term Term Term) Term)
(declare-fun Tm_refine_d722ad70248ff74b077a5ecaffc88f3a (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_f31d4e94624974f7e6f0308614b10071 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_InitPshufbStableMask@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_InitPshufbStableMask>


; <Start encoding Vale.X64.InsVector.va_wp_InitPshufbStableMask>


(declare-fun Vale.X64.InsVector.va_wp_InitPshufbStableMask (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_InitPshufbStableMask@tok () Term)


(declare-fun Tm_abs_3a2a3eea292b57129d14da5c88d8d8a9 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_bb765788f19cc6604a33b671e002b4ee (Term Term Term Term Term) Term)

(declare-fun Tm_abs_b42246494cad911ecf7a6b25cfe72cc5 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_InitPshufbStableMask>


; <Start encoding Vale.X64.InsVector.va_wpProof_InitPshufbStableMask>


(declare-fun Vale.X64.InsVector.va_wpProof_InitPshufbStableMask (Term Term Term Term) Term)

(declare-fun Tm_refine_9d9e9f542898ad177bf1b97aa6515596 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_2aa8486367609eb87115c4ac826642c1 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_InitPshufbStableMask@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_InitPshufbStableMask>


; <Start encoding Vale.X64.InsVector.va_quick_InitPshufbStableMask>

(declare-fun Vale.X64.InsVector.va_quick_InitPshufbStableMask (Term Term) Term)
(declare-fun Tm_arrow_c5e99173614b0a75409082b340618ec5 () Term)
(declare-fun Vale.X64.InsVector.va_quick_InitPshufbStableMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_InitPshufbStableMask>


; <Start encoding Vale.X64.InsVector.va_code_InitPshufbDupMask>

(declare-fun Vale.X64.InsVector.va_code_InitPshufbDupMask (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_InitPshufbDupMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_InitPshufbDupMask>


; <Start encoding Vale.X64.InsVector.va_codegen_success_InitPshufbDupMask>

(declare-fun Vale.X64.InsVector.va_codegen_success_InitPshufbDupMask (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_InitPshufbDupMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_InitPshufbDupMask>


; <Start encoding Vale.X64.InsVector.va_lemma_InitPshufbDupMask>

(declare-fun Vale.X64.InsVector.va_lemma_InitPshufbDupMask (Term Term Term Term) Term)
(declare-fun Tm_refine_de09f58ae3c7b5331de5df1b7e863b89 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_6ff976c1891b2334553a4fa0f8a57c12 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_InitPshufbDupMask@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_InitPshufbDupMask>


; <Start encoding Vale.X64.InsVector.va_wp_InitPshufbDupMask>


(declare-fun Vale.X64.InsVector.va_wp_InitPshufbDupMask (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_InitPshufbDupMask@tok () Term)


(declare-fun Tm_abs_71c37f10705017724bb79690db91726f (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fe33b5705f557a7940644810d82390d2 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_0b52861b65190a2af3a9409246941d65 (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_InitPshufbDupMask>


; <Start encoding Vale.X64.InsVector.va_wpProof_InitPshufbDupMask>


(declare-fun Vale.X64.InsVector.va_wpProof_InitPshufbDupMask (Term Term Term Term) Term)

(declare-fun Tm_refine_501dde4ba182e4c7a165db9715beb1f9 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_7684f90e0d4496fbf99e2037ce1a168b () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_InitPshufbDupMask@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_InitPshufbDupMask>


; <Start encoding Vale.X64.InsVector.va_quick_InitPshufbDupMask>

(declare-fun Vale.X64.InsVector.va_quick_InitPshufbDupMask (Term Term) Term)
(declare-fun Tm_arrow_73788406d9fd3e07eb5e6802adc55be4 () Term)
(declare-fun Vale.X64.InsVector.va_quick_InitPshufbDupMask@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_InitPshufbDupMask>


; <Start encoding Vale.X64.InsVector.va_code_InitPshufb64Mask>

(declare-fun Vale.X64.InsVector.va_code_InitPshufb64Mask (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_InitPshufb64Mask@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_InitPshufb64Mask>


; <Start encoding Vale.X64.InsVector.va_codegen_success_InitPshufb64Mask>

(declare-fun Vale.X64.InsVector.va_codegen_success_InitPshufb64Mask (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_InitPshufb64Mask@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_InitPshufb64Mask>


; <Start encoding Vale.X64.InsVector.va_lemma_InitPshufb64Mask>

(declare-fun Vale.X64.InsVector.va_lemma_InitPshufb64Mask (Term Term Term Term) Term)
(declare-fun Tm_refine_13b11ff18b1144792bb1891f2bc40b8f (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_86ba9c7b4ce2231a9a10c3feedc2e006 () Term)
(declare-fun Vale.X64.InsVector.va_lemma_InitPshufb64Mask@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_InitPshufb64Mask>


; <Start encoding Vale.X64.InsVector.va_wp_InitPshufb64Mask>


(declare-fun Vale.X64.InsVector.va_wp_InitPshufb64Mask (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_InitPshufb64Mask@tok () Term)


(declare-fun Tm_abs_31d4a3df11069dec39d2f758005dc2f7 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_676d3852457d112049de8773d019e21e (Term Term Term Term Term) Term)

(declare-fun Tm_abs_eee77cdba6f2183a2ab1161cdb6961fd (Term Term Term Term) Term)

; </end encoding Vale.X64.InsVector.va_wp_InitPshufb64Mask>


; <Start encoding Vale.X64.InsVector.va_wpProof_InitPshufb64Mask>


(declare-fun Vale.X64.InsVector.va_wpProof_InitPshufb64Mask (Term Term Term Term) Term)

(declare-fun Tm_refine_62c7dde604bab47b1b0869a10d2cfe21 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_67ae8f5a923594cc51bf452e1eeb358a () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_InitPshufb64Mask@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_InitPshufb64Mask>


; <Start encoding Vale.X64.InsVector.va_quick_InitPshufb64Mask>

(declare-fun Vale.X64.InsVector.va_quick_InitPshufb64Mask (Term Term) Term)
(declare-fun Tm_arrow_a8d9792146e41180737fb7bb11d045fb () Term)
(declare-fun Vale.X64.InsVector.va_quick_InitPshufb64Mask@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_InitPshufb64Mask>


; <Start encoding Vale.X64.InsVector.va_code_XmmEqual>

(declare-fun Vale.X64.InsVector.va_code_XmmEqual (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_code_XmmEqual@tok () Term)

; </end encoding Vale.X64.InsVector.va_code_XmmEqual>


; <Start encoding Vale.X64.InsVector.va_codegen_success_XmmEqual>

(declare-fun Vale.X64.InsVector.va_codegen_success_XmmEqual (Term Term) Term)

(declare-fun Vale.X64.InsVector.va_codegen_success_XmmEqual@tok () Term)

; </end encoding Vale.X64.InsVector.va_codegen_success_XmmEqual>


; <Start encoding Vale.X64.InsVector.va_lemma_XmmEqual>

(declare-fun Vale.X64.InsVector.va_lemma_XmmEqual (Term Term Term Term) Term)
(declare-fun Tm_refine_c893fbd0ad3d659bfd047f6e4e0d1453 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c3f7989e7081cba32c9eb4500cc4f6af () Term)
(declare-fun Vale.X64.InsVector.va_lemma_XmmEqual@tok () Term)


; </end encoding Vale.X64.InsVector.va_lemma_XmmEqual>


; <Start encoding Vale.X64.InsVector.va_wp_XmmEqual>


(declare-fun Vale.X64.InsVector.va_wp_XmmEqual (Term Term Term Term) Term)


(declare-fun Vale.X64.InsVector.va_wp_XmmEqual@tok () Term)

(declare-fun Tm_refine_377477425c53e0b16bbf43bb746421e3 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_b608433d1b2649ff6920896922a2c89b (Term Term Term) Term)
(declare-fun Tm_abs_a7a06df365fe54133121bea0f89c3317 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_aed7b589709708ea150349ce965fe5a3 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_b69f6d8d64bd8a07e29f7ec1f31a3bdf (Term Term Term) Term)
(declare-fun Tm_abs_796bb6932978f49a54ebef62f6d51d2e (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3c7ece7b6dc441f0e6437306956a9e09 (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3b76e32730b13963ca14a2c646b4cc69 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c3fc9182146545dd0e9e22477068f74f (Term Term Term Term Term) Term)

(declare-fun Tm_abs_4f44f39d4bfa36362fbdae70c3a13073 (Term Term Term Term) Term)

















; </end encoding Vale.X64.InsVector.va_wp_XmmEqual>


; <Start encoding Vale.X64.InsVector.va_wpProof_XmmEqual>


(declare-fun Vale.X64.InsVector.va_wpProof_XmmEqual (Term Term Term Term) Term)

(declare-fun Tm_refine_59a55b0ddaef876bdb0e1548a910ea95 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_64df565a3ffceaaaf2896db0c9f83198 () Term)
(declare-fun Vale.X64.InsVector.va_wpProof_XmmEqual@tok () Term)


; </end encoding Vale.X64.InsVector.va_wpProof_XmmEqual>


; <Start encoding Vale.X64.InsVector.va_quick_XmmEqual>

(declare-fun Vale.X64.InsVector.va_quick_XmmEqual (Term Term) Term)
(declare-fun Tm_arrow_f85d422ab51717ab274e49cf122ee85f () Term)
(declare-fun Vale.X64.InsVector.va_quick_XmmEqual@tok () Term)

; </end encoding Vale.X64.InsVector.va_quick_XmmEqual>


; End Externals for interface Vale.X64.InsVector


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.X64.InsVector (2080 decls; total size 96093)

;;; Start interface Vale.AES.X64.PolyOps

; Externals for interface Vale.AES.X64.PolyOps


; <Start encoding Vale.AES.X64.PolyOps.va_code_VPolyAdd>

(declare-fun Vale.AES.X64.PolyOps.va_code_VPolyAdd (Term Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_code_VPolyAdd@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_code_VPolyAdd>


; <Start encoding Vale.AES.X64.PolyOps.va_codegen_success_VPolyAdd>

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VPolyAdd (Term Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VPolyAdd@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_codegen_success_VPolyAdd>


; <Start encoding Vale.AES.X64.PolyOps.va_lemma_VPolyAdd>

(declare-fun Vale.AES.X64.PolyOps.va_lemma_VPolyAdd (Term Term Term Term Term) Term)
(declare-fun Tm_refine_ab5cdf3d1c0006e0564c423bcfdc428e (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_40f0f4bae49e3eb6169dd42e18c0f85f () Term)
(declare-fun Vale.AES.X64.PolyOps.va_lemma_VPolyAdd@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_lemma_VPolyAdd>


; <Start encoding Vale.AES.X64.PolyOps.va_wp_VPolyAdd>


(declare-fun Vale.AES.X64.PolyOps.va_wp_VPolyAdd (Term Term Term Term Term) Term)


(declare-fun Vale.AES.X64.PolyOps.va_wp_VPolyAdd@tok () Term)


(declare-fun Tm_abs_f704b4b98490d7cf0bd208fc92ed06a3 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5b2c793439e26fb5a43ebb93e75334bf (Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.PolyOps.va_wp_VPolyAdd>


; <Start encoding Vale.AES.X64.PolyOps.va_wpProof_VPolyAdd>


(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VPolyAdd (Term Term Term Term Term) Term)

(declare-fun Tm_refine_0cd63d91a4ae161f7ad0259f1f32c524 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d3b5b9ad350ba2533c08e5d1ab2c8f13 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VPolyAdd@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_wpProof_VPolyAdd>


; <Start encoding Vale.AES.X64.PolyOps.va_quick_VPolyAdd>

(declare-fun Vale.AES.X64.PolyOps.va_quick_VPolyAdd (Term Term Term) Term)
(declare-fun Tm_arrow_1b6d349b33a91f98c67bff3fe526aa52 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_quick_VPolyAdd@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_quick_VPolyAdd>


; <Start encoding Vale.AES.X64.PolyOps.va_code_PolyAnd>

(declare-fun Vale.AES.X64.PolyOps.va_code_PolyAnd (Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_code_PolyAnd@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_code_PolyAnd>


; <Start encoding Vale.AES.X64.PolyOps.va_codegen_success_PolyAnd>

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_PolyAnd (Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_PolyAnd@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_codegen_success_PolyAnd>


; <Start encoding Vale.AES.X64.PolyOps.va_lemma_PolyAnd>

(declare-fun Vale.AES.X64.PolyOps.va_lemma_PolyAnd (Term Term Term Term) Term)
(declare-fun Tm_refine_05c631be0766c7df4a9d4570db693f4b (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_b70901c35ce3efb7e11081af931cbff2 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_lemma_PolyAnd@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_lemma_PolyAnd>


; <Start encoding Vale.AES.X64.PolyOps.va_wp_PolyAnd>


(declare-fun Vale.AES.X64.PolyOps.va_wp_PolyAnd (Term Term Term Term) Term)


(declare-fun Vale.AES.X64.PolyOps.va_wp_PolyAnd@tok () Term)


(declare-fun Tm_abs_49126046b351e5e5ef3d2d959baf0b7f (Term Term Term Term Term) Term)

(declare-fun Tm_abs_3619a89bfaad457f8f2548189c9b70a7 (Term Term Term Term) Term)

; </end encoding Vale.AES.X64.PolyOps.va_wp_PolyAnd>


; <Start encoding Vale.AES.X64.PolyOps.va_wpProof_PolyAnd>


(declare-fun Vale.AES.X64.PolyOps.va_wpProof_PolyAnd (Term Term Term Term) Term)

(declare-fun Tm_refine_73065acaf8a624dc32866e5d964632b1 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8909c619f3f17f5660373c6046345472 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_wpProof_PolyAnd@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_wpProof_PolyAnd>


; <Start encoding Vale.AES.X64.PolyOps.va_quick_PolyAnd>

(declare-fun Vale.AES.X64.PolyOps.va_quick_PolyAnd (Term Term) Term)
(declare-fun Tm_arrow_4e42643ab885d761b2cb0e343e230f06 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_quick_PolyAnd@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_quick_PolyAnd>


; <Start encoding Vale.AES.X64.PolyOps.va_code_VHigh64ToLow>

(declare-fun Vale.AES.X64.PolyOps.va_code_VHigh64ToLow (Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_code_VHigh64ToLow@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_code_VHigh64ToLow>


; <Start encoding Vale.AES.X64.PolyOps.va_codegen_success_VHigh64ToLow>

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VHigh64ToLow (Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VHigh64ToLow@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_codegen_success_VHigh64ToLow>


; <Start encoding Vale.AES.X64.PolyOps.va_lemma_VHigh64ToLow>

(declare-fun Vale.AES.X64.PolyOps.va_lemma_VHigh64ToLow (Term Term Term Term) Term)
(declare-fun Tm_refine_fb5e8833b0e53c0af0dda22444274a38 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_19c41ccb1d04ccb0247b64ecd781a5b4 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_lemma_VHigh64ToLow@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_lemma_VHigh64ToLow>


; <Start encoding Vale.AES.X64.PolyOps.va_wp_VHigh64ToLow>


(declare-fun Vale.AES.X64.PolyOps.va_wp_VHigh64ToLow (Term Term Term Term) Term)


(declare-fun Vale.AES.X64.PolyOps.va_wp_VHigh64ToLow@tok () Term)


(declare-fun Tm_abs_f8218553160c563540379d6a2af63907 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_f59d2f58fe9576a31d25972bf8b89315 (Term Term Term Term) Term)

; </end encoding Vale.AES.X64.PolyOps.va_wp_VHigh64ToLow>


; <Start encoding Vale.AES.X64.PolyOps.va_wpProof_VHigh64ToLow>


(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VHigh64ToLow (Term Term Term Term) Term)

(declare-fun Tm_refine_7bc5b1dbc16dfc97afc6fbcc34bd8894 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_967bcadfaa785d5c44fd4486c6338b3b () Term)
(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VHigh64ToLow@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_wpProof_VHigh64ToLow>


; <Start encoding Vale.AES.X64.PolyOps.va_quick_VHigh64ToLow>

(declare-fun Vale.AES.X64.PolyOps.va_quick_VHigh64ToLow (Term Term) Term)
(declare-fun Tm_arrow_cc0d2e46b8cf93b2ff0c166d44a494b4 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_quick_VHigh64ToLow@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_quick_VHigh64ToLow>


; <Start encoding Vale.AES.X64.PolyOps.va_code_VLow64ToHigh>

(declare-fun Vale.AES.X64.PolyOps.va_code_VLow64ToHigh (Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_code_VLow64ToHigh@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_code_VLow64ToHigh>


; <Start encoding Vale.AES.X64.PolyOps.va_codegen_success_VLow64ToHigh>

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VLow64ToHigh (Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VLow64ToHigh@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_codegen_success_VLow64ToHigh>


; <Start encoding Vale.AES.X64.PolyOps.va_lemma_VLow64ToHigh>

(declare-fun Vale.AES.X64.PolyOps.va_lemma_VLow64ToHigh (Term Term Term Term) Term)
(declare-fun Tm_refine_d79011f3879da6bd82890372bd9a01fd (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_56012aa403d3f63e6240f9e6c4c5b97e () Term)
(declare-fun Vale.AES.X64.PolyOps.va_lemma_VLow64ToHigh@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_lemma_VLow64ToHigh>


; <Start encoding Vale.AES.X64.PolyOps.va_wp_VLow64ToHigh>


(declare-fun Vale.AES.X64.PolyOps.va_wp_VLow64ToHigh (Term Term Term Term) Term)


(declare-fun Vale.AES.X64.PolyOps.va_wp_VLow64ToHigh@tok () Term)


(declare-fun Tm_abs_d2ec333f6bb4314c9ca513c217fdd2ea (Term Term Term Term Term) Term)

(declare-fun Tm_abs_e028e2828bf7e906e6a04f6765d41c6f (Term Term Term Term) Term)

; </end encoding Vale.AES.X64.PolyOps.va_wp_VLow64ToHigh>


; <Start encoding Vale.AES.X64.PolyOps.va_wpProof_VLow64ToHigh>


(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VLow64ToHigh (Term Term Term Term) Term)

(declare-fun Tm_refine_792ea130aa3b0c85a624897b745af1b9 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c2791609bd822e65d6648dda505598e9 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VLow64ToHigh@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_wpProof_VLow64ToHigh>


; <Start encoding Vale.AES.X64.PolyOps.va_quick_VLow64ToHigh>

(declare-fun Vale.AES.X64.PolyOps.va_quick_VLow64ToHigh (Term Term) Term)
(declare-fun Tm_arrow_554246f7929883ca6df1bbf188cbd157 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_quick_VLow64ToHigh@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_quick_VLow64ToHigh>


; <Start encoding Vale.AES.X64.PolyOps.va_code_VSwap>

(declare-fun Vale.AES.X64.PolyOps.va_code_VSwap (Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_code_VSwap@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_code_VSwap>


; <Start encoding Vale.AES.X64.PolyOps.va_codegen_success_VSwap>

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VSwap (Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VSwap@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_codegen_success_VSwap>


; <Start encoding Vale.AES.X64.PolyOps.va_lemma_VSwap>

(declare-fun Vale.AES.X64.PolyOps.va_lemma_VSwap (Term Term Term Term) Term)
(declare-fun Tm_refine_2efe27e9e269be06ffc0ab925fe148ff (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_5b2c2c7127e783eee89af2949355a77f () Term)
(declare-fun Vale.AES.X64.PolyOps.va_lemma_VSwap@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_lemma_VSwap>


; <Start encoding Vale.AES.X64.PolyOps.va_wp_VSwap>


(declare-fun Vale.AES.X64.PolyOps.va_wp_VSwap (Term Term Term Term) Term)


(declare-fun Vale.AES.X64.PolyOps.va_wp_VSwap@tok () Term)


(declare-fun Tm_abs_a736dca1d86e0655cd546f2c974ec369 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_ad072b2208a5630c11f73683a437de92 (Term Term Term Term) Term)

; </end encoding Vale.AES.X64.PolyOps.va_wp_VSwap>


; <Start encoding Vale.AES.X64.PolyOps.va_wpProof_VSwap>


(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VSwap (Term Term Term Term) Term)

(declare-fun Tm_refine_0cfbb1a1f2ea2dfca7e59dc1cff9a665 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_84803c1f5d39468aee809a1ac7484d03 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VSwap@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_wpProof_VSwap>


; <Start encoding Vale.AES.X64.PolyOps.va_quick_VSwap>

(declare-fun Vale.AES.X64.PolyOps.va_quick_VSwap (Term Term) Term)
(declare-fun Tm_arrow_4a982cad487607d2e54797141afaaae9 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_quick_VSwap@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_quick_VSwap>


; <Start encoding Vale.AES.X64.PolyOps.va_code_VPolyMul>

(declare-fun Vale.AES.X64.PolyOps.va_code_VPolyMul (Term Term Term Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_code_VPolyMul@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_code_VPolyMul>


; <Start encoding Vale.AES.X64.PolyOps.va_codegen_success_VPolyMul>

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VPolyMul (Term Term Term Term Term) Term)

(declare-fun Vale.AES.X64.PolyOps.va_codegen_success_VPolyMul@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_codegen_success_VPolyMul>


; <Start encoding Vale.AES.X64.PolyOps.va_lemma_VPolyMul>

(declare-fun Vale.AES.X64.PolyOps.va_lemma_VPolyMul (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_65fe89042672c58cb038955b1a2c5021 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8c5d4226980e819bfbdd296468d5237b () Term)
(declare-fun Vale.AES.X64.PolyOps.va_lemma_VPolyMul@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_lemma_VPolyMul>


; <Start encoding Vale.AES.X64.PolyOps.va_wp_VPolyMul>


(declare-fun Vale.AES.X64.PolyOps.va_wp_VPolyMul (Term Term Term Term Term Term Term) Term)


(declare-fun Vale.AES.X64.PolyOps.va_wp_VPolyMul@tok () Term)



(declare-fun Tm_ghost_arrow_a083b50b26d5aad9250f78f8b7e52add (Term) Term)
(declare-fun Tm_abs_3aa8ab6768409aba216969d8baca25b4 (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_19a9c8ed3936e634435144878904b340 (Term) Term)
(declare-fun Tm_abs_d0e9b6c3bad55491c4faafc1e8606248 (Term Term Term) Term)









(declare-fun Tm_abs_5d0ba2a62efdb9e1ecd1664cd06c6404 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9a9c32732e2d76287de853de4f65006e (Term Term Term Term Term Term Term) Term)

































; </end encoding Vale.AES.X64.PolyOps.va_wp_VPolyMul>


; <Start encoding Vale.AES.X64.PolyOps.va_wpProof_VPolyMul>


(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VPolyMul (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f0c5da20ecc9f20fd98f5fede725b831 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_b4c7c6ed3f6f6afa0d977b7f549c9505 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_wpProof_VPolyMul@tok () Term)


; </end encoding Vale.AES.X64.PolyOps.va_wpProof_VPolyMul>


; <Start encoding Vale.AES.X64.PolyOps.va_quick_VPolyMul>

(declare-fun Vale.AES.X64.PolyOps.va_quick_VPolyMul (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8ca4035dad2a036f13ffbe0a6e286204 () Term)
(declare-fun Vale.AES.X64.PolyOps.va_quick_VPolyMul@tok () Term)

; </end encoding Vale.AES.X64.PolyOps.va_quick_VPolyMul>


; End Externals for interface Vale.AES.X64.PolyOps


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.X64.PolyOps (309 decls; total size 18687)

;;; Start module Vale.Def.TypesNative_s

; Externals for module Vale.Def.TypesNative_s


; <Start encoding Vale.Def.TypesNative_s.natN>

(declare-fun Vale.Def.TypesNative_s.natN (Term) Term)

(declare-fun Vale.Def.TypesNative_s.natN@tok () Term)

; </end encoding Vale.Def.TypesNative_s.natN>


; <Start encoding Vale.Def.TypesNative_s.pow2_norm>

(declare-fun Vale.Def.TypesNative_s.pow2_norm (Term) Term)

(declare-fun Vale.Def.TypesNative_s.pow2_norm@tok () Term)

; </end encoding Vale.Def.TypesNative_s.pow2_norm>


; <Start encoding Vale.Def.TypesNative_s.reveal_iand>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_iand (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_iand@tok () Term)

; </end encoding Vale.Def.TypesNative_s.reveal_iand>


; <Start encoding Vale.Def.TypesNative_s.reveal_ixor>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_ixor (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_ixor@tok () Term)

; </end encoding Vale.Def.TypesNative_s.reveal_ixor>


; <Start encoding Vale.Def.TypesNative_s.reveal_ior>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_ior (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_ior@tok () Term)

; </end encoding Vale.Def.TypesNative_s.reveal_ior>


; <Start encoding Vale.Def.TypesNative_s.reveal_inot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_inot (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_inot@tok () Term)

; </end encoding Vale.Def.TypesNative_s.reveal_inot>


; <Start encoding Vale.Def.TypesNative_s.reveal_ishl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_ishl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_ishl@tok () Term)

; </end encoding Vale.Def.TypesNative_s.reveal_ishl>


; <Start encoding Vale.Def.TypesNative_s.reveal_ishr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_ishr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.TypesNative_s.reveal_ishr@tok () Term)

; </end encoding Vale.Def.TypesNative_s.reveal_ishr>


; End Externals for module Vale.Def.TypesNative_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.Def.TypesNative_s (37 decls; total size 7830)

;;; Start interface Vale.Arch.TypesNative

; Externals for interface Vale.Arch.TypesNative


; <Start encoding Vale.Arch.TypesNative.nth>


(declare-fun Vale.Arch.TypesNative.nth (Term Term Term) Term)


(declare-fun Vale.Arch.TypesNative.nth@tok () Term)


; </end encoding Vale.Arch.TypesNative.nth>


; <Start encoding Vale.Arch.TypesNative.natN>

(declare-fun Vale.Arch.TypesNative.natN (Term) Term)

(declare-fun Vale.Arch.TypesNative.natN@tok () Term)

; </end encoding Vale.Arch.TypesNative.natN>


; <Start encoding Vale.Arch.TypesNative.pow2_norm>

(declare-fun Vale.Arch.TypesNative.pow2_norm (Term) Term)

(declare-fun Vale.Arch.TypesNative.pow2_norm@tok () Term)

; </end encoding Vale.Arch.TypesNative.pow2_norm>


; <Start encoding Vale.Arch.TypesNative.lemma_equal_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_equal_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_equal_nth@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_equal_nth>


; <Start encoding Vale.Arch.TypesNative.lemma_zero_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_zero_nth (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_zero_nth@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_zero_nth>


; <Start encoding Vale.Arch.TypesNative.lemma_quad32_vec_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_quad32_vec_equal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_quad32_vec_equal@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_quad32_vec_equal>


; <Start encoding Vale.Arch.TypesNative.lemma_iand_nth_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_nth_i (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_nth_i@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_iand_nth_i>


; <Start encoding Vale.Arch.TypesNative.lemma_ixor_nth_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ixor_nth_i (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ixor_nth_i@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ixor_nth_i>


; <Start encoding Vale.Arch.TypesNative.lemma_ior_nth_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ior_nth_i (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ior_nth_i@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ior_nth_i>


; <Start encoding Vale.Arch.TypesNative.lemma_inot_nth_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_inot_nth_i (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_inot_nth_i@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_inot_nth_i>


; <Start encoding Vale.Arch.TypesNative.lemma_ishl_nth_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishl_nth_i (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishl_nth_i@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishl_nth_i>


; <Start encoding Vale.Arch.TypesNative.lemma_ishr_nth_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_nth_i (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_nth_i@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishr_nth_i>


; <Start encoding Vale.Arch.TypesNative.lemma_iand_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_nth@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_iand_nth>


; <Start encoding Vale.Arch.TypesNative.lemma_ixor_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ixor_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ixor_nth@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ixor_nth>


; <Start encoding Vale.Arch.TypesNative.lemma_ior_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ior_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ior_nth@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ior_nth>


; <Start encoding Vale.Arch.TypesNative.lemma_inot_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_inot_nth (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_inot_nth@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_inot_nth>


; <Start encoding Vale.Arch.TypesNative.lemma_ishl_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishl_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishl_nth@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishl_nth>


; <Start encoding Vale.Arch.TypesNative.lemma_ishr_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_nth@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishr_nth>


; <Start encoding Vale.Arch.TypesNative.lemma_iand_nth_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_nth_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_nth_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_iand_nth_all>


; <Start encoding Vale.Arch.TypesNative.lemma_ixor_nth_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ixor_nth_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ixor_nth_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ixor_nth_all>


; <Start encoding Vale.Arch.TypesNative.lemma_ior_nth_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ior_nth_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ior_nth_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ior_nth_all>


; <Start encoding Vale.Arch.TypesNative.lemma_inot_nth_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_inot_nth_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_inot_nth_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_inot_nth_all>


; <Start encoding Vale.Arch.TypesNative.lemma_ishl_nth_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishl_nth_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishl_nth_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishl_nth_all>


; <Start encoding Vale.Arch.TypesNative.lemma_ishr_nth_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_nth_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_nth_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishr_nth_all>


; <Start encoding Vale.Arch.TypesNative.reveal_iand_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.reveal_iand_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.reveal_iand_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.reveal_iand_all>


; <Start encoding Vale.Arch.TypesNative.reveal_ixor_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.reveal_ixor_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.reveal_ixor_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.reveal_ixor_all>


; <Start encoding Vale.Arch.TypesNative.reveal_ior_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.reveal_ior_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.reveal_ior_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.reveal_ior_all>


; <Start encoding Vale.Arch.TypesNative.reveal_inot_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.reveal_inot_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.reveal_inot_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.reveal_inot_all>


; <Start encoding Vale.Arch.TypesNative.reveal_ishl_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.reveal_ishl_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.reveal_ishl_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.reveal_ishl_all>


; <Start encoding Vale.Arch.TypesNative.reveal_ishr_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.reveal_ishr_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.reveal_ishr_all@tok () Term)

; </end encoding Vale.Arch.TypesNative.reveal_ishr_all>


; <Start encoding Vale.Arch.TypesNative.lemma_nat32_xor_commutes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_nat32_xor_commutes (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_nat32_xor_commutes@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_nat32_xor_commutes>


; <Start encoding Vale.Arch.TypesNative.lemma_nat32_xor_commutes_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_nat32_xor_commutes_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_nat32_xor_commutes_forall@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_nat32_xor_commutes_forall>


; <Start encoding Vale.Arch.TypesNative.lemma_quad32_xor_commutes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_quad32_xor_commutes (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_quad32_xor_commutes@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_quad32_xor_commutes>


; <Start encoding Vale.Arch.TypesNative.lemma_quad32_xor_commutes_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_quad32_xor_commutes_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_quad32_xor_commutes_forall@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_quad32_xor_commutes_forall>


; <Start encoding Vale.Arch.TypesNative.lemma_quad32_xor_associates>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_quad32_xor_associates (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_quad32_xor_associates@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_quad32_xor_associates>


; <Start encoding Vale.Arch.TypesNative.lemma_iand_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_pow2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_pow2@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_iand_pow2>


; <Start encoding Vale.Arch.TypesNative.lemma_ishr_pow2_diff>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_pow2_diff (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_pow2_diff@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishr_pow2_diff>


; <Start encoding Vale.Arch.TypesNative.not>

(declare-fun Vale.Arch.TypesNative.not (Term) Term)
(declare-fun Tm_arrow_a9f8a2e504f49bf12fdda2bb70e77093 () Term)
(declare-fun Vale.Arch.TypesNative.not@tok () Term)

; </end encoding Vale.Arch.TypesNative.not>


; <Start encoding Vale.Arch.TypesNative.lemma_iand_maybe_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_maybe_pow2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_maybe_pow2@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_iand_maybe_pow2>


; <Start encoding Vale.Arch.TypesNative.lemma_iand_pow2_64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_pow2_64 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_pow2_64@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_iand_pow2_64>


; <Start encoding Vale.Arch.TypesNative.lemma_ishr_pow2_diff64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_pow2_diff64 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_pow2_diff64@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishr_pow2_diff64>


; <Start encoding Vale.Arch.TypesNative.lemma_ishr_zero64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_zero64 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_ishr_zero64@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_ishr_zero64>


; <Start encoding Vale.Arch.TypesNative.lemma_iand_maybe_pow2_64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_maybe_pow2_64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Arch.TypesNative.lemma_iand_maybe_pow2_64@tok () Term)

; </end encoding Vale.Arch.TypesNative.lemma_iand_maybe_pow2_64>


; End Externals for interface Vale.Arch.TypesNative


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Arch.TypesNative (182 decls; total size 21091)

;;; Start interface Vale.AES.GCTR

; Externals for interface Vale.AES.GCTR


; <Start encoding Vale.AES.GCTR.make_gctr_plain_LE>

(declare-fun Vale.AES.GCTR.make_gctr_plain_LE (Term) Term)
(declare-fun Tm_arrow_fa19a7b934950de7aa15a579debd9d0f () Term)
(declare-fun Vale.AES.GCTR.make_gctr_plain_LE@tok () Term)

; </end encoding Vale.AES.GCTR.make_gctr_plain_LE>


; <Start encoding Vale.AES.GCTR.inc32lite>

(declare-fun Vale.AES.GCTR.inc32lite (Term Term) Term)

(declare-fun Vale.AES.GCTR.inc32lite@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Vale.AES.GCTR.inc32lite; Namespace Vale.AES.GCTR
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(19,4-19,13); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(19,4-19,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x1
Prims.int))
(HasType (Vale.AES.GCTR.inc32lite @x0
@x1)
(Vale.Def.Types_s.quad32 Dummy_value)))
 

:pattern ((Vale.AES.GCTR.inc32lite @x0
@x1))
:qid typing_Vale.AES.GCTR.inc32lite))

:named typing_Vale.AES.GCTR.inc32lite))

; </end encoding Vale.AES.GCTR.inc32lite>


; <Start encoding Vale.AES.GCTR.empty_seq_quad32>

(declare-fun Vale.AES.GCTR.empty_seq_quad32 (Dummy_sort) Term)

; </end encoding Vale.AES.GCTR.empty_seq_quad32>


; <Start encoding Vale.AES.GCTR.lemma_counter_init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.lemma_counter_init (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.lemma_counter_init@tok () Term)

; </end encoding Vale.AES.GCTR.lemma_counter_init>


; <Start encoding Vale.AES.GCTR.partial_seq_agreement>

(declare-fun Vale.AES.GCTR.partial_seq_agreement (Term Term Term Term) Term)
(declare-fun Tm_arrow_9810d4b49f4b8e57888b94b2abc79506 () Term)
(declare-fun Vale.AES.GCTR.partial_seq_agreement@tok () Term)
(declare-fun Tm_refine_21b1463d18ebbb1eb97818a4f59e4000 (Term Term) Term)


(declare-fun Tm_arrow_769f4de5970909e59fd6ecd7ccea5c62 (Term Term) Term)
(declare-fun Tm_abs_4a69b453c9615d806ba39455d931028f (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;Equation for Vale.AES.GCTR.partial_seq_agreement
;;; Fact-ids: Name Vale.AES.GCTR.partial_seq_agreement; Namespace Vale.AES.GCTR
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(34,4-34,25); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(34,4-34,25)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Vale.AES.GCTR.partial_seq_agreement @x0
@x1
@x2
@x3))

;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(35,2-36,97); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(35,2-36,97)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(35,2-35,10); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(35,2-35,10)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x3))


;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(35,14-35,28); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(35,14-35,28)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
@x0)))


;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(35,32-35,46); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(35,32-35,46)
(<= (BoxInt_proj_0 @x3)
(BoxInt_proj_0 (FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
@x1)))


;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(36,2-36,97); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(36,2-36,97)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Tm_refine_21b1463d18ebbb1eb97818a4f59e4000 @x1
@x0))

;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(36,52-36,59); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(36,52-36,59)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x4))


;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(36,63-36,69); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(36,63-36,69)
(< (BoxInt_proj_0 @x4)
(BoxInt_proj_0 @x3))
)

;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(36,74-36,96); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.GCTR.fsti(36,74-36,96)
(= (FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
@x0
@x4)
(FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
@x1
@x4))
)
 

:pattern ((FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
@x0
@x4))

:pattern ((FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
@x1
@x4))
:qid equation_Vale.AES.GCTR.partial_seq_agreement.1))
)
)
 

:pattern ((Vale.AES.GCTR.partial_seq_agreement @x0
@x1
@x2
@x3))
:qid equation_Vale.AES.GCTR.partial_seq_agreement))

:named equation_Vale.AES.GCTR.partial_seq_agreement))

; </end encoding Vale.AES.GCTR.partial_seq_agreement>


; <Start encoding Vale.AES.GCTR.gctr_encrypt_block_offset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_encrypt_block_offset (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_encrypt_block_offset@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_encrypt_block_offset>


; <Start encoding Vale.AES.GCTR.gctr_encrypt_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_encrypt_empty (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_encrypt_empty@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_encrypt_empty>


; <Start encoding Vale.AES.GCTR.aes_encrypt_BE>

(declare-fun Vale.AES.GCTR.aes_encrypt_BE (Term Term Term) Term)


(declare-fun Vale.AES.GCTR.aes_encrypt_BE@tok () Term)


; </end encoding Vale.AES.GCTR.aes_encrypt_BE>


; <Start encoding Vale.AES.GCTR.gctr_registers_def>

(declare-fun Vale.AES.GCTR.gctr_registers_def (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44456b9c6c62afb0b848e4b6fcef9e6e () Term)
(declare-fun Vale.AES.GCTR.gctr_registers_def@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_registers_def>


; <Start encoding Vale.AES.GCTR.gctr_registers>

(declare-fun Vale.AES.GCTR.gctr_registers (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Vale.AES.GCTR.gctr_registers@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_registers>


; <Start encoding Vale.AES.GCTR.gctr_registers_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_registers_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_registers_reveal@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_registers_reveal>


; <Start encoding Vale.AES.GCTR.gctr_partial_def>

(declare-fun Vale.AES.GCTR.gctr_partial_def (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8ea5e054771fde89a55252cc1f8f0b33 () Term)
(declare-fun Vale.AES.GCTR.gctr_partial_def@tok () Term)




(declare-fun Tm_abs_08a2abbc5a28082fe3a1b0de86e03561 (Term Term Term Term Term Term) Term)



; </end encoding Vale.AES.GCTR.gctr_partial_def>


; <Start encoding Vale.AES.GCTR.gctr_partial>

(declare-fun Vale.AES.GCTR.gctr_partial (Term Term Term Term Term Term) Term)

(declare-fun Vale.AES.GCTR.gctr_partial@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial>


; <Start encoding Vale.AES.GCTR.gctr_partial_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_reveal@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial_reveal>


; <Start encoding Vale.AES.GCTR.gctr_partial_opaque_init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_opaque_init (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_opaque_init@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial_opaque_init>


; <Start encoding Vale.AES.GCTR.lemma_gctr_partial_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.lemma_gctr_partial_append (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.lemma_gctr_partial_append@tok () Term)

; </end encoding Vale.AES.GCTR.lemma_gctr_partial_append>


; <Start encoding Vale.AES.GCTR.gctr_partial_opaque_ignores_postfix>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_opaque_ignores_postfix (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_opaque_ignores_postfix@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial_opaque_ignores_postfix>


; <Start encoding Vale.AES.GCTR.gctr_partial_extend6>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_extend6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_extend6@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial_extend6>


; <Start encoding Vale.AES.GCTR.gctr_partial_completed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_completed (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_completed@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial_completed>


; <Start encoding Vale.AES.GCTR.gctr_partial_opaque_completed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_opaque_completed (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_opaque_completed@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial_opaque_completed>


; <Start encoding Vale.AES.GCTR.gctr_partial_to_full_basic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_to_full_basic (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_to_full_basic@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial_to_full_basic>


; <Start encoding Vale.AES.GCTR.gctr_partial_to_full_advanced>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_to_full_advanced (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_partial_to_full_advanced@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_partial_to_full_advanced>


; <Start encoding Vale.AES.GCTR.gctr_encrypt_one_block>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_encrypt_one_block (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_encrypt_one_block@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_encrypt_one_block>


; <Start encoding Vale.AES.GCTR.gctr_bytes_helper>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.GCTR.gctr_bytes_helper (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.GCTR.gctr_bytes_helper@tok () Term)

; </end encoding Vale.AES.GCTR.gctr_bytes_helper>


; End Externals for interface Vale.AES.GCTR


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.GCTR (124 decls; total size 17233)

;;; Start module Vale.Poly1305.Spec_s

; Externals for module Vale.Poly1305.Spec_s


; <Start encoding Vale.Poly1305.Spec_s.modp>

(declare-fun Vale.Poly1305.Spec_s.modp (Term) Term)

(declare-fun Vale.Poly1305.Spec_s.modp@tok () Term)

; </end encoding Vale.Poly1305.Spec_s.modp>


; <Start encoding Vale.Poly1305.Spec_s.mod2_128>

(declare-fun Vale.Poly1305.Spec_s.mod2_128 (Term) Term)

(declare-fun Vale.Poly1305.Spec_s.mod2_128@tok () Term)

; </end encoding Vale.Poly1305.Spec_s.mod2_128>


; <Start encoding Vale.Poly1305.Spec_s.poly1305_hash_blocks>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented_token () Term)
(declare-fun Vale.Poly1305.Spec_s.poly1305_hash_blocks (Term Term Term Term Term) Term)
(declare-fun Vale.Poly1305.Spec_s.poly1305_hash_blocks@tok () Term)
(declare-fun Tm_arrow_6c528cb178c0356159679935f3a11594 () Term)


(declare-fun Tm_arrow_748afe78e114b261095f8d00d811821b () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.Poly1305.Spec_s.poly1305_hash_blocks; Namespace Vale.Poly1305.Spec_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.Poly1305.Spec_s.fst(15,8-15,28); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.Poly1305.Spec_s.fst(15,8-15,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented))

:named @fuel_irrelevance_Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.Poly1305.Spec_s.poly1305_hash_blocks; Namespace Vale.Poly1305.Spec_s
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.Poly1305.Spec_s.fst(15,8-15,28); use=/home/guido/r/everest/hacl-star/vale/specs/crypto/Vale.Poly1305.Spec_s.fst(15,8-15,28)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Vale.Poly1305.Spec_s.poly1305_hash_blocks @x0
@x1
@x2
@x3
@x4)
(Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((Vale.Poly1305.Spec_s.poly1305_hash_blocks @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented))

:named @fuel_correspondence_Vale.Poly1305.Spec_s.poly1305_hash_blocks.fuel_instrumented))

; </end encoding Vale.Poly1305.Spec_s.poly1305_hash_blocks>


; <Start encoding Vale.Poly1305.Spec_s.make_r>

(declare-fun Vale.Poly1305.Spec_s.make_r (Term) Term)

(declare-fun Vale.Poly1305.Spec_s.make_r@tok () Term)

; </end encoding Vale.Poly1305.Spec_s.make_r>


; <Start encoding Vale.Poly1305.Spec_s.poly1305_hash_all>


(declare-fun Vale.Poly1305.Spec_s.poly1305_hash_all (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_123f618ccfe5441f8a21b4b72e2043a2 () Term)
(declare-fun Vale.Poly1305.Spec_s.poly1305_hash_all@tok () Term)


; </end encoding Vale.Poly1305.Spec_s.poly1305_hash_all>


; <Start encoding Vale.Poly1305.Spec_s.poly1305_hash>


(declare-fun Vale.Poly1305.Spec_s.poly1305_hash (Term Term Term Term) Term)

(declare-fun Tm_arrow_cbbdc864ff93950a554a5f8914bbc658 () Term)
(declare-fun Vale.Poly1305.Spec_s.poly1305_hash@tok () Term)


; </end encoding Vale.Poly1305.Spec_s.poly1305_hash>


; End Externals for module Vale.Poly1305.Spec_s


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.Poly1305.Spec_s (46 decls; total size 8934)

;;; Start interface Vale.Poly1305.Math

; Externals for interface Vale.Poly1305.Math


; <Start encoding Vale.Poly1305.Math.logand64>

(declare-fun Vale.Poly1305.Math.logand64 (Term Term) Term)

(declare-fun Vale.Poly1305.Math.logand64@tok () Term)

; </end encoding Vale.Poly1305.Math.logand64>


; <Start encoding Vale.Poly1305.Math.logand128>

(declare-fun Vale.Poly1305.Math.logand128 (Term Term) Term)

(declare-fun Vale.Poly1305.Math.logand128@tok () Term)

; </end encoding Vale.Poly1305.Math.logand128>


; <Start encoding Vale.Poly1305.Math.shift_left64>

(declare-fun Vale.Poly1305.Math.shift_left64 (Term Term) Term)

(declare-fun Vale.Poly1305.Math.shift_left64@tok () Term)

; </end encoding Vale.Poly1305.Math.shift_left64>


; <Start encoding Vale.Poly1305.Math.shift_right64>

(declare-fun Vale.Poly1305.Math.shift_right64 (Term Term) Term)

(declare-fun Vale.Poly1305.Math.shift_right64@tok () Term)

; </end encoding Vale.Poly1305.Math.shift_right64>


; <Start encoding Vale.Poly1305.Math.lowerUpper128_def>

(declare-fun Vale.Poly1305.Math.lowerUpper128_def (Term Term) Term)
(declare-fun Tm_arrow_682ef7967fc4843f5482250829554a9b () Term)
(declare-fun Vale.Poly1305.Math.lowerUpper128_def@tok () Term)

; </end encoding Vale.Poly1305.Math.lowerUpper128_def>


; <Start encoding Vale.Poly1305.Math.lowerUpper128>

(declare-fun Vale.Poly1305.Math.lowerUpper128 (Term Term) Term)

(declare-fun Vale.Poly1305.Math.lowerUpper128@tok () Term)

; </end encoding Vale.Poly1305.Math.lowerUpper128>


; <Start encoding Vale.Poly1305.Math.lowerUpper128_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lowerUpper128_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lowerUpper128_reveal@tok () Term)

; </end encoding Vale.Poly1305.Math.lowerUpper128_reveal>


; <Start encoding Vale.Poly1305.Math.lowerUpper192_def>

(declare-fun Vale.Poly1305.Math.lowerUpper192_def (Term Term) Term)
(declare-fun Tm_arrow_98b87f009462d751365d007cecad3db2 () Term)
(declare-fun Vale.Poly1305.Math.lowerUpper192_def@tok () Term)

; </end encoding Vale.Poly1305.Math.lowerUpper192_def>


; <Start encoding Vale.Poly1305.Math.lowerUpper192>

(declare-fun Vale.Poly1305.Math.lowerUpper192 (Term Term) Term)

(declare-fun Vale.Poly1305.Math.lowerUpper192@tok () Term)

; </end encoding Vale.Poly1305.Math.lowerUpper192>


; <Start encoding Vale.Poly1305.Math.lowerUpper192_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lowerUpper192_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lowerUpper192_reveal@tok () Term)

; </end encoding Vale.Poly1305.Math.lowerUpper192_reveal>


; <Start encoding Vale.Poly1305.Math.lemma_poly_multiply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_poly_multiply (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_poly_multiply@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_poly_multiply>


; <Start encoding Vale.Poly1305.Math.lemma_poly_reduce>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_poly_reduce (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_poly_reduce@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_poly_reduce>


; <Start encoding Vale.Poly1305.Math.lemma_poly_bits64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_poly_bits64 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_poly_bits64@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_poly_bits64>


; <Start encoding Vale.Poly1305.Math.lemma_mul_strict_upper_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_mul_strict_upper_bound (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_mul_strict_upper_bound@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_mul_strict_upper_bound>


; <Start encoding Vale.Poly1305.Math.lemma_bytes_shift_power2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_bytes_shift_power2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_bytes_shift_power2@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_bytes_shift_power2>


; <Start encoding Vale.Poly1305.Math.lemma_bytes_and_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_bytes_and_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_bytes_and_mod@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_bytes_and_mod>


; <Start encoding Vale.Poly1305.Math.lemma_mod_power2_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_mod_power2_lo (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_mod_power2_lo@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_mod_power2_lo>


; <Start encoding Vale.Poly1305.Math.lemma_power2_add64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_power2_add64 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_power2_add64@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_power2_add64>


; <Start encoding Vale.Poly1305.Math.lemma_mod_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_mod_hi (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_mod_hi@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_mod_hi>


; <Start encoding Vale.Poly1305.Math.lemma_poly_demod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_poly_demod (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_poly_demod@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_poly_demod>


; <Start encoding Vale.Poly1305.Math.lemma_reduce128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_reduce128 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_reduce128@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_reduce128>


; <Start encoding Vale.Poly1305.Math.lemma_add_key>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_add_key (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_add_key@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_add_key>


; <Start encoding Vale.Poly1305.Math.lemma_lowerUpper128_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_lowerUpper128_and (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_lowerUpper128_and@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_lowerUpper128_and>


; <Start encoding Vale.Poly1305.Math.lemma_add_mod128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Poly1305.Math.lemma_add_mod128 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Poly1305.Math.lemma_add_mod128@tok () Term)

; </end encoding Vale.Poly1305.Math.lemma_add_mod128>


; <Start encoding Vale.Poly1305.Math.bare_r>

(declare-fun Vale.Poly1305.Math.bare_r (Term) Term)

(declare-fun Vale.Poly1305.Math.bare_r@tok () Term)

; </end encoding Vale.Poly1305.Math.bare_r>


; End Externals for interface Vale.Poly1305.Math


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Poly1305.Math (112 decls; total size 13543)

;;; Start interface Vale.AES.AES_helpers

; Externals for interface Vale.AES.AES_helpers


; <Start encoding Vale.AES.AES_helpers.op_String_Access>


(declare-fun Vale.AES.AES_helpers.op_String_Access (Term Term Term) Term)


(declare-fun Vale.AES.AES_helpers.op_String_Access@tok () Term)


; </end encoding Vale.AES.AES_helpers.op_String_Access>


; <Start encoding Vale.AES.AES_helpers.op_String_Assignment>

(declare-fun Vale.AES.AES_helpers.op_String_Assignment (Term) Term)

(declare-fun Tm_arrow_7e485c27fb1eafdeedaca19df2a1026f (Term) Term)
(declare-fun Tm_arrow_53ef21423a9887fc52c4964ac3c9c91e () Term)
(declare-fun Vale.AES.AES_helpers.op_String_Assignment@tok () Term)


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name Vale.AES.AES_helpers.op_String_Assignment; Namespace Vale.AES.AES_helpers
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Seq.Base.upd@tok))
:named @kick_partial_app_2906c1135098a21df1fe28d841abb06a))

; </end encoding Vale.AES.AES_helpers.op_String_Assignment>


; <Start encoding Vale.AES.AES_helpers.op_Star_Hat>

(declare-fun Vale.AES.AES_helpers.op_Star_Hat (Term Term) Term)

(declare-fun Vale.AES.AES_helpers.op_Star_Hat@tok () Term)

; </end encoding Vale.AES.AES_helpers.op_Star_Hat>


; <Start encoding Vale.AES.AES_helpers.op_Star_Hat_Hat>

(declare-fun Vale.AES.AES_helpers.op_Star_Hat_Hat (Term Term) Term)

(declare-fun Vale.AES.AES_helpers.op_Star_Hat_Hat@tok () Term)

; </end encoding Vale.AES.AES_helpers.op_Star_Hat_Hat>


; <Start encoding Vale.AES.AES_helpers.quad32_shl32>

(declare-fun Vale.AES.AES_helpers.quad32_shl32 (Term) Term)

(declare-fun Vale.AES.AES_helpers.quad32_shl32@tok () Term)

; </end encoding Vale.AES.AES_helpers.quad32_shl32>


; <Start encoding Vale.AES.AES_helpers.round_key_128_rcon>

(declare-fun Vale.AES.AES_helpers.round_key_128_rcon (Term Term) Term)
(declare-fun Tm_arrow_5bce3b6d159c4757d879697540a62161 () Term)
(declare-fun Vale.AES.AES_helpers.round_key_128_rcon@tok () Term)

; </end encoding Vale.AES.AES_helpers.round_key_128_rcon>


; <Start encoding Vale.AES.AES_helpers.round_key_128>

(declare-fun Vale.AES.AES_helpers.round_key_128 (Term Term) Term)
(declare-fun Tm_arrow_7ef63fef4f2bea3dbadf0d151970f65e () Term)
(declare-fun Vale.AES.AES_helpers.round_key_128@tok () Term)

; </end encoding Vale.AES.AES_helpers.round_key_128>


; <Start encoding Vale.AES.AES_helpers.expand_key_128_def>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented_token () Term)
(declare-fun Vale.AES.AES_helpers.expand_key_128_def (Term Term) Term)
(declare-fun Vale.AES.AES_helpers.expand_key_128_def@tok () Term)


(declare-fun Tm_arrow_90f1f214295ff3d45c654a0b71f57df0 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.AES.AES_helpers.expand_key_128_def; Namespace Vale.AES.AES_helpers
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.AES_helpers.fsti(36,8-36,26); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.AES_helpers.fsti(36,8-36,26)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented (SFuel @u0)
@x1
@x2)
(Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented))

:named @fuel_irrelevance_Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.AES.AES_helpers.expand_key_128_def; Namespace Vale.AES.AES_helpers
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.AES_helpers.fsti(36,8-36,26); use=/home/guido/r/everest/hacl-star/vale/code/crypto/aes/Vale.AES.AES_helpers.fsti(36,8-36,26)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Vale.AES.AES_helpers.expand_key_128_def @x0
@x1)
(Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((Vale.AES.AES_helpers.expand_key_128_def @x0
@x1))
:qid @fuel_correspondence_Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented))

:named @fuel_correspondence_Vale.AES.AES_helpers.expand_key_128_def.fuel_instrumented))

; </end encoding Vale.AES.AES_helpers.expand_key_128_def>


; <Start encoding Vale.AES.AES_helpers.expand_key_128>

(declare-fun Vale.AES.AES_helpers.expand_key_128 (Term Term) Term)


(declare-fun Vale.AES.AES_helpers.expand_key_128@tok () Term)


; </end encoding Vale.AES.AES_helpers.expand_key_128>


; <Start encoding Vale.AES.AES_helpers.expand_key_128_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.expand_key_128_reveal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.expand_key_128_reveal@tok () Term)

; </end encoding Vale.AES.AES_helpers.expand_key_128_reveal>


; <Start encoding Vale.AES.AES_helpers.lemma_expand_key_128_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.lemma_expand_key_128_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.lemma_expand_key_128_0@tok () Term)

; </end encoding Vale.AES.AES_helpers.lemma_expand_key_128_0>


; <Start encoding Vale.AES.AES_helpers.lemma_expand_key_128_i>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.lemma_expand_key_128_i (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.lemma_expand_key_128_i@tok () Term)

; </end encoding Vale.AES.AES_helpers.lemma_expand_key_128_i>


; <Start encoding Vale.AES.AES_helpers.lemma_expand_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.lemma_expand_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.lemma_expand_append@tok () Term)

; </end encoding Vale.AES.AES_helpers.lemma_expand_append>


; <Start encoding Vale.AES.AES_helpers.lemma_expand_key_128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.lemma_expand_key_128 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.lemma_expand_key_128@tok () Term)

; </end encoding Vale.AES.AES_helpers.lemma_expand_key_128>


; <Start encoding Vale.AES.AES_helpers.simd_round_key_128>

(declare-fun Vale.AES.AES_helpers.simd_round_key_128 (Term Term) Term)

(declare-fun Vale.AES.AES_helpers.simd_round_key_128@tok () Term)

; </end encoding Vale.AES.AES_helpers.simd_round_key_128>


; <Start encoding Vale.AES.AES_helpers.lemma_simd_round_key>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.lemma_simd_round_key (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.lemma_simd_round_key@tok () Term)

; </end encoding Vale.AES.AES_helpers.lemma_simd_round_key>


; <Start encoding Vale.AES.AES_helpers.commute_sub_bytes_shift_rows_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.commute_sub_bytes_shift_rows_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.commute_sub_bytes_shift_rows_forall@tok () Term)

; </end encoding Vale.AES.AES_helpers.commute_sub_bytes_shift_rows_forall>


; <Start encoding Vale.AES.AES_helpers.init_rounds_opaque>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.init_rounds_opaque (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.init_rounds_opaque@tok () Term)

; </end encoding Vale.AES.AES_helpers.init_rounds_opaque>


; <Start encoding Vale.AES.AES_helpers.finish_cipher>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.finish_cipher (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.finish_cipher@tok () Term)

; </end encoding Vale.AES.AES_helpers.finish_cipher>


; <Start encoding Vale.AES.AES_helpers.finish_cipher_opt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.finish_cipher_opt (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.finish_cipher_opt@tok () Term)

; </end encoding Vale.AES.AES_helpers.finish_cipher_opt>


; <Start encoding Vale.AES.AES_helpers.lemma_incr_msb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.lemma_incr_msb (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.lemma_incr_msb@tok () Term)

; </end encoding Vale.AES.AES_helpers.lemma_incr_msb>


; <Start encoding Vale.AES.AES_helpers.lemma_msb_in_bounds>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.AES_helpers.lemma_msb_in_bounds (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.AES_helpers.lemma_msb_in_bounds@tok () Term)

; </end encoding Vale.AES.AES_helpers.lemma_msb_in_bounds>


; End Externals for interface Vale.AES.AES_helpers


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.AES_helpers (118 decls; total size 14850)

;;; Start interface Vale.AES.X64.AESopt2

; Externals for interface Vale.AES.X64.AESopt2


; <Skipped />


; <Start encoding Vale.AES.X64.AESopt2.va_subscript_FStar__Seq__Base__seq>

(declare-fun Vale.AES.X64.AESopt2.va_subscript_FStar__Seq__Base__seq (Term) Term)

(declare-fun Tm_arrow_c0fec7d09c24dbd237f730feca109823 (Term) Term)
(declare-fun Tm_arrow_4de1f100902ce0371d1697fd33ecd664 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_subscript_FStar__Seq__Base__seq@tok () Term)




; </end encoding Vale.AES.X64.AESopt2.va_subscript_FStar__Seq__Base__seq>


; <Start encoding Vale.AES.X64.AESopt2.hkeys_b_powers>

(declare-fun Vale.AES.X64.AESopt2.hkeys_b_powers (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c8f69379f04589f7fde926f65379ba9f () Term)
(declare-fun Vale.AES.X64.AESopt2.hkeys_b_powers@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.hkeys_b_powers>


; <Start encoding Vale.AES.X64.AESopt2.quad32_opt_rev>

(declare-fun Vale.AES.X64.AESopt2.quad32_opt_rev (Term Term) Term)
(declare-fun Tm_arrow_b82bfe79c5a56e9af19fe8e514d3fa08 () Term)
(declare-fun Vale.AES.X64.AESopt2.quad32_opt_rev@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.quad32_opt_rev>


; <Start encoding Vale.AES.X64.AESopt2.index_opt_rev>

(declare-fun Vale.AES.X64.AESopt2.index_opt_rev (Term Term Term Term) Term)
(declare-fun Tm_arrow_94ab0a14ff7c58fae2f67fc7bbeb68cc () Term)
(declare-fun Vale.AES.X64.AESopt2.index_opt_rev@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.index_opt_rev>


; <Start encoding Vale.AES.X64.AESopt2.scratch_b_blocks>

(declare-fun Vale.AES.X64.AESopt2.scratch_b_blocks (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1cc9574605a3b03a85b7cf71a7b5c3ff () Term)
(declare-fun Vale.AES.X64.AESopt2.scratch_b_blocks@tok () Term)

(declare-fun Tm_abs_a0d2779a38d5f53618a7bc46ae34ab82 (Term Term Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt2.scratch_b_blocks>


; <Start encoding Vale.AES.X64.AESopt2.scratch_b_data>

(declare-fun Vale.AES.X64.AESopt2.scratch_b_data (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a1d0b142413f5c8eecb2faa9c9130656 () Term)
(declare-fun Vale.AES.X64.AESopt2.scratch_b_data@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.scratch_b_data>


; <Start encoding Vale.AES.X64.AESopt2.va_code_MulAdd_step>

(declare-fun Vale.AES.X64.AESopt2.va_code_MulAdd_step (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_dc191aa66c3071bbab93d52912d81916 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_code_MulAdd_step@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_code_MulAdd_step>


; <Start encoding Vale.AES.X64.AESopt2.va_codegen_success_MulAdd_step>

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_MulAdd_step (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_78dca7655d3192f9b9c8dad7e72b1212 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_MulAdd_step@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_codegen_success_MulAdd_step>


; <Start encoding Vale.AES.X64.AESopt2.va_lemma_MulAdd_step>

(declare-fun Vale.AES.X64.AESopt2.va_lemma_MulAdd_step (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_8a0d368210de5ee71a7c424c42c4fd81 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d280dc94cba838d5b9a097f07b23e9d8 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_lemma_MulAdd_step@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_lemma_MulAdd_step>


; <Start encoding Vale.AES.X64.AESopt2.va_wp_MulAdd_step>


(declare-fun Vale.AES.X64.AESopt2.va_wp_MulAdd_step (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_fa166a3fcbe889e1f74c102d05ee50f0 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wp_MulAdd_step@tok () Term)

(declare-fun Tm_refine_493726b0caab6179254e314147227b49 (Term) Term)

(declare-fun Tm_ghost_arrow_f6007572682dc9a1d6a5f56d71884035 (Term) Term)
(declare-fun Tm_abs_ed6d0e419459456a33e996d20caefe71 (Term Term Term) Term)
(declare-fun Tm_refine_6dbb83682d1bcd44be64e2741b6e25e0 (Term) Term)

(declare-fun Tm_ghost_arrow_fdbf0625535b320fab749f4d85534317 (Term) Term)
(declare-fun Tm_abs_3f6e482b335232017bc52fd2f46c873d (Term Term) Term)


(declare-fun Tm_ghost_arrow_98ec8e192c2faa97bcc0aeca30664d69 (Term) Term)
(declare-fun Tm_abs_8669db4e848bec7d496f888f75136856 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)


(declare-fun Tm_ghost_arrow_364258c70e3fe3cc9e30392b06da9d16 (Term) Term)
(declare-fun Tm_abs_597606c564b47fb87fb32e90b12eb571 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b3647abe553c1d024a216ad8dedad81c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c0f9ab1c226894d4e84f633aea2d34e4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_bdbe58a9a49777cdc15e6b804b9d36ee (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8cf900f337929b6d57663d63b3765100 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_dd54fddf152375f4a738261d50801b3c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_710adc13eb033f5dec1fb792529456ca (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_275c07f65590d11be09c1a118563a43f (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2c076ce2eb31ba25a19ad35a54330812 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_890d69e87c015a2f184b6cd52db59056 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f8001aaaa0afdba6cd322ff6ff6de0aa (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a649dd63d959d64c4e20ba977797d92d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fc343ea3e81875064d2a09783bb665f0 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

























; </end encoding Vale.AES.X64.AESopt2.va_wp_MulAdd_step>


; <Start encoding Vale.AES.X64.AESopt2.va_wpProof_MulAdd_step>


(declare-fun Vale.AES.X64.AESopt2.va_wpProof_MulAdd_step (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_d63d8245399e0512f5e953e82c422205 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_b933bd4c2d900030de4ca3699760c97d () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wpProof_MulAdd_step@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_wpProof_MulAdd_step>


; <Start encoding Vale.AES.X64.AESopt2.va_quick_MulAdd_step>

(declare-fun Vale.AES.X64.AESopt2.va_quick_MulAdd_step (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ffe7a448b2269720f0a76a21960a4508 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_quick_MulAdd_step@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_quick_MulAdd_step>


; <Start encoding Vale.AES.X64.AESopt2.va_code_ReduceLast>

(declare-fun Vale.AES.X64.AESopt2.va_code_ReduceLast (Term) Term)
(declare-fun Tm_arrow_658a4cdb215f588422db953154c1540a () Term)
(declare-fun Vale.AES.X64.AESopt2.va_code_ReduceLast@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_code_ReduceLast>


; <Start encoding Vale.AES.X64.AESopt2.va_codegen_success_ReduceLast>

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_ReduceLast (Term) Term)
(declare-fun Tm_arrow_ab605ecfacd12f588da069367db2f1dc () Term)
(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_ReduceLast@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_codegen_success_ReduceLast>


; <Start encoding Vale.AES.X64.AESopt2.va_lemma_ReduceLast>

(declare-fun Vale.AES.X64.AESopt2.va_lemma_ReduceLast (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_415c814dd32499a45702aa2e98c506e5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_64da3b088ac081dfe908b679bff770ab () Term)
(declare-fun Vale.AES.X64.AESopt2.va_lemma_ReduceLast@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_lemma_ReduceLast>


; <Start encoding Vale.AES.X64.AESopt2.va_wp_ReduceLast>


(declare-fun Vale.AES.X64.AESopt2.va_wp_ReduceLast (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1c48941124bea300ccb962ee3ca54df5 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wp_ReduceLast@tok () Term)




(declare-fun Tm_abs_7c4c81e8cb4e7b9fb9f66b6de6e04cea (Term Term Term Term Term Term Term Term Term Term) Term)



(declare-fun Tm_abs_75bc6c3c432275052c6e3d5eac834ca9 (Term Term Term Term Term Term Term Term Term Term) Term)

















(declare-fun Tm_abs_10a052c401956b8ef337ff438b2cf155 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9d657eca5f46035b97cc07d6a4fcd525 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fb1a9c5f8f8f5dbeacc49e4ccf9b0da1 (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ebc5f42221a501c0069240c791076d41 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_036c7bcddb2c83845a45a0485482c40b (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b9a8d6e87cb0b7dcba48533cd03d0107 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9be76e71fb6159a5d33fd6a41820bbf8 (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f33f4b6cc9a0b6523e57750752a87f2b (Term Term Term Term Term Term) Term)

















































; </end encoding Vale.AES.X64.AESopt2.va_wp_ReduceLast>


; <Start encoding Vale.AES.X64.AESopt2.va_wpProof_ReduceLast>


(declare-fun Vale.AES.X64.AESopt2.va_wpProof_ReduceLast (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_c74b7903de075aea722fa51513c641a3 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_6cac43047bdbda74562b229c73a52083 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wpProof_ReduceLast@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_wpProof_ReduceLast>


; <Start encoding Vale.AES.X64.AESopt2.va_quick_ReduceLast>

(declare-fun Vale.AES.X64.AESopt2.va_quick_ReduceLast (Term Term Term Term) Term)
(declare-fun Tm_arrow_909f46c328823f421a76b991fc4eace1 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_quick_ReduceLast@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_quick_ReduceLast>


; <Start encoding Vale.AES.X64.AESopt2.va_code_GhashUnroll_n>

(declare-fun Vale.AES.X64.AESopt2.va_code_GhashUnroll_n (Term Term Term) Term)
(declare-fun Tm_arrow_b800464fcab770900f4cf6619695d062 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_code_GhashUnroll_n@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_code_GhashUnroll_n>


; <Start encoding Vale.AES.X64.AESopt2.va_codegen_success_GhashUnroll_n>

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_GhashUnroll_n (Term Term Term) Term)
(declare-fun Tm_arrow_ec41c29732d6b4fc9734874da51480bf () Term)
(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_GhashUnroll_n@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_codegen_success_GhashUnroll_n>


; <Start encoding Vale.AES.X64.AESopt2.va_lemma_GhashUnroll_n>

(declare-fun Vale.AES.X64.AESopt2.va_lemma_GhashUnroll_n (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_9c1acf03a43ac57c0e773bbfc0f83e1e (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_9925c98382989d89c1c2f23b18e7a5d4 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_lemma_GhashUnroll_n@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_lemma_GhashUnroll_n>


; <Start encoding Vale.AES.X64.AESopt2.va_wp_GhashUnroll_n>


(declare-fun Vale.AES.X64.AESopt2.va_wp_GhashUnroll_n (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_b69d4ce86988f9a64723c56937885ac9 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wp_GhashUnroll_n@tok () Term)


(declare-fun Tm_abs_151702d6e2cfafb7625376924e1e41b9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_269f162de7c3e91b63622bb65a9e9598 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e0fa5aaf5bf3c2598a6472ce109eb8b6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_cd95583845affb22b12ab32d4bad9902 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_870ef40b2f555a736326e30a4c78cb36 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_115deb6a3d1c8ebd894792b239c7202c (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3dbdd6f09db37aa65a6882a50bf04937 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_cf00ed839a922e5a1cf1a3867c54f922 (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fe27c0b4f94d83c3ea0c137ad6f316da (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a12c8ff8f336694edaf031ea5e168eec (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a89379d743efb0be434509d2a3ecb79b (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_17df32b8d903182e5c95873ea42e77e9 (Term Term Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt2.va_wp_GhashUnroll_n>


; <Start encoding Vale.AES.X64.AESopt2.va_wpProof_GhashUnroll_n>


(declare-fun Vale.AES.X64.AESopt2.va_wpProof_GhashUnroll_n (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_15a074ebd4bb77d7084832bfd93e30ae (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8ce0817f3a1cbb4433c94b6c6ac95fbf () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wpProof_GhashUnroll_n@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_wpProof_GhashUnroll_n>


; <Start encoding Vale.AES.X64.AESopt2.va_quick_GhashUnroll_n>

(declare-fun Vale.AES.X64.AESopt2.va_quick_GhashUnroll_n (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_efdb75b2755673e15cd5c617167c9bff () Term)
(declare-fun Vale.AES.X64.AESopt2.va_quick_GhashUnroll_n@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_quick_GhashUnroll_n>


; <Start encoding Vale.AES.X64.AESopt2.va_code_Ghash_register>

(declare-fun Vale.AES.X64.AESopt2.va_code_Ghash_register (Term) Term)

(declare-fun Vale.AES.X64.AESopt2.va_code_Ghash_register@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_code_Ghash_register>


; <Start encoding Vale.AES.X64.AESopt2.va_codegen_success_Ghash_register>

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_Ghash_register (Term) Term)

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_Ghash_register@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_codegen_success_Ghash_register>


; <Start encoding Vale.AES.X64.AESopt2.va_lemma_Ghash_register>

(declare-fun Vale.AES.X64.AESopt2.va_lemma_Ghash_register (Term Term Term Term Term) Term)
(declare-fun Tm_refine_622ce7410fd8cedd71199b10d77b969c (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_3a0bf5d993e635068ff30639f38968f9 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_lemma_Ghash_register@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_lemma_Ghash_register>


; <Start encoding Vale.AES.X64.AESopt2.va_wp_Ghash_register>


(declare-fun Vale.AES.X64.AESopt2.va_wp_Ghash_register (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_f76ef5eb8982f8ce0ba78e3a965fadd8 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wp_Ghash_register@tok () Term)


(declare-fun Tm_abs_524b71d1530c560039c3d015719d58cd (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c8f4dd6d44aef4ce9f98038be4a929a6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_063ac6a002bbaaaa199bd1219bde787c (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_57d4d8613bf00bc16a7d619b58fd7e2b (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8a035d9cbfb8a1f5518f46321b52efc4 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9b94375da4044acd54ac8c4d332f09ab (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_bc09a117f4a244c8bd8045b07d63dfc5 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_cdcd77b41f2e131a6a068e1d7029934b (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_bef73e203268be493c4407176f54d8e8 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a20595cf054e55dea709a3239e2ba13e (Term Term Term Term Term) Term)

(declare-fun Tm_abs_afff028fb093a0eb253dec4d905ab245 (Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt2.va_wp_Ghash_register>


; <Start encoding Vale.AES.X64.AESopt2.va_wpProof_Ghash_register>


(declare-fun Vale.AES.X64.AESopt2.va_wpProof_Ghash_register (Term Term Term Term Term) Term)

(declare-fun Tm_refine_7e5befdba7a7b43ae6dd7a7b9e762b82 (Term Term) Term)
(declare-fun Tm_ghost_arrow_5020638cd133018905e292d75beec18a () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wpProof_Ghash_register@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_wpProof_Ghash_register>


; <Start encoding Vale.AES.X64.AESopt2.va_quick_Ghash_register>

(declare-fun Vale.AES.X64.AESopt2.va_quick_Ghash_register (Term Term Term) Term)
(declare-fun Tm_arrow_6169998ebac85639b72407b5fcbe5022 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_quick_Ghash_register@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_quick_Ghash_register>


; <Start encoding Vale.AES.X64.AESopt2.va_code_Ghash_buffer>

(declare-fun Vale.AES.X64.AESopt2.va_code_Ghash_buffer (Term) Term)

(declare-fun Vale.AES.X64.AESopt2.va_code_Ghash_buffer@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_code_Ghash_buffer>


; <Start encoding Vale.AES.X64.AESopt2.va_codegen_success_Ghash_buffer>

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_Ghash_buffer (Term) Term)

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_Ghash_buffer@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_codegen_success_Ghash_buffer>


; <Start encoding Vale.AES.X64.AESopt2.va_lemma_Ghash_buffer>

(declare-fun Vale.AES.X64.AESopt2.va_lemma_Ghash_buffer (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_59e89c65605d4563323c074754732fd0 (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a7a1d53313f8cfde5ea40617addf2b93 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_lemma_Ghash_buffer@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_lemma_Ghash_buffer>


; <Start encoding Vale.AES.X64.AESopt2.va_wp_Ghash_buffer>


(declare-fun Vale.AES.X64.AESopt2.va_wp_Ghash_buffer (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_e9e0122bba5ab5eadf9ed63e8f6ce599 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wp_Ghash_buffer@tok () Term)


(declare-fun Tm_abs_7d0e631a073b9871da92e9f8bd0f428a (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ac92e72c34aa3bf6b0546f8d20127891 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_911be7309c779d4a5eeec16174c2dec0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_37146d620a5d169de6d94bd38680376f (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_adb5c728a752a415ee2d67550189f32c (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_918f78fae6299c50a92d2812ec74e505 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2dfed800b5ee87c84e25137e13727ab4 (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5cfb7b1af2a009c291bee7eafb889466 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f31c9a8561cafdfdd5120056d207d4f8 (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5cfb1cba8887a1e7af4a5d412502fd29 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9aa0409dd9d0eb90bd5271de124c8afb (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e908c4c0026d921952494c9c63c2703e (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_1141769fdb591496239c59f20ac90d09 (Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt2.va_wp_Ghash_buffer>


; <Start encoding Vale.AES.X64.AESopt2.va_wpProof_Ghash_buffer>


(declare-fun Vale.AES.X64.AESopt2.va_wpProof_Ghash_buffer (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_857d207ecdd09b3621143677b70cf2ba (Term Term) Term)
(declare-fun Tm_ghost_arrow_091327cf6fda6de8a1102b67a1697602 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wpProof_Ghash_buffer@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_wpProof_Ghash_buffer>


; <Start encoding Vale.AES.X64.AESopt2.va_quick_Ghash_buffer>

(declare-fun Vale.AES.X64.AESopt2.va_quick_Ghash_buffer (Term Term Term Term) Term)
(declare-fun Tm_arrow_d37bc31897f5f8a9e9de9b7c481a06d0 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_quick_Ghash_buffer@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_quick_Ghash_buffer>


; <Start encoding Vale.AES.X64.AESopt2.va_code_GhashUnroll6x>

(declare-fun Vale.AES.X64.AESopt2.va_code_GhashUnroll6x (Term) Term)

(declare-fun Vale.AES.X64.AESopt2.va_code_GhashUnroll6x@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_code_GhashUnroll6x>


; <Start encoding Vale.AES.X64.AESopt2.va_codegen_success_GhashUnroll6x>

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_GhashUnroll6x (Term) Term)

(declare-fun Vale.AES.X64.AESopt2.va_codegen_success_GhashUnroll6x@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_codegen_success_GhashUnroll6x>


; <Start encoding Vale.AES.X64.AESopt2.va_lemma_GhashUnroll6x>

(declare-fun Vale.AES.X64.AESopt2.va_lemma_GhashUnroll6x (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_8fc9b697456e589ff9d59e0e6a06849e (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_2808c11962c1a74842090591dd3afd9d () Term)
(declare-fun Vale.AES.X64.AESopt2.va_lemma_GhashUnroll6x@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_lemma_GhashUnroll6x>


; <Start encoding Vale.AES.X64.AESopt2.va_wp_GhashUnroll6x>


(declare-fun Vale.AES.X64.AESopt2.va_wp_GhashUnroll6x (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_7cbcee7b65de275cadf84fbd0368cbdd () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wp_GhashUnroll6x@tok () Term)


(declare-fun Tm_abs_791e10ada97b3deb3886015f7cf774c3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_22faca2c2445e7d7fb86c48697de0d41 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b7638a9593f0138bb80b998018834bc1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_de208ebc3338bf19833cfbd7241535bc (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4996644ece1615616568708995712045 (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_327993fc4f4515eb2b20a00cd83c20b9 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_65af8671a5bf1f976d7cb7600f8713fd (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_59b21a22a573058017051c16a40a489f (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_17a545829d20a745476563fcdd92c5d0 (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9e110dd059cb2af404f8439c6c9a4b09 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_056f86195cc762eba50079a4bda147e1 (Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt2.va_wp_GhashUnroll6x>


; <Start encoding Vale.AES.X64.AESopt2.va_wpProof_GhashUnroll6x>


(declare-fun Vale.AES.X64.AESopt2.va_wpProof_GhashUnroll6x (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_ee44f937862c9a89a7d8608d64ab2210 (Term Term) Term)
(declare-fun Tm_ghost_arrow_93ca32d4f4a45b8a4da3afd1f2d2dd32 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_wpProof_GhashUnroll6x@tok () Term)


; </end encoding Vale.AES.X64.AESopt2.va_wpProof_GhashUnroll6x>


; <Start encoding Vale.AES.X64.AESopt2.va_quick_GhashUnroll6x>

(declare-fun Vale.AES.X64.AESopt2.va_quick_GhashUnroll6x (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_34a41b218e35e33472c404d8b46dbf02 () Term)
(declare-fun Vale.AES.X64.AESopt2.va_quick_GhashUnroll6x@tok () Term)

; </end encoding Vale.AES.X64.AESopt2.va_quick_GhashUnroll6x>


; End Externals for interface Vale.AES.X64.AESopt2


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.X64.AESopt2 (521 decls; total size 30583)

;;; Start module Vale.Def.PossiblyMonad

; Externals for module Vale.Def.PossiblyMonad


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.PossiblyMonad.possibly (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.PossiblyMonad.possibly@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Vale.Def.PossiblyMonad.possibly@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.PossiblyMonad.Ok (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.PossiblyMonad.Ok__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.PossiblyMonad.Ok_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Ok
(declare-fun Vale.Def.PossiblyMonad.Ok@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Vale.Def.PossiblyMonad.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.PossiblyMonad.Err__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Vale.Def.PossiblyMonad.Err_reason (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Err
(declare-fun Vale.Def.PossiblyMonad.Err@tok () Term)
(declare-fun Tm_arrow_a7571a3a79b1afc3d57416de325ad0ca () Term)
(declare-fun Tm_arrow_afde0c037f9b9c8121b7b702f12fa725 () Term)

; <Start encoding Vale.Def.PossiblyMonad.possibly>


; <start constructor Vale.Def.PossiblyMonad.possibly>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.PossiblyMonad.possibly ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(Vale.Def.PossiblyMonad.possibly @x0))
 
;;no pats
:qid is-Vale.Def.PossiblyMonad.possibly))))

; </end constructor Vale.Def.PossiblyMonad.possibly>


; </end encoding Vale.Def.PossiblyMonad.possibly>


; <Start encoding Vale.Def.PossiblyMonad.Ok>


; <start constructor Vale.Def.PossiblyMonad.Ok>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.PossiblyMonad.Ok ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(Vale.Def.PossiblyMonad.Ok (Vale.Def.PossiblyMonad.Ok__a __@x0)
(Vale.Def.PossiblyMonad.Ok_v __@x0)))))

; </end constructor Vale.Def.PossiblyMonad.Ok>


; </end encoding Vale.Def.PossiblyMonad.Ok>


; <Start encoding Vale.Def.PossiblyMonad.Err>


; <start constructor Vale.Def.PossiblyMonad.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Vale.Def.PossiblyMonad.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(Vale.Def.PossiblyMonad.Err (Vale.Def.PossiblyMonad.Err__a __@x0)
(Vale.Def.PossiblyMonad.Err_reason __@x0)))))

; </end constructor Vale.Def.PossiblyMonad.Err>


; </end encoding Vale.Def.PossiblyMonad.Err>


; </end encoding >


; <Start encoding Vale.Def.PossiblyMonad.possibly__uu___haseq>


; </end encoding Vale.Def.PossiblyMonad.possibly__uu___haseq>


; <Start encoding Vale.Def.PossiblyMonad.uu___is_Ok>

(declare-fun Vale.Def.PossiblyMonad.uu___is_Ok (Term Term) Term)
(declare-fun Tm_arrow_9e72f0ad1d1bd058c28026c9f10bf57d () Term)
(declare-fun Vale.Def.PossiblyMonad.uu___is_Ok@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.uu___is_Ok>


; <Skipped Vale.Def.PossiblyMonad.uu___is_Ok/>


; <Start encoding Vale.Def.PossiblyMonad.__proj__Ok__item__v>

(declare-fun Tm_refine_b5897378ea5da63410484e6e03401e97 (Term) Term)
(declare-fun Vale.Def.PossiblyMonad.__proj__Ok__item__v (Term Term) Term)

(declare-fun Tm_arrow_900febcb9f40dc09124b2a79781f6907 () Term)
(declare-fun Vale.Def.PossiblyMonad.__proj__Ok__item__v@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.__proj__Ok__item__v>


; <Skipped Vale.Def.PossiblyMonad.__proj__Ok__item__v/>


; <Start encoding Vale.Def.PossiblyMonad.uu___is_Err>

(declare-fun Vale.Def.PossiblyMonad.uu___is_Err (Term Term) Term)

(declare-fun Vale.Def.PossiblyMonad.uu___is_Err@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.uu___is_Err>


; <Skipped Vale.Def.PossiblyMonad.uu___is_Err/>


; <Start encoding Vale.Def.PossiblyMonad.__proj__Err__item__reason>

(declare-fun Tm_refine_4284ca70e3cdd80d7a3f9c2a27913ec4 (Term) Term)
(declare-fun Vale.Def.PossiblyMonad.__proj__Err__item__reason (Term Term) Term)

(declare-fun Tm_arrow_4ba0ad80842417ab4b5b2dde71d9dfb5 () Term)
(declare-fun Vale.Def.PossiblyMonad.__proj__Err__item__reason@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.__proj__Err__item__reason>


; <Skipped Vale.Def.PossiblyMonad.__proj__Err__item__reason/>


; <Start encoding Vale.Def.PossiblyMonad.return>

(declare-fun Vale.Def.PossiblyMonad.return (Term Term) Term)

(declare-fun Vale.Def.PossiblyMonad.return@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.return>


; <Start encoding Vale.Def.PossiblyMonad.op_let_Plus>

(declare-fun Tm_arrow_709c6e734ea879652b8d729279445edf (Term Term) Term)
(declare-fun Vale.Def.PossiblyMonad.op_let_Plus (Term Term Term Term) Term)

(declare-fun Tm_arrow_c8ef7b839d4786134c9c75c97d20b35a () Term)
(declare-fun Vale.Def.PossiblyMonad.op_let_Plus@tok () Term)


; </end encoding Vale.Def.PossiblyMonad.op_let_Plus>


; <Start encoding Vale.Def.PossiblyMonad.fail_with>

(declare-fun Vale.Def.PossiblyMonad.fail_with (Term Term) Term)

(declare-fun Vale.Def.PossiblyMonad.fail_with@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.fail_with>


; <Start encoding Vale.Def.PossiblyMonad.unimplemented>

(declare-fun Vale.Def.PossiblyMonad.unimplemented (Term Term) Term)

(declare-fun Vale.Def.PossiblyMonad.unimplemented@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.unimplemented>


; <Start encoding Vale.Def.PossiblyMonad.loosen>

(declare-fun Tm_refine_fa44f965d7758db557d71572e63f5b7c (Term) Term)
(declare-fun Vale.Def.PossiblyMonad.loosen (Term Term Term) Term)

(declare-fun Tm_arrow_b4fb598dd0c19a17f548926701e03fc0 () Term)
(declare-fun Vale.Def.PossiblyMonad.loosen@tok () Term)


; </end encoding Vale.Def.PossiblyMonad.loosen>


; <Start encoding Vale.Def.PossiblyMonad.tighten>

(declare-fun Tm_refine_817387a4c2331f5e0875a6eb15d7c6dd (Term) Term)
(declare-fun Tm_refine_74e51f5a60113bab8cc13a3888f12e56 (Term Term) Term)
(declare-fun Vale.Def.PossiblyMonad.tighten (Term Term Term) Term)


(declare-fun Tm_arrow_2bebe502db39f09628d7910f9c0b0d7d () Term)
(declare-fun Vale.Def.PossiblyMonad.tighten@tok () Term)



; </end encoding Vale.Def.PossiblyMonad.tighten>


; <Start encoding Vale.Def.PossiblyMonad.pbool>

(declare-fun Vale.Def.PossiblyMonad.pbool () Term)

; </end encoding Vale.Def.PossiblyMonad.pbool>


; <Start encoding Vale.Def.PossiblyMonad.op_Bang_Bang>

(declare-fun Vale.Def.PossiblyMonad.op_Bang_Bang (Term) Term)
(declare-fun Tm_arrow_7d9e78fafc4c6c978aa38bb638d34088 () Term)
(declare-fun Vale.Def.PossiblyMonad.op_Bang_Bang@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.op_Bang_Bang>


; <Start encoding Vale.Def.PossiblyMonad.ttrue>

(declare-fun Vale.Def.PossiblyMonad.ttrue (Dummy_sort) Term)

; </end encoding Vale.Def.PossiblyMonad.ttrue>


; <Start encoding Vale.Def.PossiblyMonad.ffalse>

(declare-fun Vale.Def.PossiblyMonad.ffalse (Term) Term)
(declare-fun Tm_arrow_d67d2db1f8a7f0127ddc57cf6e7b28b4 () Term)
(declare-fun Vale.Def.PossiblyMonad.ffalse@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.ffalse>


; <Start encoding Vale.Def.PossiblyMonad.op_Slash_Subtraction>

(declare-fun Vale.Def.PossiblyMonad.op_Slash_Subtraction (Term Term) Term)
(declare-fun Tm_arrow_7b6a64c4789453bd4e55d4008cf85818 () Term)
(declare-fun Vale.Def.PossiblyMonad.op_Slash_Subtraction@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.op_Slash_Subtraction>


; <Start encoding Vale.Def.PossiblyMonad.op_Slash_Plus_Greater>

(declare-fun Vale.Def.PossiblyMonad.op_Slash_Plus_Greater (Term Term) Term)
(declare-fun Tm_arrow_4b244049bac28643a097cda281229de7 () Term)
(declare-fun Vale.Def.PossiblyMonad.op_Slash_Plus_Greater@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.op_Slash_Plus_Greater>


; <Start encoding Vale.Def.PossiblyMonad.op_Slash_Plus_Less>

(declare-fun Vale.Def.PossiblyMonad.op_Slash_Plus_Less (Term Term) Term)

(declare-fun Vale.Def.PossiblyMonad.op_Slash_Plus_Less@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.op_Slash_Plus_Less>


; <Start encoding Vale.Def.PossiblyMonad.op_Amp_Amp_Dot>

(declare-fun Vale.Def.PossiblyMonad.op_Amp_Amp_Dot (Term Term) Term)
(declare-fun Tm_arrow_700f0d4367110902d6d73cea7c7914d8 () Term)
(declare-fun Vale.Def.PossiblyMonad.op_Amp_Amp_Dot@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.op_Amp_Amp_Dot>


; <Start encoding Vale.Def.PossiblyMonad.op_Bar_Bar_Dot>

(declare-fun Vale.Def.PossiblyMonad.op_Bar_Bar_Dot (Term Term) Term)

(declare-fun Vale.Def.PossiblyMonad.op_Bar_Bar_Dot@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.op_Bar_Bar_Dot>


; <Start encoding Vale.Def.PossiblyMonad.for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Vale.Def.PossiblyMonad.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Vale.Def.PossiblyMonad.for_all.fuel_instrumented_token () Term)
(declare-fun Vale.Def.PossiblyMonad.for_all (Term Term Term) Term)
(declare-fun Vale.Def.PossiblyMonad.for_all@tok () Term)
(declare-fun Tm_arrow_25069aaab7418caef2268a811fbde7da (Term) Term)


(declare-fun Tm_arrow_f15a7d39d98454210e491607e34c9d7d () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Vale.Def.PossiblyMonad.for_all; Namespace Vale.Def.PossiblyMonad
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.PossiblyMonad.fst(95,8-95,15); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.PossiblyMonad.fst(95,8-95,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Vale.Def.PossiblyMonad.for_all.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(Vale.Def.PossiblyMonad.for_all.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((Vale.Def.PossiblyMonad.for_all.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_Vale.Def.PossiblyMonad.for_all.fuel_instrumented))

:named @fuel_irrelevance_Vale.Def.PossiblyMonad.for_all.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Vale.Def.PossiblyMonad.for_all; Namespace Vale.Def.PossiblyMonad
(assert (! 
;; def=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.PossiblyMonad.fst(95,8-95,15); use=/home/guido/r/everest/hacl-star/vale/specs/defs/Vale.Def.PossiblyMonad.fst(95,8-95,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Vale.Def.PossiblyMonad.for_all @x0
@x1
@x2)
(Vale.Def.PossiblyMonad.for_all.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((Vale.Def.PossiblyMonad.for_all @x0
@x1
@x2))
:qid @fuel_correspondence_Vale.Def.PossiblyMonad.for_all.fuel_instrumented))

:named @fuel_correspondence_Vale.Def.PossiblyMonad.for_all.fuel_instrumented))

; </end encoding Vale.Def.PossiblyMonad.for_all>


; <Start encoding Vale.Def.PossiblyMonad.lemma_for_all_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.PossiblyMonad.lemma_for_all_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.PossiblyMonad.lemma_for_all_intro@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.lemma_for_all_intro>


; <Start encoding Vale.Def.PossiblyMonad.lemma_for_all_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.Def.PossiblyMonad.lemma_for_all_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.Def.PossiblyMonad.lemma_for_all_elim@tok () Term)

; </end encoding Vale.Def.PossiblyMonad.lemma_for_all_elim>


; End Externals for module Vale.Def.PossiblyMonad


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End module Vale.Def.PossiblyMonad (166 decls; total size 16661)

;;; Start interface Vale.Transformers.Common

; Externals for interface Vale.Transformers.Common


; <Start encoding Vale.Transformers.Common.equiv_states>

(declare-fun Vale.Transformers.Common.equiv_states (Term Term) Term)
(declare-fun Tm_arrow_2acecbd8692457947080db97b024124c () Term)
(declare-fun Vale.Transformers.Common.equiv_states@tok () Term)

; </end encoding Vale.Transformers.Common.equiv_states>


; End Externals for interface Vale.Transformers.Common


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Transformers.Common (8 decls; total size 5547)

;;; Start interface Vale.Transformers.Transform

; Externals for interface Vale.Transformers.Transform


; <Start encoding Vale.Transformers.Transform.equiv_states>

(declare-fun Vale.Transformers.Transform.equiv_states (Term Term) Term)

(declare-fun Vale.Transformers.Transform.equiv_states@tok () Term)

; </end encoding Vale.Transformers.Transform.equiv_states>


; <Start encoding Vale.Transformers.Transform.reorder>

(declare-fun Vale.Transformers.Transform.reorder (Term Term) Term)
(declare-fun Tm_arrow_fe36a01d0eef5a818988e38cf391142b () Term)
(declare-fun Vale.Transformers.Transform.reorder@tok () Term)

; </end encoding Vale.Transformers.Transform.reorder>


; <Start encoding Vale.Transformers.Transform.lemma_reorder>

(declare-fun Vale.Transformers.Transform.lemma_reorder (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_9f4e1796c6c33d05ddd7b931dc2dab42 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_229d2a78d7f3ca0cfef3207865cf9012 () Term)
(declare-fun Vale.Transformers.Transform.lemma_reorder@tok () Term)


; </end encoding Vale.Transformers.Transform.lemma_reorder>


; <Start encoding Vale.Transformers.Transform.check_if_same_printed_code>

(declare-fun Vale.Transformers.Transform.check_if_same_printed_code (Term Term) Term)

(declare-fun Vale.Transformers.Transform.check_if_same_printed_code@tok () Term)

; </end encoding Vale.Transformers.Transform.check_if_same_printed_code>


; <Start encoding Vale.Transformers.Transform.lemma_check_if_same_printed_code>

(declare-fun Vale.Transformers.Transform.lemma_check_if_same_printed_code (Term Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_7a24a8a02756f28cfe3be0b1675f28ff () Term)
(declare-fun Vale.Transformers.Transform.lemma_check_if_same_printed_code@tok () Term)


; </end encoding Vale.Transformers.Transform.lemma_check_if_same_printed_code>


; <Start encoding Vale.Transformers.Transform.movbe_elim>

(declare-fun Vale.Transformers.Transform.movbe_elim (Term) Term)
(declare-fun Tm_arrow_8e527486080041990a63dc51c316c4bf () Term)
(declare-fun Vale.Transformers.Transform.movbe_elim@tok () Term)

; </end encoding Vale.Transformers.Transform.movbe_elim>


; <Start encoding Vale.Transformers.Transform.lemma_movbe_elim>

(declare-fun Vale.Transformers.Transform.lemma_movbe_elim (Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_b9d13eaa9e8c1fd2ac03dc2112c48f00 () Term)
(declare-fun Vale.Transformers.Transform.lemma_movbe_elim@tok () Term)


; </end encoding Vale.Transformers.Transform.lemma_movbe_elim>


; <Start encoding Vale.Transformers.Transform.mov_mov_elim>

(declare-fun Vale.Transformers.Transform.mov_mov_elim (Term) Term)

(declare-fun Vale.Transformers.Transform.mov_mov_elim@tok () Term)

; </end encoding Vale.Transformers.Transform.mov_mov_elim>


; <Start encoding Vale.Transformers.Transform.lemma_mov_mov_elim>

(declare-fun Vale.Transformers.Transform.lemma_mov_mov_elim (Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_9e6294df2667c24102d78c287c6bf3e4 () Term)
(declare-fun Vale.Transformers.Transform.lemma_mov_mov_elim@tok () Term)


; </end encoding Vale.Transformers.Transform.lemma_mov_mov_elim>


; <Start encoding Vale.Transformers.Transform.prefetch_elim>

(declare-fun Vale.Transformers.Transform.prefetch_elim (Term) Term)

(declare-fun Vale.Transformers.Transform.prefetch_elim@tok () Term)

; </end encoding Vale.Transformers.Transform.prefetch_elim>


; <Start encoding Vale.Transformers.Transform.lemma_prefetch_elim>

(declare-fun Vale.Transformers.Transform.lemma_prefetch_elim (Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c5cdb4f7d19d4db2426b712f2b134d60 () Term)
(declare-fun Vale.Transformers.Transform.lemma_prefetch_elim@tok () Term)


; </end encoding Vale.Transformers.Transform.lemma_prefetch_elim>


; End Externals for interface Vale.Transformers.Transform


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.Transformers.Transform (68 decls; total size 8950)

;;; Start interface Vale.AES.X64.AESGCM_expected_code

; Externals for interface Vale.AES.X64.AESGCM_expected_code


; <Skipped />


; <Start encoding Vale.AES.X64.AESGCM_expected_code.va_code_Loop6x_partial_expected_code>

(declare-fun Vale.AES.X64.AESGCM_expected_code.va_code_Loop6x_partial_expected_code (Term) Term)
(declare-fun Tm_arrow_5e4eb0cb92c5db26ab7f53d97eed6645 () Term)
(declare-fun Vale.AES.X64.AESGCM_expected_code.va_code_Loop6x_partial_expected_code@tok () Term)

; </end encoding Vale.AES.X64.AESGCM_expected_code.va_code_Loop6x_partial_expected_code>


; <Start encoding Vale.AES.X64.AESGCM_expected_code.va_codegen_success_Loop6x_partial_expected_code>

(declare-fun Vale.AES.X64.AESGCM_expected_code.va_codegen_success_Loop6x_partial_expected_code (Term) Term)
(declare-fun Tm_arrow_3749b435ded33cd38ea141b7ff7ce9b8 () Term)
(declare-fun Vale.AES.X64.AESGCM_expected_code.va_codegen_success_Loop6x_partial_expected_code@tok () Term)

; </end encoding Vale.AES.X64.AESGCM_expected_code.va_codegen_success_Loop6x_partial_expected_code>


; End Externals for interface Vale.AES.X64.AESGCM_expected_code


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.X64.AESGCM_expected_code (14 decls; total size 6193)

;;; Start interface Vale.AES.X64.AESopt

; Externals for interface Vale.AES.X64.AESopt


; <Start encoding Vale.AES.X64.AESopt.aes_reqs0>

(declare-fun Vale.AES.X64.AESopt.aes_reqs0 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b84599a63e7d6ff19267fa76cd783f05 () Term)
(declare-fun Vale.AES.X64.AESopt.aes_reqs0@tok () Term)

; </end encoding Vale.AES.X64.AESopt.aes_reqs0>


; <Start encoding Vale.AES.X64.AESopt.aes_reqs_offset>

(declare-fun Vale.AES.X64.AESopt.aes_reqs_offset (Term Term Term Term Term Term Term) Term)

(declare-fun Vale.AES.X64.AESopt.aes_reqs_offset@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.AES.X64.AESopt.aes_reqs_offset
;;; Fact-ids: Name Vale.AES.X64.AESopt.aes_reqs_offset; Namespace Vale.AES.X64.AESopt
(assert (! 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(50,4-50,19); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(50,4-50,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (Valid (Vale.AES.X64.AESopt.aes_reqs_offset @x0
@x1
@x2
@x3
@x4
@x5
@x6))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(54,2-60,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(54,2-60,33)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(54,2-54,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(54,2-54,15)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.aesni_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(54,19-54,30); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(54,19-54,30)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.avx_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(54,34-54,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(54,34-54,51)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.pclmulqdq_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(55,2-55,34); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(55,2-55,34)
(or (BoxBool_proj_0 (Prims.op_Equality Vale.AES.AES_common_s.algorithm
@x0
Vale.AES.AES_common_s.AES_128@tok))
(BoxBool_proj_0 (Prims.op_Equality Vale.AES.AES_common_s.algorithm
@x0
Vale.AES.AES_common_s.AES_256@tok)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(56,2-56,23); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(56,2-56,23)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(56,2-56,23); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(56,2-56,23)
(Vale.AES.AES_s.is_aes_key_LE @x0
@x1)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(57,2-57,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(57,2-57,35)
(= (FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
@x2)
(BoxInt (+ (BoxInt_proj_0 (let ((@lb7 @x0))
(ite (is-Vale.AES.AES_common_s.AES_128 @lb7)
(BoxInt 10)
(ite (is-Vale.AES.AES_common_s.AES_192 @lb7)
(BoxInt 12)
(ite (is-Vale.AES.AES_common_s.AES_256 @lb7)
(BoxInt 14)
Tm_unit)))))
1)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(58,2-58,44); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(58,2-58,44)
(= @x2
(Vale.AES.AES_s.key_to_round_keys_LE @x0
@x1))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(59,2-59,78); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(59,2-59,78)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(59,2-59,78); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(59,2-59,78)
(Vale.X64.Decls.validSrcAddrsOffset128 @x5
@x4
@x3
(BoxInt 8)
(BoxInt (- (+ (BoxInt_proj_0 (let ((@lb7 @x0))
(ite (is-Vale.AES.AES_common_s.AES_128 @lb7)
(BoxInt 10)
(ite (is-Vale.AES.AES_common_s.AES_192 @lb7)
(BoxInt 12)
(ite (is-Vale.AES.AES_common_s.AES_256 @lb7)
(BoxInt 14)
Tm_unit)))))
1)
8))
@x6
Vale.Arch.HeapTypes_s.Secret@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(60,2-60,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(60,2-60,33)
(= (Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
@x5
@x3)
@x2)
)
)
 

:pattern ((Vale.AES.X64.AESopt.aes_reqs_offset @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid equation_Vale.AES.X64.AESopt.aes_reqs_offset))

:named equation_Vale.AES.X64.AESopt.aes_reqs_offset))

; </end encoding Vale.AES.X64.AESopt.aes_reqs_offset>


; <Start encoding Vale.AES.X64.AESopt.six_of>

(declare-fun Vale.AES.X64.AESopt.six_of (Term) Term)

(declare-fun Vale.AES.X64.AESopt.six_of@tok () Term)

; </end encoding Vale.AES.X64.AESopt.six_of>


; <Start encoding Vale.AES.X64.AESopt.quad32_6>

(declare-fun Vale.AES.X64.AESopt.quad32_6 () Term)

; </end encoding Vale.AES.X64.AESopt.quad32_6>


; <Start encoding Vale.AES.X64.AESopt.make_six_of>

(declare-fun Tm_refine_7adb3ddaaac2eb5540a25abdb6bc552f () Term)
(declare-fun Tm_ghost_arrow_840b54d833185590c1ebe1ae6099a1be (Term) Term)
(declare-fun Vale.AES.X64.AESopt.make_six_of (Term Term) Term)


(declare-fun Tm_ghost_arrow_fff08ff468cc7ece785597929cbf6266 () Term)
(declare-fun Vale.AES.X64.AESopt.make_six_of@tok () Term)



; </end encoding Vale.AES.X64.AESopt.make_six_of>


; <Start encoding Vale.AES.X64.AESopt.map_six_of>


(declare-fun Vale.AES.X64.AESopt.map_six_of (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_2d3aac33b6d966e319e140e2af34f4f2 () Term)
(declare-fun Vale.AES.X64.AESopt.map_six_of@tok () Term)


; </end encoding Vale.AES.X64.AESopt.map_six_of>


; <Start encoding Vale.AES.X64.AESopt.map2_six_of>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun Vale.AES.X64.AESopt.map2_six_of (Term Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_b55275d1a8b5c598dcd05ad41df67487 () Term)
(declare-fun Vale.AES.X64.AESopt.map2_six_of@tok () Term)


; </end encoding Vale.AES.X64.AESopt.map2_six_of>


; <Start encoding Vale.AES.X64.AESopt.rounds_opaque_6>


(declare-fun Vale.AES.X64.AESopt.rounds_opaque_6 (Term Term Term) Term)

(declare-fun Tm_ghost_arrow_9fc5e5721ecb9c8e0a2a78a537c0c797 () Term)
(declare-fun Vale.AES.X64.AESopt.rounds_opaque_6@tok () Term)


; </end encoding Vale.AES.X64.AESopt.rounds_opaque_6>


; <Start encoding Vale.AES.X64.AESopt.xor_reverse_inc32lite_6>

(declare-fun Vale.AES.X64.AESopt.xor_reverse_inc32lite_6 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_6878773f9565f1619b881d266c7cd8dd () Term)
(declare-fun Vale.AES.X64.AESopt.xor_reverse_inc32lite_6@tok () Term)

; </end encoding Vale.AES.X64.AESopt.xor_reverse_inc32lite_6>


; <Start encoding Vale.AES.X64.AESopt.scratch_reqs>

(declare-fun Vale.AES.X64.AESopt.scratch_reqs (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4c2e61b762d49800a79c05edff0f25a2 () Term)
(declare-fun Vale.AES.X64.AESopt.scratch_reqs@tok () Term)
;;;;;;;;;;;;;;;;Equation for Vale.AES.X64.AESopt.scratch_reqs
;;; Fact-ids: Name Vale.AES.X64.AESopt.scratch_reqs; Namespace Vale.AES.X64.AESopt
(assert (! 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(89,4-89,16); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(89,4-89,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (Vale.AES.X64.AESopt.scratch_reqs @x0
@x1
@x2
@x3
@x4))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(90,2-97,76); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(90,2-97,76)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(90,2-90,27); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(90,2-90,27)
(<= (+ (_mul (BoxInt_proj_0 @x1)
6)
6)
(BoxInt_proj_0 (FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
@x3)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(92,4-92,45); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(92,4-92,45)
(= @x4
(Vale.Def.Types_s.reverse_bytes_quad32 (FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
@x3
(BoxInt (_mul (BoxInt_proj_0 @x1)
6))
(BoxInt (+ (_mul (BoxInt_proj_0 @x1)
6)
6)))
(BoxInt 5))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(93,4-93,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(93,4-93,75)
(= (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x0
(BoxInt 3)
@x2)
(Vale.Def.Types_s.reverse_bytes_quad32 (FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
@x3
(BoxInt (_mul (BoxInt_proj_0 @x1)
6))
(BoxInt (+ (_mul (BoxInt_proj_0 @x1)
6)
6)))
(BoxInt 4))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(94,4-94,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(94,4-94,75)
(= (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x0
(BoxInt 4)
@x2)
(Vale.Def.Types_s.reverse_bytes_quad32 (FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
@x3
(BoxInt (_mul (BoxInt_proj_0 @x1)
6))
(BoxInt (+ (_mul (BoxInt_proj_0 @x1)
6)
6)))
(BoxInt 3))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(95,4-95,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(95,4-95,75)
(= (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x0
(BoxInt 5)
@x2)
(Vale.Def.Types_s.reverse_bytes_quad32 (FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
@x3
(BoxInt (_mul (BoxInt_proj_0 @x1)
6))
(BoxInt (+ (_mul (BoxInt_proj_0 @x1)
6)
6)))
(BoxInt 2))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(96,4-96,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(96,4-96,75)
(= (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x0
(BoxInt 6)
@x2)
(Vale.Def.Types_s.reverse_bytes_quad32 (FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
@x3
(BoxInt (_mul (BoxInt_proj_0 @x1)
6))
(BoxInt (+ (_mul (BoxInt_proj_0 @x1)
6)
6)))
(BoxInt 1))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(97,4-97,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESopt.fsti(97,4-97,75)
(= (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x0
(BoxInt 7)
@x2)
(Vale.Def.Types_s.reverse_bytes_quad32 (FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
@x3
(BoxInt (_mul (BoxInt_proj_0 @x1)
6))
(BoxInt (+ (_mul (BoxInt_proj_0 @x1)
6)
6)))
(BoxInt 0))))
)
)
 

:pattern ((Vale.AES.X64.AESopt.scratch_reqs @x0
@x1
@x2
@x3
@x4))
:qid equation_Vale.AES.X64.AESopt.scratch_reqs))

:named equation_Vale.AES.X64.AESopt.scratch_reqs))

; </end encoding Vale.AES.X64.AESopt.scratch_reqs>


; <Start encoding Vale.AES.X64.AESopt.va_code_Load_two_lsb>

(declare-fun Vale.AES.X64.AESopt.va_code_Load_two_lsb (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_code_Load_two_lsb@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_code_Load_two_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_codegen_success_Load_two_lsb>

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Load_two_lsb (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Load_two_lsb@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_codegen_success_Load_two_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_lemma_Load_two_lsb>

(declare-fun Vale.AES.X64.AESopt.va_lemma_Load_two_lsb (Term Term Term) Term)
(declare-fun Tm_refine_898a94dc9b55018f2ec1ae7f575c2f62 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_6786c7e2aa8238bd72cd02ae94ea0c56 () Term)
(declare-fun Vale.AES.X64.AESopt.va_lemma_Load_two_lsb@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_lemma_Load_two_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_wp_Load_two_lsb>


(declare-fun Vale.AES.X64.AESopt.va_wp_Load_two_lsb (Term Term Term) Term)


(declare-fun Vale.AES.X64.AESopt.va_wp_Load_two_lsb@tok () Term)


(declare-fun Tm_abs_8a66ff67a31a2c6b875e5ce7c3a06743 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_7589288a525193deddeed3e30673b365 (Term Term Term Term) Term)

(declare-fun Tm_abs_79b62f0a6313064073c205422e247c83 (Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt.va_wp_Load_two_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_wpProof_Load_two_lsb>


(declare-fun Vale.AES.X64.AESopt.va_wpProof_Load_two_lsb (Term Term Term) Term)

(declare-fun Tm_refine_8bff21e5e4d354229f5e1bdc4bee1947 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a4ac7b3ee46dec54d086d052bfb458b6 () Term)
(declare-fun Vale.AES.X64.AESopt.va_wpProof_Load_two_lsb@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_wpProof_Load_two_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_quick_Load_two_lsb>

(declare-fun Vale.AES.X64.AESopt.va_quick_Load_two_lsb (Term) Term)
(declare-fun Tm_arrow_cd5658310270a56fc5325545cb91b6a3 () Term)
(declare-fun Vale.AES.X64.AESopt.va_quick_Load_two_lsb@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_quick_Load_two_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_code_Load_one_lsb>

(declare-fun Vale.AES.X64.AESopt.va_code_Load_one_lsb (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_code_Load_one_lsb@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_code_Load_one_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_codegen_success_Load_one_lsb>

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Load_one_lsb (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Load_one_lsb@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_codegen_success_Load_one_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_lemma_Load_one_lsb>

(declare-fun Vale.AES.X64.AESopt.va_lemma_Load_one_lsb (Term Term Term) Term)
(declare-fun Tm_refine_a449d81dfd22d9f5dfe7ebf5bcfb6e25 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_b4422fc6730d015b09754761b39f222c () Term)
(declare-fun Vale.AES.X64.AESopt.va_lemma_Load_one_lsb@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_lemma_Load_one_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_wp_Load_one_lsb>


(declare-fun Vale.AES.X64.AESopt.va_wp_Load_one_lsb (Term Term Term) Term)


(declare-fun Vale.AES.X64.AESopt.va_wp_Load_one_lsb@tok () Term)


(declare-fun Tm_abs_e9eccf55ae01eeaab8e8d7394de1cf56 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_54d092217bf5a7e0f68065ddbcf48964 (Term Term Term Term) Term)

(declare-fun Tm_abs_466bf7bb181d797e8792acde443b0fd6 (Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt.va_wp_Load_one_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_wpProof_Load_one_lsb>


(declare-fun Vale.AES.X64.AESopt.va_wpProof_Load_one_lsb (Term Term Term) Term)

(declare-fun Tm_refine_ca32c29b5720705e3fa1bdb65437cf22 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_790152c8fa1b8da479072557bca5bc0a () Term)
(declare-fun Vale.AES.X64.AESopt.va_wpProof_Load_one_lsb@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_wpProof_Load_one_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_quick_Load_one_lsb>

(declare-fun Vale.AES.X64.AESopt.va_quick_Load_one_lsb (Term) Term)
(declare-fun Tm_arrow_1a58d8c90e38cb5668c1e17f22d19df0 () Term)
(declare-fun Vale.AES.X64.AESopt.va_quick_Load_one_lsb@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_quick_Load_one_lsb>


; <Start encoding Vale.AES.X64.AESopt.va_code_Loop6x_final>

(declare-fun Vale.AES.X64.AESopt.va_code_Loop6x_final (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_code_Loop6x_final@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_code_Loop6x_final>


; <Start encoding Vale.AES.X64.AESopt.va_codegen_success_Loop6x_final>

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Loop6x_final (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Loop6x_final@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_codegen_success_Loop6x_final>


; <Start encoding Vale.AES.X64.AESopt.va_lemma_Loop6x_final>

(declare-fun Vale.AES.X64.AESopt.va_lemma_Loop6x_final (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_7c9002235d0abb682260b9b70ec1e0e6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c947655236a2078ccda6fe9404894cab () Term)
(declare-fun Vale.AES.X64.AESopt.va_lemma_Loop6x_final@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_lemma_Loop6x_final>


; <Start encoding Vale.AES.X64.AESopt.va_wp_Loop6x_final>


(declare-fun Vale.AES.X64.AESopt.va_wp_Loop6x_final (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_4f99b999cc987e9ebfe4e445b262eeac () Term)
(declare-fun Vale.AES.X64.AESopt.va_wp_Loop6x_final@tok () Term)


(declare-fun Tm_abs_5d2019b9aa18766534164da1dd48e48e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ce56e387ce43952f4b8c24f088c5d2db (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4644936f93e23a1e86723c8d5cfa6940 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_77549f18598f8330d653175c61342d10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8fbf80c4e676f2fdb20694a2363aa095 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8495799fd89e612a90abf0bfb642ee26 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_52dc5bab328fe428823ff2f0ca9136ca (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_08cc5913a26e75f3fd1fe1eac3e0470c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_317dd77554816a32615f96eb6a82c193 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_633a8992d5244524a544cf22129fa6dd (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2be5df66a92eb7671c09d7df85904854 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e7373fff4622c6aa89cfa74e8c4d94bb (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ed52f85a664b226eda89e4a3fe5bad84 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_dda15e5e766614db1533859e6faed31e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a79838075c568b5f3ccefd832c534009 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b56d87a09019d72b1e78f66da0c50a32 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d099aa82f465b6099dd33352a543dbf6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_85d89a32737c5eaf31ebb7a60bb00349 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_03cee5d43a321123d7679602346f96b1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3ec52d27e26b8434a316343403425d07 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_641919219ea47dc3abf79c00191fb1f7 (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_78a2513864d58d7d2cb1d2b7515aaef3 (Term Term Term Term Term Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt.va_wp_Loop6x_final>


; <Start encoding Vale.AES.X64.AESopt.va_wpProof_Loop6x_final>


(declare-fun Vale.AES.X64.AESopt.va_wpProof_Loop6x_final (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_4c59ce77c6401585497adcd9d7c089a3 (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ddc473db3e21bdceee365c2a131e745d () Term)
(declare-fun Vale.AES.X64.AESopt.va_wpProof_Loop6x_final@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_wpProof_Loop6x_final>


; <Start encoding Vale.AES.X64.AESopt.va_quick_Loop6x_final>

(declare-fun Vale.AES.X64.AESopt.va_quick_Loop6x_final (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d7baadbc477906d9f28dcb821835f27d () Term)
(declare-fun Vale.AES.X64.AESopt.va_quick_Loop6x_final@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_quick_Loop6x_final>


; <Start encoding Vale.AES.X64.AESopt.va_code_Loop6x_save_output>

(declare-fun Vale.AES.X64.AESopt.va_code_Loop6x_save_output (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_code_Loop6x_save_output@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_code_Loop6x_save_output>


; <Start encoding Vale.AES.X64.AESopt.va_codegen_success_Loop6x_save_output>

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Loop6x_save_output (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Loop6x_save_output@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_codegen_success_Loop6x_save_output>


; <Start encoding Vale.AES.X64.AESopt.va_lemma_Loop6x_save_output>

(declare-fun Vale.AES.X64.AESopt.va_lemma_Loop6x_save_output (Term Term Term Term) Term)
(declare-fun Tm_refine_eb8a1972c2c48744c28449458e06079a (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_fc33c0bd0ec0c54acf972652288c9e64 () Term)
(declare-fun Vale.AES.X64.AESopt.va_lemma_Loop6x_save_output@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_lemma_Loop6x_save_output>


; <Start encoding Vale.AES.X64.AESopt.va_wp_Loop6x_save_output>


(declare-fun Vale.AES.X64.AESopt.va_wp_Loop6x_save_output (Term Term Term Term) Term)

(declare-fun Tm_arrow_2ae3818438a1c749d2dea26319edf81e () Term)
(declare-fun Vale.AES.X64.AESopt.va_wp_Loop6x_save_output@tok () Term)


(declare-fun Tm_abs_4b2b10a041346fa53597aa2aa347daba (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b01fabfd65a76f1a1d8b1b90c68bb6f1 (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f164664af6f94a41edcf4fb78d90e91c (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fed54ad99cc1395f286647316abd75c3 (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_491888c24237704855d89a07bce4df58 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_202c8c4562ed5093a91a0e2af21d718c (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e0f4a1e76f53ecfff47ee2d06d6e1012 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8a502c9ed348bf8376e81cfb57a6d613 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_112df7754711cc6dd92195b63ec47cc7 (Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt.va_wp_Loop6x_save_output>


; <Start encoding Vale.AES.X64.AESopt.va_wpProof_Loop6x_save_output>


(declare-fun Vale.AES.X64.AESopt.va_wpProof_Loop6x_save_output (Term Term Term Term) Term)

(declare-fun Tm_refine_6f059327af88f0ba83addbf2274d989d (Term Term) Term)
(declare-fun Tm_ghost_arrow_76845cc694afb263edd8673681598914 () Term)
(declare-fun Vale.AES.X64.AESopt.va_wpProof_Loop6x_save_output@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_wpProof_Loop6x_save_output>


; <Start encoding Vale.AES.X64.AESopt.va_quick_Loop6x_save_output>

(declare-fun Vale.AES.X64.AESopt.va_quick_Loop6x_save_output (Term Term) Term)
(declare-fun Tm_arrow_5341e9dcdd8739d7d79dc1e18554798a () Term)
(declare-fun Vale.AES.X64.AESopt.va_quick_Loop6x_save_output@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_quick_Loop6x_save_output>


; <Start encoding Vale.AES.X64.AESopt.va_code_untransformedoriginal_Loop6x_partial>

(declare-fun Vale.AES.X64.AESopt.va_code_untransformedoriginal_Loop6x_partial (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_code_untransformedoriginal_Loop6x_partial@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_code_untransformedoriginal_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_codegen_success_untransformedoriginal_Loop6x_partial>

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_untransformedoriginal_Loop6x_partial (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_untransformedoriginal_Loop6x_partial@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_codegen_success_untransformedoriginal_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_lemma_untransformedoriginal_Loop6x_partial>

(declare-fun Vale.AES.X64.AESopt.va_lemma_untransformedoriginal_Loop6x_partial (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_4ca1ad42f4c35c656102d01d83bc30ba (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c2c76827682e408b9b8941b422935d01 () Term)
(declare-fun Vale.AES.X64.AESopt.va_lemma_untransformedoriginal_Loop6x_partial@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_lemma_untransformedoriginal_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_transform_Loop6x_partial>

(declare-fun Vale.AES.X64.AESopt.va_transform_Loop6x_partial (Term) Term)
(declare-fun Tm_arrow_be3fb4d00ce42c3e6614999a4e9e4cf4 () Term)
(declare-fun Vale.AES.X64.AESopt.va_transform_Loop6x_partial@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_transform_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_code_Loop6x_partial>

(declare-fun Vale.AES.X64.AESopt.va_code_Loop6x_partial (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_code_Loop6x_partial@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_code_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_codegen_success_Loop6x_partial>

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Loop6x_partial (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Loop6x_partial@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_codegen_success_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_lemma_Loop6x_partial>

(declare-fun Vale.AES.X64.AESopt.va_lemma_Loop6x_partial (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_9a6f3e7f3fc36035ee5e42ab3c4ffee0 () Term)
(declare-fun Vale.AES.X64.AESopt.va_lemma_Loop6x_partial@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_lemma_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_wp_Loop6x_partial>

(declare-fun Tm_arrow_d715646a094afdedf12a99526c13a467 () Term)
(declare-fun Vale.AES.X64.AESopt.va_wp_Loop6x_partial (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_28ed64a542b798e39c08287d8e01243e () Term)
(declare-fun Vale.AES.X64.AESopt.va_wp_Loop6x_partial@tok () Term)

(declare-fun Tm_arrow_ee3eb5812e2ae6a53b355e4f1908b7a6 () Term)
(declare-fun Tm_abs_e39092eb699efa4157ebafaf1995b11b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ddb5d17741bfb4ba874f9c53b6fcccab (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3636c051259d3742da0faf0317dc5b79 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_875440d63de6087c7774e8d286a783f1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_66c31eb25f5f09057c800ff9d3ddd4f4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fd5bbee635bd27cfd262013a40377789 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b212bc73a0013cc2187b2c0b349b3bac (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_6af38d8b0c1c43324451502b454b559b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_7bfefca324e503fda5e6034461ad8936 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ebda20f1496b6af5823b8bc9848323da (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d8f4a08e2e97482de5d83d730f876495 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d5fb0e4bbb8728b0147f3cf809ea1727 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_31aedf22ad7911bc4919867d1dde8aa1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_18b9db5b3078e4f54f7e85208e99c8d0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_da552ae86e66a066dcb51dd1bf17d8d0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5c84ed2be355c8ade6347be704f127ee (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e0d408e8fac3642c2559576276e01776 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4395552dc6eac7f5cefb3a8a9c5e2aeb (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2682db4c558e3de998892044a5ad1dd5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ea2576b6e106643f39548167f262ddaf (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e0f315a0e21d3474a38e390a056ddc01 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e9ac384e03af07fff7d7707751fae911 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8ab9b8a7a1d0b67befd1c9e0d12dfb43 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9113c03d163bcf379f9b26be25867b9e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_964ed34fe5d8aeac796df25e5e3df8d1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESopt.va_wp_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_wpProof_Loop6x_partial>


(declare-fun Vale.AES.X64.AESopt.va_wpProof_Loop6x_partial (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_417636a39253861dd356f8481d8ec2bc (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ba83d91b5f8a90b665ff9dabb6aed1f1 () Term)
(declare-fun Vale.AES.X64.AESopt.va_wpProof_Loop6x_partial@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_wpProof_Loop6x_partial>


; <Start encoding Vale.AES.X64.AESopt.va_quick_Loop6x_partial>

(declare-fun Vale.AES.X64.AESopt.va_quick_Loop6x_partial (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_95b5ae14baac8c700b67205c9e47ae0f () Term)
(declare-fun Vale.AES.X64.AESopt.va_quick_Loop6x_partial@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_quick_Loop6x_partial>


; <Skipped />


; <Start encoding Vale.AES.X64.AESopt.va_code_Loop6x>

(declare-fun Vale.AES.X64.AESopt.va_code_Loop6x (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_code_Loop6x@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_code_Loop6x>


; <Start encoding Vale.AES.X64.AESopt.va_codegen_success_Loop6x>

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Loop6x (Term) Term)

(declare-fun Vale.AES.X64.AESopt.va_codegen_success_Loop6x@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_codegen_success_Loop6x>


; <Start encoding Vale.AES.X64.AESopt.va_lemma_Loop6x>

(declare-fun Vale.AES.X64.AESopt.va_lemma_Loop6x (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_bd7fcfa85d6ebb05561b438816cc734a (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_c271232adb5ca93a3dd53803927cbbe0 () Term)
(declare-fun Vale.AES.X64.AESopt.va_lemma_Loop6x@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_lemma_Loop6x>


; <Start encoding Vale.AES.X64.AESopt.va_wp_Loop6x>

(declare-fun Tm_arrow_8cc38fc40f3ef31eb053580230f66261 () Term)
(declare-fun Vale.AES.X64.AESopt.va_wp_Loop6x (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_fa11e8d7ec290bd835eb793502a5ff30 () Term)
(declare-fun Vale.AES.X64.AESopt.va_wp_Loop6x@tok () Term)

(declare-fun Tm_refine_bf206694a3158496a0b343d795640812 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_88adf4d8943e6e6a625ea36fc8199879 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_abs_4a5dfffa6d9ad1723eb188dc4ed39a65 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_12af9015ecc6c8edc8608ed15fdb66a7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_e20dbb976ccdab92125aa48fb341cf43 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_abs_cc52939f12ab39876bb678fd9827f557 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_de633308b6bfd9c4eeccf2c64b4aabe9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_e5e31b851c2fc765f083679c9ffdc53f (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_abs_5307bb0a86a2857e687bcadf6a1b05d4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_db7f6e9072268b11cd245e83d612028a (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_fc4cbabf2f8fe59388397e9f69851ac8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_abs_3302770f31c83c8f9961ac60eb4cdb8d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_803f0d3c9da056a6a7a97e0ee1ddd63d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_6d3629605d50a9ec30baee6c7f7ff7a9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_413c00971ec18d9560e5bcb61bcc27d1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a3f9921404d5c63413716a49c25d83f8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d2cb15427ebcb331e37a982a090787cf (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4c54d0190d637086e1edb80207827700 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2681d17a7944c30ac7cf81b53b6b5b51 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_88747c27f92f83a9532442d6ccff73b9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_523e5ad949364bf453320f3369d1792d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_73d82b2f9469442f6d4a984b4eed740d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_eb2effed15e84777524fb5fc402359b5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4b348542b3505f010f69c3542f0fb2a7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_67e95fa970a925944456ad8c36d4c597 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ed77ad8a8c201d59db8d86f1036efe8b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_7f015bdb3c0feeef11b7f71528ac2883 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9cf69dfab6d7611f3336faf0e58fde34 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_95b24ac4046766f9488a1fd18021d376 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_051e7c374f4bd058084a9beecb4eebe9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_1c35dcbf03c53440cc68d8b247d64d60 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4337caf99f25dd2f2e87b5676dbf0c78 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3e48ee9c1b9b000b7898c663f897eb30 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_663c030e33aa96f0437e0323508148bf (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8f959269a1312f44f7483c7410b27102 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_edb47bb3eebe9bc50ab5a3d4a430bfc5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ea09555146046d6494be4c9026b65721 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_abca371a66b5a0e4cd5ac6a501f53896 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a04cd90f21e177ceb1c4527ea1ae2dce (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c3b71755c6f4a4dca51e891f205a0e10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f65362423edf1210168bf5f3dd2659ca (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d6e1a953ba1dd74478a849afdac01542 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

































; </end encoding Vale.AES.X64.AESopt.va_wp_Loop6x>


; <Start encoding Vale.AES.X64.AESopt.va_wpProof_Loop6x>


(declare-fun Vale.AES.X64.AESopt.va_wpProof_Loop6x (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_289f8e25c8d01b6950089990e5a7894b (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_9f86ba8866d0d8206c2bbfb683648321 () Term)
(declare-fun Vale.AES.X64.AESopt.va_wpProof_Loop6x@tok () Term)


; </end encoding Vale.AES.X64.AESopt.va_wpProof_Loop6x>


; <Start encoding Vale.AES.X64.AESopt.va_quick_Loop6x>

(declare-fun Vale.AES.X64.AESopt.va_quick_Loop6x (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1ff1b5d1229189a2ecb609319b91e91f () Term)
(declare-fun Vale.AES.X64.AESopt.va_quick_Loop6x@tok () Term)

; </end encoding Vale.AES.X64.AESopt.va_quick_Loop6x>


; End Externals for interface Vale.AES.X64.AESopt


; UNSAT CORE: @MaxIFuel_assumption, @query, bool_inversion, constructor_distinct_Vale.Arch.HeapTypes_s.TUInt128, data_typing_intro_Vale.Def.Words_s.Mkfour@tok, data_typing_intro_Vale.X64.Machine_s.Reg@tok, equality_tok_Vale.Arch.HeapTypes_s.Secret@tok, equality_tok_Vale.Arch.HeapTypes_s.TUInt128@tok, equation_Prims.nat, equation_Vale.AES.GCTR.partial_seq_agreement, equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0, equation_Vale.AES.X64.AESopt.aes_reqs_offset, equation_Vale.AES.X64.AESopt.scratch_reqs, equation_Vale.Arch.HeapImpl.heaplet_id, equation_Vale.Arch.HeapImpl.vale_heaplets, equation_Vale.Def.Types_s.quad32, equation_Vale.Def.Words_s.nat32, equation_Vale.Def.Words_s.nat64, equation_Vale.Def.Words_s.natN, equation_Vale.X64.Decls.upd_register, equation_Vale.X64.Decls.va_ensure_total, equation_Vale.X64.Decls.va_require_total, equation_Vale.X64.Decls.va_state_eq, equation_Vale.X64.Decls.va_upd_flags, equation_Vale.X64.Decls.va_upd_mem, equation_Vale.X64.Decls.va_upd_mem_heaplet, equation_Vale.X64.Decls.va_upd_ok, equation_Vale.X64.Decls.va_upd_reg64, equation_Vale.X64.Decls.va_upd_xmm, equation_Vale.X64.Decls.validDstAddrs, equation_Vale.X64.Decls.validDstAddrsOffset128, equation_Vale.X64.Decls.validSrcAddrs, equation_Vale.X64.Decls.validSrcAddrs128, equation_Vale.X64.Decls.validSrcAddrsOffset128, equation_Vale.X64.Machine_s.n_reg_files, equation_Vale.X64.Machine_s.n_regs, equation_Vale.X64.Machine_s.reg_64, equation_Vale.X64.Machine_s.reg_file_id, equation_Vale.X64.Machine_s.reg_id, equation_Vale.X64.Machine_s.reg_xmm, equation_Vale.X64.Machine_s.t_reg, equation_Vale.X64.Machine_s.t_reg_file, equation_Vale.X64.Memory.base_typ_as_vale_type, equation_Vale.X64.Memory.buffer128, equation_Vale.X64.Memory.set_vale_heap, equation_Vale.X64.Memory.vale_full_heap_equal, equation_Vale.X64.QuickCode.t_require, equation_Vale.X64.QuickCode.va_t_ensure, equation_Vale.X64.State.state_eq, equation_Vale.X64.State.update_reg, equation_Vale.X64.State.update_reg_64, equation_Vale.X64.State.update_reg_xmm, fuel_guarded_inversion_Vale.Arch.HeapImpl.vale_full_heap, fuel_guarded_inversion_Vale.Def.Words_s.four, fuel_guarded_inversion_Vale.X64.State.vale_state, function_token_typing_Vale.Arch.HeapImpl.vale_heap, function_token_typing_Vale.Def.Words_s.nat32, int_inversion, int_typing, lemma_Vale.Lib.Map16.lemma_equal_elim, lemma_Vale.Lib.Map16.lemma_other, lemma_Vale.X64.Memory.buffer_length_buffer_as_seq, lemma_Vale.X64.Regs.lemma_equal_elim, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heap, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, proj_equation_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, proj_equation_Vale.X64.Machine_s.Reg_rf, proj_equation_Vale.X64.State.Mkvale_state_vs_flags, proj_equation_Vale.X64.State.Mkvale_state_vs_heap, proj_equation_Vale.X64.State.Mkvale_state_vs_ok, proj_equation_Vale.X64.State.Mkvale_state_vs_regs, proj_equation_Vale.X64.State.Mkvale_state_vs_stack, proj_equation_Vale.X64.State.Mkvale_state_vs_stackTaint, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple3__1, projection_inverse_FStar.Pervasives.Native.Mktuple3__2, projection_inverse_FStar.Pervasives.Native.Mktuple3__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__1, projection_inverse_FStar.Pervasives.Native.Mktuple5__3, projection_inverse_FStar.Pervasives.Native.Mktuple5__4, projection_inverse_FStar.Pervasives.Native.Mktuple5__5, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_heaplets, projection_inverse_Vale.Arch.HeapImpl.Mkvale_full_heap_vf_layout, projection_inverse_Vale.X64.Machine_s.Reg_rf, projection_inverse_Vale.X64.State.Mkvale_state_vs_flags, projection_inverse_Vale.X64.State.Mkvale_state_vs_heap, projection_inverse_Vale.X64.State.Mkvale_state_vs_ok, projection_inverse_Vale.X64.State.Mkvale_state_vs_regs, projection_inverse_Vale.X64.State.Mkvale_state_vs_stack, projection_inverse_Vale.X64.State.Mkvale_state_vs_stackTaint, refinement_interpretation_Tm_refine_0559236e7a05befcc7b6302f3642ad81, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c, refinement_interpretation_Tm_refine_c365eb902b454950de62fba701d9049d, refinement_interpretation_Tm_refine_d9979b96a3f2b18961b3dd63a2783b64, typing_Vale.AES.GCTR.inc32lite, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap, typing_Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets, typing_Vale.Def.Types_s.reverse_bytes_quad32, typing_Vale.Lib.Map16.sel, typing_Vale.Lib.Map16.upd, typing_Vale.X64.Decls.va_upd_flags, typing_Vale.X64.Decls.va_upd_mem, typing_Vale.X64.Decls.va_upd_mem_heaplet, typing_Vale.X64.Decls.va_upd_ok, typing_Vale.X64.Decls.va_upd_reg64, typing_Vale.X64.Regs.sel, typing_Vale.X64.Regs.upd, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_flags, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_heap, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_ok, typing_Vale.X64.State.__proj__Mkvale_state__item__vs_regs, typing_Vale.X64.State.update_reg, typing_tok_Vale.Arch.HeapTypes_s.TUInt128@tok

;;; End interface Vale.AES.X64.AESopt (557 decls; total size 50153)

; Internals for Vale.AES.X64.AESGCM

(push)

; encoding sigelt lo


; <Start encoding Vale.AES.X64.AESGCM.lo>

(declare-fun Vale.AES.X64.AESGCM.lo (Term) Term)
;;;;;;;;;;;;;;;;x: Vale.Math.Poly2_s.poly -> Vale.Math.Poly2_s.poly
(declare-fun Tm_arrow_2bc5a7b8f2a115dc4eabe9389255cdfb () Term)
(declare-fun Vale.AES.X64.AESGCM.lo@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.lo>


; encoding sigelt hi


; <Start encoding Vale.AES.X64.AESGCM.hi>

(declare-fun Vale.AES.X64.AESGCM.hi (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.hi@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.hi>


; encoding sigelt scratch_reqs_simple


; <Start encoding Vale.AES.X64.AESGCM.scratch_reqs_simple>

(declare-fun Vale.AES.X64.AESGCM.scratch_reqs_simple (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;scratch_b: Vale.X64.Memory.buffer128 ->     heap3: Vale.Arch.HeapImpl.vale_heap ->     data: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     z3: Vale.Def.Types_s.quad32   -> Vale.Def.Prop_s.prop0
(declare-fun Tm_arrow_1d2aafce05abc1d5538228db07cb41d4 () Term)
(declare-fun Vale.AES.X64.AESGCM.scratch_reqs_simple@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.scratch_reqs_simple>


; encoding sigelt finish_aes_encrypt_le


; <Skipped Vale.AES.X64.AESGCM.finish_aes_encrypt_le/>


; encoding sigelt finish_aes_encrypt_le


; <Start encoding Vale.AES.X64.AESGCM.finish_aes_encrypt_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Vale.AES.X64.AESGCM.finish_aes_encrypt_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Vale.AES.X64.AESGCM.finish_aes_encrypt_le@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.finish_aes_encrypt_le>


; encoding sigelt va_subscript_FStar__Seq__Base__seq


; <Start encoding Vale.AES.X64.AESGCM.va_subscript_FStar__Seq__Base__seq>

(declare-fun Vale.AES.X64.AESGCM.va_subscript_FStar__Seq__Base__seq (Term) Term)



(declare-fun Vale.AES.X64.AESGCM.va_subscript_FStar__Seq__Base__seq@tok () Term)




; </end encoding Vale.AES.X64.AESGCM.va_subscript_FStar__Seq__Base__seq>


; encoding sigelt 


; <Skipped />


; encoding sigelt va_code_Load_one_msb


; <Skipped Vale.AES.X64.AESGCM.va_code_Load_one_msb/>


; encoding sigelt va_code_Load_one_msb


; <Start encoding Vale.AES.X64.AESGCM.va_code_Load_one_msb>

(declare-fun Vale.AES.X64.AESGCM.va_code_Load_one_msb (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_code_Load_one_msb@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_code_Load_one_msb>


; encoding sigelt va_codegen_success_Load_one_msb


; <Skipped Vale.AES.X64.AESGCM.va_codegen_success_Load_one_msb/>


; encoding sigelt va_codegen_success_Load_one_msb


; <Start encoding Vale.AES.X64.AESGCM.va_codegen_success_Load_one_msb>

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Load_one_msb (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Load_one_msb@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_codegen_success_Load_one_msb>


; encoding sigelt va_qcode_Load_one_msb


; <Start encoding Vale.AES.X64.AESGCM.va_qcode_Load_one_msb>

(declare-fun Vale.AES.X64.AESGCM.va_qcode_Load_one_msb (Term) Term)
;;;;;;;;;;;;;;;;va_mods: Prims.list Vale.X64.QuickCode.mod_t   -> Vale.X64.QuickCode.quickCode Prims.unit (va_code_Load_one_msb ())
(declare-fun Tm_arrow_2a40a4508777c6aa000f14b4e49f44e2 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_qcode_Load_one_msb@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_qcode_Load_one_msb>


; encoding sigelt va_lemma_Load_one_msb


; <Skipped Vale.AES.X64.AESGCM.va_lemma_Load_one_msb/>


; encoding sigelt va_lemma_Load_one_msb


; <Start encoding Vale.AES.X64.AESGCM.va_lemma_Load_one_msb>

(declare-fun Vale.AES.X64.AESGCM.va_lemma_Load_one_msb (Term Term) Term)
(declare-fun Tm_refine_de05221efa64abd2c861c95e90b7f297 (Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Vale.X64.Machine_s.precode Vale.X64.Decls.ins Vale.X64.Decls.ocmp ->     va_s0: Vale.X64.State.vale_state   -> Prims.Ghost (Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel)
(declare-fun Tm_ghost_arrow_feb892ee4041be68136999db55bb0043 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_lemma_Load_one_msb@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_lemma_Load_one_msb>


; encoding sigelt va_wp_Load_one_msb


; <Start encoding Vale.AES.X64.AESGCM.va_wp_Load_one_msb>


(declare-fun Vale.AES.X64.AESGCM.va_wp_Load_one_msb (Term Term) Term)


(declare-fun Vale.AES.X64.AESGCM.va_wp_Load_one_msb@tok () Term)


(declare-fun Tm_abs_8153fd1b3b214e2963166049515a48a3 (Term Term Term Term) Term)

(declare-fun Tm_abs_3e087b9d0d20c8d474f4885df55cf004 (Term Term Term) Term)

(declare-fun Tm_abs_596f444cfcaeb884fb530165258c73eb (Term Term) Term)

; </end encoding Vale.AES.X64.AESGCM.va_wp_Load_one_msb>


; encoding sigelt va_wpProof_Load_one_msb


; <Skipped Vale.AES.X64.AESGCM.va_wpProof_Load_one_msb/>


; encoding sigelt va_wpProof_Load_one_msb


; <Start encoding Vale.AES.X64.AESGCM.va_wpProof_Load_one_msb>


(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Load_one_msb (Term Term) Term)

(declare-fun Tm_refine_de5021f598597553ebc3eb82cb269d42 (Term Term) Term)
;;;;;;;;;;;;;;;;va_s0: Vale.X64.State.vale_state -> va_k: (_: Vale.X64.State.vale_state -> _: Prims.unit -> Type)   -> Prims.Ghost ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Prims.unit)
(declare-fun Tm_ghost_arrow_d1ccdb0f396029be8df86ee4d53adbdd () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Load_one_msb@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_wpProof_Load_one_msb>


; encoding sigelt va_quick_Load_one_msb


; <Start encoding Vale.AES.X64.AESGCM.va_quick_Load_one_msb>

(declare-fun Vale.AES.X64.AESGCM.va_quick_Load_one_msb (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> Vale.X64.QuickCode.quickCode Prims.unit (va_code_Load_one_msb ())
(declare-fun Tm_arrow_fc87adbca9796dbb4084d79df7707a2c () Term)
(declare-fun Vale.AES.X64.AESGCM.va_quick_Load_one_msb@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_quick_Load_one_msb>


; encoding sigelt va_code_Ctr32_ghash_6_prelude


; <Skipped Vale.AES.X64.AESGCM.va_code_Ctr32_ghash_6_prelude/>


; encoding sigelt va_code_Ctr32_ghash_6_prelude


; <Start encoding Vale.AES.X64.AESGCM.va_code_Ctr32_ghash_6_prelude>

(declare-fun Vale.AES.X64.AESGCM.va_code_Ctr32_ghash_6_prelude (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_code_Ctr32_ghash_6_prelude@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_code_Ctr32_ghash_6_prelude>


; encoding sigelt va_codegen_success_Ctr32_ghash_6_prelude


; <Skipped Vale.AES.X64.AESGCM.va_codegen_success_Ctr32_ghash_6_prelude/>


; encoding sigelt va_codegen_success_Ctr32_ghash_6_prelude


; <Start encoding Vale.AES.X64.AESGCM.va_codegen_success_Ctr32_ghash_6_prelude>

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Ctr32_ghash_6_prelude (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Ctr32_ghash_6_prelude@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_codegen_success_Ctr32_ghash_6_prelude>


; encoding sigelt va_qcode_Ctr32_ghash_6_prelude


; <Start encoding Vale.AES.X64.AESGCM.va_qcode_Ctr32_ghash_6_prelude>

(declare-fun Vale.AES.X64.AESGCM.va_qcode_Ctr32_ghash_6_prelude (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_mods: Prims.list Vale.X64.QuickCode.mod_t ->     alg: Vale.AES.AES_common_s.algorithm ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     ctr_orig: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode Prims.unit (va_code_Ctr32_ghash_6_prelude alg)
(declare-fun Tm_arrow_41b54388b2e841e9c2f0830b3ee22b24 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_qcode_Ctr32_ghash_6_prelude@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_qcode_Ctr32_ghash_6_prelude>


; encoding sigelt va_lemma_Ctr32_ghash_6_prelude


; <Skipped Vale.AES.X64.AESGCM.va_lemma_Ctr32_ghash_6_prelude/>


; encoding sigelt va_lemma_Ctr32_ghash_6_prelude


; <Start encoding Vale.AES.X64.AESGCM.va_lemma_Ctr32_ghash_6_prelude>

(declare-fun Vale.AES.X64.AESGCM.va_lemma_Ctr32_ghash_6_prelude (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_15f7e0ea8e824e249c35a6b68b804f7c (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Vale.X64.Machine_s.precode Vale.X64.Decls.ins Vale.X64.Decls.ocmp ->     va_s0: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     ctr_orig: Vale.Def.Types_s.quad32   -> Prims.Ghost (Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel)
(declare-fun Tm_ghost_arrow_691bd42b413ca4aa44dc94b4f18077c1 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_lemma_Ctr32_ghash_6_prelude@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_lemma_Ctr32_ghash_6_prelude>


; encoding sigelt va_wp_Ctr32_ghash_6_prelude


; <Start encoding Vale.AES.X64.AESGCM.va_wp_Ctr32_ghash_6_prelude>


(declare-fun Vale.AES.X64.AESGCM.va_wp_Ctr32_ghash_6_prelude (Term Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;alg: Vale.AES.AES_common_s.algorithm ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     ctr_orig: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k: (_: Vale.X64.State.vale_state -> _: Prims.unit -> Type)   -> Type
(declare-fun Tm_arrow_7944d33f474261e71592171f6998009d () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wp_Ctr32_ghash_6_prelude@tok () Term)


(declare-fun Tm_abs_d61de087a163d7cfa6fc99534dd3814e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2e15e8feec11c6cba9ae11e7a2ef4aaa (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3217e1f00aa8d01589fdfa8d644f5b1e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2acac87ed23cbc8cbfd0f4a4088f95b1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4f1f8b59a4ee7d529028600ee8eba98f (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_de84f7d8a6f04fa3fe22d938e8b0cdd9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_0e00a8d879147f484313e5553b080f4c (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_24a24069790bb3f30810b98053a20829 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e2c5a033509ae50ad4e9f9fdab61ad0e (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f8fe8420d7f0a1a524e689350a2cd0d0 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3c86e7868d4e6b84abb90276f5d52b20 (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_18de82ab31e08c388e2f7427da117a0e (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2e99c8f31db8b8b2ffbe72ea959979aa (Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESGCM.va_wp_Ctr32_ghash_6_prelude>


; encoding sigelt va_wpProof_Ctr32_ghash_6_prelude


; <Skipped Vale.AES.X64.AESGCM.va_wpProof_Ctr32_ghash_6_prelude/>


; encoding sigelt va_wpProof_Ctr32_ghash_6_prelude


; <Start encoding Vale.AES.X64.AESGCM.va_wpProof_Ctr32_ghash_6_prelude>


(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Ctr32_ghash_6_prelude (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_544a309231bca00a4bf542f9fbbd5653 (Term Term Term) Term)
;;;;;;;;;;;;;;;;alg: Vale.AES.AES_common_s.algorithm ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     ctr_orig: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k: (_: Vale.X64.State.vale_state -> _: Prims.unit -> Type)   -> Prims.Ghost ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Prims.unit)
(declare-fun Tm_ghost_arrow_7be8276ae87fe7d2ad20405d8f9b4b61 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Ctr32_ghash_6_prelude@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_wpProof_Ctr32_ghash_6_prelude>


; encoding sigelt va_quick_Ctr32_ghash_6_prelude


; <Start encoding Vale.AES.X64.AESGCM.va_quick_Ctr32_ghash_6_prelude>

(declare-fun Vale.AES.X64.AESGCM.va_quick_Ctr32_ghash_6_prelude (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;alg: Vale.AES.AES_common_s.algorithm ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     ctr_orig: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode Prims.unit (va_code_Ctr32_ghash_6_prelude alg)
(declare-fun Tm_arrow_0a10c72a33cf7b57c9af761cfe018728 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_quick_Ctr32_ghash_6_prelude@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_quick_Ctr32_ghash_6_prelude>


; encoding sigelt va_code_Handle_ctr32_2


; <Skipped Vale.AES.X64.AESGCM.va_code_Handle_ctr32_2/>


; encoding sigelt va_code_Handle_ctr32_2


; <Start encoding Vale.AES.X64.AESGCM.va_code_Handle_ctr32_2>

(declare-fun Vale.AES.X64.AESGCM.va_code_Handle_ctr32_2 (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_code_Handle_ctr32_2@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_code_Handle_ctr32_2>


; encoding sigelt va_codegen_success_Handle_ctr32_2


; <Skipped Vale.AES.X64.AESGCM.va_codegen_success_Handle_ctr32_2/>


; encoding sigelt va_codegen_success_Handle_ctr32_2


; <Start encoding Vale.AES.X64.AESGCM.va_codegen_success_Handle_ctr32_2>

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Handle_ctr32_2 (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Handle_ctr32_2@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_codegen_success_Handle_ctr32_2>


; encoding sigelt va_qcode_Handle_ctr32_2


; <Start encoding Vale.AES.X64.AESGCM.va_qcode_Handle_ctr32_2>

(declare-fun Vale.AES.X64.AESGCM.va_qcode_Handle_ctr32_2 (Term Term) Term)
;;;;;;;;;;;;;;;;va_mods: Prims.list Vale.X64.QuickCode.mod_t -> ctr_BE: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode Prims.unit (va_code_Handle_ctr32_2 ())
(declare-fun Tm_arrow_3b050ba664112e2671aeaa1a1e7efe43 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_qcode_Handle_ctr32_2@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_qcode_Handle_ctr32_2>


; encoding sigelt va_lemma_Handle_ctr32_2


; <Skipped Vale.AES.X64.AESGCM.va_lemma_Handle_ctr32_2/>


; encoding sigelt va_lemma_Handle_ctr32_2


; <Start encoding Vale.AES.X64.AESGCM.va_lemma_Handle_ctr32_2>

(declare-fun Vale.AES.X64.AESGCM.va_lemma_Handle_ctr32_2 (Term Term Term) Term)
(declare-fun Tm_refine_6863cfa98415d2b50714dcfa1276d36c (Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Vale.X64.Machine_s.precode Vale.X64.Decls.ins Vale.X64.Decls.ocmp ->     va_s0: Vale.X64.State.vale_state ->     ctr_BE: Vale.Def.Types_s.quad32   -> Prims.Ghost (Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel)
(declare-fun Tm_ghost_arrow_c429745c04f146d81720130cf7118233 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_lemma_Handle_ctr32_2@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_lemma_Handle_ctr32_2>


; encoding sigelt va_wp_Handle_ctr32_2


; <Start encoding Vale.AES.X64.AESGCM.va_wp_Handle_ctr32_2>


(declare-fun Vale.AES.X64.AESGCM.va_wp_Handle_ctr32_2 (Term Term Term) Term)

;;;;;;;;;;;;;;;;ctr_BE: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k: (_: Vale.X64.State.vale_state -> _: Prims.unit -> Type)   -> Type
(declare-fun Tm_arrow_57ecbe833a2013a883dc443e7dd201f5 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wp_Handle_ctr32_2@tok () Term)


(declare-fun Tm_abs_569ebccc7795bc74bc85d3351930f558 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_697d97d8bec80a9904bca8422da24bff (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f857bc405056b59c224b67ce1aaecb7b (Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_609f54668a61dc72342eb3640ba52ab4 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e8d0d14c04582e0a628c0998f25b71c1 (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ada930e96d4e7b3c4ccf32133447bb0c (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2dd5aac36d5994017aa726c683996a6d (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_156b8c6425fd0dca8aa07057d45d4dc0 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_578695813ad3f6054782bb20b717630a (Term Term Term Term Term) Term)

(declare-fun Tm_abs_f20d236b462697eb107bcc08a288c0b3 (Term Term Term Term) Term)

(declare-fun Tm_abs_5b9e622715c8e5465892974457806770 (Term Term Term) Term)

; </end encoding Vale.AES.X64.AESGCM.va_wp_Handle_ctr32_2>


; encoding sigelt va_wpProof_Handle_ctr32_2


; <Skipped Vale.AES.X64.AESGCM.va_wpProof_Handle_ctr32_2/>


; encoding sigelt va_wpProof_Handle_ctr32_2


; <Start encoding Vale.AES.X64.AESGCM.va_wpProof_Handle_ctr32_2>


(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Handle_ctr32_2 (Term Term Term) Term)

(declare-fun Tm_refine_ac7c9d940bd59ea7a241c5da8ae0f551 (Term Term) Term)
;;;;;;;;;;;;;;;;ctr_BE: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k: (_: Vale.X64.State.vale_state -> _: Prims.unit -> Type)   -> Prims.Ghost ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Prims.unit)
(declare-fun Tm_ghost_arrow_726b592089821e88731925d3ac878ce9 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Handle_ctr32_2@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_wpProof_Handle_ctr32_2>


; encoding sigelt va_quick_Handle_ctr32_2


; <Start encoding Vale.AES.X64.AESGCM.va_quick_Handle_ctr32_2>

(declare-fun Vale.AES.X64.AESGCM.va_quick_Handle_ctr32_2 (Term) Term)
;;;;;;;;;;;;;;;;ctr_BE: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode Prims.unit (va_code_Handle_ctr32_2 ())
(declare-fun Tm_arrow_ad6664686fbcdcb85f164b5e3abbde9c () Term)
(declare-fun Vale.AES.X64.AESGCM.va_quick_Handle_ctr32_2@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_quick_Handle_ctr32_2>


; encoding sigelt 


; <Skipped />


; encoding sigelt va_code_Loop6x_decrypt


; <Skipped Vale.AES.X64.AESGCM.va_code_Loop6x_decrypt/>


; encoding sigelt va_code_Loop6x_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_code_Loop6x_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_decrypt (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_decrypt@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_code_Loop6x_decrypt>


; encoding sigelt va_codegen_success_Loop6x_decrypt


; <Skipped Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_decrypt/>


; encoding sigelt va_codegen_success_Loop6x_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_decrypt (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_decrypt@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_decrypt>


; encoding sigelt va_qcode_Loop6x_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_mods: Prims.list Vale.X64.QuickCode.mod_t ->     alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     count: Prims.nat ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode Vale.Def.Types_s.quad32 (va_code_Loop6x_decrypt alg)
(declare-fun Tm_arrow_491317e833a20c4b6a1363d6798fc5e6 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_decrypt@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_decrypt>


; encoding sigelt va_lemma_Loop6x_decrypt


; <Skipped Vale.AES.X64.AESGCM.va_lemma_Loop6x_decrypt/>


; encoding sigelt va_lemma_Loop6x_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_3ed73c0762bcc83311c8a5d339b6da60 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Vale.X64.Machine_s.precode Vale.X64.Decls.ins Vale.X64.Decls.ocmp ->     va_s0: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     count: Prims.nat ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32   -> Prims.Ghost ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Vale.Def.Types_s.quad32)
(declare-fun Tm_ghost_arrow_9f6de6119291da819fc9ead57e1982c9 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_decrypt@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_decrypt>


; encoding sigelt va_wp_Loop6x_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_decrypt>


(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)


(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_decrypt@tok () Term)

(declare-fun Tm_refine_5b3d514c69ce509f0ca117431af060c4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;_:       _:       Prims.unit         { Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3)             (Mkvale_state?.vs_regs (Vale.X64.Decls.va_upd_flags va_x_efl                     (Vale.X64.Decls.va_upd_mem_heaplet 3                         va_x_heap3                         (Vale.X64.Decls.va_upd_mem_heaplet 2                             va_x_heap2                             (Vale.X64.Decls.va_upd_mem_heaplet 6                                 va_x_heap6                                 (Vale.X64.Decls.va_upd_xmm 15                                     va_x_xmm15                                     (Vale.X64.Decls.va_upd_xmm 14                                         va_x_xmm14                                         (Vale.X64.Decls.va_upd_xmm 13                                             va_x_xmm13                                             (Vale.X64.Decls.va_upd_xmm 12                                                 va_x_xmm12                                                 (Vale.X64.Decls.va_upd_xmm 11                                                     va_x_xmm11                                                     (Vale.X64.Decls.va_upd_xmm 10                                                         va_x_xmm10                                                         (Vale.X64.Decls.va_upd_xmm 9                                                             va_x_xmm9                                                             (Vale.X64.Decls.va_upd_xmm 8                                                                 va_x_xmm8                                                                 (Vale.X64.Decls.va_upd_xmm 7                                                                     va_x_xmm7                                                                     (Vale.X64.Decls.va_upd_xmm 6                                                                         va_x_xmm6                                                                         (Vale.X64.Decls.va_upd_xmm 5                                                                             va_x_xmm5                                                                             (Vale.X64.Decls.va_upd_xmm                                                                                 4                                                                                 va_x_xmm4                                                                                 (Vale.X64.Decls.va_upd_xmm                                                                                     3                                                                                     va_x_xmm3                                                                                     (Vale.X64.Decls.va_upd_xmm                                                                                         2                                                                                         va_x_xmm2                                                                                         (Vale.X64.Decls.va_upd_xmm                                                                                             1                                                                                             va_x_xmm1                                                                                             (Vale.X64.Decls.va_upd_xmm                                                                                                 0                                                                                                 va_x_xmm0                                                                                                 (Vale.X64.Decls.va_upd_reg64                                                                                                     14                                                                                                     va_x_r14                                                                                                     (                                                                                                       Vale.X64.Decls.va_upd_reg64                                                                                                         13                                                                                                         va_x_r13                                                                                                         (                                                                                                           Vale.X64.Decls.va_upd_reg64                                                                                                             12                                                                                                             va_x_r12                                                                                                             (                                                                                                               Vale.X64.Decls.va_upd_reg64                                                                                                                 11                                                                                                                 va_x_r11                                                                                                                 (                                                                                                                   Vale.X64.Decls.va_upd_reg64                                                                                                                     1                                                                                                                     va_x_rbx                                                                                                                     (                                                                                                                       Vale.X64.Decls.va_upd_reg64                                                                                                                         3                                                                                                                         va_x_rdx                                                                                                                         (                                                                                                                           Vale.X64.Decls.va_upd_reg64                                                                                                                             4                                                                                                                             va_x_rsi                                                                                                                             (                                                                                                                               Vale.X64.Decls.va_upd_reg64                                                                                                                                 5                                                                                                                                 va_x_rdi                                                                                                                                 (                                                                                                                                   Vale.X64.Decls.va_upd_mem                                                                                                                                     va_x_mem                                                                                                                                     va_s}   -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_c208c3c9310ff90a38172fcf96e36ee4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_abs_ece90ccd83bf8c8c18b4f343ccca44ec (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_b284e6f28361030646de9f6c12702164 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;_:       _:       Prims.unit         { ~(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3)               (Mkvale_state?.vs_regs (Vale.X64.Decls.va_upd_flags va_x_efl                       (Vale.X64.Decls.va_upd_mem_heaplet 3                           va_x_heap3                           (Vale.X64.Decls.va_upd_mem_heaplet 2                               va_x_heap2                               (Vale.X64.Decls.va_upd_mem_heaplet 6                                   va_x_heap6                                   (Vale.X64.Decls.va_upd_xmm 15                                       va_x_xmm15                                       (Vale.X64.Decls.va_upd_xmm 14                                           va_x_xmm14                                           (Vale.X64.Decls.va_upd_xmm 13                                               va_x_xmm13                                               (Vale.X64.Decls.va_upd_xmm 12                                                   va_x_xmm12                                                   (Vale.X64.Decls.va_upd_xmm 11                                                       va_x_xmm11                                                       (Vale.X64.Decls.va_upd_xmm 10                                                           va_x_xmm10                                                           (Vale.X64.Decls.va_upd_xmm 9                                                               va_x_xmm9                                                               (Vale.X64.Decls.va_upd_xmm 8                                                                   va_x_xmm8                                                                   (Vale.X64.Decls.va_upd_xmm 7                                                                       va_x_xmm7                                                                       (Vale.X64.Decls.va_upd_xmm 6                                                                           va_x_xmm6                                                                           (Vale.X64.Decls.va_upd_xmm                                                                               5                                                                               va_x_xmm5                                                                               (Vale.X64.Decls.va_upd_xmm                                                                                   4                                                                                   va_x_xmm4                                                                                   (Vale.X64.Decls.va_upd_xmm                                                                                       3                                                                                       va_x_xmm3                                                                                       (Vale.X64.Decls.va_upd_xmm                                                                                           2                                                                                           va_x_xmm2                                                                                           (Vale.X64.Decls.va_upd_xmm                                                                                               1                                                                                               va_x_xmm1                                                                                               (Vale.X64.Decls.va_upd_xmm                                                                                                   0                                                                                                   va_x_xmm0                                                                                                   (Vale.X64.Decls.va_upd_reg64                                                                                                       14                                                                                                       va_x_r14                                                                                                       (                                                                                                         Vale.X64.Decls.va_upd_reg64                                                                                                           13                                                                                                           va_x_r13                                                                                                           (                                                                                                             Vale.X64.Decls.va_upd_reg64                                                                                                               12                                                                                                               va_x_r12                                                                                                               (                                                                                                                 Vale.X64.Decls.va_upd_reg64                                                                                                                   11                                                                                                                   va_x_r11                                                                                                                   (                                                                                                                     Vale.X64.Decls.va_upd_reg64                                                                                                                       1                                                                                                                       va_x_rbx                                                                                                                       (                                                                                                                         Vale.X64.Decls.va_upd_reg64                                                                                                                           3                                                                                                                           va_x_rdx                                                                                                                           (                                                                                                                             Vale.X64.Decls.va_upd_reg64                                                                                                                               4                                                                                                                               va_x_rsi                                                                                                                               (                                                                                                                                 Vale.X64.Decls.va_upd_reg64                                                                                                                                   5                                                                                                                                   va_x_rdi                                                                                                                                   (                                                                                                                                     Vale.X64.Decls.va_upd_mem                                                                                                                                       va_x_mem                                                                                                                                       va_s}   -> Prims.GTot Prims.int
(declare-fun Tm_ghost_arrow_19e90cdc49d90370c4533dd97caeacd1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_abs_d1d0423fd7cb76e023f3fa243387a14c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_197420b2d1b1e18a6e220da965a49c76 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4faa9126716481fe9c1c631df25963ea (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_54730ceab64eb29ffd977246dd18d4da (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_111b2c2d0ff5701c3d9d2b3a88d3c7a6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d455025e8cd0f739d15329d759521d76 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_7e412f463309f2d8763d4c3545a62207 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c1789cb220f68b77180ebf171b92af57 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_96fa6bb1760ab5470620ca521c07d433 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b3b8e9520d627a56ab77d7ecd23edc62 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_afc3835787c51658489f9ab4574173c7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_29051b3205a8337731ce9161d45f8e5d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_bcc54ec44d8e7fd2336a4c6c949137a2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_dfb65a012c022a08f4912bb7d444bca6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8087547616530ac50bcd677a68fa62cf (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_0e2ab4f6accfa0cb277080450cfc2a0b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_cc87410d9e9894eec0a2de982b38e96c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_14391080e1f43344b43eeb0e34944dce (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3545ab4979a21c46fec1ad8c71948f86 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3114c780b84f1bace57e9d57f2e5c8f1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f215009540277bc002cb771746234915 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5661eb6b7d275cdfb6b2e4c1f08a265d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2b3fda289f86a0c5efd3283009098be2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_22bd9c2d2495337ad72565db5610a4d5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_501e7f6717eede35b9d0ab7dfde63ec5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a0b60e8c4eb927a065ce38f3d3cdd96b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_932d462ca41adf5ea7219e43fee86d8d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c526f21dfcd7884a81ec919721461c21 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_88e689687c20043af56f285105dc41bb (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9814c0d54857781218ad0ed3b961aace (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_42df070e63e436459e5a7470e8e91537 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

















; </end encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_decrypt>


; encoding sigelt va_wpProof_Loop6x_decrypt


; <Skipped Vale.AES.X64.AESGCM.va_wpProof_Loop6x_decrypt/>


; encoding sigelt va_wpProof_Loop6x_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_wpProof_Loop6x_decrypt>


(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Loop6x_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_316b671773b51a362cc9e61a21952a87 (Term Term Term) Term)
;;;;;;;;;;;;;;;;alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     count: Prims.nat ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k: (_: Vale.X64.State.vale_state -> _: Vale.Def.Types_s.quad32 -> Type)   -> Prims.Ghost ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Vale.Def.Types_s.quad32)
(declare-fun Tm_ghost_arrow_8e9a3ea5060accaa130730b88349f7d2 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Loop6x_decrypt@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_wpProof_Loop6x_decrypt>


; encoding sigelt va_quick_Loop6x_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_quick_Loop6x_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_quick_Loop6x_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     count: Prims.nat ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode Vale.Def.Types_s.quad32 (va_code_Loop6x_decrypt alg)
(declare-fun Tm_arrow_0753a4a96f53605ce495e2d09fa768a9 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_quick_Loop6x_decrypt@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_quick_Loop6x_decrypt>


; encoding sigelt 


; <Skipped />


; encoding sigelt 


; <Skipped />


; encoding sigelt va_code_Loop6x_loop_decrypt_body0


; <Skipped Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_body0/>


; encoding sigelt va_code_Loop6x_loop_decrypt_body0


; <Start encoding Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_body0>

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_body0 (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_body0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_body0>


; encoding sigelt va_codegen_success_Loop6x_loop_decrypt_body0


; <Skipped Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_body0/>


; encoding sigelt va_codegen_success_Loop6x_loop_decrypt_body0


; <Start encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_body0>

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_body0 (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_body0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_body0>


; encoding sigelt va_qcode_Loop6x_loop_decrypt_body0


; <Start encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt_body0>

(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt_body0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_mods: Prims.list Vale.X64.QuickCode.mod_t ->     va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)       (va_code_Loop6x_loop_decrypt_body0 alg)
(declare-fun Tm_arrow_a50783234edb03e955d303d8fe3068fe () Term)
(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt_body0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt_body0>


; encoding sigelt va_lemma_Loop6x_loop_decrypt_body0


; <Skipped Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_body0/>


; encoding sigelt va_lemma_Loop6x_loop_decrypt_body0


; <Start encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_body0>

(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_body0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_cfe51775c7d4d76bcb0a2ee361309e2b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Vale.X64.Machine_s.precode Vale.X64.Decls.ins Vale.X64.Decls.ocmp ->     va_s0: Vale.X64.State.vale_state ->     va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32   -> Prims.Ghost     ((((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Vale.Def.Types_s.quad32) * Prims.nat) *       Vale.Def.Types_s.quad32)
(declare-fun Tm_ghost_arrow_43cac1fbbf5516a945dd470cf81ce251 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_body0@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_body0>


; encoding sigelt va_wp_Loop6x_loop_decrypt_body0


; <Start encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt_body0>

;;;;;;;;;;;;;;;;_: Vale.X64.State.vale_state -> _: ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)   -> Type
(declare-fun Tm_arrow_d48658dc6262cf7fac84d02aef010b51 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt_body0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k:       (             _: Vale.X64.State.vale_state ->             _: ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)           -> Type)   -> Type
(declare-fun Tm_arrow_cd9b00a0bccd834736ca8b10a9d1154b () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt_body0@tok () Term)


(declare-fun Tm_abs_1543937eaea286f7bc2ba328c35df9b1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f9c6f83d205f78d0421452f40493fcaa (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_342ac1c39fd51fcedde645ac235c8718 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c713dbe1bb8a8e7305f462a40e04b0cd (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_6db88a1a1a2b4743352adb1abe872811 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f97bcd6bda55a80474e49c5657903c99 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a467fcc50d562efd13dbcea5a71e567e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ad0a3ede585805ed92c4ec4f3d5a4d3e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4eacbc46afee4d8a0451d610e23da7a9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_998c8a6b78f5857fad088cd388ef8bef (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2e5bd31c053c17f64ef6aead6be98c24 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c9dc634fad71bd93da7fd8e77af36f2d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_51c5cb30b3cfcc1cf3fc561c0bb7d9a9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_21b52bd95a0fc9793dee352d9f144a28 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3105e695203ff779262b5a294f6cbc33 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9b5d8b8f5cd5d48039f9d5364f89704f (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5c60401279a384c6d1a9324d61d3296e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f67e677eb51758cea7a17bcf180e2fe7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_24c0b84ec206b4e3f777a9393dc8e1b8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_87204cf2fb02600ff705133be7d8d40e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ac4f48f78d0f09166bdafdad1912af2f (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e29539b2d12d938aa6e92b077a328544 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d2b77b2ace84ecc598b9db63cf829f7e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_20dec6e020fe0ad3e8bede843c18378f (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e09e7c77051812ca451f3e73b5ce353e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_867089a7e6f7a60ee969db13242d4516 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9248a801154b2b4ab67676967b789ca0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d5d14cd72847170fad1a69c357c522f6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_962aecb863dd160c1c8267b85ed66a75 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_753bacea928e86ee1d4da2219f200835 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_87afc14dd7078690fc8ea9525e3b6b4b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a531ce0d69b02bcee45403e1cfeb271a (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_45b13c46b023fad82f4ba3c051efdc3b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt_body0>


; encoding sigelt va_wpProof_Loop6x_loop_decrypt_body0


; <Skipped Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_body0/>


; encoding sigelt va_wpProof_Loop6x_loop_decrypt_body0


; <Start encoding Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_body0>


(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_body0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_8e6ee80b9b07ba828d63a267b9a87aeb (Term Term Term) Term)
;;;;;;;;;;;;;;;;va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k:       (             _: Vale.X64.State.vale_state ->             _: ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)           -> Type)   -> Prims.Ghost     ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) *       ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32))
(declare-fun Tm_ghost_arrow_f9d13a238690b2ddbe9cbf4301181f73 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_body0@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_body0>


; encoding sigelt va_quick_Loop6x_loop_decrypt_body0


; <Start encoding Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt_body0>

(declare-fun Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt_body0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)       (va_code_Loop6x_loop_decrypt_body0 alg)
(declare-fun Tm_arrow_4edb22540f9e079400c18cb974dc2466 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt_body0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt_body0>


; encoding sigelt 


; <Skipped />


; encoding sigelt 


; <Skipped />


; encoding sigelt va_code_Loop6x_loop_decrypt_while0


; <Skipped Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_while0/>


; encoding sigelt va_code_Loop6x_loop_decrypt_while0


; <Start encoding Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_while0>

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_while0 (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_while0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt_while0>


; encoding sigelt va_codegen_success_Loop6x_loop_decrypt_while0


; <Skipped Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_while0/>


; encoding sigelt va_codegen_success_Loop6x_loop_decrypt_while0


; <Start encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_while0>

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_while0 (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_while0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt_while0>


; encoding sigelt va_qcode_Loop6x_loop_decrypt_while0


; <Start encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt_while0>

(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt_while0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_mods: Prims.list Vale.X64.QuickCode.mod_t ->     va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)       (va_code_Loop6x_loop_decrypt_while0 alg)
(declare-fun Tm_arrow_22700386d076afe4c8620d06650bc615 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt_while0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt_while0>


; encoding sigelt va_lemma_Loop6x_loop_decrypt_while0


; <Skipped Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_while0/>


; encoding sigelt va_lemma_Loop6x_loop_decrypt_while0


; <Start encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_while0>

(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_while0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_4255f2d94524a6ffaa7b88784467c154 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Vale.X64.Machine_s.precode Vale.X64.Decls.ins Vale.X64.Decls.ocmp ->     va_s0: Vale.X64.State.vale_state ->     va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32   -> Prims.Ghost     ((((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Vale.Def.Types_s.quad32) * Prims.nat) *       Vale.Def.Types_s.quad32)
(declare-fun Tm_ghost_arrow_3db35738271cc1e652435f3e020aff49 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_while0@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt_while0>


; encoding sigelt va_wp_Loop6x_loop_decrypt_while0


; <Start encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt_while0>


(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt_while0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)


(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt_while0@tok () Term)


(declare-fun Tm_abs_1f08b95587012ebcdacdad3c53316ef6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d57ba8775126030896f7e84d569e649c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_21e204d37ce6917fcf1b492f1fb2bd26 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8bc6f1a9189cee66453b77364e2e88c3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_682e85056d4e5b7fd551838c6f8a26ce (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_63fcca17df27be36e91a4353ce96f124 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9327c5c591df19bbe502e45aaa93d77f (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_db27e7c0f928715df35e7d417182dca5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d103c104b15fe685a5acc429c0e04760 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_52ed3695a56390f283fef135bd9c8e34 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5a32e213c44ab6f21a8a2d1b227eecd6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_48b3fcb1f022806125ad8b39b43fc66e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_dcc95afb2773562765ce27baed413151 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_96900ec6d1a174ad9b0f90be5df489a5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fc8c0b812500581e3796f33162c251ea (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2ddf06046fa8f2da983ff42ab39fa73c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2e095318952fcde298e8f739771cc0f0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_14aae5df008a741a275bc0737c45a101 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_0a41c74858d77acf7d7c934d8f9cf154 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3d28aeaef5b5f36a16fa1e96349b83db (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9008a3d6cc501c4991bb64c34e51d3bf (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_44c19f17427d8d695e2c445cca244574 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_57ec3fed309b886532c2001532a28a04 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ea61bbda741f6c505867f4ef137db803 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_cc90afa05168780149e7c4eeb2159f01 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_52c19493d1cd771ee6e92226f1a9896f (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_be43be1007181b53d9e6f87fb5c92c94 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_967e837b56385d524bd6f12565ff0724 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_438cc61336abf4f9a9cb213a977d83c0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e93048dda0df74f9fe607ee430dd89b2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_99749e0bdba9696110797c5dc25da83d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_75e15d92b7c055011ebd0d67c145a1d2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_19f184fb1f8e64ee65c48b949581c597 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt_while0>


; encoding sigelt va_wpProof_Loop6x_loop_decrypt_while0


; <Skipped Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_while0/>


; encoding sigelt va_wpProof_Loop6x_loop_decrypt_while0


; <Start encoding Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_while0>


(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_while0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_463b29a883fb8c0205c6f8aa8a48c705 (Term Term Term) Term)
;;;;;;;;;;;;;;;;va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k:       (             _: Vale.X64.State.vale_state ->             _: ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)           -> Type)   -> Prims.Ghost     ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) *       ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32))
(declare-fun Tm_ghost_arrow_275c77903b26f13ddc751f5879e93759 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_while0@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt_while0>


; encoding sigelt va_quick_Loop6x_loop_decrypt_while0


; <Start encoding Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt_while0>

(declare-fun Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt_while0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)       (va_code_Loop6x_loop_decrypt_while0 alg)
(declare-fun Tm_arrow_570daf1d045d27d7128d6d6aa6d93086 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt_while0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt_while0>


; encoding sigelt 


; <Skipped />


; encoding sigelt 


; <Skipped />


; encoding sigelt va_code_Loop6x_loop_decrypt


; <Skipped Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt/>


; encoding sigelt va_code_Loop6x_loop_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_code_Loop6x_loop_decrypt>


; encoding sigelt va_codegen_success_Loop6x_loop_decrypt


; <Skipped Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt/>


; encoding sigelt va_codegen_success_Loop6x_loop_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_decrypt>


; encoding sigelt va_qcode_Loop6x_loop_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_mods: Prims.list Vale.X64.QuickCode.mod_t ->     alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode Vale.Def.Types_s.quad32 (va_code_Loop6x_loop_decrypt alg)
(declare-fun Tm_arrow_638a28d5f631606c10989e62c8a05214 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_decrypt>


; encoding sigelt va_lemma_Loop6x_loop_decrypt


; <Skipped Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt/>


; encoding sigelt va_lemma_Loop6x_loop_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_87f8458570b86416414f014100fb6669 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Vale.X64.Machine_s.precode Vale.X64.Decls.ins Vale.X64.Decls.ocmp ->     va_s0: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32   -> Prims.Ghost ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Vale.Def.Types_s.quad32)
(declare-fun Tm_ghost_arrow_8ee335afc85eaaeceaa9e72a8532af94 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_decrypt>


; encoding sigelt va_wp_Loop6x_loop_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt>


(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k: (_: Vale.X64.State.vale_state -> _: Vale.Def.Types_s.quad32 -> Type)   -> Type
(declare-fun Tm_arrow_f297e70b1d10252391e74cd85ce4b889 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt@tok () Term)


(declare-fun Tm_abs_90b5f0efb2a38cc928a21299073d6c57 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ed6075aab40f3039212591ac9da6c224 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_50afa90febf801dc48b9c1702c9e3ce7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_13d4c55a3c350ce75182b76b465bfd99 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_563330207be280fd45ff469e7b93d149 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_098f5db379a6501883ab14cf90ad771d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3a69de6ed765c20cb137a0e811370fee (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9b35fe30947949e8d106a7fd157881b1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_053abdb3e8cabd48a9d7f920fdda0443 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_abb97d4088a8eb3371c71d6a12c9da90 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c77ee03869965eff8bd7e17b21bebf91 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_74d0c7a70b75b290b0cd120a110ea3e0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ec6e789b4fc9c393510f3f99f76c6524 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b12e9e7ac4cb322909d560367e9245e8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b7f49c3d5659872015b9b023369d01c6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_7d71092b854b3ebfc3c9bb3c7dec79da (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_7bc42c2c15504d67a8766c5630593c5e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d635da6523ee1c580461a38d3ac6f4df (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_63ca00fa3e21dd4d02e284056675d161 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d70b8f01580186752b2e60295a8ebf9b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4c80b09a46bb1668a59c354b0cd646a7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_03ea3e355ad9f1b21033f0928cb36d5e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5e521e1d819a8c3f431fc07b2f5416a0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c6600ab5907f45552eb53e34809421d8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_40ebb5ecc77794c15a36db8d105b4452 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_2c9a88633249dd3191484b4dc83e5d6e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_9ccf89bde8009409229409e760162853 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_176d8dc5b4689e531b48037fe03f6de2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c2c352751a89e444b7f2a93d1de77f88 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_5544b5e97d511546b9ec3f711238d364 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)

; </end encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_decrypt>


; encoding sigelt va_wpProof_Loop6x_loop_decrypt


; <Skipped Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt/>


; encoding sigelt va_wpProof_Loop6x_loop_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt>


(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_1462c82f2645ec907574ead76934f307 (Term Term Term) Term)
;;;;;;;;;;;;;;;;alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k: (_: Vale.X64.State.vale_state -> _: Vale.Def.Types_s.quad32 -> Type)   -> Prims.Ghost ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Vale.Def.Types_s.quad32)
(declare-fun Tm_ghost_arrow_4f870bc2c08ec8b751241e099e4ce19a () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_decrypt>


; encoding sigelt va_quick_Loop6x_loop_decrypt


; <Start encoding Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt>

(declare-fun Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;alg: Vale.AES.AES_common_s.algorithm ->     h_LE: Vale.Def.Types_s.quad32 ->     y_orig: Vale.Def.Types_s.quad32 ->     y_prev: Vale.Def.Types_s.quad32 ->     iv_b: Vale.X64.Memory.buffer128 ->     in0_b: Vale.X64.Memory.buffer128 ->     in_b: Vale.X64.Memory.buffer128 ->     out_b: Vale.X64.Memory.buffer128 ->     scratch_b: Vale.X64.Memory.buffer128 ->     key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     keys_b: Vale.X64.Memory.buffer128 ->     hkeys_b: Vale.X64.Memory.buffer128 ->     ctr_BE_orig: Vale.Def.Types_s.quad32 ->     ctr_BE: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode Vale.Def.Types_s.quad32 (va_code_Loop6x_loop_decrypt alg)
(declare-fun Tm_arrow_81548a77b57d210d72a6491204522333 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_quick_Loop6x_loop_decrypt>


; encoding sigelt 


; <Skipped />


; encoding sigelt 


; <Skipped />


; encoding sigelt va_code_Loop6x_loop_body0


; <Skipped Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0/>


; encoding sigelt va_code_Loop6x_loop_body0


; <Start encoding Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0>

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0>


; encoding sigelt va_codegen_success_Loop6x_loop_body0


; <Skipped Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_body0/>


; encoding sigelt va_codegen_success_Loop6x_loop_body0


; <Start encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_body0>

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_body0 (Term) Term)

(declare-fun Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_body0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_codegen_success_Loop6x_loop_body0>


; encoding sigelt va_qcode_Loop6x_loop_body0


; <Start encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_body0>

(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_body0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_mods: Prims.list Vale.X64.QuickCode.mod_t ->     va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_count: Prims.nat ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32   -> Vale.X64.QuickCode.quickCode ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)       (va_code_Loop6x_loop_body0 alg)
(declare-fun Tm_arrow_de40870a7646d1218a024c7884c3db71 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_body0@tok () Term)

; </end encoding Vale.AES.X64.AESGCM.va_qcode_Loop6x_loop_body0>


; encoding sigelt va_lemma_Loop6x_loop_body0


; <Skipped Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0/>


; encoding sigelt va_lemma_Loop6x_loop_body0


; <Start encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0>

(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_375ba6ae21657087271198a6f5430304 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Vale.X64.Machine_s.precode Vale.X64.Decls.ins Vale.X64.Decls.ocmp ->     va_s0: Vale.X64.State.vale_state ->     va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_count: Prims.nat ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32   -> Prims.Ghost     ((((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Vale.Def.Types_s.quad32) * Prims.nat) *       Vale.Def.Types_s.quad32)
(declare-fun Tm_ghost_arrow_f5775d6a1da39d900c4f898eed73e9bd () Term)
(declare-fun Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0@tok () Term)


; </end encoding Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0>


; encoding sigelt va_wp_Loop6x_loop_body0


; <Start encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0>


(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;va_old: Vale.X64.State.vale_state ->     alg: Vale.AES.AES_common_s.algorithm ->     va_in_count: Prims.nat ->     va_in_ctr_BE_orig: Vale.Def.Types_s.quad32 ->     va_in_h_LE: Vale.Def.Types_s.quad32 ->     va_in_hkeys_b: Vale.X64.Memory.buffer128 ->     va_in_in0_b: Vale.X64.Memory.buffer128 ->     va_in_in_b: Vale.X64.Memory.buffer128 ->     va_in_iv_b: Vale.X64.Memory.buffer128 ->     va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32 ->     va_in_keys_b: Vale.X64.Memory.buffer128 ->     va_in_out_b: Vale.X64.Memory.buffer128 ->     va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32 ->     va_in_scratch_b: Vale.X64.Memory.buffer128 ->     va_in_y_orig: Vale.Def.Types_s.quad32 ->     va_in_ctr: Vale.Def.Types_s.quad32 ->     va_in_iter: Prims.nat ->     va_in_y_cur: Vale.Def.Types_s.quad32 ->     va_s0: Vale.X64.State.vale_state ->     va_k:       (             _: Vale.X64.State.vale_state ->             _: ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)           -> Type)   -> Type
(declare-fun Tm_arrow_3d99bccde705c591fd47d7d8911ed688 () Term)
(declare-fun Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0@tok () Term)


(declare-fun Tm_abs_5db1922098e91bf3bb751ca943147e47 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fc3fa1d0aa046dbda31ac001d4785925 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3779b12eb53fab4be7f8b3272c24a53c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d6c503ee8086af11be0d38a02eac2eb1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_6643d128d7970075eac9534e49831f33 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_b8954e59196a5da646af88d949cb0dab (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c0dc564aa59c9429949dd3186d1ac3b1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_79d9b9d96cac0b94d36a14018f3f7590 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d01c9a28179ff563c5187f8299a902e9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_547240da0deaa2658058676d2bd5832b (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_7ecb70811d84bab1b05b2096c7c9bef4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3bf77957eca2c53789db40cac3471169 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c058a4065cd3e9841e2be89b8368d553 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_cd1aad999728db7c9c285fd781a048bf (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_52ee1856c52647531725aaf666090154 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_98c6787403e8d6f6bafe74225276e6e7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a391b79c344183e9912de9c6adb43654 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a9826af7186978c33dae12f5ddc3c214 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_12a102935a3011b256822be36b0b5538 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_73bd2132c5da47d14ccfd5d9cb21145d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c6ba7559a865db2f2a34afcd4318ad10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4e34a9c59b21590f837a1d5e935ce25c (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_fe57c079206a1b0e5b5e58041b52fc43 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_82e8552d0199a9e868ef1f4777ba7329 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_f6bb925e75867ccdc4cfef12d75636eb (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_3a28ee347ea4de534a40e23cfe040e65 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_94a129b5cc29f8ac81b3586e75788190 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e3fc07a4b3fe8333c716dd006e22e964 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4541007a5e47398cdf3685175a4e737e (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4312aeeef5ff032ac166061f70c0b9cf (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_33bf0400ea062f387768ef9ac747f8a2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_184578d7afd057384da3929b676a8adb (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_e701a3029150fe79019e74703430947d (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Equation for Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0
;;; Fact-ids: Name Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0; Namespace Vale.AES.X64.AESGCM
(assert (! 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3550,4-3550,27); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3550,4-3550,27)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term))
 (! (= (Valid (Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17
@x18
@x19
@x20))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,2-3747,53); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,2-3747,53)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,3-3557,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,3-3557,18)
(BoxBool_proj_0 (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x19))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,23-3557,34); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,23-3557,34)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.sse_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,38-3557,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,38-3557,51)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.movbe_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,56-3558,44); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3557,56-3558,44)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 6
(BoxInt_proj_0 @x17)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3558,48-3559,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3558,48-3559,33)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x17)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3559,37-3560,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3559,37-3560,28)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x17)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3560,32-3561,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3560,32-3561,28)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x17)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3561,32-3562,42); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3561,32-3562,42)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 16777216)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3562,46-3563,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3562,46-3563,81)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3562,46-3563,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3562,46-3563,81)
(Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 2))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x8
(BoxInt 1)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Public@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3563,85-3567,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3563,85-3567,18)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3563,86-3564,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3563,86-3564,18)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3564,23-3567,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3564,23-3567,17)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3564,23-3567,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3564,23-3567,17)
(Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x6
(BoxInt (+ (_mul (- (BoxInt_proj_0 @x2)
1)
6)
(_mul (BoxInt_proj_0 @x17)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x17)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3567,22-3570,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3567,22-3570,37)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3567,23-3567,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3567,23-3567,50)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3567,55-3570,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3567,55-3570,36)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3567,55-3570,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3567,55-3570,36)
(Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x7
(BoxInt (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x17)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x17)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3570,41-3573,74); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3570,41-3573,74)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3570,42-3570,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3570,42-3570,69)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3571,4-3573,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3571,4-3573,73)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3571,4-3573,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3571,4-3573,73)
(Vale.X64.Decls.validDstAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x11
(BoxInt (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x17)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x17)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3574,4-3575,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3574,4-3575,54)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3574,4-3575,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3574,4-3575,54)
(Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 6))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x14
(BoxInt 9)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3575,58-3577,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3575,58-3577,17)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3575,58-3577,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3575,58-3577,17)
(Vale.X64.Decls.validSrcAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 0))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
32))
@x5
(BoxInt 8)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,21-3578,16); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,21-3578,16)
(or 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,22-3577,56)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,22-3577,56)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,22-3577,56)
(Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x7)
(Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x11))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,70-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,22-3577,56)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,70-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,22-3577,56)
(Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x11)
(Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x7))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,83-3578,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3577,83-3578,15)
(= @x7
@x11)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3578,20-3578,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3578,20-3578,46)
(= @x6
@x11)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3578,50-3579,71); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3578,50-3579,71)
(>= (BoxInt_proj_0 (FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
@x7)))
6)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3579,75-3583,47); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3579,75-3583,47)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3579,76-3580,7); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3579,76-3580,7)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3580,12-3583,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3580,12-3583,46)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3580,12-3583,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3580,12-3583,46)
(Vale.AES.GCTR.partial_seq_agreement @x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x7)
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(BoxInt_proj_0 @x17))))
(FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
@x7)))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3583,51-3584,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3583,51-3584,68)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3583,52-3583,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3583,52-3583,79)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3583,84-3584,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3583,84-3584,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3584,72-3585,87); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3584,72-3585,87)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3584,73-3585,5); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3584,73-3585,5)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3585,10-3585,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3585,10-3585,86)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3586,4-3587,20); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3586,4-3587,20)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3586,5-3586,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3586,5-3586,32)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3586,37-3587,19); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3586,37-3587,19)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3587,24-3588,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3587,24-3588,66)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3587,24-3588,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3587,24-3588,66)
(Vale.X64.Decls.modifies_buffer_specific128 @x14
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 3))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))
(BoxInt 1)
(BoxInt 8))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3589,4-3591,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3589,4-3591,35)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3589,4-3591,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3589,4-3591,35)
(Vale.X64.Decls.modifies_buffer_specific128 @x11
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(BoxInt (_mul (BoxInt_proj_0 @x2)
6))
(BoxInt (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x17)
6))
5)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3591,39-3594,34); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3591,39-3594,34)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3591,40-3591,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3591,40-3591,68)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3591,73-3594,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3591,73-3594,33)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3591,73-3592,8); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3591,73-3592,8)
(>= (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
6)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3592,12-3594,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3592,12-3594,33)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3592,12-3594,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3592,12-3594,33)
(Vale.X64.Decls.buffer_modifies_specific128 @x11
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(BoxInt (_mul (BoxInt_proj_0 @x2)
6))
(BoxInt (- (+ (_mul (BoxInt_proj_0 @x2)
6)
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
1)))
)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3594,38-3595,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3594,38-3595,66)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3594,38-3595,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3594,38-3595,66)
(Vale.X64.Decls.modifies_buffer_specific128 @x8
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 2))
(BoxInt 0)
(BoxInt 0))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3595,70-3597,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3595,70-3597,36)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3595,70-3597,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3595,70-3597,36)
(Vale.AES.X64.AESopt.aes_reqs_offset @x1
@x9
@x13
@x10
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 0))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3597,40-3598,22); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3597,40-3598,22)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
@x13
(BoxInt 0)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3598,26-3598,43); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3598,26-3598,43)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.pclmulqdq_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3598,47-3599,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3598,47-3599,77)
(= @x4
(Vale.AES.AES_s.aes_encrypt_LE @x1
@x9
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3600,4-3601,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3600,4-3601,54)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3600,4-3601,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3600,4-3601,54)
(Vale.AES.GHash.hkeys_reqs_priv (Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 0))
@x5)
(Vale.Def.Types_s.reverse_bytes_quad32 @x4))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3601,58-3601,91); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3601,58-3601,91)
(>= (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
2)
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3602,4-3604,25); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3602,4-3604,25)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3602,5-3602,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3602,5-3602,32)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3602,37-3604,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3602,37-3604,24)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3602,37-3604,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3602,37-3604,24)
(Vale.AES.X64.AESopt.scratch_reqs @x14
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x6)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3604,29-3607,34); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3604,29-3607,34)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3604,30-3604,58); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3604,30-3604,58)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3604,63-3607,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3604,63-3607,33)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3604,63-3607,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3604,63-3607,33)
(Vale.AES.X64.AESopt.scratch_reqs @x14
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x6)
(Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x14
(BoxInt 2)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3607,38-3609,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3607,38-3609,97)
(= @x18
(Vale.AES.GHash.ghash_incremental0 @x4
@x15
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x6)
(BoxInt 0)
(BoxInt (_mul (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
2)
6)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3610,7-3614,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3610,7-3614,37)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3610,8-3610,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3610,8-3610,35)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3610,40-3614,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3610,40-3614,36)
(= @x18
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.Math.Poly2.Bits_s.to_quad32 (Vale.Math.Poly2_s.add (Vale.Math.Poly2_s.add (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
(Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))))
(Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x14
(BoxInt 1)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))))))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3614,41-3615,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3614,41-3615,54)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3614,42-3614,70); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3614,42-3614,70)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3614,75-3615,53); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3614,75-3615,53)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 @x18))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3615,58-3615,74); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3615,58-3615,74)
(<= 2
(BoxInt_proj_0 @x2))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3615,78-3616,29); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3615,78-3616,29)
(= (_mod (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3616,33-3616,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3616,33-3616,66)
(< (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3616,71-3617,10); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3616,71-3617,10)
(<= 6
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3617,14-3617,82); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3617,14-3617,82)
(< (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
6)
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3617,87-3618,62); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3617,87-3618,62)
(< (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x17)
6))
6)
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3618,66-3619,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3618,66-3619,33)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3618,67-3618,94); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3618,67-3618,94)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3619,4-3619,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3619,4-3619,32)
(>= (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3619,37-3620,59); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3619,37-3620,59)
(= @x16
(Vale.AES.GCTR.inc32lite @x3
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul (BoxInt_proj_0 @x17)
6)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3620,63-3621,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3620,63-3621,66)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 16777216)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3621,70-3622,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3621,70-3622,79)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3622,83-3623,48); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3622,83-3623,48)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (_mod (BoxInt_proj_0 (Vale.Def.Words_s.__proj__Mkfour__item__lo0 Vale.Def.Words_s.nat32
@x16))
256)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3623,52-3625,65); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3623,52-3625,65)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3623,53-3623,80); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3623,53-3623,80)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3623,85-3625,64); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3623,85-3625,64)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.quad32_xor (Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 0)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3625,69-3627,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3625,69-3627,81)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3625,69-3627,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3625,69-3627,81)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3625,70-3625,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3625,70-3625,97)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3626,9-3626,42); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3626,9-3626,42)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3626,47-3627,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3626,47-3627,79)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 1))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3627,85-3629,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3627,85-3629,81)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3627,85-3629,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3627,85-3629,81)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3627,86-3628,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3627,86-3628,18)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3628,24-3628,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3628,24-3628,57)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3628,62-3629,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3628,62-3629,79)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 2))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3629,85-3631,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3629,85-3631,81)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3629,85-3631,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3629,85-3631,81)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3629,86-3630,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3629,86-3630,18)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3630,24-3630,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3630,24-3630,57)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3630,62-3631,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3630,62-3631,79)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 3))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3631,85-3633,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3631,85-3633,81)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3631,85-3633,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3631,85-3633,81)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3631,86-3632,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3631,86-3632,18)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3632,24-3632,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3632,24-3632,57)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3632,62-3633,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3632,62-3633,79)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 4))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3633,85-3635,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3633,85-3635,81)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3633,85-3635,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3633,85-3635,81)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3633,86-3634,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3633,86-3634,18)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3634,24-3634,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3634,24-3634,57)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3634,62-3635,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3634,62-3635,79)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 5))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3635,85-3638,91); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3635,85-3638,91)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3635,86-3636,19); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3635,86-3636,19)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3636,24-3638,90); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3636,24-3638,90)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3636,24-3638,90); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3636,24-3638,90)
(Vale.AES.GCTR.gctr_registers (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x12
@x1
@x9
@x3
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
1)))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3639,4-3641,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3639,4-3641,51)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3639,5-3639,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3639,5-3639,32)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3639,37-3641,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3639,37-3641,50)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3639,37-3641,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3639,37-3641,50)
(Vale.AES.GCTR.gctr_partial @x1
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(BoxInt_proj_0 @x17))))
@x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x11)
@x9
@x3)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3641,55-3644,38); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3641,55-3644,38)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3641,56-3641,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3641,56-3641,84)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3642,4-3644,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3642,4-3644,37)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3642,4-3644,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3642,4-3644,37)
(Vale.AES.GCTR.gctr_partial @x1
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(- (BoxInt_proj_0 @x17)
1))))
@x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x11)
@x9
@x3)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3644,42-3644,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3644,42-3644,69)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3644,73-3747,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3644,73-3747,52)
(forall ((@x21 Term) (@x22 Term) (@x23 Term) (@x24 Term) (@x25 Term) (@x26 Term) (@x27 Term) (@x28 Term) (@x29 Term) (@x30 Term) (@x31 Term) (@x32 Term) (@x33 Term) (@x34 Term) (@x35 Term) (@x36 Term) (@x37 Term) (@x38 Term) (@x39 Term) (@x40 Term) (@x41 Term) (@x42 Term) (@x43 Term) (@x44 Term) (@x45 Term) (@x46 Term) (@x47 Term) (@x48 Term) (@x49 Term) (@x50 Term) (@x51 Term) (@x52 Term) (@x53 Term))
 (! (implies (and (HasType @x21
Vale.X64.Flags.t)
(HasType @x22
Vale.Arch.HeapImpl.vale_heap)
(HasType @x23
Vale.Arch.HeapImpl.vale_heap)
(HasType @x24
Vale.Arch.HeapImpl.vale_heap)
(HasType @x25
Vale.Arch.HeapImpl.vale_heap)
(HasType @x26
Prims.bool)
(HasType @x27
Vale.Def.Words_s.nat64)
(HasType @x28
Vale.Def.Words_s.nat64)
(HasType @x29
Vale.Def.Words_s.nat64)
(HasType @x30
Vale.Def.Words_s.nat64)
(HasType @x31
Vale.Def.Words_s.nat64)
(HasType @x32
Vale.Def.Words_s.nat64)
(HasType @x33
Vale.Def.Words_s.nat64)
(HasType @x34
Vale.Def.Words_s.nat64)
(HasType @x35
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x36
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x37
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x38
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x39
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x40
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x41
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x42
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x43
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x44
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x45
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x46
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x47
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x48
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x49
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x50
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x51
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x52
Prims.nat)
(HasType @x53
(Vale.Def.Types_s.quad32 Dummy_value))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3661,4-3661,19); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3661,4-3661,19)
(BoxBool_proj_0 (Vale.X64.State.__proj__Mkvale_state__item__vs_ok (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3661,24-3661,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3661,24-3661,35)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.sse_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3661,39-3661,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3661,39-3661,52)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.movbe_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3661,57-3662,38); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3661,57-3662,38)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 6
(BoxInt_proj_0 @x52)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3662,42-3663,22); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3662,42-3663,22)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x52)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3663,26-3664,8); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3663,26-3664,8)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x52)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3664,12-3664,87); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3664,12-3664,87)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x52)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3665,4-3665,88); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3665,4-3665,88)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 16777216)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3666,4-3667,49); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3666,4-3667,49)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3666,4-3667,49); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3666,4-3667,49)
(Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 2))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
@x8
(BoxInt 1)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
Vale.Arch.HeapTypes_s.Public@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3667,53-3670,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3667,53-3670,68)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3667,54-3667,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3667,54-3667,81)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3668,4-3670,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3668,4-3670,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3668,4-3670,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3668,4-3670,67)
(Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
@x6
(BoxInt (+ (_mul (- (BoxInt_proj_0 @x2)
1)
6)
(_mul (BoxInt_proj_0 @x52)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x52)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3670,72-3673,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3670,72-3673,68)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3670,73-3671,5); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3670,73-3671,5)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3671,10-3673,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3671,10-3673,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3671,10-3673,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3671,10-3673,67)
(Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
@x7
(BoxInt (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x52)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x52)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3673,72-3676,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3673,72-3676,68)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3673,73-3674,5); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3673,73-3674,5)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3674,10-3676,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3674,10-3676,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3674,10-3676,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3674,10-3676,67)
(Vale.X64.Decls.validDstAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
@x11
(BoxInt (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x52)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x52)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3677,4-3678,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3677,4-3678,54)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3677,4-3678,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3677,4-3678,54)
(Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 3))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 6))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
@x14
(BoxInt 9)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
Vale.Arch.HeapTypes_s.Secret@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3678,58-3680,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3678,58-3680,17)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3678,58-3680,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3678,58-3680,17)
(Vale.X64.Decls.validSrcAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 0))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
32))
@x5
(BoxInt 8)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
Vale.Arch.HeapTypes_s.Secret@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,21-3681,16); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,21-3681,16)
(or 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,22-3680,56)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,22-3680,56)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,22-3680,56)
(Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x7)
(Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x11))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,70-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,22-3680,56)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,70-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,22-3680,56)
(Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x11)
(Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x7))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,83-3681,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3680,83-3681,15)
(= @x7
@x11)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3681,20-3681,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3681,20-3681,46)
(= @x6
@x11)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3681,50-3682,71); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3681,50-3682,71)
(>= (BoxInt_proj_0 (FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
@x7)))
6)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3682,75-3686,25); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3682,75-3686,25)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3682,76-3683,7); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3682,76-3683,7)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3683,12-3686,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3683,12-3686,24)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3683,12-3686,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3683,12-3686,24)
(Vale.AES.GCTR.partial_seq_agreement @x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
@x7)
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(BoxInt_proj_0 @x52))))
(FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
@x7)))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3686,29-3687,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3686,29-3687,52)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3686,30-3686,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3686,30-3686,57)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3686,62-3687,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3686,62-3687,51)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3687,56-3688,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3687,56-3688,81)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3687,57-3687,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3687,57-3687,84)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3688,4-3688,80); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3688,4-3688,80)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3688,85-3690,12); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3688,85-3690,12)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3688,86-3689,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3688,86-3689,18)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3689,23-3690,11); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3689,23-3690,11)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3690,16-3691,44); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3690,16-3691,44)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3690,16-3691,44); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3690,16-3691,44)
(Vale.X64.Decls.modifies_buffer_specific128 @x14
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 3))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 3))
(BoxInt 1)
(BoxInt 8))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3691,48-3693,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3691,48-3693,77)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3691,48-3693,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3691,48-3693,77)
(Vale.X64.Decls.modifies_buffer_specific128 @x11
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
(BoxInt (_mul (BoxInt_proj_0 @x2)
6))
(BoxInt (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x52)
6))
5)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3693,81-3696,82); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3693,81-3696,82)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3693,82-3694,14); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3693,82-3694,14)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3694,19-3696,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3694,19-3696,81)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3694,19-3694,48); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3694,19-3694,48)
(>= (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
6)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3694,52-3696,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3694,52-3696,81)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3694,52-3696,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3694,52-3696,81)
(Vale.X64.Decls.buffer_modifies_specific128 @x11
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
(BoxInt (_mul (BoxInt_proj_0 @x2)
6))
(BoxInt (- (+ (_mul (BoxInt_proj_0 @x2)
6)
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
1)))
)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3697,4-3698,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3697,4-3698,36)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3697,4-3698,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3697,4-3698,36)
(Vale.X64.Decls.modifies_buffer_specific128 @x8
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 2))
(BoxInt 0)
(BoxInt 0))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3698,40-3699,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3698,40-3699,97)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3698,40-3699,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3698,40-3699,97)
(Vale.AES.X64.AESopt.aes_reqs_offset @x1
@x9
@x13
@x10
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 0))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3700,7-3700,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3700,7-3700,77)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
@x13
(BoxInt 0)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3700,81-3700,98); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3700,81-3700,98)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.pclmulqdq_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3701,7-3702,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3701,7-3702,36)
(= @x4
(Vale.AES.AES_s.aes_encrypt_LE @x1
@x9
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3702,40-3703,98); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3702,40-3703,98)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3702,40-3703,98); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3702,40-3703,98)
(Vale.AES.GHash.hkeys_reqs_priv (Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 0))
@x5)
(Vale.Def.Types_s.reverse_bytes_quad32 @x4))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,7-3704,34); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,7-3704,34)
(>= (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x52))
2)
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,38-3706,47); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,38-3706,47)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,39-3704,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,39-3704,66)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,71-3706,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,71-3706,46)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,71-3706,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3704,71-3706,46)
(Vale.AES.X64.AESopt.scratch_reqs @x14
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x52))
2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 3))
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
@x6)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3706,51-3709,34); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3706,51-3709,34)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3706,52-3706,80); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3706,52-3706,80)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3706,85-3709,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3706,85-3709,33)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3706,85-3709,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3706,85-3709,33)
(Vale.AES.X64.AESopt.scratch_reqs @x14
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x52))
2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 3))
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
@x6)
(Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x14
(BoxInt 2)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 3))))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3709,38-3711,91); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3709,38-3711,91)
(= @x53
(Vale.AES.GHash.ghash_incremental0 @x4
@x15
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
@x6)
(BoxInt 0)
(BoxInt (_mul (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x52))
2)
6)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3712,4-3716,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3712,4-3716,37)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3712,5-3712,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3712,5-3712,32)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3712,37-3716,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3712,37-3716,36)
(= @x53
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.Math.Poly2.Bits_s.to_quad32 (Vale.Math.Poly2_s.add (Vale.Math.Poly2_s.add (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
(Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))))
(Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x14
(BoxInt 1)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 3))))))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3716,41-3717,48); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3716,41-3717,48)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3716,42-3716,70); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3716,42-3716,70)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3716,75-3717,47); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3716,75-3717,47)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Types_s.reverse_bytes_quad32 @x53))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3717,52-3717,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3717,52-3717,68)
(<= 2
(BoxInt_proj_0 @x2))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3717,72-3718,23); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3717,72-3718,23)
(= (_mod (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
6)
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3718,27-3718,60); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3718,27-3718,60)
(< (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3718,65-3718,94); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3718,65-3718,94)
(<= 6
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3719,4-3719,72); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3719,4-3719,72)
(< (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
6)
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3719,77-3720,56); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3719,77-3720,56)
(< (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x52)
6))
6)
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3720,60-3721,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3720,60-3721,33)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3720,61-3720,88); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3720,61-3720,88)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3721,4-3721,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3721,4-3721,32)
(>= (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
6)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3721,37-3722,53); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3721,37-3722,53)
(= @x51
(Vale.AES.GCTR.inc32lite @x3
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul (BoxInt_proj_0 @x52)
6)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3722,57-3723,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3722,57-3723,66)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 16777216)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3723,70-3724,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3723,70-3724,73)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x51
(BoxInt 0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3724,77-3725,76); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3724,77-3725,76)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt (_mod (BoxInt_proj_0 (Vale.Def.Words_s.__proj__Mkfour__item__lo0 Vale.Def.Words_s.nat32
@x51))
256)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3725,80-3727,98); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3725,80-3727,98)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3725,81-3726,13); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3725,81-3726,13)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3726,18-3727,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3726,18-3727,97)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Types_s.quad32_xor (Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x51
(BoxInt 0)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,7-3729,78); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,7-3729,78)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,7-3729,78); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,7-3729,78)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,8-3728,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,8-3728,35)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,41-3728,74); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,41-3728,74)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,79-3729,76); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3728,79-3729,76)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x51
(BoxInt 1))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3729,82-3731,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3729,82-3731,75)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3729,82-3731,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3729,82-3731,75)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3729,83-3730,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3729,83-3730,18)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3730,24-3730,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3730,24-3730,57)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3730,62-3731,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3730,62-3731,73)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x51
(BoxInt 2))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3731,79-3733,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3731,79-3733,75)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3731,79-3733,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3731,79-3733,75)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3731,80-3732,13); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3731,80-3732,13)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3732,19-3732,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3732,19-3732,52)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3732,57-3733,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3732,57-3733,73)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x51
(BoxInt 3))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3733,79-3735,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3733,79-3735,75)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3733,79-3735,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3733,79-3735,75)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3733,80-3734,13); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3733,80-3734,13)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3734,19-3734,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3734,19-3734,52)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3734,57-3735,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3734,57-3735,73)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x51
(BoxInt 4))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3735,79-3737,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3735,79-3737,75)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3735,79-3737,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3735,79-3737,75)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3735,80-3736,13); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3735,80-3736,13)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3736,19-3736,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3736,19-3736,52)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3736,57-3737,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3736,57-3737,73)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x51
(BoxInt 5))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3737,79-3740,85); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3737,79-3740,85)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3737,80-3738,14); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3737,80-3738,14)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3738,19-3740,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3738,19-3740,84)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3738,19-3740,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3738,19-3740,84)
(Vale.AES.GCTR.gctr_registers (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
@x12
@x1
@x9
@x3
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x52))
1)))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3741,4-3743,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3741,4-3743,51)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3741,5-3741,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3741,5-3741,32)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3741,37-3743,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3741,37-3743,50)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3741,37-3743,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3741,37-3743,50)
(Vale.AES.GCTR.gctr_partial @x1
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(BoxInt_proj_0 @x52))))
@x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
@x11)
@x9
@x3)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3743,55-3746,38); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3743,55-3746,38)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3743,56-3743,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3743,56-3743,84)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3744,4-3746,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3744,4-3746,37)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3744,4-3746,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3744,4-3746,37)
(Vale.AES.GCTR.gctr_partial @x1
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(- (BoxInt_proj_0 @x52)
1))))
@x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(BoxInt 6))
@x11)
@x9
@x3)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3746,42-3747,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3746,42-3747,15)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3746,42-3747,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3746,42-3747,15)
(Vale.X64.QuickCodes.precedes_wrap Vale.Def.Words_s.nat64
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19))))))))))))))))))))))))))))))))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3747,20-3747,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3747,20-3747,51)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3747,20-3747,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3747,20-3747,51)
(ApplyTT (ApplyTT @x20
(Vale.X64.Decls.va_upd_xmm (BoxInt 9)
@x50
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
@x49
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
@x48
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
@x47
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
@x46
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
@x45
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
@x44
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
@x43
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
@x42
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
@x41
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
@x40
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
@x39
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
@x38
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
@x37
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
@x36
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
@x35
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
@x34
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
@x33
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
@x32
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
@x31
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
@x30
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
@x29
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
@x28
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
@x27
(Vale.X64.Decls.va_upd_ok @x26
(Vale.X64.Decls.va_upd_mem @x25
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
@x24
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
@x23
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
@x22
(Vale.X64.Decls.va_upd_flags @x21
@x19)))))))))))))))))))))))))))))))
(FStar.Pervasives.Native.Mktuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value)
@x51
@x52
@x53))
)
)
 
;;no pats
:qid equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0.1))
)
)
 

:pattern ((Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17
@x18
@x19
@x20))
:qid equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0))

:named equation_Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0))

; </end encoding Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0>


; encoding sigelt va_wpProof_Loop6x_loop_body0


; <Skipped Vale.AES.X64.AESGCM.va_wpProof_Loop6x_loop_body0/>


; Starting query at /home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)

(push)
(declare-fun label_62 () Bool)
(declare-fun label_61 () Bool)
(declare-fun label_60 () Bool)
(declare-fun label_59 () Bool)
(declare-fun label_58 () Bool)
(declare-fun label_57 () Bool)
(declare-fun label_56 () Bool)
(declare-fun label_55 () Bool)
(declare-fun label_54 () Bool)
(declare-fun label_53 () Bool)
(declare-fun label_52 () Bool)
(declare-fun label_51 () Bool)
(declare-fun label_50 () Bool)
(declare-fun label_49 () Bool)
(declare-fun label_48 () Bool)
(declare-fun label_47 () Bool)
(declare-fun label_46 () Bool)
(declare-fun label_45 () Bool)
(declare-fun label_44 () Bool)
(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


; Encoding query formula : forall (va_old: Vale.X64.State.vale_state) (alg: Vale.AES.AES_common_s.algorithm)
;   (va_in_count: Prims.nat) (va_in_ctr_BE_orig: Vale.Def.Types_s.quad32)
;   (va_in_h_LE: Vale.Def.Types_s.quad32) (va_in_hkeys_b: Vale.X64.Memory.buffer128)
;   (va_in_in0_b: Vale.X64.Memory.buffer128) (va_in_in_b: Vale.X64.Memory.buffer128)
;   (va_in_iv_b: Vale.X64.Memory.buffer128)
;   (va_in_key_words: FStar.Seq.Base.seq Vale.Def.Words_s.nat32)
;   (va_in_keys_b: Vale.X64.Memory.buffer128) (va_in_out_b: Vale.X64.Memory.buffer128)
;   (va_in_plain_quads: FStar.Seq.Base.seq Vale.Def.Types_s.quad32)
;   (va_in_round_keys: FStar.Seq.Base.seq Vale.Def.Types_s.quad32)
;   (va_in_scratch_b: Vale.X64.Memory.buffer128) (va_in_y_orig: Vale.Def.Types_s.quad32)
;   (va_in_ctr: Vale.Def.Types_s.quad32) (va_in_iter: Prims.nat)
;   (va_in_y_cur: Vale.Def.Types_s.quad32) (va_s0: Vale.X64.State.vale_state)
;   (va_k:
;   (
;         _: Vale.X64.State.vale_state ->
;         _: ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)
;       -> Type)).
;   (*could not prove post-condition*)
;   forall (p:
;     Prims.pure_post ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) *
;         ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32))).
;     Vale.X64.QuickCode.t_require va_s0 /\
;     Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0 va_old alg va_in_count va_in_ctr_BE_orig va_in_h_LE
;       va_in_hkeys_b va_in_in0_b va_in_in_b va_in_iv_b va_in_key_words va_in_keys_b va_in_out_b
;       va_in_plain_quads va_in_round_keys va_in_scratch_b va_in_y_orig va_in_ctr va_in_iter
;       va_in_y_cur va_s0 va_k /\
;     (forall (ghost_result:
;         ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) *
;           ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32))).
;         (let FStar.Pervasives.Native.Mktuple3 #_ #_ #_ va_sM va_f0 va_g = ghost_result in
;           Vale.X64.QuickCode.va_t_ensure (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 alg)
;             [
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 9);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 8);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 7);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 6);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 5);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 4);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 3);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 2);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 15);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 14);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 13);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 12);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 11);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 10);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 1);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 0);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 4);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 3);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 5);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 1);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 14);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 13);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 12);
;               Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 11); Vale.X64.QuickCode.Mod_ok;
;               Vale.X64.QuickCode.Mod_mem; Vale.X64.QuickCode.Mod_mem_heaplet 6;
;               Vale.X64.QuickCode.Mod_mem_heaplet 3; Vale.X64.QuickCode.Mod_mem_heaplet 2;
;               Vale.X64.QuickCode.Mod_flags
;             ]
;             va_s0
;             va_k
;             (va_sM, va_f0, va_g)) ==>
;         p ghost_result) ==>
;     Vale.X64.Decls.va_require_total (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 alg)
;       (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 alg)
;       va_s0 /\ Mkvale_state?.vs_ok va_s0 /\
;     Vale.X64.CPU_Features_s.sse_enabled /\ Vale.X64.CPU_Features_s.movbe_enabled /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) ==
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) - 6 * va_in_iter /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 14) (Mkvale_state?.vs_regs va_s0) ==
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 14) (Mkvale_state?.vs_regs va_old) + 96 * va_in_iter /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 5) (Mkvale_state?.vs_regs va_s0) ==
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 5) (Mkvale_state?.vs_regs va_old) + 96 * va_in_iter /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 4) (Mkvale_state?.vs_regs va_s0) ==
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 4) (Mkvale_state?.vs_regs va_old) + 96 * va_in_iter /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 2) (Mkvale_state?.vs_regs va_s0) ==
;     Vale.Def.Words_s.Mkfour 0 0 0 16777216 /\
;     Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                   va_s0))
;           2)
;       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 8) (Mkvale_state?.vs_regs va_s0))
;       va_in_iv_b
;       1
;       (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_s0))
;       Vale.Arch.HeapTypes_s.Public /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                     va_s0))
;             6)
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 14) (Mkvale_state?.vs_regs va_s0))
;         va_in_in0_b
;         ((va_in_count - 1) * 6 + va_in_iter * 6)
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) -
;           va_in_iter * 6)
;         (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_s0))
;         Vale.Arch.HeapTypes_s.Secret) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                     va_s0))
;             6)
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 5) (Mkvale_state?.vs_regs va_s0))
;         va_in_in_b
;         (va_in_count * 6 + va_in_iter * 6)
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) -
;           va_in_iter * 6)
;         (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_s0))
;         Vale.Arch.HeapTypes_s.Secret) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Decls.validDstAddrsOffset128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                     va_s0))
;             6)
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 4) (Mkvale_state?.vs_regs va_s0))
;         va_in_out_b
;         (va_in_count * 6 + va_in_iter * 6)
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) -
;           va_in_iter * 6)
;         (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_s0))
;         Vale.Arch.HeapTypes_s.Secret) /\
;     Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                   va_s0))
;           3)
;       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 6) (Mkvale_state?.vs_regs va_s0))
;       va_in_scratch_b
;       9
;       (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_s0))
;       Vale.Arch.HeapTypes_s.Secret /\
;     Vale.X64.Decls.validSrcAddrs128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                   va_s0))
;           0)
;       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 9) (Mkvale_state?.vs_regs va_s0) - 32)
;       va_in_hkeys_b
;       8
;       (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_s0))
;       Vale.Arch.HeapTypes_s.Secret /\
;     (Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer va_in_in_b)
;         (Vale.X64.Memory.loc_buffer va_in_out_b) /\
;       Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer va_in_out_b)
;         (Vale.X64.Memory.loc_buffer va_in_in_b) \/ va_in_in_b == va_in_out_b) /\
;     va_in_in0_b == va_in_out_b /\
;     FStar.Seq.Base.length (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                   (Mkvale_state?.vs_heap va_old))
;               6)
;           va_in_in_b) >=
;     6 /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.AES.GCTR.partial_seq_agreement va_in_plain_quads
;         (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                         va_s0))
;                 6)
;             va_in_in_b)
;         (6 * va_in_count + 6 * va_in_iter)
;         (FStar.Seq.Base.length (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                         (Mkvale_state?.vs_heap va_old))
;                     6)
;                 va_in_in_b))) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 5) (Mkvale_state?.vs_regs va_s0) +
;       16 * Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) <
;       0x10000000000000000) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 14) (Mkvale_state?.vs_regs va_s0) +
;       16 * Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) <
;       0x10000000000000000) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 4) (Mkvale_state?.vs_regs va_s0) +
;       16 * Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) <
;       0x10000000000000000) /\
;     Vale.X64.Decls.modifies_buffer_specific128 va_in_scratch_b
;       (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_old)) 3)
;       (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0)) 3)
;       1
;       8 /\
;     Vale.X64.Decls.modifies_buffer_specific128 va_in_out_b
;       (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_old)) 6)
;       (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0)) 6)
;       (va_in_count * 6)
;       (va_in_count * 6 + va_in_iter * 6 + 5) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) == 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) >= 6 /\
;       Vale.X64.Decls.buffer_modifies_specific128 va_in_out_b
;         (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_old)) 6)
;         (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0)) 6)
;         (va_in_count * 6)
;         (va_in_count * 6 +
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) -
;           1)) /\
;     Vale.X64.Decls.modifies_buffer_specific128 va_in_iv_b
;       (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_old)) 2)
;       (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0)) 2)
;       0
;       0 /\
;     Vale.AES.X64.AESopt.aes_reqs_offset alg
;       va_in_key_words
;       va_in_round_keys
;       va_in_keys_b
;       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 2) (Mkvale_state?.vs_regs va_s0))
;       (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0)) 0)
;       (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_s0)) /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 15) (Mkvale_state?.vs_regs va_s0) ==
;     FStar.Seq.Base.index va_in_round_keys 0 /\ Vale.X64.CPU_Features_s.pclmulqdq_enabled /\
;     va_in_h_LE ==
;     Vale.AES.AES_s.aes_encrypt_LE alg va_in_key_words (Vale.Def.Words_s.Mkfour 0 0 0 0) /\
;     Vale.AES.GHash.hkeys_reqs_priv (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                   (Mkvale_state?.vs_heap va_s0))
;               0)
;           va_in_hkeys_b)
;       (Vale.Def.Types_s.reverse_bytes_quad32 va_in_h_LE) /\ va_in_count + va_in_iter - 2 >= 0 /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.AES.X64.AESopt.scratch_reqs va_in_scratch_b
;         (va_in_count + va_in_iter - 2)
;         (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0)) 3)
;         (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                         va_s0))
;                 6)
;             va_in_in0_b)
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 7) (Mkvale_state?.vs_regs va_s0))) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) == 0 ==>
;       Vale.AES.X64.AESopt.scratch_reqs va_in_scratch_b
;         (va_in_count + va_in_iter - 2)
;         (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0)) 3)
;         (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                         va_s0))
;                 6)
;             va_in_in0_b)
;         (Vale.X64.Memory.buffer_read va_in_scratch_b
;             2
;             (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0)) 3))) /\
;     va_in_y_cur ==
;     Vale.AES.GHash.ghash_incremental0 va_in_h_LE
;       va_in_y_orig
;       (FStar.Seq.Base.slice (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                       (Mkvale_state?.vs_heap va_s0))
;                   6)
;               va_in_in0_b)
;           0
;           ((va_in_count + va_in_iter - 2) * 6)) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       va_in_y_cur ==
;       Vale.Def.Types_s.reverse_bytes_quad32 (Vale.Math.Poly2.Bits_s.to_quad32 (Vale.Math.Poly2_s.add
;                 (Vale.Math.Poly2_s.add (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                 1 8)
;                             (Mkvale_state?.vs_regs va_s0)))
;                     (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 4
;                             )
;                             (Mkvale_state?.vs_regs va_s0))))
;                 (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Memory.buffer_read va_in_scratch_b
;                         1
;                         (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_s0
;                                   ))
;                             3)))))) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) == 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 8) (Mkvale_state?.vs_regs va_s0) ==
;       Vale.Def.Types_s.reverse_bytes_quad32 va_in_y_cur) /\ 2 <= va_in_count /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) % 6 == 0 /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) < 0x100000000 /\
;     (6 <= Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old)) /\
;     (va_in_count * 6 + Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) +
;       6 <
;       0x100000000) /\ va_in_count * 6 + va_in_iter * 6 + 6 < 0x100000000 /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) >= 6) /\
;     va_in_ctr == Vale.AES.GCTR.inc32lite va_in_ctr_BE_orig (6 * va_in_count + va_in_iter * 6) /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 2) (Mkvale_state?.vs_regs va_s0) ==
;     Vale.Def.Words_s.Mkfour 0 0 0 16777216 /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 1) (Mkvale_state?.vs_regs va_s0) ==
;     Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite va_in_ctr 0) /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_s0) ==
;     Mkfour?.lo0 va_in_ctr % 256 /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 9) (Mkvale_state?.vs_regs va_s0) ==
;       Vale.Def.Types_s.quad32_xor (Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite va_in_ctr
;                 0))
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 15) (Mkvale_state?.vs_regs va_s0))) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_s0) + 6 < 256 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 10) (Mkvale_state?.vs_regs va_s0) ==
;       Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite va_in_ctr 1)) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_s0) + 6 < 256 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 11) (Mkvale_state?.vs_regs va_s0) ==
;       Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite va_in_ctr 2)) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_s0) + 6 < 256 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 12) (Mkvale_state?.vs_regs va_s0) ==
;       Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite va_in_ctr 3)) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_s0) + 6 < 256 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 13) (Mkvale_state?.vs_regs va_s0) ==
;       Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite va_in_ctr 4)) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_s0) + 6 < 256 ==>
;       Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 14) (Mkvale_state?.vs_regs va_s0) ==
;       Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite va_in_ctr 5)) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) == 0 ==>
;       Vale.AES.GCTR.gctr_registers (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 9)
;             (Mkvale_state?.vs_regs va_s0))
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 10) (Mkvale_state?.vs_regs va_s0))
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 11) (Mkvale_state?.vs_regs va_s0))
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 12) (Mkvale_state?.vs_regs va_s0))
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 13) (Mkvale_state?.vs_regs va_s0))
;         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 14) (Mkvale_state?.vs_regs va_s0))
;         va_in_plain_quads alg va_in_key_words va_in_ctr_BE_orig (va_in_count + va_in_iter - 1)) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 ==>
;       Vale.AES.GCTR.gctr_partial alg
;         (6 * va_in_count + 6 * va_in_iter)
;         va_in_plain_quads
;         (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                         va_s0))
;                 6)
;             va_in_out_b)
;         va_in_key_words
;         va_in_ctr_BE_orig) /\
;     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) == 0 ==>
;       Vale.AES.GCTR.gctr_partial alg
;         (6 * va_in_count + 6 * (va_in_iter - 1))
;         va_in_plain_quads
;         (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                         va_s0))
;                 6)
;             va_in_out_b)
;         va_in_key_words
;         va_in_ctr_BE_orig) /\
;     Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0) > 0 /\
;     (forall (ghost_result:
;         ((((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) * Vale.Def.Types_s.quad32) *
;           Prims.nat) *
;           Vale.Def.Types_s.quad32)).
;         (let FStar.Pervasives.Native.Mktuple5 #_ #_ #_ #_ #_ va_sM va_fM ctr iter y_cur =
;             ghost_result
;           in
;           Vale.X64.Decls.va_ensure_total (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 alg)
;             va_s0
;             va_sM
;             va_fM /\ Mkvale_state?.vs_ok va_sM /\
;           Vale.X64.CPU_Features_s.sse_enabled /\ Vale.X64.CPU_Features_s.movbe_enabled /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) ==
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) - 6 * iter /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 14) (Mkvale_state?.vs_regs va_sM) ==
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 14) (Mkvale_state?.vs_regs va_old) + 96 * iter /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 5) (Mkvale_state?.vs_regs va_sM) ==
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 5) (Mkvale_state?.vs_regs va_old) + 96 * iter /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 4) (Mkvale_state?.vs_regs va_sM) ==
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 4) (Mkvale_state?.vs_regs va_old) + 96 * iter /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 2) (Mkvale_state?.vs_regs va_sM) ==
;           Vale.Def.Words_s.Mkfour 0 0 0 16777216 /\
;           Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                         va_sM))
;                 2)
;             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 8) (Mkvale_state?.vs_regs va_sM))
;             va_in_iv_b
;             1
;             (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_sM))
;             Vale.Arch.HeapTypes_s.Public /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                       (Mkvale_state?.vs_heap va_sM))
;                   6)
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 14) (Mkvale_state?.vs_regs va_sM))
;               va_in_in0_b
;               ((va_in_count - 1) * 6 + iter * 6)
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) -
;                 iter * 6)
;               (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_sM))
;               Vale.Arch.HeapTypes_s.Secret) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                       (Mkvale_state?.vs_heap va_sM))
;                   6)
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 5) (Mkvale_state?.vs_regs va_sM))
;               va_in_in_b
;               (va_in_count * 6 + iter * 6)
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) -
;                 iter * 6)
;               (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_sM))
;               Vale.Arch.HeapTypes_s.Secret) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Decls.validDstAddrsOffset128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                       (Mkvale_state?.vs_heap va_sM))
;                   6)
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 4) (Mkvale_state?.vs_regs va_sM))
;               va_in_out_b
;               (va_in_count * 6 + iter * 6)
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) -
;                 iter * 6)
;               (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_sM))
;               Vale.Arch.HeapTypes_s.Secret) /\
;           Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                         va_sM))
;                 3)
;             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 6) (Mkvale_state?.vs_regs va_sM))
;             va_in_scratch_b
;             9
;             (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_sM))
;             Vale.Arch.HeapTypes_s.Secret /\
;           Vale.X64.Decls.validSrcAddrs128 (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                         va_sM))
;                 0)
;             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 9) (Mkvale_state?.vs_regs va_sM) - 32)
;             va_in_hkeys_b
;             8
;             (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_sM))
;             Vale.Arch.HeapTypes_s.Secret /\
;           (Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer va_in_in_b)
;               (Vale.X64.Memory.loc_buffer va_in_out_b) /\
;             Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer va_in_out_b)
;               (Vale.X64.Memory.loc_buffer va_in_in_b) \/ va_in_in_b == va_in_out_b) /\
;           va_in_in0_b == va_in_out_b /\
;           FStar.Seq.Base.length (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                         (Mkvale_state?.vs_heap va_old))
;                     6)
;                 va_in_in_b) >=
;           6 /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.AES.GCTR.partial_seq_agreement va_in_plain_quads
;               (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                               va_sM))
;                       6)
;                   va_in_in_b)
;               (6 * va_in_count + 6 * iter)
;               (FStar.Seq.Base.length (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                               (Mkvale_state?.vs_heap va_old))
;                           6)
;                       va_in_in_b))) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 5) (Mkvale_state?.vs_regs va_sM) +
;             16 * Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) <
;             0x10000000000000000) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 14) (Mkvale_state?.vs_regs va_sM) +
;             16 * Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) <
;             0x10000000000000000) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 4) (Mkvale_state?.vs_regs va_sM) +
;             16 * Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) <
;             0x10000000000000000) /\
;           Vale.X64.Decls.modifies_buffer_specific128 va_in_scratch_b
;             (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_old)) 3)
;             (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_sM)) 3)
;             1
;             8 /\
;           Vale.X64.Decls.modifies_buffer_specific128 va_in_out_b
;             (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_old)) 6)
;             (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_sM)) 6)
;             (va_in_count * 6)
;             (va_in_count * 6 + iter * 6 + 5) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) == 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) >= 6 /\
;             Vale.X64.Decls.buffer_modifies_specific128 va_in_out_b
;               (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_old)) 6)
;               (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_sM)) 6)
;               (va_in_count * 6)
;               (va_in_count * 6 +
;                 Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) -
;                 1)) /\
;           Vale.X64.Decls.modifies_buffer_specific128 va_in_iv_b
;             (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_old)) 2)
;             (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_sM)) 2)
;             0
;             0 /\
;           Vale.AES.X64.AESopt.aes_reqs_offset alg
;             va_in_key_words
;             va_in_round_keys
;             va_in_keys_b
;             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 2) (Mkvale_state?.vs_regs va_sM))
;             (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_sM)) 0)
;             (Mkvale_full_heap?.vf_layout (Mkvale_state?.vs_heap va_sM)) /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 15) (Mkvale_state?.vs_regs va_sM) ==
;           FStar.Seq.Base.index va_in_round_keys 0 /\ Vale.X64.CPU_Features_s.pclmulqdq_enabled /\
;           va_in_h_LE ==
;           Vale.AES.AES_s.aes_encrypt_LE alg va_in_key_words (Vale.Def.Words_s.Mkfour 0 0 0 0) /\
;           Vale.AES.GHash.hkeys_reqs_priv (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                         (Mkvale_state?.vs_heap va_sM))
;                     0)
;                 va_in_hkeys_b)
;             (Vale.Def.Types_s.reverse_bytes_quad32 va_in_h_LE) /\ va_in_count + iter - 2 >= 0 /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.AES.X64.AESopt.scratch_reqs va_in_scratch_b
;               (va_in_count + iter - 2)
;               (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_sM)) 3)
;               (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                               va_sM))
;                       6)
;                   va_in_in0_b)
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 7) (Mkvale_state?.vs_regs va_sM))) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) == 0 ==>
;             Vale.AES.X64.AESopt.scratch_reqs va_in_scratch_b
;               (va_in_count + iter - 2)
;               (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_sM)) 3)
;               (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                               va_sM))
;                       6)
;                   va_in_in0_b)
;               (Vale.X64.Memory.buffer_read va_in_scratch_b
;                   2
;                   (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap va_sM))
;                       3))) /\
;           y_cur ==
;           Vale.AES.GHash.ghash_incremental0 va_in_h_LE
;             va_in_y_orig
;             (FStar.Seq.Base.slice (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets
;                             (Mkvale_state?.vs_heap va_sM))
;                         6)
;                     va_in_in0_b)
;                 0
;                 ((va_in_count + iter - 2) * 6)) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             y_cur ==
;             Vale.Def.Types_s.reverse_bytes_quad32 (Vale.Math.Poly2.Bits_s.to_quad32 (Vale.Math.Poly2_s.add
;                       (Vale.Math.Poly2_s.add (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                       1 8)
;                                   (Mkvale_state?.vs_regs va_sM)))
;                           (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                       1 4)
;                                   (Mkvale_state?.vs_regs va_sM))))
;                       (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Memory.buffer_read va_in_scratch_b
;                               1
;                               (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                                           va_sM))
;                                   3)))))) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) == 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 8) (Mkvale_state?.vs_regs va_sM) ==
;             Vale.Def.Types_s.reverse_bytes_quad32 y_cur) /\ 2 <= va_in_count /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) % 6 == 0 /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) < 0x100000000 /\
;           (6 <= Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old)) /\
;           (va_in_count * 6 +
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_old) +
;             6 <
;             0x100000000) /\ va_in_count * 6 + iter * 6 + 6 < 0x100000000 /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) >= 6) /\
;           ctr == Vale.AES.GCTR.inc32lite va_in_ctr_BE_orig (6 * va_in_count + iter * 6) /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 2) (Mkvale_state?.vs_regs va_sM) ==
;           Vale.Def.Words_s.Mkfour 0 0 0 16777216 /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 1) (Mkvale_state?.vs_regs va_sM) ==
;           Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite ctr 0) /\
;           Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_sM) ==
;           Mkfour?.lo0 ctr % 256 /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 9) (Mkvale_state?.vs_regs va_sM) ==
;             Vale.Def.Types_s.quad32_xor (Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite
;                       ctr
;                       0))
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 15) (Mkvale_state?.vs_regs va_sM))) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_sM) + 6 < 256 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 10) (Mkvale_state?.vs_regs va_sM) ==
;             Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite ctr 1)) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_sM) + 6 < 256 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 11) (Mkvale_state?.vs_regs va_sM) ==
;             Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite ctr 2)) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_sM) + 6 < 256 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 12) (Mkvale_state?.vs_regs va_sM) ==
;             Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite ctr 3)) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_sM) + 6 < 256 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 13) (Mkvale_state?.vs_regs va_sM) ==
;             Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite ctr 4)) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 1) (Mkvale_state?.vs_regs va_sM) + 6 < 256 ==>
;             Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 14) (Mkvale_state?.vs_regs va_sM) ==
;             Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite ctr 5)) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) == 0 ==>
;             Vale.AES.GCTR.gctr_registers (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 9)
;                   (Mkvale_state?.vs_regs va_sM))
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 10) (Mkvale_state?.vs_regs va_sM))
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 11) (Mkvale_state?.vs_regs va_sM))
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 12) (Mkvale_state?.vs_regs va_sM))
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 13) (Mkvale_state?.vs_regs va_sM))
;               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 14) (Mkvale_state?.vs_regs va_sM))
;               va_in_plain_quads alg va_in_key_words va_in_ctr_BE_orig (va_in_count + iter - 1)) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) > 0 ==>
;             Vale.AES.GCTR.gctr_partial alg
;               (6 * va_in_count + 6 * iter)
;               va_in_plain_quads
;               (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                               va_sM))
;                       6)
;                   va_in_out_b)
;               va_in_key_words
;               va_in_ctr_BE_orig) /\
;           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_sM) == 0 ==>
;             Vale.AES.GCTR.gctr_partial alg
;               (6 * va_in_count + 6 * (iter - 1))
;               va_in_plain_quads
;               (Vale.X64.Memory.buffer_as_seq (Vale.Lib.Map16.sel (Mkvale_full_heap?.vf_heaplets (Mkvale_state?.vs_heap
;                               va_sM))
;                       6)
;                   va_in_out_b)
;               va_in_key_words
;               va_in_ctr_BE_orig) /\
;           Vale.X64.QuickCodes.precedes_wrap (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3)
;                 (Mkvale_state?.vs_regs va_sM))
;             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 0 3) (Mkvale_state?.vs_regs va_s0)) /\
;           Vale.X64.Decls.va_state_eq va_sM
;             (Vale.X64.Decls.va_upd_xmm 9
;                 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 9) (Mkvale_state?.vs_regs va_sM))
;                 (Vale.X64.Decls.va_upd_xmm 8
;                     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 8) (Mkvale_state?.vs_regs va_sM))
;                     (Vale.X64.Decls.va_upd_xmm 7
;                         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 7)
;                             (Mkvale_state?.vs_regs va_sM))
;                         (Vale.X64.Decls.va_upd_xmm 6
;                             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 6)
;                                 (Mkvale_state?.vs_regs va_sM))
;                             (Vale.X64.Decls.va_upd_xmm 5
;                                 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 5)
;                                     (Mkvale_state?.vs_regs va_sM))
;                                 (Vale.X64.Decls.va_upd_xmm 4
;                                     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 4)
;                                         (Mkvale_state?.vs_regs va_sM))
;                                     (Vale.X64.Decls.va_upd_xmm 3
;                                         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 3)
;                                             (Mkvale_state?.vs_regs va_sM))
;                                         (Vale.X64.Decls.va_upd_xmm 2
;                                             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 2)
;                                                 (Mkvale_state?.vs_regs va_sM))
;                                             (Vale.X64.Decls.va_upd_xmm 15
;                                                 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 15)
;                                                     (Mkvale_state?.vs_regs va_sM))
;                                                 (Vale.X64.Decls.va_upd_xmm 14
;                                                     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 14)
;                                                         (Mkvale_state?.vs_regs va_sM))
;                                                     (Vale.X64.Decls.va_upd_xmm 13
;                                                         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1
;                                                                 13)
;                                                             (Mkvale_state?.vs_regs va_sM))
;                                                         (Vale.X64.Decls.va_upd_xmm 12
;                                                             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                     1 12)
;                                                                 (Mkvale_state?.vs_regs va_sM))
;                                                             (Vale.X64.Decls.va_upd_xmm 11
;                                                                 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                         1 11)
;                                                                     (Mkvale_state?.vs_regs va_sM))
;                                                                 (Vale.X64.Decls.va_upd_xmm 10
;                                                                     (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                             1 10)
;                                                                         (Mkvale_state?.vs_regs va_sM
;                                                                         ))
;                                                                     (Vale.X64.Decls.va_upd_xmm 1
;                                                                         (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                 1 1)
;                                                                             (Mkvale_state?.vs_regs va_sM
;                                                                               ))
;                                                                         (Vale.X64.Decls.va_upd_xmm 0
;                                                                             (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                     1 0)
;                                                                                 (Mkvale_state?.vs_regs
;                                                                                     va_sM))
;                                                                             (Vale.X64.Decls.va_upd_reg64
;                                                                                 4
;                                                                                 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                         0 4)
;                                                                                     (Mkvale_state?.vs_regs
;                                                                                         va_sM))
;                                                                                 (Vale.X64.Decls.va_upd_reg64
;                                                                                     3
;                                                                                     (Vale.X64.Regs.sel
;                                                                                         (Vale.X64.Machine_s.Reg
;                                                                                             0 3)
;                                                                                         (Mkvale_state?.vs_regs
;                                                                                             va_sM))
;                                                                                     (Vale.X64.Decls.va_upd_reg64
;                                                                                         5
;                                                                                         (Vale.X64.Regs.sel
;                                                                                             (Vale.X64.Machine_s.Reg
;                                                                                                 0 5)
;                                                                                             (Mkvale_state?.vs_regs
;                                                                                                 va_sM
;                                                                                               ))
;                                                                                         (Vale.X64.Decls.va_upd_reg64
;                                                                                             1
;                                                                                             (Vale.X64.Regs.sel
;                                                                                                 (Vale.X64.Machine_s.Reg
;                                                                                                     0
;                                                                                                     1
;                                                                                                 )
;                                                                                                 (Mkvale_state?.vs_regs
;                                                                                                     va_sM
;                                                                                                   ))
;                                                                                             (Vale.X64.Decls.va_upd_reg64
;                                                                                                 14
;                                                                                                 (Vale.X64.Regs.sel
;                                                                                                     (
;                                                                                                       Vale.X64.Machine_s.Reg
;                                                                                                         0
;                                                                                                         14
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Mkvale_state?.vs_regs
;                                                                                                         va_sM
; 
;                                                                                                     )
;                                                                                                   )
;                                                                                                 (Vale.X64.Decls.va_upd_reg64
;                                                                                                     13
;                                                                                                     (
;                                                                                                       Vale.X64.Regs.sel
;                                                                                                         (
;                                                                                                           Vale.X64.Machine_s.Reg
;                                                                                                             0
;                                                                                                             13
;                                                                                                         )
;                                                                                                         (
;                                                                                                           Mkvale_state?.vs_regs
;                                                                                                             va_sM
; 
;                                                                                                         )
; 
;                                                                                                     )
;                                                                                                     (
;                                                                                                       Vale.X64.Decls.va_upd_reg64
;                                                                                                         12
;                                                                                                         (
;                                                                                                           Vale.X64.Regs.sel
;                                                                                                             (
;                                                                                                               Vale.X64.Machine_s.Reg
;                                                                                                                 0
;                                                                                                                 12
;                                                                                                             )
;                                                                                                             (
;                                                                                                               Mkvale_state?.vs_regs
;                                                                                                                 va_sM
; 
;                                                                                                             )
; 
;                                                                                                         )
;                                                                                                         (
;                                                                                                           Vale.X64.Decls.va_upd_reg64
;                                                                                                             11
;                                                                                                             (
;                                                                                                               Vale.X64.Regs.sel
;                                                                                                                 (
;                                                                                                                   Vale.X64.Machine_s.Reg
;                                                                                                                     0
;                                                                                                                     11
;                                                                                                                 )
;                                                                                                                 (
;                                                                                                                   Mkvale_state?.vs_regs
;                                                                                                                     va_sM
; 
;                                                                                                                 )
; 
;                                                                                                             )
;                                                                                                             (
;                                                                                                               Vale.X64.Decls.va_upd_ok
;                                                                                                                 (
;                                                                                                                   Mkvale_state?.vs_ok
;                                                                                                                     va_sM
; 
;                                                                                                                 )
;                                                                                                                 (
;                                                                                                                   Vale.X64.Decls.va_upd_mem
;                                                                                                                     (
;                                                                                                                       Mkvale_full_heap?.vf_heap
;                                                                                                                         (
;                                                                                                                           Mkvale_state?.vs_heap
;                                                                                                                             va_sM
; 
;                                                                                                                         )
; 
;                                                                                                                     )
;                                                                                                                     (
;                                                                                                                       Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                         6
;                                                                                                                         (
;                                                                                                                           Vale.Lib.Map16.sel
;                                                                                                                             (
;                                                                                                                               Mkvale_full_heap?.vf_heaplets
;                                                                                                                                 (
;                                                                                                                                   Mkvale_state?.vs_heap
;                                                                                                                                     va_sM
; 
;                                                                                                                                 )
; 
;                                                                                                                             )
;                                                                                                                             6
; 
;                                                                                                                         )
;                                                                                                                         (
;                                                                                                                           Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                             3
;                                                                                                                             (
;                                                                                                                               Vale.Lib.Map16.sel
;                                                                                                                                 (
;                                                                                                                                   Mkvale_full_heap?.vf_heaplets
;                                                                                                                                     (
;                                                                                                                                       Mkvale_state?.vs_heap
;                                                                                                                                         va_sM
; 
;                                                                                                                                     )
; 
;                                                                                                                                 )
;                                                                                                                                 3
; 
;                                                                                                                             )
;                                                                                                                             (
;                                                                                                                               Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                 2
;                                                                                                                                 (
;                                                                                                                                   Vale.Lib.Map16.sel
;                                                                                                                                     (
;                                                                                                                                       Mkvale_full_heap?.vf_heaplets
;                                                                                                                                         (
;                                                                                                                                           Mkvale_state?.vs_heap
;                                                                                                                                             va_sM
; 
;                                                                                                                                         )
; 
;                                                                                                                                     )
;                                                                                                                                     2
; 
;                                                                                                                                 )
;                                                                                                                                 (
;                                                                                                                                   Vale.X64.Decls.va_upd_flags
;                                                                                                                                     (
;                                                                                                                                       Mkvale_state?.vs_flags
;                                                                                                                                         va_sM
; 
;                                                                                                                                     )
;                                                                                                                                     va_s0
; 
;                                                                                                                                 )
; 
;                                                                                                                             )
; 
;                                                                                                                         )
; 
;                                                                                                                     )
; 
;                                                                                                                 )
; 
;                                                                                                             )
; 
;                                                                                                         )
; 
;                                                                                                     )
;                                                                                                   ))
;                                                                                         ))))))))))))
;                                         ))))))))) ==>
;         Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0 (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0
;               alg) va_s0 va_old alg va_in_count va_in_ctr_BE_orig va_in_h_LE va_in_hkeys_b
;           va_in_in0_b va_in_in_b va_in_iv_b va_in_key_words va_in_keys_b va_in_out_b
;           va_in_plain_quads va_in_round_keys va_in_scratch_b va_in_y_orig va_in_ctr va_in_iter
;           va_in_y_cur ==
;         ghost_result ==>
;         (forall (b: Vale.X64.State.vale_state)
;             (b: Vale.X64.Decls.va_fuel)
;             (b: Vale.Def.Types_s.quad32)
;             (b: Prims.nat)
;             (b: Vale.Def.Types_s.quad32).
;             Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0 (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0
;                   alg) va_s0 va_old alg va_in_count va_in_ctr_BE_orig va_in_h_LE va_in_hkeys_b
;               va_in_in0_b va_in_in_b va_in_iv_b va_in_key_words va_in_keys_b va_in_out_b
;               va_in_plain_quads va_in_round_keys va_in_scratch_b va_in_y_orig va_in_ctr va_in_iter
;               va_in_y_cur ==
;             FStar.Pervasives.Native.Mktuple5 b b b b b ==>
;             (forall (pure_result: Prims.unit).
;                 (forall (sK: Vale.X64.State.vale_state) (o: Vale.X64.Machine_s.operand64).
;                     {:pattern (Vale.X64.Decls.update_operand o b sK <: Vale.X64.State.vale_state)}
;                     Vale.X64.Decls.va_is_dst_opr64 o sK ==>
;                     Vale.X64.Decls.update_operand o b sK ==
;                     Vale.X64.Decls.va_upd_operand_dst_opr64 o (Vale.X64.State.eval_operand o b) sK) /\
;                 (forall (sK: Vale.X64.State.vale_state) (o: Vale.X64.Machine_s.operand64).
;                     {:pattern (Vale.X64.Decls.update_operand o b sK <: Vale.X64.State.vale_state)}
;                     OReg? o /\ Prims.op_Negation (7 = OReg?.r o) ==>
;                     Vale.X64.Decls.update_operand o b sK ==
;                     Vale.X64.Decls.va_upd_operand_reg_opr64 o (Vale.X64.State.eval_operand o b) sK) /\
;                 (forall (sK: Vale.X64.State.vale_state) (x: Vale.X64.Machine_s.reg_xmm).
;                     {:pattern
; 
;                       (Vale.X64.State.update_reg_xmm x
;                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 x) (Mkvale_state?.vs_regs b))
;                           sK
;                         <:
;                         Vale.X64.State.vale_state)}
;                     Vale.X64.State.update_reg_xmm x
;                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 x) (Mkvale_state?.vs_regs b))
;                       sK ==
;                     Vale.X64.Decls.va_upd_operand_xmm x
;                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 x) (Mkvale_state?.vs_regs b))
;                       sK) ==>
;                 Vale.X64.Decls.va_state_eq b
;                   (Vale.X64.Decls.va_upd_xmm 9
;                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 9) (Mkvale_state?.vs_regs b))
;                       (Vale.X64.Decls.va_upd_xmm 8
;                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 8) (Mkvale_state?.vs_regs b))
;                           (Vale.X64.Decls.va_upd_xmm 7
;                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 7)
;                                   (Mkvale_state?.vs_regs b))
;                               (Vale.X64.Decls.va_upd_xmm 6
;                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 6)
;                                       (Mkvale_state?.vs_regs b))
;                                   (Vale.X64.Decls.va_upd_xmm 5
;                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 5)
;                                           (Mkvale_state?.vs_regs b))
;                                       (Vale.X64.Decls.va_upd_xmm 4
;                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 4)
;                                               (Mkvale_state?.vs_regs b))
;                                           (Vale.X64.Decls.va_upd_xmm 3
;                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 3)
;                                                   (Mkvale_state?.vs_regs b))
;                                               (Vale.X64.Decls.va_upd_xmm 2
;                                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 2)
;                                                       (Mkvale_state?.vs_regs b))
;                                                   (Vale.X64.Decls.va_upd_xmm 15
;                                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1
;                                                               15)
;                                                           (Mkvale_state?.vs_regs b))
;                                                       (Vale.X64.Decls.va_upd_xmm 14
;                                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                   1 14)
;                                                               (Mkvale_state?.vs_regs b))
;                                                           (Vale.X64.Decls.va_upd_xmm 13
;                                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                       1 13)
;                                                                   (Mkvale_state?.vs_regs b))
;                                                               (Vale.X64.Decls.va_upd_xmm 12
;                                                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                           1 12)
;                                                                       (Mkvale_state?.vs_regs b))
;                                                                   (Vale.X64.Decls.va_upd_xmm 11
;                                                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                               1 11)
;                                                                           (Mkvale_state?.vs_regs b))
;                                                                       (Vale.X64.Decls.va_upd_xmm 10
;                                                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                   1 10)
;                                                                               (Mkvale_state?.vs_regs
;                                                                                   b))
;                                                                           (Vale.X64.Decls.va_upd_xmm
;                                                                               1
;                                                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                       1 1)
;                                                                                   (Mkvale_state?.vs_regs
;                                                                                       b))
;                                                                               (Vale.X64.Decls.va_upd_xmm
;                                                                                   0
;                                                                                   (Vale.X64.Regs.sel
;                                                                                       (Vale.X64.Machine_s.Reg
;                                                                                           1 0)
;                                                                                       (Mkvale_state?.vs_regs
;                                                                                           b))
;                                                                                   (Vale.X64.Decls.va_upd_reg64
;                                                                                       4
;                                                                                       (Vale.X64.Regs.sel
;                                                                                           (Vale.X64.Machine_s.Reg
;                                                                                               0 4)
;                                                                                           (Mkvale_state?.vs_regs
;                                                                                               b))
;                                                                                       (Vale.X64.Decls.va_upd_reg64
;                                                                                           3
;                                                                                           (Vale.X64.Regs.sel
;                                                                                               (Vale.X64.Machine_s.Reg
;                                                                                                   0
;                                                                                                   3)
;                                                                                               (Mkvale_state?.vs_regs
;                                                                                                   b)
;                                                                                           )
;                                                                                           (Vale.X64.Decls.va_upd_reg64
;                                                                                               5
;                                                                                               (Vale.X64.Regs.sel
;                                                                                                   (Vale.X64.Machine_s.Reg
;                                                                                                       0
;                                                                                                       5
;                                                                                                   )
;                                                                                                   (Mkvale_state?.vs_regs
;                                                                                                       b
; 
;                                                                                                   ))
;                                                                                               (Vale.X64.Decls.va_upd_reg64
;                                                                                                   1
;                                                                                                   (Vale.X64.Regs.sel
;                                                                                                       (
;                                                                                                         Vale.X64.Machine_s.Reg
;                                                                                                           0
;                                                                                                           1
;                                                                                                       )
;                                                                                                       (
;                                                                                                         Mkvale_state?.vs_regs
;                                                                                                           b
; 
;                                                                                                       )
; 
;                                                                                                   )
;                                                                                                   (Vale.X64.Decls.va_upd_reg64
;                                                                                                       14
;                                                                                                       (
;                                                                                                         Vale.X64.Regs.sel
;                                                                                                           (
;                                                                                                             Vale.X64.Machine_s.Reg
;                                                                                                               0
;                                                                                                               14
;                                                                                                           )
;                                                                                                           (
;                                                                                                             Mkvale_state?.vs_regs
;                                                                                                               b
; 
;                                                                                                           )
; 
;                                                                                                       )
;                                                                                                       (
;                                                                                                         Vale.X64.Decls.va_upd_reg64
;                                                                                                           13
;                                                                                                           (
;                                                                                                             Vale.X64.Regs.sel
;                                                                                                               (
;                                                                                                                 Vale.X64.Machine_s.Reg
;                                                                                                                   0
;                                                                                                                   13
;                                                                                                               )
;                                                                                                               (
;                                                                                                                 Mkvale_state?.vs_regs
;                                                                                                                   b
; 
;                                                                                                               )
; 
;                                                                                                           )
;                                                                                                           (
;                                                                                                             Vale.X64.Decls.va_upd_reg64
;                                                                                                               12
;                                                                                                               (
;                                                                                                                 Vale.X64.Regs.sel
;                                                                                                                   (
;                                                                                                                     Vale.X64.Machine_s.Reg
;                                                                                                                       0
;                                                                                                                       12
;                                                                                                                   )
;                                                                                                                   (
;                                                                                                                     Mkvale_state?.vs_regs
;                                                                                                                       b
; 
;                                                                                                                   )
; 
;                                                                                                               )
;                                                                                                               (
;                                                                                                                 Vale.X64.Decls.va_upd_reg64
;                                                                                                                   11
;                                                                                                                   (
;                                                                                                                     Vale.X64.Regs.sel
;                                                                                                                       (
;                                                                                                                         Vale.X64.Machine_s.Reg
;                                                                                                                           0
;                                                                                                                           11
;                                                                                                                       )
;                                                                                                                       (
;                                                                                                                         Mkvale_state?.vs_regs
;                                                                                                                           b
; 
;                                                                                                                       )
; 
;                                                                                                                   )
;                                                                                                                   (
;                                                                                                                     Vale.X64.Decls.va_upd_ok
;                                                                                                                       (
;                                                                                                                         Mkvale_state?.vs_ok
;                                                                                                                           b
; 
;                                                                                                                       )
;                                                                                                                       (
;                                                                                                                         Vale.X64.Decls.va_upd_mem
;                                                                                                                           (
;                                                                                                                             Mkvale_full_heap?.vf_heap
;                                                                                                                               (
;                                                                                                                                 Mkvale_state?.vs_heap
;                                                                                                                                   b
; 
;                                                                                                                               )
; 
;                                                                                                                           )
;                                                                                                                           (
;                                                                                                                             Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                               6
;                                                                                                                               (
;                                                                                                                                 Vale.Lib.Map16.sel
;                                                                                                                                   (
;                                                                                                                                     Mkvale_full_heap?.vf_heaplets
;                                                                                                                                       (
;                                                                                                                                         Mkvale_state?.vs_heap
;                                                                                                                                           b
; 
;                                                                                                                                       )
; 
;                                                                                                                                   )
;                                                                                                                                   6
; 
;                                                                                                                               )
;                                                                                                                               (
;                                                                                                                                 Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                   3
;                                                                                                                                   (
;                                                                                                                                     Vale.Lib.Map16.sel
;                                                                                                                                       (
;                                                                                                                                         Mkvale_full_heap?.vf_heaplets
;                                                                                                                                           (
;                                                                                                                                             Mkvale_state?.vs_heap
;                                                                                                                                               b
; 
;                                                                                                                                           )
; 
;                                                                                                                                       )
;                                                                                                                                       3
; 
;                                                                                                                                   )
;                                                                                                                                   (
;                                                                                                                                     Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                       2
;                                                                                                                                       (
;                                                                                                                                         Vale.Lib.Map16.sel
;                                                                                                                                           (
;                                                                                                                                             Mkvale_full_heap?.vf_heaplets
;                                                                                                                                               (
;                                                                                                                                                 Mkvale_state?.vs_heap
;                                                                                                                                                   b
; 
;                                                                                                                                               )
; 
;                                                                                                                                           )
;                                                                                                                                           2
; 
;                                                                                                                                       )
;                                                                                                                                       (
;                                                                                                                                         Vale.X64.Decls.va_upd_flags
;                                                                                                                                           (
;                                                                                                                                             Mkvale_state?.vs_flags
;                                                                                                                                               b
; 
;                                                                                                                                           )
;                                                                                                                                           va_s0
; 
;                                                                                                                                       )
; 
;                                                                                                                                   )
; 
;                                                                                                                               )
; 
;                                                                                                                           )
; 
;                                                                                                                       )
; 
;                                                                                                                   )
; 
;                                                                                                               )
; 
;                                                                                                           )
; 
;                                                                                                       )
; 
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   ))))))))) /\
;                 (forall (pure_result: Prims.unit).
;                     Vale.X64.Decls.va_state_eq b
;                       (Vale.X64.Decls.va_upd_xmm 9
;                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 9) (Mkvale_state?.vs_regs b))
;                           (Vale.X64.Decls.va_upd_xmm 8
;                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 8)
;                                   (Mkvale_state?.vs_regs b))
;                               (Vale.X64.Decls.va_upd_xmm 7
;                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 7)
;                                       (Mkvale_state?.vs_regs b))
;                                   (Vale.X64.Decls.va_upd_xmm 6
;                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 6)
;                                           (Mkvale_state?.vs_regs b))
;                                       (Vale.X64.Decls.va_upd_xmm 5
;                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 5)
;                                               (Mkvale_state?.vs_regs b))
;                                           (Vale.X64.Decls.va_upd_xmm 4
;                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 4)
;                                                   (Mkvale_state?.vs_regs b))
;                                               (Vale.X64.Decls.va_upd_xmm 3
;                                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 3)
;                                                       (Mkvale_state?.vs_regs b))
;                                                   (Vale.X64.Decls.va_upd_xmm 2
;                                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 2
;                                                           )
;                                                           (Mkvale_state?.vs_regs b))
;                                                       (Vale.X64.Decls.va_upd_xmm 15
;                                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                   1 15)
;                                                               (Mkvale_state?.vs_regs b))
;                                                           (Vale.X64.Decls.va_upd_xmm 14
;                                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                       1 14)
;                                                                   (Mkvale_state?.vs_regs b))
;                                                               (Vale.X64.Decls.va_upd_xmm 13
;                                                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                           1 13)
;                                                                       (Mkvale_state?.vs_regs b))
;                                                                   (Vale.X64.Decls.va_upd_xmm 12
;                                                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                               1 12)
;                                                                           (Mkvale_state?.vs_regs b))
;                                                                       (Vale.X64.Decls.va_upd_xmm 11
;                                                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                   1 11)
;                                                                               (Mkvale_state?.vs_regs
;                                                                                   b))
;                                                                           (Vale.X64.Decls.va_upd_xmm
;                                                                               10
;                                                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                       1 10)
;                                                                                   (Mkvale_state?.vs_regs
;                                                                                       b))
;                                                                               (Vale.X64.Decls.va_upd_xmm
;                                                                                   1
;                                                                                   (Vale.X64.Regs.sel
;                                                                                       (Vale.X64.Machine_s.Reg
;                                                                                           1 1)
;                                                                                       (Mkvale_state?.vs_regs
;                                                                                           b))
;                                                                                   (Vale.X64.Decls.va_upd_xmm
;                                                                                       0
;                                                                                       (Vale.X64.Regs.sel
;                                                                                           (Vale.X64.Machine_s.Reg
;                                                                                               1 0)
;                                                                                           (Mkvale_state?.vs_regs
;                                                                                               b))
;                                                                                       (Vale.X64.Decls.va_upd_reg64
;                                                                                           4
;                                                                                           (Vale.X64.Regs.sel
;                                                                                               (Vale.X64.Machine_s.Reg
;                                                                                                   0
;                                                                                                   4)
;                                                                                               (Mkvale_state?.vs_regs
;                                                                                                   b)
;                                                                                           )
;                                                                                           (Vale.X64.Decls.va_upd_reg64
;                                                                                               3
;                                                                                               (Vale.X64.Regs.sel
;                                                                                                   (Vale.X64.Machine_s.Reg
;                                                                                                       0
;                                                                                                       3
;                                                                                                   )
;                                                                                                   (Mkvale_state?.vs_regs
;                                                                                                       b
; 
;                                                                                                   ))
;                                                                                               (Vale.X64.Decls.va_upd_reg64
;                                                                                                   5
;                                                                                                   (Vale.X64.Regs.sel
;                                                                                                       (
;                                                                                                         Vale.X64.Machine_s.Reg
;                                                                                                           0
;                                                                                                           5
;                                                                                                       )
;                                                                                                       (
;                                                                                                         Mkvale_state?.vs_regs
;                                                                                                           b
; 
;                                                                                                       )
; 
;                                                                                                   )
;                                                                                                   (Vale.X64.Decls.va_upd_reg64
;                                                                                                       1
;                                                                                                       (
;                                                                                                         Vale.X64.Regs.sel
;                                                                                                           (
;                                                                                                             Vale.X64.Machine_s.Reg
;                                                                                                               0
;                                                                                                               1
;                                                                                                           )
;                                                                                                           (
;                                                                                                             Mkvale_state?.vs_regs
;                                                                                                               b
; 
;                                                                                                           )
; 
;                                                                                                       )
;                                                                                                       (
;                                                                                                         Vale.X64.Decls.va_upd_reg64
;                                                                                                           14
;                                                                                                           (
;                                                                                                             Vale.X64.Regs.sel
;                                                                                                               (
;                                                                                                                 Vale.X64.Machine_s.Reg
;                                                                                                                   0
;                                                                                                                   14
;                                                                                                               )
;                                                                                                               (
;                                                                                                                 Mkvale_state?.vs_regs
;                                                                                                                   b
; 
;                                                                                                               )
; 
;                                                                                                           )
;                                                                                                           (
;                                                                                                             Vale.X64.Decls.va_upd_reg64
;                                                                                                               13
;                                                                                                               (
;                                                                                                                 Vale.X64.Regs.sel
;                                                                                                                   (
;                                                                                                                     Vale.X64.Machine_s.Reg
;                                                                                                                       0
;                                                                                                                       13
;                                                                                                                   )
;                                                                                                                   (
;                                                                                                                     Mkvale_state?.vs_regs
;                                                                                                                       b
; 
;                                                                                                                   )
; 
;                                                                                                               )
;                                                                                                               (
;                                                                                                                 Vale.X64.Decls.va_upd_reg64
;                                                                                                                   12
;                                                                                                                   (
;                                                                                                                     Vale.X64.Regs.sel
;                                                                                                                       (
;                                                                                                                         Vale.X64.Machine_s.Reg
;                                                                                                                           0
;                                                                                                                           12
;                                                                                                                       )
;                                                                                                                       (
;                                                                                                                         Mkvale_state?.vs_regs
;                                                                                                                           b
; 
;                                                                                                                       )
; 
;                                                                                                                   )
;                                                                                                                   (
;                                                                                                                     Vale.X64.Decls.va_upd_reg64
;                                                                                                                       11
;                                                                                                                       (
;                                                                                                                         Vale.X64.Regs.sel
;                                                                                                                           (
;                                                                                                                             Vale.X64.Machine_s.Reg
;                                                                                                                               0
;                                                                                                                               11
;                                                                                                                           )
;                                                                                                                           (
;                                                                                                                             Mkvale_state?.vs_regs
;                                                                                                                               b
; 
;                                                                                                                           )
; 
;                                                                                                                       )
;                                                                                                                       (
;                                                                                                                         Vale.X64.Decls.va_upd_ok
;                                                                                                                           (
;                                                                                                                             Mkvale_state?.vs_ok
;                                                                                                                               b
; 
;                                                                                                                           )
;                                                                                                                           (
;                                                                                                                             Vale.X64.Decls.va_upd_mem
;                                                                                                                               (
;                                                                                                                                 Mkvale_full_heap?.vf_heap
;                                                                                                                                   (
;                                                                                                                                     Mkvale_state?.vs_heap
;                                                                                                                                       b
; 
;                                                                                                                                   )
; 
;                                                                                                                               )
;                                                                                                                               (
;                                                                                                                                 Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                   6
;                                                                                                                                   (
;                                                                                                                                     Vale.Lib.Map16.sel
;                                                                                                                                       (
;                                                                                                                                         Mkvale_full_heap?.vf_heaplets
;                                                                                                                                           (
;                                                                                                                                             Mkvale_state?.vs_heap
;                                                                                                                                               b
; 
;                                                                                                                                           )
; 
;                                                                                                                                       )
;                                                                                                                                       6
; 
;                                                                                                                                   )
;                                                                                                                                   (
;                                                                                                                                     Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                       3
;                                                                                                                                       (
;                                                                                                                                         Vale.Lib.Map16.sel
;                                                                                                                                           (
;                                                                                                                                             Mkvale_full_heap?.vf_heaplets
;                                                                                                                                               (
;                                                                                                                                                 Mkvale_state?.vs_heap
;                                                                                                                                                   b
; 
;                                                                                                                                               )
; 
;                                                                                                                                           )
;                                                                                                                                           3
; 
;                                                                                                                                       )
;                                                                                                                                       (
;                                                                                                                                         Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                           2
;                                                                                                                                           (
;                                                                                                                                             Vale.Lib.Map16.sel
;                                                                                                                                               (
;                                                                                                                                                 Mkvale_full_heap?.vf_heaplets
;                                                                                                                                                   (
;                                                                                                                                                     Mkvale_state?.vs_heap
;                                                                                                                                                       b
; 
;                                                                                                                                                   )
; 
;                                                                                                                                               )
;                                                                                                                                               2
; 
;                                                                                                                                           )
;                                                                                                                                           (
;                                                                                                                                             Vale.X64.Decls.va_upd_flags
;                                                                                                                                               (
;                                                                                                                                                 Mkvale_state?.vs_flags
;                                                                                                                                                   b
; 
;                                                                                                                                               )
;                                                                                                                                               va_s0
; 
;                                                                                                                                           )
; 
;                                                                                                                                       )
; 
;                                                                                                                                   )
; 
;                                                                                                                               )
; 
;                                                                                                                           )
; 
;                                                                                                                       )
; 
;                                                                                                                   )
; 
;                                                                                                               )
; 
;                                                                                                           )
; 
;                                                                                                       )
; 
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   )))))))) ==>
;                     (forall (pure_result: Prims.unit).
;                         Vale.X64.QuickCode.update_state_mods [
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 9);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 8);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 7);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 6);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 5);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 4);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 3);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 2);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 15);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 14);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 13);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 12);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 11);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 10);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 1);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 1 0);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 4);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 3);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 5);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 1);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 14);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 13);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 12);
;                             Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg 0 11);
;                             Vale.X64.QuickCode.Mod_ok; Vale.X64.QuickCode.Mod_mem;
;                             Vale.X64.QuickCode.Mod_mem_heaplet 6;
;                             Vale.X64.QuickCode.Mod_mem_heaplet 3;
;                             Vale.X64.QuickCode.Mod_mem_heaplet 2; Vale.X64.QuickCode.Mod_flags
;                           ]
;                           b
;                           va_s0 ==
;                         Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg 1 9)
;                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 9) (Mkvale_state?.vs_regs b))
;                           (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg 1 8)
;                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 8)
;                                   (Mkvale_state?.vs_regs b))
;                               (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg 1 7)
;                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 7)
;                                       (Mkvale_state?.vs_regs b))
;                                   (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg 1 6)
;                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 6)
;                                           (Mkvale_state?.vs_regs b))
;                                       (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg 1 5)
;                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 5)
;                                               (Mkvale_state?.vs_regs b))
;                                           (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg 1 4)
;                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 4)
;                                                   (Mkvale_state?.vs_regs b))
;                                               (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg 1
;                                                       3)
;                                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 3)
;                                                       (Mkvale_state?.vs_regs b))
;                                                   (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg
;                                                           1 2)
;                                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg 1 2
;                                                           )
;                                                           (Mkvale_state?.vs_regs b))
;                                                       (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg
;                                                               1 15)
;                                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                   1 15)
;                                                               (Mkvale_state?.vs_regs b))
;                                                           (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg
;                                                                   1 14)
;                                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                       1 14)
;                                                                   (Mkvale_state?.vs_regs b))
;                                                               (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg
;                                                                       1 13)
;                                                                   (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                           1 13)
;                                                                       (Mkvale_state?.vs_regs b))
;                                                                   (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg
;                                                                           1 12)
;                                                                       (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                               1 12)
;                                                                           (Mkvale_state?.vs_regs b))
;                                                                       (Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg
;                                                                               1 11)
;                                                                           (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                   1 11)
;                                                                               (Mkvale_state?.vs_regs
;                                                                                   b))
;                                                                           (Vale.X64.Decls.upd_register
;                                                                               (Vale.X64.Machine_s.Reg
;                                                                                   1 10)
;                                                                               (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg
;                                                                                       1 10)
;                                                                                   (Mkvale_state?.vs_regs
;                                                                                       b))
;                                                                               (Vale.X64.Decls.upd_register
;                                                                                   (Vale.X64.Machine_s.Reg
;                                                                                       1 1)
;                                                                                   (Vale.X64.Regs.sel
;                                                                                       (Vale.X64.Machine_s.Reg
;                                                                                           1 1)
;                                                                                       (Mkvale_state?.vs_regs
;                                                                                           b))
;                                                                                   (Vale.X64.Decls.upd_register
;                                                                                       (Vale.X64.Machine_s.Reg
;                                                                                           1 0)
;                                                                                       (Vale.X64.Regs.sel
;                                                                                           (Vale.X64.Machine_s.Reg
;                                                                                               1 0)
;                                                                                           (Mkvale_state?.vs_regs
;                                                                                               b))
;                                                                                       (Vale.X64.Decls.upd_register
;                                                                                           (Vale.X64.Machine_s.Reg
;                                                                                               0 4)
;                                                                                           (Vale.X64.Regs.sel
;                                                                                               (Vale.X64.Machine_s.Reg
;                                                                                                   0
;                                                                                                   4)
;                                                                                               (Mkvale_state?.vs_regs
;                                                                                                   b)
;                                                                                           )
;                                                                                           (Vale.X64.Decls.upd_register
;                                                                                               (Vale.X64.Machine_s.Reg
;                                                                                                   0
;                                                                                                   3)
;                                                                                               (Vale.X64.Regs.sel
;                                                                                                   (Vale.X64.Machine_s.Reg
;                                                                                                       0
;                                                                                                       3
;                                                                                                   )
;                                                                                                   (Mkvale_state?.vs_regs
;                                                                                                       b
; 
;                                                                                                   ))
;                                                                                               (Vale.X64.Decls.upd_register
;                                                                                                   (Vale.X64.Machine_s.Reg
;                                                                                                       0
;                                                                                                       5
;                                                                                                   )
;                                                                                                   (Vale.X64.Regs.sel
;                                                                                                       (
;                                                                                                         Vale.X64.Machine_s.Reg
;                                                                                                           0
;                                                                                                           5
;                                                                                                       )
;                                                                                                       (
;                                                                                                         Mkvale_state?.vs_regs
;                                                                                                           b
; 
;                                                                                                       )
; 
;                                                                                                   )
;                                                                                                   (Vale.X64.Decls.upd_register
;                                                                                                       (
;                                                                                                         Vale.X64.Machine_s.Reg
;                                                                                                           0
;                                                                                                           1
;                                                                                                       )
;                                                                                                       (
;                                                                                                         Vale.X64.Regs.sel
;                                                                                                           (
;                                                                                                             Vale.X64.Machine_s.Reg
;                                                                                                               0
;                                                                                                               1
;                                                                                                           )
;                                                                                                           (
;                                                                                                             Mkvale_state?.vs_regs
;                                                                                                               b
; 
;                                                                                                           )
; 
;                                                                                                       )
;                                                                                                       (
;                                                                                                         Vale.X64.Decls.upd_register
;                                                                                                           (
;                                                                                                             Vale.X64.Machine_s.Reg
;                                                                                                               0
;                                                                                                               14
;                                                                                                           )
;                                                                                                           (
;                                                                                                             Vale.X64.Regs.sel
;                                                                                                               (
;                                                                                                                 Vale.X64.Machine_s.Reg
;                                                                                                                   0
;                                                                                                                   14
;                                                                                                               )
;                                                                                                               (
;                                                                                                                 Mkvale_state?.vs_regs
;                                                                                                                   b
; 
;                                                                                                               )
; 
;                                                                                                           )
;                                                                                                           (
;                                                                                                             Vale.X64.Decls.upd_register
;                                                                                                               (
;                                                                                                                 Vale.X64.Machine_s.Reg
;                                                                                                                   0
;                                                                                                                   13
;                                                                                                               )
;                                                                                                               (
;                                                                                                                 Vale.X64.Regs.sel
;                                                                                                                   (
;                                                                                                                     Vale.X64.Machine_s.Reg
;                                                                                                                       0
;                                                                                                                       13
;                                                                                                                   )
;                                                                                                                   (
;                                                                                                                     Mkvale_state?.vs_regs
;                                                                                                                       b
; 
;                                                                                                                   )
; 
;                                                                                                               )
;                                                                                                               (
;                                                                                                                 Vale.X64.Decls.upd_register
;                                                                                                                   (
;                                                                                                                     Vale.X64.Machine_s.Reg
;                                                                                                                       0
;                                                                                                                       12
;                                                                                                                   )
;                                                                                                                   (
;                                                                                                                     Vale.X64.Regs.sel
;                                                                                                                       (
;                                                                                                                         Vale.X64.Machine_s.Reg
;                                                                                                                           0
;                                                                                                                           12
;                                                                                                                       )
;                                                                                                                       (
;                                                                                                                         Mkvale_state?.vs_regs
;                                                                                                                           b
; 
;                                                                                                                       )
; 
;                                                                                                                   )
;                                                                                                                   (
;                                                                                                                     Vale.X64.Decls.upd_register
;                                                                                                                       (
;                                                                                                                         Vale.X64.Machine_s.Reg
;                                                                                                                           0
;                                                                                                                           11
;                                                                                                                       )
;                                                                                                                       (
;                                                                                                                         Vale.X64.Regs.sel
;                                                                                                                           (
;                                                                                                                             Vale.X64.Machine_s.Reg
;                                                                                                                               0
;                                                                                                                               11
;                                                                                                                           )
;                                                                                                                           (
;                                                                                                                             Mkvale_state?.vs_regs
;                                                                                                                               b
; 
;                                                                                                                           )
; 
;                                                                                                                       )
;                                                                                                                       (
;                                                                                                                         Vale.X64.Decls.va_upd_ok
;                                                                                                                           (
;                                                                                                                             Mkvale_state?.vs_ok
;                                                                                                                               b
; 
;                                                                                                                           )
;                                                                                                                           (
;                                                                                                                             Vale.X64.Decls.va_upd_mem
;                                                                                                                               (
;                                                                                                                                 Mkvale_full_heap?.vf_heap
;                                                                                                                                   (
;                                                                                                                                     Mkvale_state?.vs_heap
;                                                                                                                                       b
; 
;                                                                                                                                   )
; 
;                                                                                                                               )
;                                                                                                                               (
;                                                                                                                                 Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                   6
;                                                                                                                                   (
;                                                                                                                                     Vale.Lib.Map16.sel
;                                                                                                                                       (
;                                                                                                                                         Mkvale_full_heap?.vf_heaplets
;                                                                                                                                           (
;                                                                                                                                             Mkvale_state?.vs_heap
;                                                                                                                                               b
; 
;                                                                                                                                           )
; 
;                                                                                                                                       )
;                                                                                                                                       6
; 
;                                                                                                                                   )
;                                                                                                                                   (
;                                                                                                                                     Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                       3
;                                                                                                                                       (
;                                                                                                                                         Vale.Lib.Map16.sel
;                                                                                                                                           (
;                                                                                                                                             Mkvale_full_heap?.vf_heaplets
;                                                                                                                                               (
;                                                                                                                                                 Mkvale_state?.vs_heap
;                                                                                                                                                   b
; 
;                                                                                                                                               )
; 
;                                                                                                                                           )
;                                                                                                                                           3
; 
;                                                                                                                                       )
;                                                                                                                                       (
;                                                                                                                                         Vale.X64.Decls.va_upd_mem_heaplet
;                                                                                                                                           2
;                                                                                                                                           (
;                                                                                                                                             Vale.Lib.Map16.sel
;                                                                                                                                               (
;                                                                                                                                                 Mkvale_full_heap?.vf_heaplets
;                                                                                                                                                   (
;                                                                                                                                                     Mkvale_state?.vs_heap
;                                                                                                                                                       b
; 
;                                                                                                                                                   )
; 
;                                                                                                                                               )
;                                                                                                                                               2
; 
;                                                                                                                                           )
;                                                                                                                                           (
;                                                                                                                                             Vale.X64.Decls.va_upd_flags
;                                                                                                                                               (
;                                                                                                                                                 Mkvale_state?.vs_flags
;                                                                                                                                                   b
; 
;                                                                                                                                               )
;                                                                                                                                               va_s0
; 
;                                                                                                                                           )
; 
;                                                                                                                                       )
; 
;                                                                                                                                   )
; 
;                                                                                                                               )
; 
;                                                                                                                           )
; 
;                                                                                                                       )
; 
;                                                                                                                   )
; 
;                                                                                                               )
; 
;                                                                                                           )
; 
;                                                                                                       )
; 
;                                                                                                   ))
;                                                                                           ))))))))))
;                                                   ))))))) ==>
;                         (forall (any_result:
;                             ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) *
;                               ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32))).
;                             any_result ==
;                             (let
;                               FStar.Pervasives.Native.Mktuple5
;                                 #_
;                                 #_
;                                 #_
;                                 #_
;                                 #_
;                                 va_sM
;                                 va_f0
;                                 ctr
;                                 iter
;                                 y_cur =
;                                 Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0 (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0
;                                       alg) va_s0 va_old alg va_in_count va_in_ctr_BE_orig va_in_h_LE
;                                   va_in_hkeys_b va_in_in0_b va_in_in_b va_in_iv_b va_in_key_words
;                                   va_in_keys_b va_in_out_b va_in_plain_quads va_in_round_keys
;                                   va_in_scratch_b va_in_y_orig va_in_ctr va_in_iter va_in_y_cur
;                               in
;                               va_sM, va_f0, FStar.Pervasives.Native.Mktuple3 ctr iter y_cur) ==>
;                             (forall (return_val:
;                                 ((Vale.X64.State.vale_state * Vale.X64.Decls.va_fuel) *
;                                   ((Vale.Def.Types_s.quad32 * Prims.nat) * Vale.Def.Types_s.quad32)))
;                               .
;                                 return_val == any_result ==> p return_val)))))))

(push)

; <fuel='1' ifuel='0'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
ZFuel)
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term) (@x14 Term) (@x15 Term) (@x16 Term) (@x17 Term) (@x18 Term) (@x19 Term) (@x20 Term))
 (! (implies (and (HasType @x0
Vale.X64.State.vale_state)
(HasType @x1
Vale.AES.AES_common_s.algorithm)
(HasType @x2
Prims.nat)
(HasType @x3
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x4
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x5
Vale.X64.Memory.buffer128)
(HasType @x6
Vale.X64.Memory.buffer128)
(HasType @x7
Vale.X64.Memory.buffer128)
(HasType @x8
Vale.X64.Memory.buffer128)
(HasType @x9
(FStar.Seq.Base.seq Vale.Def.Words_s.nat32))
(HasType @x10
Vale.X64.Memory.buffer128)
(HasType @x11
Vale.X64.Memory.buffer128)
(HasType @x12
(FStar.Seq.Base.seq (Vale.Def.Types_s.quad32 Dummy_value)))
(HasType @x13
(FStar.Seq.Base.seq (Vale.Def.Types_s.quad32 Dummy_value)))
(HasType @x14
Vale.X64.Memory.buffer128)
(HasType @x15
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x16
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x17
Prims.nat)
(HasType @x18
(Vale.Def.Types_s.quad32 Dummy_value))
(HasType @x19
Vale.X64.State.vale_state)
(HasType @x20
Tm_arrow_d48658dc6262cf7fac84d02aef010b51))

;; def=prims.fst(385,51-385,91); use=prims.fst(409,19-409,32)
(forall ((@x21 Term))
 (! (implies (and (HasType @x21
(Prims.pure_post (FStar.Pervasives.Native.tuple3 Vale.X64.State.vale_state
Vale.X64.Decls.va_fuel
(FStar.Pervasives.Native.tuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value)))))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3758,13-3758,31); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3758,13-3758,31); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(Vale.X64.QuickCode.t_require @x19)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3758,35-3761,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3758,35-3761,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(Vale.AES.X64.AESGCM.va_wp_Loop6x_loop_body0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17
@x18
@x19
@x20)
)


;; def=prims.fst(464,36-464,100); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(forall ((@x22 Term))
 (! (implies (and (or label_1
(HasType @x22
(FStar.Pervasives.Native.tuple3 Vale.X64.State.vale_state
Vale.X64.Decls.va_fuel
(FStar.Pervasives.Native.tuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value)))))
(let ((@lb23 @x22))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3762,40-3768,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(or label_2

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3762,40-3768,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3762,40-3768,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(Vale.X64.QuickCode.va_t_ensure (FStar.Pervasives.Native.tuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value))
(Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 @x1)
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 6)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 5)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 3)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 0)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 13)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 12)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 11)))
(Prims.Cons Vale.X64.QuickCode.mod_t
Vale.X64.QuickCode.Mod_ok@tok
(Prims.Cons Vale.X64.QuickCode.mod_t
Vale.X64.QuickCode.Mod_mem@tok
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_mem_heaplet (BoxInt 6))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_mem_heaplet (BoxInt 3))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_mem_heaplet (BoxInt 2))
(Prims.Cons Vale.X64.QuickCode.mod_t
Vale.X64.QuickCode.Mod_flags@tok
(Prims.Nil Vale.X64.QuickCode.mod_t)))))))))))))))))))))))))))))))
@x19
@x20
(FStar.Pervasives.Native.Mktuple3 Vale.X64.State.vale_state
Vale.X64.Decls.va_fuel
(FStar.Pervasives.Native.tuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value))
(FStar.Pervasives.Native.Mktuple3__1 @lb23)
(FStar.Pervasives.Native.Mktuple3__2 @lb23)
(FStar.Pervasives.Native.Mktuple3__3 @lb23)))
)
)
))

;; def=prims.fst(464,85-464,99); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(Valid 
;; def=prims.fst(464,85-464,99); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(ApplyTT @x21
@x22)
)
)
 

:pattern (
;; def=prims.fst(464,85-464,99); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(Valid 
;; def=prims.fst(464,85-464,99); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(ApplyTT @x21
@x22)
)
)
:qid @query.2))
)

;; def=prims.fst(464,29-464,100); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3161,13-3161,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_3

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3161,13-3161,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3161,13-3161,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.va_require_total (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 @x1)
(Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 @x1)
@x19)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3161,77-3161,92); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_4

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3161,77-3161,92); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(BoxBool_proj_0 (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x19))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3162,5-3162,16); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_5

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3162,5-3162,16); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.sse_enabled Dummy_value))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3162,20-3162,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_6

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3162,20-3162,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.movbe_enabled Dummy_value))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3162,38-3163,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_7

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3162,38-3163,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 6
(BoxInt_proj_0 @x17)))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3163,32-3164,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_8

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3163,32-3164,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x17)))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3164,32-3165,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_9

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3164,32-3165,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x17)))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3165,32-3166,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_10

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3165,32-3166,28); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 @x17)))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3166,32-3167,42); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_11

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3166,32-3167,42); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 16777216)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3167,46-3168,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_12

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3167,46-3168,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3167,46-3168,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 2))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x8
(BoxInt 1)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Public@tok)
)
)

(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3168,86-3169,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3169,23-3172,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_13

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3169,23-3172,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3169,23-3172,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x6
(BoxInt (+ (_mul (- (BoxInt_proj_0 @x2)
1)
6)
(_mul (BoxInt_proj_0 @x17)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x17)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3172,23-3172,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3172,55-3175,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_14

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3172,55-3175,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3172,55-3175,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x7
(BoxInt (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x17)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x17)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3175,42-3175,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3176,4-3178,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_15

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3176,4-3178,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3176,4-3178,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validDstAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x11
(BoxInt (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x17)
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 @x17)
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3179,4-3180,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_16

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3179,4-3180,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3179,4-3180,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 6))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x14
(BoxInt 9)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3180,58-3182,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_17

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3180,58-3182,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3180,58-3182,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validSrcAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 0))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
32))
@x5
(BoxInt 8)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3182,21-3183,16); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_18

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x7)
(Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x11))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,70-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,70-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x11)
(Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x7))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3182,83-3183,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x7
@x11)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3183,20-3183,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_19

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3183,20-3183,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x6
@x11)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3183,50-3184,71); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_20

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3183,50-3184,71); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(>= (BoxInt_proj_0 (FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
@x7)))
6)
)

(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3184,76-3185,7); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3185,12-3188,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_21

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3185,12-3188,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3185,12-3188,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GCTR.partial_seq_agreement @x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x7)
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(BoxInt_proj_0 @x17))))
(FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
@x7)))
)
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3188,52-3188,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3188,84-3189,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_22

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3188,84-3189,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))))
18446744073709551616)
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3189,73-3190,5); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3190,10-3190,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_23

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3190,10-3190,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))))
18446744073709551616)
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3191,5-3191,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3191,37-3192,19); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_24

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3191,37-3192,19); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))))
18446744073709551616)
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3192,24-3193,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_25

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3192,24-3193,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3192,24-3193,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.modifies_buffer_specific128 @x14
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 3))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))
(BoxInt 1)
(BoxInt 8))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3194,4-3196,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_26

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3194,4-3196,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3194,4-3196,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.modifies_buffer_specific128 @x11
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(BoxInt (_mul (BoxInt_proj_0 @x2)
6))
(BoxInt (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x17)
6))
5)))
)
)

(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3196,40-3196,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3196,73-3199,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3196,73-3197,8); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_27

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3196,73-3197,8); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(>= (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
6)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3197,12-3199,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_28

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3197,12-3199,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3197,12-3199,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.buffer_modifies_specific128 @x11
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
(BoxInt (_mul (BoxInt_proj_0 @x2)
6))
(BoxInt (- (+ (_mul (BoxInt_proj_0 @x2)
6)
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
1)))
)
)
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3199,38-3200,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_29

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3199,38-3200,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3199,38-3200,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.modifies_buffer_specific128 @x8
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 2))
(BoxInt 0)
(BoxInt 0))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3200,70-3202,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_30

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3200,70-3202,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3200,70-3202,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.X64.AESopt.aes_reqs_offset @x1
@x9
@x13
@x10
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 0))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19)))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3202,40-3203,22); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_31

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3202,40-3203,22); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
@x13
(BoxInt 0)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3203,26-3203,43); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_32

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3203,26-3203,43); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.pclmulqdq_enabled Dummy_value))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3203,47-3204,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_33

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3203,47-3204,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x4
(Vale.AES.AES_s.aes_encrypt_LE @x1
@x9
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 0))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3205,4-3206,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_34

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3205,4-3206,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3205,4-3206,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GHash.hkeys_reqs_priv (Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 0))
@x5)
(Vale.Def.Types_s.reverse_bytes_quad32 @x4))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3206,58-3206,91); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_35

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3206,58-3206,91); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(>= (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
2)
0)
)

(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3207,5-3207,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3207,37-3209,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_36

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3207,37-3209,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3207,37-3209,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.X64.AESopt.scratch_reqs @x14
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x6)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
)
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3209,30-3209,58); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3209,63-3212,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_37

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3209,63-3212,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3209,63-3212,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.X64.AESopt.scratch_reqs @x14
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x6)
(Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x14
(BoxInt 2)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))))
)
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3212,38-3214,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_38

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3212,38-3214,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x18
(Vale.AES.GHash.ghash_incremental0 @x4
@x15
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x6)
(BoxInt 0)
(BoxInt (_mul (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
2)
6)))))
)

(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3215,8-3215,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3215,40-3219,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_39

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3215,40-3219,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x18
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.Math.Poly2.Bits_s.to_quad32 (Vale.Math.Poly2_s.add (Vale.Math.Poly2_s.add (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
(Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))))
(Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x14
(BoxInt 1)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 3))))))))
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3219,42-3219,70); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3219,75-3220,53); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_40

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3219,75-3220,53); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 @x18))
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3220,58-3220,74); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_41

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3220,58-3220,74); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(<= 2
(BoxInt_proj_0 @x2))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3220,78-3221,29); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_42

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3220,78-3221,29); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (_mod (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
0)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3221,33-3221,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_43

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3221,33-3221,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
4294967296)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3221,71-3222,10); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_44

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3221,71-3222,10); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(<= 6
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3222,14-3222,82); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_45

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3222,14-3222,82); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
6)
4294967296)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3222,87-3223,62); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_46

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3222,87-3223,62); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 @x17)
6))
6)
4294967296)
)

(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3223,67-3223,94); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3224,4-3224,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_47

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3224,4-3224,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(>= (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3224,37-3225,59); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_48

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3224,37-3225,59); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x16
(Vale.AES.GCTR.inc32lite @x3
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul (BoxInt_proj_0 @x17)
6)))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3225,63-3226,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_49

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3225,63-3226,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 16777216)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3226,70-3227,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_50

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3226,70-3227,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 0))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3227,83-3228,48); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_51

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3227,83-3228,48); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt (_mod (BoxInt_proj_0 (Vale.Def.Words_s.__proj__Mkfour__item__lo0 Vale.Def.Words_s.nat32
@x16))
256)))
)

(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3228,53-3228,80); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3228,85-3230,64); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_52

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3228,85-3230,64); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.quad32_xor (Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 0)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))))
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3230,69-3232,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3230,70-3230,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3231,9-3231,42); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3231,47-3232,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_53

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3231,47-3232,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 1))))
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3232,85-3234,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3232,86-3233,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3233,24-3233,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3233,62-3234,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_54

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3233,62-3234,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 2))))
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3234,85-3236,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3234,86-3235,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3235,24-3235,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3235,62-3236,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_55

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3235,62-3236,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 3))))
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3236,85-3238,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3236,86-3237,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3237,24-3237,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3237,62-3238,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_56

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3237,62-3238,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 4))))
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3238,85-3240,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3238,86-3239,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3239,24-3239,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3239,62-3240,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_57

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3239,62-3240,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite @x16
(BoxInt 5))))
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3240,86-3241,19); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3241,24-3243,90); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_58

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3241,24-3243,90); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3241,24-3243,90); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GCTR.gctr_registers (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
@x12
@x1
@x9
@x3
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x17))
1)))
)
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3244,5-3244,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3244,37-3246,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_59

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3244,37-3246,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3244,37-3246,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GCTR.gctr_partial @x1
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(BoxInt_proj_0 @x17))))
@x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x11)
@x9
@x3)
)
)
)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3246,56-3246,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3247,4-3249,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_60

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3247,4-3249,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3247,4-3249,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GCTR.gctr_partial @x1
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(- (BoxInt_proj_0 @x17)
1))))
@x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x19))
(BoxInt 6))
@x11)
@x9
@x3)
)
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3249,42-3249,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or label_61

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3249,42-3249,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
0)
)


;; def=prims.fst(464,36-464,100); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(forall ((@x22 Term))
 (! (implies (and (HasType @x22
(FStar.Pervasives.Native.tuple5 Vale.X64.State.vale_state
Vale.X64.Decls.va_fuel
(Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value)))
(let ((@lb23 @x22))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3250,52-3346,39); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3250,52-3250,91); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3250,52-3250,91); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.va_ensure_total (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 @x1)
@x19
(FStar.Pervasives.Native.Mktuple5__1 @lb23)
(FStar.Pervasives.Native.Mktuple5__2 @lb23))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3251,4-3251,19); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(BoxBool_proj_0 (Vale.X64.State.__proj__Mkvale_state__item__vs_ok (FStar.Pervasives.Native.Mktuple5__1 @lb23)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3251,24-3251,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.sse_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3251,39-3251,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.movbe_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3251,57-3252,38); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 6
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3252,42-3253,22); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3253,26-3254,8); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3254,12-3254,87); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul 96
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3255,4-3255,88); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 16777216)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3256,4-3257,49); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3256,4-3257,49); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 2))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
@x8
(BoxInt 1)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
Vale.Arch.HeapTypes_s.Public@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3257,53-3260,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3257,54-3257,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3258,4-3260,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3258,4-3260,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
@x6
(BoxInt (+ (_mul (- (BoxInt_proj_0 @x2)
1)
6)
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3260,72-3263,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3260,73-3261,5); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3261,10-3263,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3261,10-3263,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validSrcAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
@x7
(BoxInt (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3263,72-3266,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3263,73-3264,5); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3264,10-3266,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3264,10-3266,67); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validDstAddrsOffset128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
@x11
(BoxInt (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6)))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6)))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
Vale.Arch.HeapTypes_s.Secret@tok)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3267,4-3268,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3267,4-3268,54); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validDstAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 3))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 6))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
@x14
(BoxInt 9)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
Vale.Arch.HeapTypes_s.Secret@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3268,58-3270,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3268,58-3270,17); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.validSrcAddrs128 (Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 0))
(BoxInt (- (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
32))
@x5
(BoxInt 8)
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
Vale.Arch.HeapTypes_s.Secret@tok)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3270,21-3271,16); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(or 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,50-83,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x7)
(Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x11))
)


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,70-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Memory.fsti(83,70-83,86); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Memory.loc_disjoint (Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x11)
(Vale.X64.Memory.loc_buffer Vale.Arch.HeapTypes_s.TUInt128@tok
@x7))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3270,83-3271,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x7
@x11)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3271,20-3271,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x6
@x11)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3271,50-3272,71); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(>= (BoxInt_proj_0 (FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
@x7)))
6)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3272,75-3276,25); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3272,76-3273,7); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3273,12-3276,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3273,12-3276,24); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GCTR.partial_seq_agreement @x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
@x7)
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23)))))
(FStar.Seq.Base.length (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
@x7)))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3276,29-3277,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3276,30-3276,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3276,62-3277,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3277,56-3278,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3277,57-3277,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3278,4-3278,80); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3278,85-3280,12); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3278,86-3279,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3279,23-3280,11); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
(_mul 16
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))))
18446744073709551616)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3280,16-3281,44); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3280,16-3281,44); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.modifies_buffer_specific128 @x14
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 3))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 3))
(BoxInt 1)
(BoxInt 8))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3281,48-3283,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3281,48-3283,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.modifies_buffer_specific128 @x11
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
(BoxInt (_mul (BoxInt_proj_0 @x2)
6))
(BoxInt (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6))
5)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3283,81-3286,82); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3283,82-3284,14); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3284,19-3286,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3284,19-3284,48); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(>= (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0)))
6)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3284,52-3286,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3284,52-3286,81); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.buffer_modifies_specific128 @x11
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 6))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
(BoxInt (_mul (BoxInt_proj_0 @x2)
6))
(BoxInt (- (+ (_mul (BoxInt_proj_0 @x2)
6)
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
1)))
)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3287,4-3288,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3287,4-3288,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.modifies_buffer_specific128 @x8
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x0))
(BoxInt 2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 2))
(BoxInt 0)
(BoxInt 0))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3288,40-3289,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3288,40-3289,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.X64.AESopt.aes_reqs_offset @x1
@x9
@x13
@x10
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 0))
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_layout (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3290,7-3290,77); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(FStar.Seq.Base.index (Vale.Def.Types_s.quad32 Dummy_value)
@x13
(BoxInt 0)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3290,81-3290,98); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(BoxBool_proj_0 (Vale.X64.CPU_Features_s.pclmulqdq_enabled Dummy_value))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3291,7-3292,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= @x4
(Vale.AES.AES_s.aes_encrypt_LE @x1
@x9
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3292,40-3293,98); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3292,40-3293,98); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GHash.hkeys_reqs_priv (Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 0))
@x5)
(Vale.Def.Types_s.reverse_bytes_quad32 @x4))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3294,7-3294,34); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(>= (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23)))
2)
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3294,38-3296,47); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3294,39-3294,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3294,71-3296,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3294,71-3296,46); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.X64.AESopt.scratch_reqs @x14
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23)))
2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 3))
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
@x6)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3296,51-3299,34); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3296,52-3296,80); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3296,85-3299,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3296,85-3299,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.X64.AESopt.scratch_reqs @x14
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23)))
2))
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 3))
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
@x6)
(Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x14
(BoxInt 2)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 3))))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3299,38-3301,91); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (FStar.Pervasives.Native.Mktuple5__5 @lb23)
(Vale.AES.GHash.ghash_incremental0 @x4
@x15
(FStar.Seq.Base.slice (Vale.Def.Types_s.quad32 Dummy_value)
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
@x6)
(BoxInt 0)
(BoxInt (_mul (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23)))
2)
6)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3302,4-3306,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3302,5-3302,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3302,37-3306,36); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (FStar.Pervasives.Native.Mktuple5__5 @lb23)
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.Math.Poly2.Bits_s.to_quad32 (Vale.Math.Poly2_s.add (Vale.Math.Poly2_s.add (Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
(Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))))
(Vale.Math.Poly2.Bits_s.of_quad32 (Vale.X64.Memory.buffer_read Vale.Arch.HeapTypes_s.TUInt128@tok
@x14
(BoxInt 1)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 3))))))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3306,41-3307,48); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3306,42-3306,70); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3306,75-3307,47); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Types_s.reverse_bytes_quad32 (FStar.Pervasives.Native.Mktuple5__5 @lb23)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3307,52-3307,68); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(<= 2
(BoxInt_proj_0 @x2))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3307,72-3308,23); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (_mod (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
6)
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3308,27-3308,60); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3308,65-3308,94); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(<= 6
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3309,4-3309,72); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x0))))
6)
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3309,77-3310,56); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (+ (_mul (BoxInt_proj_0 @x2)
6)
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6))
6)
4294967296)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3310,60-3311,33); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3310,61-3310,88); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3311,4-3311,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(>= (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
6)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3311,37-3312,53); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (FStar.Pervasives.Native.Mktuple5__3 @lb23)
(Vale.AES.GCTR.inc32lite @x3
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
6)))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3312,57-3313,66); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Words_s.Mkfour Vale.Def.Words_s.nat32
(BoxInt 0)
(BoxInt 0)
(BoxInt 0)
(BoxInt 16777216)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3313,70-3314,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite (FStar.Pervasives.Native.Mktuple5__3 @lb23)
(BoxInt 0))))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3314,77-3315,76); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt (_mod (BoxInt_proj_0 (Vale.Def.Words_s.__proj__Mkfour__item__lo0 Vale.Def.Words_s.nat32
(FStar.Pervasives.Native.Mktuple5__3 @lb23)))
256)))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3315,80-3317,98); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3315,81-3316,13); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3316,18-3317,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Types_s.quad32_xor (Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite (FStar.Pervasives.Native.Mktuple5__3 @lb23)
(BoxInt 0)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3318,7-3319,78); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3318,7-3319,78); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3318,8-3318,35); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3318,41-3318,74); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3318,79-3319,76); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite (FStar.Pervasives.Native.Mktuple5__3 @lb23)
(BoxInt 1))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3319,82-3321,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3319,82-3321,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3319,83-3320,18); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3320,24-3320,57); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3320,62-3321,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite (FStar.Pervasives.Native.Mktuple5__3 @lb23)
(BoxInt 2))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3321,79-3323,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3321,79-3323,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3321,80-3322,13); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3322,19-3322,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3322,57-3323,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite (FStar.Pervasives.Native.Mktuple5__3 @lb23)
(BoxInt 3))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3323,79-3325,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3323,79-3325,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3323,80-3324,13); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3324,19-3324,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3324,57-3325,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite (FStar.Pervasives.Native.Mktuple5__3 @lb23)
(BoxInt 4))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3325,79-3327,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3325,79-3327,75); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3325,80-3326,13); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3326,19-3326,52); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(< (+ (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
6)
256)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3326,57-3327,73); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.Def.Types_s.reverse_bytes_quad32 (Vale.AES.GCTR.inc32lite (FStar.Pervasives.Native.Mktuple5__3 @lb23)
(BoxInt 5))))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3327,79-3330,85); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3327,80-3328,14); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3328,19-3330,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3328,19-3330,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GCTR.gctr_registers (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
@x12
@x1
@x9
@x3
(BoxInt (- (+ (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23)))
1)))
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3331,4-3333,51); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3331,5-3331,32); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(> (BoxInt_proj_0 (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23))))
0)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3331,37-3333,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3331,37-3333,50); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GCTR.gctr_partial @x1
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23)))))
@x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
@x11)
@x9
@x3)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3333,55-3336,38); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(implies 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3333,56-3333,84); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(= (Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 0))


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3334,4-3336,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3334,4-3336,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.AES.GCTR.gctr_partial @x1
(BoxInt (+ (_mul 6
(BoxInt_proj_0 @x2))
(_mul 6
(- (BoxInt_proj_0 (FStar.Pervasives.Native.Mktuple5__4 @lb23))
1))))
@x12
(Vale.X64.Memory.buffer_as_seq Vale.Arch.HeapTypes_s.TUInt128@tok
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
@x11)
@x9
@x3)
)
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3336,42-3337,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3336,42-3337,15); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.QuickCodes.precedes_wrap Vale.Def.Words_s.nat64
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x19)))
)


;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3337,19-3346,39); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3337,19-3346,39); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,41-3773,67)
(Vale.X64.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple5__1 @lb23)
(Vale.X64.Decls.va_upd_xmm (BoxInt 9)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 6))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 0))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_ok (Vale.X64.State.__proj__Mkvale_state__item__vs_ok (FStar.Pervasives.Native.Mktuple5__1 @lb23))
(Vale.X64.Decls.va_upd_mem (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 6))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 3))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap (FStar.Pervasives.Native.Mktuple5__1 @lb23)))
(BoxInt 2))
(Vale.X64.Decls.va_upd_flags (Vale.X64.State.__proj__Mkvale_state__item__vs_flags (FStar.Pervasives.Native.Mktuple5__1 @lb23))
@x19)))))))))))))))))))))))))))))))
)
)
)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,7-3776,65); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,7-3776,65)
(= (Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0 (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 @x1)
@x19
@x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17
@x18)
@x22)
)

;; def=prims.fst(392,99-392,120); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(forall ((@x23 Term))
 (! (implies (HasType @x23
Vale.X64.State.vale_state)

;; def=prims.fst(392,99-392,120); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(forall ((@x24 Term))
 (! (implies (HasType @x24
Vale.X64.Decls.va_fuel)

;; def=prims.fst(392,99-392,120); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(forall ((@x25 Term))
 (! (implies (HasType @x25
(Vale.Def.Types_s.quad32 Dummy_value))

;; def=prims.fst(392,99-392,120); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(forall ((@x26 Term))
 (! (implies (HasType @x26
Prims.nat)

;; def=prims.fst(392,99-392,120); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(forall ((@x27 Term))
 (! (implies (and (HasType @x27
(Vale.Def.Types_s.quad32 Dummy_value))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,7-3773,37); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3773,7-3773,37)
(= (Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0 (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 @x1)
@x19
@x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17
@x18)
(FStar.Pervasives.Native.Mktuple5 Vale.X64.State.vale_state
Vale.X64.Decls.va_fuel
(Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value)
@x23
@x24
@x25
@x26
@x27))
)

;; def=prims.fst(420,36-420,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(forall ((@x28 Term))
 (! (implies (and (HasType @x28
Prims.unit)

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(328,4-328,209); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(forall ((@x29 Term) (@x30 Term))
 (! (implies (and (HasType @x29
Vale.X64.State.vale_state)
(HasType @x30
(Vale.X64.Machine_s.operand64 Dummy_value))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(328,91-328,115); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(BoxBool_proj_0 (Vale.X64.Decls.va_is_dst_opr64 @x30
@x29))
)

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(328,120-328,208); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(= (Vale.X64.Decls.update_operand @x30
@x23
@x29)
(Vale.X64.Decls.va_upd_operand_dst_opr64 @x30
(Vale.X64.State.eval_operand @x30
@x23)
@x29))
)
 

:pattern ((Vale.X64.Decls.update_operand @x30
@x23
@x29))
:qid @query.10))


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(329,4-329,209); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(forall ((@x29 Term) (@x30 Term))
 (! (implies (and (HasType @x29
Vale.X64.State.vale_state)
(HasType @x30
(Vale.X64.Machine_s.operand64 Dummy_value))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(241,72-241,79); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(BoxBool_proj_0 (Vale.X64.Machine_s.uu___is_OReg Vale.Def.Words_s.nat64
Vale.X64.Machine_s.reg_64
@x30))

(not (BoxBool_proj_0 (Prims.op_Equality Vale.X64.Machine_s.reg_64
(BoxInt 7)
(Vale.X64.Machine_s.__proj__OReg__item__r Vale.Def.Words_s.nat64
Vale.X64.Machine_s.reg_64
@x30)))))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(329,120-329,208); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(= (Vale.X64.Decls.update_operand @x30
@x23
@x29)
(Vale.X64.Decls.va_upd_operand_reg_opr64 @x30
(Vale.X64.State.eval_operand @x30
@x23)
@x29))
)
 

:pattern ((Vale.X64.Decls.update_operand @x30
@x23
@x29))
:qid @query.11))


;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(330,4-330,160); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(forall ((@x29 Term) (@x30 Term))
 (! (implies (and (HasType @x29
Vale.X64.State.vale_state)
(HasType @x30
Vale.X64.Machine_s.reg_xmm))

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.Decls.fsti(330,83-330,159); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3777,2-3777,21)
(= (Vale.X64.State.update_reg_xmm @x30
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
@x30)
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
@x29)
(Vale.X64.Decls.va_upd_operand_xmm @x30
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
@x30)
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
@x29))
)
 

:pattern ((Vale.X64.State.update_reg_xmm @x30
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
@x30)
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
@x29))
:qid @query.12))
)

;; def=prims.fst(420,29-420,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,2-3778,8)
(and 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,9-3786,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,2-3778,8)
(or label_62

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,9-3786,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,2-3778,8)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,9-3786,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,2-3778,8)
(Vale.X64.Decls.va_state_eq @x23
(Vale.X64.Decls.va_upd_xmm (BoxInt 9)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 6))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 0))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_ok (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x23)
(Vale.X64.Decls.va_upd_mem (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 6))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 3))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 2))
(Vale.X64.Decls.va_upd_flags (Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x23)
@x19)))))))))))))))))))))))))))))))
)
)


;; def=prims.fst(420,36-420,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,2-3778,8)
(forall ((@x29 Term))
 (! (implies (and (HasType @x29
Prims.unit)

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,9-3786,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,2-3778,8)
(Valid 
;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,9-3786,69); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3778,2-3778,8)
(Vale.X64.Decls.va_state_eq @x23
(Vale.X64.Decls.va_upd_xmm (BoxInt 9)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 8)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 7)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 6)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 6))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 5)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 4)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 3)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 2)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 15)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 14)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 13)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 12)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 11)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 10)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 1)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_xmm (BoxInt 0)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 0))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 4)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 3)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 5)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 1)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 14)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 13)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 12)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_reg64 (BoxInt 11)
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_ok (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x23)
(Vale.X64.Decls.va_upd_mem (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 6))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 3))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 2))
(Vale.X64.Decls.va_upd_flags (Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x23)
@x19)))))))))))))))))))))))))))))))
)
)

;; def=prims.fst(420,36-420,97); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3787,2-3787,20)
(forall ((@x30 Term))
 (! (implies (and (HasType @x30
Prims.unit)

;; def=/home/guido/r/everest/hacl-star/vale/code/arch/x64/Vale.X64.QuickCode.fst(72,11-72,76); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3787,2-3787,20)
(= (Vale.X64.QuickCode.update_state_mods (Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 6)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 5)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 3)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 0)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 13)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 12)))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_reg (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 11)))
(Prims.Cons Vale.X64.QuickCode.mod_t
Vale.X64.QuickCode.Mod_ok@tok
(Prims.Cons Vale.X64.QuickCode.mod_t
Vale.X64.QuickCode.Mod_mem@tok
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_mem_heaplet (BoxInt 6))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_mem_heaplet (BoxInt 3))
(Prims.Cons Vale.X64.QuickCode.mod_t
(Vale.X64.QuickCode.Mod_mem_heaplet (BoxInt 2))
(Prims.Cons Vale.X64.QuickCode.mod_t
Vale.X64.QuickCode.Mod_flags@tok
(Prims.Nil Vale.X64.QuickCode.mod_t)))))))))))))))))))))))))))))))
@x23
@x19)
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 9))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 8))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 7))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 6))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 6))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 5))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 3))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 2))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 15))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 10))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 0))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 1)
(BoxInt 0))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 4))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 3))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 5))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 1))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 14))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 13))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 13))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 12))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 12))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.upd_register (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 11))
(Vale.X64.Regs.sel (Vale.X64.Machine_s.Reg (BoxInt 0)
(BoxInt 11))
(Vale.X64.State.__proj__Mkvale_state__item__vs_regs @x23))
(Vale.X64.Decls.va_upd_ok (Vale.X64.State.__proj__Mkvale_state__item__vs_ok @x23)
(Vale.X64.Decls.va_upd_mem (Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heap (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 6)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 6))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 3)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 3))
(Vale.X64.Decls.va_upd_mem_heaplet (BoxInt 2)
(Vale.Lib.Map16.sel Vale.Arch.HeapImpl.vale_heap
(Vale.Arch.HeapImpl.__proj__Mkvale_full_heap__item__vf_heaplets (Vale.X64.State.__proj__Mkvale_state__item__vs_heap @x23))
(BoxInt 2))
(Vale.X64.Decls.va_upd_flags (Vale.X64.State.__proj__Mkvale_state__item__vs_flags @x23)
@x19)))))))))))))))))))))))))))))))
)

;; def=prims.fst(430,66-430,102); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(forall ((@x31 Term))
 (! (implies (and (HasType @x31
(FStar.Pervasives.Native.tuple3 Vale.X64.State.vale_state
Vale.X64.Decls.va_fuel
(FStar.Pervasives.Native.tuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value))))

;; def=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3757,11-3794,22); use=/home/guido/r/everest/hacl-star/obj/Vale.AES.X64.AESGCM.fst(3772,93-3794,22)
(= @x31
(let ((@lb32 (Vale.AES.X64.AESGCM.va_lemma_Loop6x_loop_body0 (Vale.AES.X64.AESGCM.va_code_Loop6x_loop_body0 @x1)
@x19
@x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13
@x14
@x15
@x16
@x17
@x18)))
(FStar.Pervasives.Native.Mktuple3 Vale.X64.State.vale_state
Vale.X64.Decls.va_fuel
(FStar.Pervasives.Native.tuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value))
(FStar.Pervasives.Native.Mktuple5__1 @lb32)
(FStar.Pervasives.Native.Mktuple5__2 @lb32)
(FStar.Pervasives.Native.Mktuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value)
(FStar.Pervasives.Native.Mktuple5__3 @lb32)
(FStar.Pervasives.Native.Mktuple5__4 @lb32)
(FStar.Pervasives.Native.Mktuple5__5 @lb32)))))
)

;; def=prims.fst(335,2-335,58); use=prims.fst(405,19-405,31)
(forall ((@x32 Term))
 (! (implies (and (HasType @x32
(FStar.Pervasives.Native.tuple3 Vale.X64.State.vale_state
Vale.X64.Decls.va_fuel
(FStar.Pervasives.Native.tuple3 (Vale.Def.Types_s.quad32 Dummy_value)
Prims.nat
(Vale.Def.Types_s.quad32 Dummy_value))))

;; def=prims.fst(335,26-335,41); use=prims.fst(405,19-405,31)
(= @x32
@x31)
)

;; def=prims.fst(335,46-335,58); use=prims.fst(405,19-405,31)
(Valid 
;; def=prims.fst(335,46-335,58); use=prims.fst(405,19-405,31)
(ApplyTT @x21
@x32)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))
)
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))

(set-option :rlimit 408492000)
(check-sat)
